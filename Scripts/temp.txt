ExpensiveAwaits D:\CodeCorpus\WPApps\32feet\InTheHand.Phone.Bluetooth\InTheHand.Phone.Bluetooth\BluetoothDevicePicker.cs
public async Task<PeerInformation> PickDeviceAsync()
        {
            SelectedItem = null;

            PeerFinder.AlternateIdentities["Bluetooth:Paired"] = string.Empty;

            // get all service types
            if (this.serviceFilter == Guid.Empty)
            {
                PeerFinder.AlternateIdentities["Bluetooth:SDP"] = string.Empty;
            }
            else
            {
                PeerFinder.AlternateIdentities["Bluetooth:SDP"] = this.serviceFilter.ToString("D");
                PeerFinder.AlternateIdentities.Remove("Bluetooth:Paired");
            }

            IReadOnlyCollection<PeerInformation> devices = null;

            while (devices == null)
            {
                try
                {
                    devices = await PeerFinder.FindAllPeersAsync();
                }
                catch (Exception ex)
                {
                    if ((uint)ex.HResult == 0x8007048F)
                    {
                        if (MessageBox.Show(Resources.Strings.OpenSettings, Resources.Strings.Bluetooth, MessageBoxButton.OKCancel) == MessageBoxResult.OK)
                        {
                            Microsoft.Phone.Tasks.ConnectionSettingsTask cst = new Microsoft.Phone.Tasks.ConnectionSettingsTask();
                            cst.ConnectionSettingsType = Microsoft.Phone.Tasks.ConnectionSettingsType.Bluetooth;
                            cst.Show();
                        }
                    }
                }

            }

            Items = devices;

            Frame f = (Frame)Application.Current.RootVisual;
            f.Navigate(new Uri("/InTheHand.Phone.Bluetooth;component/BluetoothPickerPage.xaml", UriKind.Relative));

            var tcs = new TaskCompletionSource<bool>();
            var rwh = System.Threading.ThreadPool.RegisterWaitForSingleObject(WaitHandle, delegate { tcs.TrySetResult(true); }, null, -1, true);
            var t = tcs.Task;
            await t.ContinueWith(_ => rwh.Unregister(WaitHandle));

            return SelectedItem;
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\32feet\InTheHand.Phone.Bluetooth\BluetoothSerialSample\MainPage.xaml.cs
private async void ReadThread(object host)
        {
            reading = true;
            Windows.Networking.Sockets.StreamSocket socket = new Windows.Networking.Sockets.StreamSocket();
            
            await socket.ConnectAsync((Windows.Networking.HostName)host, InTheHand.Devices.Bluetooth.Rfcomm.RfcommServiceId.SerialPort.AsString());

            byte[] buffer = new byte[32];
            System.Text.StringBuilder sb = new StringBuilder();
            
            while (reading)
            {
                IBuffer returnedBuffer = await socket.InputStream.ReadAsync(buffer.AsBuffer(), (uint)buffer.Length, Windows.Storage.Streams.InputStreamOptions.Partial);
                
                string s = System.Text.Encoding.UTF8.GetString(buffer, 0, (int)returnedBuffer.Length);

                if (!string.IsNullOrEmpty(s))
                {
                    if (s.IndexOf('\0') > -1)
                    {
                        s = s.Substring(0, s.IndexOf('\0'));
                    }

                    sb.Append(s);

                    // Only process when we have a complete line
                    if (sb.ToString().EndsWith("\r"))
                    {
                        Dispatcher.BeginInvoke(new Action<string>(this.InsertMessage), sb.ToString());
                        sb.Clear();
                    }
                }
            }

            socket.Dispose();
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task DeleteActiveNotificationsAsync()
        {

            while (ams.NotificationRequests.Count > 0)
            {
                await DeleteNotificationAsync(ams.NotificationRequests[0].NotificationHandle);
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task ReleaseActiveSymhandlesAsync()
        {
            while (activeSymhandles.Count > 0)
            {
                await ReleaseSymhandleAsync(activeSymhandles[0]);
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\AlbertoMonteiro+QCon12WindowsPhone\AlbertoMonteiro-QCon12WindowsPhone-f67aa2a\QCon12.Mobile\Requests\ServiceRequest.cs
protected async Task<TR> DownloadAndDeserialize<TR>()
        {
            var instance = default(TR);
            GlobalLoading.Instance.PushLoading();
            var keepTrying = true;
            while (keepTrying)
            {
                var request = new WebClient();
                var uri = new Uri(URL + controller + additional);
                try
                {
                    var str = await request.DownloadStringTaskAsync(uri);
                    var serializer = JsonSerializer.Create(settings);
                    using (var stringReader = new StringReader(str))
                    {
                        instance = serializer.Deserialize<TR>(new JsonTextReader(stringReader));
                        stringReader.Close();
                        keepTrying = false;
                    }
                }
                catch (Exception e)
                {
                    if (count++ < 3)
                        keepTrying = false;
                }
            }
            GlobalLoading.Instance.PopLoading();
            return instance;
        }
-----------------------
BLOCKING True 0 a.Result
D:\CodeCorpus\WPApps\Anthuan+TheOldReaderWP\Anthuan-TheOldReaderWP-d63a295\PhoneApp1\MainPage.xaml.cs 
PrepareMasterObject()
public async void PrepareMasterObject()
        {
            bool bTimedOut = false;
            Task<bool> a = AnthuanUtils.FileExists("token");
            await a;
            if (!bTimedOut && a.Result)
            {
                m_TheOldReaderManager = new TheOldReader(m_TheOldReaderManager_AuthenticationCompleted);
                m_TheOldReaderManager.DownloadToReadCompleted += TheOldReaderManager_DownloadToReadCompleted;
                m_TheOldReaderManager.DownloadStarted += m_TheOldReaderManager_DownloadStarted;
                m_TheOldReaderManager.ArticleDownloadCompleted += m_TheOldReaderManager_ArticleDownloadCompleted;
                App.Current.TheOldReaderManager = m_TheOldReaderManager;
                StartBar();
            }
            else
            {
                DoNothing();
            }
        }
--------------------------
BLOCKING True 0 System.Threading.Thread.Sleep
D:\CodeCorpus\WPApps\Anthuan+TheOldReaderWP\Anthuan-TheOldReaderWP-d63a295\PhoneApp1\Settings.xaml.cs 
ButtonCheckCredentials_Click(object sender, RoutedEventArgs e)
private async void ButtonCheckCredentials_Click(object sender, RoutedEventArgs e)
        {
            StartBar();
            Dispatcher.BeginInvoke(new AuthenticateHandler(TheOldReader.StaticAuthenticate), Username.Text, Password.Password);
            while (!await AnthuanUtils.FileExists("token"))
            {
                System.Threading.Thread.Sleep(1000);
            }
            NavigationService.GoBack();
        }
--------------------------
LONGRUNNING True 1 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\ApexHAB+apex-lumia\ApexHAB-apex-lumia-47fb019\ApexLumia\Twitter.cs
APMTAPReplacable newStatusAsync(string tweet, string latitude = "", string longitude = "")
public static async Task<String> postRequestAsync(string url, string postData, string authorization = "", bool Expect100Continue = true)
        {
            string result;
            try
            {
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                request.Method = "POST";
               
                byte[] postbytes = System.Text.Encoding.UTF8.GetBytes(postData);
                request.Headers[HttpRequestHeader.ContentLength] = postbytes.Length.ToString();
                request.Headers[HttpRequestHeader.Authorization] = authorization;

                Stream postStream = await request.GetRequestStreamAsync();
                postStream.Write(postbytes, 0, postbytes.Length);
                postStream.Close();

                WebResponse response = await request.GetResponseAsync();
                result = new StreamReader(response.GetResponseStream()).ReadToEnd();

            }
            catch { return ""; }


            return result;
        }
--------------------------
LONGRUNNING True 1 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\ApexHAB+apex-lumia\ApexHAB-apex-lumia-47fb019\ApexLumia\Twitter.cs
TAPReplacable newStatusAsync(string tweet, string latitude = "", string longitude = "")
public static async Task<String> postRequestAsync(string url, string postData, string authorization = "", bool Expect100Continue = true)
        {
            string result;
            try
            {
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                request.Method = "POST";
               
                byte[] postbytes = System.Text.Encoding.UTF8.GetBytes(postData);
                request.Headers[HttpRequestHeader.ContentLength] = postbytes.Length.ToString();
                request.Headers[HttpRequestHeader.Authorization] = authorization;

                Stream postStream = await request.GetRequestStreamAsync();
                postStream.Write(postbytes, 0, postbytes.Length);
                postStream.Close();

                WebResponse response = await request.GetResponseAsync();
                result = new StreamReader(response.GetResponseStream()).ReadToEnd();

            }
            catch { return ""; }


            return result;
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\ApexHAB+apex-lumia\ApexHAB-apex-lumia-47fb019\ApexLumia\HTTPRequests.cs
TAPReplacable getRequestAsync(string url)
public static async Task<String> getRequestAsync(string url)
        {
            string result = "";

            try
            {
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                WebResponse response = await request.GetResponseAsync();
                result = new StreamReader(response.GetResponseStream()).ReadToEnd();
            }
            catch { return ""; }

            return result;
        }
--------------------------
LONGRUNNING True 0 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\ApexHAB+apex-lumia\ApexHAB-apex-lumia-47fb019\ApexLumia\HTTPRequests.cs
APMTAPReplacable putRequestAsync(string url, string putData)
public static async Task<String> putRequestAsync(string url, string putData)
        {
            string result;
            try
            {
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                request.Method = "PUT";
                byte[] putbytes = System.Text.Encoding.UTF8.GetBytes(putData);
                request.Headers[HttpRequestHeader.ContentLength] = putbytes.Length.ToString();

                Stream putStream = await request.GetRequestStreamAsync();
                putStream.Write(putbytes, 0, putbytes.Length);
                putStream.Close();

                WebResponse response = await request.GetResponseAsync();
                result = new StreamReader(response.GetResponseStream()).ReadToEnd();


            }
            catch { return ""; }


            return result;

        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\ApexHAB+apex-lumia\ApexHAB-apex-lumia-47fb019\ApexLumia\HTTPRequests.cs
TAPReplacable putRequestAsync(string url, string putData)
public static async Task<String> putRequestAsync(string url, string putData)
        {
            string result;
            try
            {
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                request.Method = "PUT";
                byte[] putbytes = System.Text.Encoding.UTF8.GetBytes(putData);
                request.Headers[HttpRequestHeader.ContentLength] = putbytes.Length.ToString();

                Stream putStream = await request.GetRequestStreamAsync();
                putStream.Write(putbytes, 0, putbytes.Length);
                putStream.Close();

                WebResponse response = await request.GetResponseAsync();
                result = new StreamReader(response.GetResponseStream()).ReadToEnd();


            }
            catch { return ""; }


            return result;

        }
--------------------------
BLOCKING True 2 task.Result
D:\CodeCorpus\WPApps\artem-zinnatullin+jet-image-loader\artem-zinnatullin-jet-image-loader-e7b87eb\JetImageLoader\JetImageLoader.cs 
LoadImage(string imageUrl)
public async Task<Stream> LoadImageStream(Uri imageUri)
        {
            CheckConfig();

            var imageUrl = imageUri.ToString();

            if (Config.CacheMode != CacheMode.NoCache)
            {
                var resultFromCache = await LoadImageStreamFromCache(imageUrl);
                if (resultFromCache != null) return resultFromCache;
            }

            try
            {
                Log("[network] loading " + imageUrl);
                var downloadResult = await Config.DownloaderImpl.DownloadAsync(imageUri);

                if (downloadResult.Exception != null || downloadResult.ResultStream == null)
                {
                    Log("[error] failed to download: " + imageUrl);
                    return null;
                }

                Log("[network] loaded " + imageUrl);

                if (Config.CacheMode != CacheMode.NoCache)
                {
                    if (Config.CacheMode == CacheMode.MemoryAndStorageCache || Config.CacheMode == CacheMode.OnlyMemoryCache) Config.MemoryCacheImpl.Put(imageUrl, downloadResult.ResultStream);

                    if (Config.CacheMode == CacheMode.MemoryAndStorageCache || Config.CacheMode == CacheMode.OnlyStorageCache)
                    {
                        // Async saving to the storage cache without await
                        var saveAsync = Config.StorageCacheImpl.SaveAsync(imageUrl, downloadResult.ResultStream)
                            .ContinueWith(
                            task => 
                                {
                                    if (task.IsFaulted || !task.Result)
                                    {
                                        Log("[error] failed to save in storage: " + imageUri);
                                    }
                                }
                        );
                    }
                }

                return downloadResult.ResultStream;
            }
            catch
            {
                Log("[error] failed to save loaded image: " + imageUrl);
            }

            // May be another thread has saved image to the cache
            // It is real working case
            if (Config.CacheMode != CacheMode.NoCache)
            {
                var resultFromCache = await LoadImageStreamFromCache(imageUrl);
                if (resultFromCache != null) return resultFromCache;
            }

            Log("[error] failed to load image stream from cache and network: " + imageUrl);

            return null;
        }
--------------------------
BLOCKING True 2 newsTask.Result
D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaClient\MainPage.xaml.cs 
ReloadDataAsync()
private async void UpdateMyCoursesAsync(PinnedCourses pinnedCourses)
        {
            _isMyCoursesLoading = true;

            try
            {
                News = new NewsGroupCollection(DateTime.Today.AddMonths(-3));
                var courses = await pinnedCourses.GetCodesAsync();
                await MyCourses.LoadMyCoursesAsync(pinnedCourses);

                List<CourseEvent> events = new List<CourseEvent>();

                /* For each course task to get list of news/events */
                var newsTasks = new List<Task<List<CourseNewsViewModel>>>();
                var eventTasks = new List<Task<List<CourseEvent>>>();

                foreach (var courseId in courses)
                {
                    newsTasks.Add(Task.Run(async () =>
                        {
                            var courseTask = NoppaAPI.GetCourse(courseId);
                            var newsTask = NoppaAPI.GetCourseNews(courseId);
                            await Task.WhenAll(newsTask, courseTask);

                            var newsList = new List<CourseNewsViewModel>();
                            var result = newsTask.Result;
                            var course = courseTask.Result;
                            for (int i = 0; i < result.Count; i++)
                            {
                                newsList.Add(new CourseNewsViewModel { News = result[i], Course = course, Index = i });
                            }
                            return newsList;
                        }));

                    eventTasks.Add(NoppaAPI.GetCourseEvents(courseId));
                }

                while (newsTasks.Count > 0 || eventTasks.Count > 0)
                {
                    if (newsTasks.Count > 0)
                    {
                        var newsTask = await Task.WhenAny(newsTasks);
                        newsTasks.Remove(newsTask);
                        var newsItems = newsTask.Result;

                        if (newsItems != null)
                            /* Each add now also sorts the list and updates UI. If there are LOTS of
                             * news, this will hurt performance. However, at this point I favor immediate
                             * response so well see how this goes. */
                            News.AddNewItems(newsItems);
                    }

                    if (eventTasks.Count > 0)
                    {
                        var eventTask = await Task.WhenAny(eventTasks);
                        eventTasks.Remove(eventTask);
                        var eventItems = await eventTask;

                        if (eventItems != null)
                            events.AddRange(eventItems);
                    }
                }

                Events = EventGroup.CreateEventGroups(events);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine("LoadNewsAndEventsAsync: Caught exception: {0}", ex.Message);
            }

            _isMyCoursesLoading = false;
            if (!_isDepartmanentsLoading)
                IsLoading = false;
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaClient\ViewModels\CourseListViewModel.cs
public async Task LoadMyCoursesAsync(PinnedCourses pinnedCourses)
        {
            IsLoading = true;

            Courses.Clear();
            var courses = await pinnedCourses.GetCodesAsync();

            var tasks = new List<Task<Course>>();

            foreach (string c in courses) {
                tasks.Add(Task.Run(async () => await NoppaAPI.GetCourse(c) ));
            }

            while (tasks.Count > 0)
            {
                var course = await Task.WhenAny(tasks);
                tasks.Remove(course);

                Courses.Add(await course);
            }
            IsLoading = false;
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaClient\ViewModels\CourseViewModel.cs
public async Task LoadContentAsync(INavigationController navigationController)
        {
            if (IsLoading)
            {
                return;
            }

            IsLoading = true;
            _course = await NoppaAPI.GetCourse(Code);
            _toggleSecondaryTileCommand.NotifyCanExecuteChanged();
            UpdateToggleCommandText();

            List<CourseContentViewModel> viewmodels = new List<CourseContentViewModel>()
            {
                new LecturesViewModel(),
                new ExercisesViewModel(),
                new ResultsViewModel(),
                new AssignmentsViewModel(),
                new EventsViewModel(navigationController)
            };

            List<Task<CourseContentViewModel>> tasks = new List<Task<CourseContentViewModel>>();


            await Task.WhenAll(
                /* Load Overview (already in the contents) */
                OverviewModel.LoadDataAsync(Code),
                /* Load News (already in the contents) */
                NewsModel.LoadDataAsync(Code)
            );


            foreach (var vm in viewmodels)
                tasks.Add(vm.LoadDataAsync(Code));

            /* Add items in the order they are finished. */
            while (tasks.Count > 0)
            {
                var task = await Task.WhenAny(tasks);
                tasks.Remove(task);
                var content = await task;

                if (!content.IsEmpty)
                {
                    int index = _contents.Count;

                    // Find the correct position
                    for (int i = 0; i < _contents.Count; i++)
                    {
                        if (_contents[i].Index > content.Index)
                        {
                            index = i;
                            break;
                        }
                    }
                    _contents.Insert(index, content);
                    NotifyPropertyChanged("Contents");
                }
            }

            if (OverviewModel.OodiUrl != null)
            {
                OodiPageUri = new Uri(OverviewModel.OodiUrl);
            }

            IsLoading = false;
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaClient\ViewModels\MainViewModel.cs
private async void UpdateMyCoursesAsync(PinnedCourses pinnedCourses)
        {
            _isMyCoursesLoading = true;

            try
            {
                News = new NewsGroupCollection(DateTime.Today.AddMonths(-3));
                var courses = await pinnedCourses.GetCodesAsync();
                await MyCourses.LoadMyCoursesAsync(pinnedCourses);

                List<CourseEvent> events = new List<CourseEvent>();

                /* For each course task to get list of news/events */
                var newsTasks = new List<Task<List<CourseNewsViewModel>>>();
                var eventTasks = new List<Task<List<CourseEvent>>>();

                foreach (var courseId in courses)
                {
                    newsTasks.Add(Task.Run(async () =>
                        {
                            var courseTask = NoppaAPI.GetCourse(courseId);
                            var newsTask = NoppaAPI.GetCourseNews(courseId);
                            await Task.WhenAll(newsTask, courseTask);

                            var newsList = new List<CourseNewsViewModel>();
                            var result = newsTask.Result;
                            var course = courseTask.Result;
                            for (int i = 0; i < result.Count; i++)
                            {
                                newsList.Add(new CourseNewsViewModel { News = result[i], Course = course, Index = i });
                            }
                            return newsList;
                        }));

                    eventTasks.Add(NoppaAPI.GetCourseEvents(courseId));
                }

                while (newsTasks.Count > 0 || eventTasks.Count > 0)
                {
                    if (newsTasks.Count > 0)
                    {
                        var newsTask = await Task.WhenAny(newsTasks);
                        newsTasks.Remove(newsTask);
                        var newsItems = newsTask.Result;

                        if (newsItems != null)
                            /* Each add now also sorts the list and updates UI. If there are LOTS of
                             * news, this will hurt performance. However, at this point I favor immediate
                             * response so well see how this goes. */
                            News.AddNewItems(newsItems);
                    }

                    if (eventTasks.Count > 0)
                    {
                        var eventTask = await Task.WhenAny(eventTasks);
                        eventTasks.Remove(eventTask);
                        var eventItems = await eventTask;

                        if (eventItems != null)
                            events.AddRange(eventItems);
                    }
                }

                Events = EventGroup.CreateEventGroups(events);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine("LoadNewsAndEventsAsync: Caught exception: {0}", ex.Message);
            }

            _isMyCoursesLoading = false;
            if (!_isDepartmanentsLoading)
                IsLoading = false;
        }
-----------------------
LONGRUNNING False 2 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaLib\PinnedCourses.cs
TAPReplacable AddAsync(string code)
public void Deserialize(Stream s)
        {
            try 
            {
                using (var reader = new StreamReader(s))
                {
                    string fileContent = reader.ReadToEnd();
                    if (fileContent != "")
                    {
                        string[] codes = fileContent.Split(';');
                        foreach (string c in codes)
                        {
                            _codes.Add(c);
                        }
                    }
                }
            }
            catch (Exception e) 
            {
                System.Diagnostics.Debug.WriteLine("PinnedCourse::ReadCodesFromFile::{0}",e);
            }
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\brentedwards+Charmed\brentedwards-Charmed-25291e6\Charmed.Sample.WP8\..\Charmed.Sample.Win8\Services\RssFeedService.cs
public async Task<List<FeedData>> GetFeedsAsync()
        {
            List<string> feeds = null;
            string[] feedData;
            if (settings.TryGetValue<string[]>(Constants.FeedsKey, out feedData))
            {
                feeds = new List<string>(feedData);
            }
            else
            {
                throw new ArgumentException("There are no feeds");
            }

            var feedsData = new List<FeedData>();

            foreach (var feed in feeds)
            {
                var data = await GetFeedAsync(feed);
                if (data != null)
                {
                    feedsData.Add(data);
                }
            }

            return feedsData;
        }
-----------------------
LONGRUNNING True 0 System.IO.StreamWriter.Write(string) D:\CodeCorpus\WPApps\bugsense+BugSense-WP8\bugsense-BugSense-WP8-beabf83\BugSense-WP8\..\Shared\Internal\Files.cs
TAPReplacable CreatWriteTo(string path, string fname, string str)
public async static Task<bool> CreatWriteTo(string path, string fname, string str)
        {
            var fpathname = Path.Combine(path, fname);

#if WINDOWS_PHONE
            return await Task.Run(() =>
                {
                    using (var storage = IsolatedStorageFile.GetUserStoreForApplication())
                    {
                        try
                        {
                            if (!storage.DirectoryExists(path))
                                storage.CreateDirectory(path);
                            if (storage.DirectoryExists(path))
                            {
                                using (var fileStream = storage.OpenFile(fpathname, FileMode.OpenOrCreate))
                                {
                                    using (StreamWriter sr = new StreamWriter(fileStream))
                                    {
                                        sr.Write(str);

                                        return true;
                                    }
                                }
                            }
                        }
                        catch (Exception)
                        {
                            return false;
                        }
                    }

                    return false;
                });
#elif NETFX_CORE
            bool result = false;
            StorageFile file = null;

            try
            {
                var folder = await ApplicationData.Current.LocalFolder.CreateFolderAsync(
                    path, CreationCollisionOption.OpenIfExists);
                file = await folder.CreateFileAsync(fname, CreationCollisionOption.ReplaceExisting);
            }
            catch (Exception)
            {
                return false;
            }

            using (var fs = await file.OpenAsync(FileAccessMode.ReadWrite))
            {
                using (var outStream = fs.GetOutputStreamAt(0))
                {
                    using (var writer = new DataWriter(outStream))
                    {
                        writer.WriteString(str);
                        await writer.StoreAsync();
                        writer.DetachStream();
                    }
                    result = await outStream.FlushAsync();
                }
            }

            return result;
#else
            return await Task.Run (() => {
                try
                {
                    if(!Directory.Exists(path))
                        Directory.CreateDirectory(path);
                    File.WriteAllText(fpathname, str);
                    return true;
                }
                catch (Exception)
                {
                    return false;
                }
            });
#endif
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\bugsense+BugSense-WP8\bugsense-BugSense-WP8-beabf83\BugSense-WP8\..\Shared\Internal\Files.cs
TAPReplacable ReadFrom(string fpathname)
public async static Task<Tuple<string, bool>> ReadFrom(string fpathname)
        {
#if WINDOWS_PHONE
            return await Task.Run(() =>
                {
                    using (var storage = IsolatedStorageFile.GetUserStoreForApplication())
                    {
                        if (!storage.FileExists(fpathname))
                            return new Tuple<string, bool>("", false);
                        using (var fileStream = storage.OpenFile(fpathname, FileMode.Open))
                        {
                            using (StreamReader sr = new StreamReader(fileStream))
                            {
                                string data = sr.ReadToEnd();

                                return new Tuple<string, bool>(data, true);
                            }
                        }
                    }
                });
#elif NETFX_CORE
            Tuple<string, bool> result = new Tuple<string, bool>("", false);
            StorageFile file = null;

            try
            {
                file = await ApplicationData.Current.LocalFolder.GetFileAsync(fpathname);
                if (file == null)
                    return result;
            }
            catch (Exception)
            {
                return result;
            }

            using (var fs = await file.OpenAsync(FileAccessMode.Read))
            {
                using (var inStream = fs.GetInputStreamAt(0))
                {
                    using (var reader = new DataReader(inStream))
                    {
                        await reader.LoadAsync((uint)fs.Size);
                        string data = reader.ReadString((uint)fs.Size);
                        reader.DetachStream();

                        result = new Tuple<string, bool>(data, true);
                    }
                }
            }

            return result;
#else
            return await Task.Run (() => {
                try
                {
                    string str = File.ReadAllText(fpathname);
                    return new Tuple<string, bool>(str, true);
                }
                catch (Exception)
                {
                    return new Tuple<string, bool>("", false);
                }
            });
#endif
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\bugsense+BugSense-WP8\bugsense-BugSense-WP8-beabf83\BugSense-WP8\..\Shared\Tasks\ProcessRequests.cs
public async Task<int> Execute()
        {
            int r = 0;

            try
            {
                var taskList = new List<SendRequest>();
                int counter = 0;

                List<string> list = await Files.GetDirFilenames(G.FolderName, G.CrashFileNamePrefix);
                List<string> list2 = await Files.GetDirFilenames(G.FolderName, G.LoggedExceptionFileNamePrefix);
                List<string> list3 = await Files.GetDirFilenames(G.FolderName, G.PingFileNamePrefix);
                List<string> list4 = await Files.GetDirFilenames(G.FolderName, G.EventFileNamePrefix);

                counter = await ProcessList(taskList, list, G.MaxCrashes, true, _uuid);
                Helpers.Log("ProcessRequests 1/5 :: gotExceptions: " + counter);
                counter = await ProcessList(taskList, list2, G.MaxLoggedExceptions, true, _uuid);
                Helpers.Log("ProcessRequests 2/5 :: gotLoggedExceptions: " + counter);
                counter = await ProcessList(taskList, list3, G.MaxPings, false, _uuid);
                Helpers.Log("ProcessRequests 3/5 :: gotPings: " + counter);
                counter = await ProcessList(taskList, list4, G.MaxEvents, false, _uuid);
                Helpers.Log("ProcessRequests 4/5 :: gotEvents: " + counter);

                Helpers.Log("ProcessRequests 5/5 :: sending: " + taskList.Count);
                if (taskList != null)
                {
                    foreach (SendRequest err in taskList)
                    {
                        //NOTE: r is equal to the _attempted_ executions
                        //  (we don't know if each web request was successful)
                        bool rr = await err.Execute();
                        if (rr)
                            r++;
                    }
                }
            }
            catch (Exception)
            { // Swallow like a fish - Not much that we can do here
            }

            return r;
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\bugsense+BugSense-WP8\bugsense-BugSense-WP8-beabf83\BugSense-WP8\..\Shared\Tasks\ProcessRequests.cs
private async static Task<int> ProcessList(List<SendRequest> taskList, List<string> list, int max,
            bool isException, string uuid)
        {
            int counter = 0;

            if (list != null)
            {
                foreach (var fileName in list)
                {
                    if (string.IsNullOrEmpty(fileName))
                        continue;
                    // If there are more messages in the pool we just delete them
                    if (counter < max)
                    {
                        if (isException)
                            taskList.Add(new SendRequest(fileName));
                        else
                            taskList.Add(new SendRequest(WebRequests.GetEventURL(uuid), fileName, false));
                    }
                    else
                        await Files.Delete(G.FolderName, fileName);
                    counter++;
                    //
                }
            }

            return counter;
        }
-----------------------
BLOCKING False 2 System.Threading.Thread.Sleep
D:\CodeCorpus\WPApps\bugsense+BugSense-WP8\bugsense-BugSense-WP8-beabf83\BugSense-WP8\..\Shared\Tasks\UUIDFactory.cs 
Get()
public static void SleepFor(int ms)
        {
#if WINDOWS_PHONE
            System.Threading.Thread.Sleep(ms);
#elif NETFX_CORE
            new System.Threading.ManualResetEvent(false).WaitOne(ms);
#else
            System.Threading.Thread.Sleep(ms);
#endif
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\cbauschk+TalkSee\cbauschk-TalkSee-1a6d5bc\TalkSee-DemoRelease\UI\STTPage.cs
private async void btnContinuousRecognition_Click(object sender, RoutedEventArgs e)
        {
            // Change the button text. 
            if (this.recoEnabled)
            {
                this.recoEnabled = false;
                this.btnContinuousRecognition.Content = "Start speech recognition";
                this.Dispatcher.BeginInvoke(delegate { status.Text = ""; });
                this.recoOperation.Cancel();
                return;
            }
            else
            {
                this.recoEnabled = true;
                this.btnContinuousRecognition.Content = "Cancel speech recognition";
            }

            while (this.recoEnabled)
            {
                recognizer.AudioCaptureStateChanged += recognizer_AudioCaptureStateChanged;

                try
                {
                    // Perform speech recognition.  
                    this.recoOperation = recognizer.RecognizeAsync();
                    var recoResult = await this.recoOperation;

                    //Check the confidence level of the speech recognition attempt.
                    if ((int)recoResult.TextConfidence < (int)SpeechRecognitionConfidence.Low)
                    {
                        // If the confidence level of the speech recognition attempt list low, 
                        // ask the user to try again.
                        this.RecognizedStringListBox.Items.Add("...?");
                        RecognizedStringListBox.SelectedIndex = RecognizedStringListBox.Items.Count - 1;
                        RecognizedStringListBox.SelectedIndex = -1;
                        //await synthesizer.SpeakTextAsync("Not sure what you said, please try again");
                    } 
                    else
                    {
                        this.RecognizedStringListBox.Items.Add(recoResult.Text);
                        RecognizedStringListBox.SelectedIndex = RecognizedStringListBox.Items.Count - 1;
                        RecognizedStringListBox.SelectedIndex = -1;
                       // await synthesizer.SpeakTextAsync(recoResult.Text);

                    }
                }
                catch (System.Threading.Tasks.TaskCanceledException)
                { 
                    // Ignore the cancellation exception of the recoOperation.
                }
                catch (Exception err)
                {
                    // Handle the speech privacy policy error.
                    const int privacyPolicyHResult = unchecked((int)0x80045509);

                    if (err.HResult == privacyPolicyHResult)
                    {
                        MessageBox.Show("You must accept the speech privacy policy to continue.");
                        this.recoEnabled = false;
                        this.btnContinuousRecognition.Content = "Start speech recognition";
                    }
                    else
                    {
                        //this.RecognizedStringListBox.Items.Add("");
                    }
                }
            }

        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\cbauschk+TalkSee\cbauschk-TalkSee-1a6d5bc\Windows Phone 8\C#,C++\UI\CallStatusPage.xaml.cs
private async void startSTT()
        {
            // Change the button text. 
            if (this.recoEnabled)
            {
                this.recoEnabled = false;
                //this.SetRecognizedTextListBox(String.Empty);
                this.recoOperation.Cancel();
                return;
            }
            else
            {
                this.recoEnabled = true;
            }

            while (this.recoEnabled)
            {
                Debug.WriteLine("here\n");
                try
                {
                    // Perform speech recognition.  
                    this.recoOperation = recognizer.RecognizeAsync();
                    var recoResult = await this.recoOperation;

                    // Check the confidence level of the speech recognition attempt.
                    if ((int)recoResult.TextConfidence < (int)SpeechRecognitionConfidence.Low)
                    {
                        // If the confidence level of the speech recognition attempt is low, 
                        // ask the user to try again.
                        this.SetRecognizedTextListBox("Not sure what you said, please try again.");
                        Debug.WriteLine("Not sure what you said");
                        //txtResult.Text = "Not sure what you said, please try again.";
                        await synthesizer.SpeakTextAsync("Not sure what you said, please try again");
                    }
                    else
                    {
                        // Output that the color of the rectangle is changing by updating
                        // the TextBox control and by using text-to-speech (TTS). 
                        Debug.WriteLine(recoResult.Text);
                        //this.SetRecognizedTextListBox(recoResult.Text);
                        //txtResult.Text = "Changing color to: " + recoResult.Text;
                        await synthesizer.SpeakTextAsync("Changing color to " + recoResult.Text);

                        
                    }
                }
                catch (System.Threading.Tasks.TaskCanceledException)
                {
                    // Ignore the cancellation exception of the recoOperation.
                }
                catch (Exception err)
                {
                    // Handle the speech privacy policy error.
                    const int privacyPolicyHResult = unchecked((int)0x80045509);

                    if (err.HResult == privacyPolicyHResult)
                    {
                        MessageBox.Show("You must accept the speech privacy policy to continue.");
                        this.recoEnabled = false;
                    }
                    else
                    {
                        //this.SetRecognizedTextListBox("Error: " + err.Message);
                        Debug.WriteLine("Error: " + err.Message);
                        //txtResult.Text = "Error: " + err.Message;
                    }
                }
            }

        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\cbauschk+TalkSee\cbauschk-TalkSee-1a6d5bc\Windows Phone 8\C#,C++\UI\STTPage.xaml.cs
private async void btnContinuousRecognition_Click(object sender, RoutedEventArgs e)
        {
            // Change the button text. 
            if (this.recoEnabled)
            {
                this.recoEnabled = false;
                this.btnContinuousRecognition.Content = "Start speech recognition";
                txtResult.Text = String.Empty;
                this.recoOperation.Cancel();
                return;
            }
            else
            {
                this.recoEnabled = true;
                this.btnContinuousRecognition.Content = "Cancel speech recognition";
            }

            while (this.recoEnabled)
            {
                try
                {
                    // Perform speech recognition.  
                    this.recoOperation = recognizer.RecognizeAsync();
                    var recoResult = await this.recoOperation;

                    // Check the confidence level of the speech recognition attempt.
                    if ((int)recoResult.TextConfidence < (int)SpeechRecognitionConfidence.Medium)
                    {
                        // If the confidence level of the speech recognition attempt is low, 
                        // ask the user to try again.
                        txtResult.Text = "Not sure what you said, please try again.";
                        await synthesizer.SpeakTextAsync("Not sure what you said, please try again");
                    }
                    else
                    {
                        // Output that the color of the rectangle is changing by updating
                        // the TextBox control and by using text-to-speech (TTS). 
                        txtResult.Text = "Changing color to: " + recoResult.Text;
                        await synthesizer.SpeakTextAsync("Changing color to " + recoResult.Text);

                        // Set the fill color of the rectangle to the recognized color. 
                        rectangleResult.Fill = getBrush(recoResult.Text.ToLower());
                    }
                }
                catch (System.Threading.Tasks.TaskCanceledException)
                { 
                    // Ignore the cancellation exception of the recoOperation.
                }
                catch (Exception err)
                {
                    // Handle the speech privacy policy error.
                    const int privacyPolicyHResult = unchecked((int)0x80045509);

                    if (err.HResult == privacyPolicyHResult)
                    {
                        MessageBox.Show("You must accept the speech privacy policy to continue.");
                        this.recoEnabled = false;
                        this.btnContinuousRecognition.Content = "Start speech recognition";
                    }
                    else
                    {
                        txtResult.Text = "Error: " + err.Message;
                    }
                }
            }

        }
-----------------------
LONGRUNNING True 0 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8\Common\WP8WebRequestProcessor.cs
APMTAPReplacable PostXml(string url, string postdata)
public async Task<string> PostXml(string url, string postdata)
        {
            try
            {
                var request = (HttpWebRequest)WebRequest.Create(url);

                request.Method = HttpMethod.Post;
                byte[] byteArray = Encoding.UTF8.GetBytes(postdata);
                request.ContentType = "text/xml";
                request.ContentLength = byteArray.Length;

                using (Stream dataStream = await request.GetRequestStreamAsync())
                {
                    dataStream.Write(byteArray, 0, byteArray.Length);
                    dataStream.Close();
                }

                HttpWebResponse response = await request.GetResponseAsync();
                using (var sr = new StreamReader(response.GetResponseStream()))
                {
                    var result = sr.ReadToEnd();
                    return result;
                }
            }
            catch (Exception)
            {
            }

            return null;
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8\Common\WP8WebRequestProcessor.cs
TAPReplacable PostXml(string url, string postdata)
public async Task<string> PostXml(string url, string postdata)
        {
            try
            {
                var request = (HttpWebRequest)WebRequest.Create(url);

                request.Method = HttpMethod.Post;
                byte[] byteArray = Encoding.UTF8.GetBytes(postdata);
                request.ContentType = "text/xml";
                request.ContentLength = byteArray.Length;

                using (Stream dataStream = await request.GetRequestStreamAsync())
                {
                    dataStream.Write(byteArray, 0, byteArray.Length);
                    dataStream.Close();
                }

                HttpWebResponse response = await request.GetResponseAsync();
                using (var sr = new StreamReader(response.GetResponseStream()))
                {
                    var result = sr.ReadToEnd();
                    return result;
                }
            }
            catch (Exception)
            {
            }

            return null;
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8\Common\WP8WebRequestProcessor.cs
TAPReplacable Get(string url)
public async Task<string> Get(string url)
        {
            try
            {
                var request = (HttpWebRequest)WebRequest.Create(url);
                request.Method = HttpMethod.Get;

                HttpWebResponse response = await request.GetResponseAsync();
                using (var sr = new StreamReader(response.GetResponseStream()))
                {
                    return sr.ReadToEnd();
                }
            }
            catch (Exception)
            {
            }

            return null;
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\..\Cimbalino.Phone.Toolkit.Background (WP71)\Extensions\StreamWriterExtensions.cs
public async static Task WriteAllLinesAsync(this StreamWriter streamWriter, IEnumerable<string> lines)
        {
            foreach (var line in lines)
            {
                await streamWriter.WriteLineAsync(line);
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\..\Cimbalino.Phone.Toolkit.Background (WP71)\Extensions\IsolatedStorageFileExtensions.cs
private async static Task InternalWriteAllLinesAsync(IsolatedStorageFileStream fileStream, IEnumerable<string> contents, Encoding encoding)
        {
            using (var streamWriter = new StreamWriter(fileStream, encoding))
            {
                foreach (var str in contents)
                {
                    await streamWriter.WriteLineAsync(str);
                }
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task<string[]> ReadAllLinesAsync(string path)
        {
            using (var fileStream = await OpenFileForReadAsync(path))
            {
                var lines = new List<string>();

                using (var streamReader = new StreamReader(fileStream))
                {
                    while (!streamReader.EndOfStream)
                    {
                        lines.Add(await streamReader.ReadLineAsync());
                    }
                }

                return lines.ToArray();
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task<string[]> ReadAllLinesAsync(string path, Encoding encoding)
        {
            using (var fileStream = await OpenFileForReadAsync(path))
            {
                var lines = new List<string>();

                using (var streamReader = new StreamReader(fileStream, encoding))
                {
                    while (!streamReader.EndOfStream)
                    {
                        lines.Add(await streamReader.ReadLineAsync());
                    }
                }

                return lines.ToArray();
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task WriteAllLinesAsync(string path, IEnumerable<string> contents)
        {
            using (var fileStream = await CreateFileAsync(path))
            {
                using (var streamWriter = new StreamWriter(fileStream))
                {
                    foreach (var line in contents)
                    {
                        await streamWriter.WriteAsync(line);
                        await streamWriter.WriteAsync(Environment.NewLine);
                    }
                }
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task WriteAllLinesAsync(string path, IEnumerable<string> contents, Encoding encoding)
        {
            using (var fileStream = await CreateFileAsync(path))
            {
                using (var streamWriter = new StreamWriter(fileStream, encoding))
                {
                    foreach (var line in contents)
                    {
                        await streamWriter.WriteAsync(line);
                        await streamWriter.WriteAsync(Environment.NewLine);
                    }
                }
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task AppendAllLines(string path, IEnumerable<string> contents)
        {
            using (var fileStream = await Storage.OpenStreamForWriteAsync(path, CreationCollisionOption.OpenIfExists))
            {
                using (var streamWriter = new StreamWriter(fileStream))
                {
                    foreach (var line in contents)
                    {
                        await streamWriter.WriteAsync(line);
                        await streamWriter.WriteAsync(Environment.NewLine);
                    }
                }
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task AppendAllLines(string path, IEnumerable<string> contents, Encoding encoding)
        {
            using (var fileStream = await Storage.OpenStreamForWriteAsync(path, CreationCollisionOption.OpenIfExists))
            {
                using (var streamWriter = new StreamWriter(fileStream, encoding))
                {
                    foreach (var line in contents)
                    {
                        await streamWriter.WriteAsync(line);
                        await streamWriter.WriteAsync(Environment.NewLine);
                    }
                }
            }
        }
-----------------------
LONGRUNNING False 1 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\codenauts+HockeySDK-WindowsPhone\codenauts-HockeySDK-WindowsPhone-43bcc8f\HockeySDK\CrashHandler.cs
APMTAPReplacable HandleCrashesAsync(Boolean sendAutomatically = false)
private void SendCrashes(IsolatedStorageFile store, string[] filenames)
        {
            foreach (String filename in filenames)
            {
                try
                {
                    string log = GetFileContentsIfExists(store, filename) ?? "";
                    string user = GetFileContentsIfExists(store, filename.Replace(CrashInfoType.crash.ToString(), CrashInfoType.user.ToString()));
                    string contact = GetFileContentsIfExists(store, filename.Replace(CrashInfoType.crash.ToString(), CrashInfoType.contact.ToString())); ;
                    string description = GetFileContentsIfExists(store, filename.Replace(CrashInfoType.crash.ToString(), CrashInfoType.description.ToString())); ;

                    string body = "";
                    body += "raw=" + HttpUtility.UrlEncode(log);
                    if (user != null)
                    {
                        body += "&userID=" + HttpUtility.UrlEncode(user);
                    }
                    if (contact != null)
                    {
                        body += "&contact=" + HttpUtility.UrlEncode(contact);
                    }
                    if (description != null)
                    {
                        body += "&description=" + HttpUtility.UrlEncode(description);
                    }
                    body += "&sdk=" + Constants.SdkName;
                    body += "&sdk_version=" + Constants.SdkVersion;

                    WebRequest request = WebRequestCreator.ClientHttp.Create(new Uri(Constants.ApiBase + "apps/" + identifier + "/crashes"));
                    request.Method = "POST";
                    request.ContentType = "application/x-www-form-urlencoded";
                    request.Headers[HttpRequestHeader.UserAgent] = Constants.UserAgentString;

                    request.BeginGetRequestStream(requestResult =>
                    {
                        try
                        {
                            Stream stream = request.EndGetRequestStream(requestResult);
                            byte[] byteArray = Encoding.UTF8.GetBytes(body);
                            stream.Write(byteArray, 0, body.Length);
                            stream.Close();

                            request.BeginGetResponse(responseResult =>
                            {
                                Boolean deleteCrashes = true;
                                try
                                {
                                    request.EndGetResponse(responseResult);
                                }
                                catch (WebException e)
                                {
                                    if ((e.Status == WebExceptionStatus.ConnectFailure) ||
                                        (e.Status == WebExceptionStatus.ReceiveFailure) ||
                                        (e.Status == WebExceptionStatus.SendFailure) ||
                                        (e.Status == WebExceptionStatus.Timeout) ||
                                        (e.Status == WebExceptionStatus.UnknownError))
                                    {
                                        deleteCrashes = false;
                                    }
                                }
                                catch (Exception)
                                {
                                }
                                finally
                                {
                                    if (deleteCrashes)
                                    {
                                        DeleteCrashes(store, filenames);
                                    }
                                }
                            }, null);
                        }
                        catch (Exception)
                        {
                        }
                    }, null);
                }
                catch (Exception)
                {
                    store.DeleteFile(Path.Combine(Constants.CrashDirectoryName, filename));
                }
            }
        }
--------------------------
LONGRUNNING False 2 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\codenauts+HockeySDK-WindowsPhone\codenauts-HockeySDK-WindowsPhone-43bcc8f\HockeySDK\CrashHandler.cs
TAPReplacable HandleCrashesAsync(Boolean sendAutomatically = false)
private String GetFileContentsIfExists(IsolatedStorageFile store, string filename)
        {
            String content = null;
            if (store.FileExists(Path.Combine(Constants.CrashDirectoryName, filename)))
            {
                Stream fileStream = store.OpenFile(Path.Combine(Constants.CrashDirectoryName, filename), FileMode.Open);
                using (StreamReader reader = new StreamReader(fileStream))
                {
                     content = reader.ReadToEnd();
                } 
                fileStream.Close();
            }
            return content;
        }
--------------------------
LONGRUNNING False 1 Newtonsoft.Json.JsonConvert.SerializeObject(object) D:\CodeCorpus\WPApps\cpmcgrath+Bankr\cpmcgrath-Bankr-119f564\Bankr.Logic\Logic\Queries\CommBankQuery.cs
TAPReplacable Start(HttpClient client)
public HttpContent GetContent()
        {
            var    parameters   = new JsonParameters { Params = Parameters };
            string paramRequest = JsonConvert.SerializeObject(parameters);

            var stringContent = new StringContent(paramRequest);
            stringContent.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
            return stringContent;
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\DeaDiana+WindowsPhone\DeaDiana-WindowsPhone-cb6b104\Joker2\Joker2\MainPage.xaml.cs
TAPReplacable ReproduceSpeech(string templatePth, object currentText)
private async void ReproduceSpeech(string templatePth, object currentText)
        {
            if (templatePth == string.Empty)
                return;
            string ssml;

            using (var f = App.GetResourceStream(new Uri(templatePth, UriKind.Relative)).Stream)
            using (var reader = new StreamReader(f))
            {
                string template = reader.ReadToEnd();
                ssml = string.Format(template, currentText);
                f.Close();
            }
            using (var synthesizer = new SpeechSynthesizer())
            {
                await synthesizer.SpeakSsmlAsync(ssml);
            }
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\DeaDiana+WindowsPhone\DeaDiana-WindowsPhone-cb6b104\Joker2\Joker2\MainPage.xaml.cs
private async void RecognizeCommand()
        {
            if (this.isRecoEnabled)
            {
                isRecoEnabled = false;
                btnStartRecognition.Content = "I wanna more fun!";
                if (recoOperation != null && recoOperation.Status == AsyncStatus.Started)
                {
                    recoOperation.Cancel();
                }
                return;
            }
            else
            {
                isRecoEnabled = true;
                btnStartRecognition.Content = "Stop joking!";
            }


            using (SpeechRecognizerUI recognizerUI = new SpeechRecognizerUI())
            {
                while (this.isRecoEnabled)
                {
                    try
                    {
                        recoOperation = recognizer.RecognizeAsync();
                        var recoResult = await this.recoOperation;

                        if (recoResult.TextConfidence < SpeechRecognitionConfidence.Medium)
                        {
                            using (var synthesizer = new SpeechSynthesizer())
                            {
                                await synthesizer.SpeakTextAsync("Ha-ha-ha. Say it louder!");
                            }
                        }
                        else
                        {
                            SemanticProperty genre;

                            if (recoResult.Semantics.TryGetValue("genre", out genre))
                            {
                                string filePath = string.Empty;
                                object arg = null;
                                string displayFormat = string.Empty;

                                switch (genre.Value.ToString())
                                {
                                    case "joke":
                                        filePath = "JokeTemplate.xml";
                                        arg = jokeCollection.ElementAt(indexForJoke);
                                        indexForJoke++;
                                        indexForJoke %= NUM_OF_JOKES;
                                        break;
                                    case "tongue-twister":
                                        filePath = "TongueTwisterTemplate.xml";
                                        arg = tongueTwisterCollection.ElementAt(indexForTwister);
                                        indexForTwister++;
                                        indexForTwister %= NUM_OF_TWISTERS;
                                        break;
                                    default:
                                        break;
                                }
                                ReproduceSpeech(filePath, arg);
                            }

                        }
                    }
                    catch (System.Threading.Tasks.TaskCanceledException) { }
                    catch (Exception err)
                    {
                        // Handle the speech privacy policy error.
                        const int privacyPolicyHResult = unchecked((int)0x80045509);
                        if (err.HResult == privacyPolicyHResult)
                        {
                            MessageBox.Show("To run the app, you must first accept the speech privacy policy. To do so, navigate to Settings -> speech on your phone and check 'Enable Speech Recognition Service' ");
                            isRecoEnabled = false;
                            btnStartRecognition.Content = "Start speech recognition";
                        }
                        else
                        {
                            //textOfJoke.Text = "Error: " + err.Message;
                        }
                    }
                }
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\DeaDiana+WindowsPhone\DeaDiana-WindowsPhone-cb6b104\VoiceCommander\VoiceCommander\MainPage.xaml.cs
private async void btnStartRecognition_Click(object sender, RoutedEventArgs e)
        {
            if (this.isRecoEnabled)
            {
                // Update the UI to the initial state
                isRecoEnabled = false;
                btnStartRecognition.Content = "I wanna fun!";
                nameOfJoke.Text = String.Empty;
                textOfJoke.Visibility = System.Windows.Visibility.Collapsed;

                // Cancel the outstanding recognition operation, if one exists
                if (recoOperation != null && recoOperation.Status == AsyncStatus.Started)
                {
                    recoOperation.Cancel();
                }
                return;
            }
            else
            {
                // Set the flag to say that we are in recognition mode
                isRecoEnabled = true;

                // Update the UI
                btnStartRecognition.Content = "Speak please!";
                //txtInstructions.Visibility = System.Windows.Visibility.Visible;
            }

            while (this.isRecoEnabled)
            {
                try
                {
                    // Perform speech recognition.  
                    recoOperation = recognizer.RecognizeAsync();
                    var recoResult = await this.recoOperation;

                    // Check the confidence level of the speech recognition attempt.
                    if (recoResult.TextConfidence < SpeechRecognitionConfidence.Medium)
                    {
                        // If the confidence level of the speech recognition attempt is low, 
                        // ask the user to try again.
                        nameOfJoke.Text = "Stop muttering!";
                        await speaker.SpeakTextAsync("Ha-ha-ha. Say it louder!");
                    }
                    else
                    {
                        // Output that the color of the rectangle is changing by updating
                        // the TextBox control and by using text-to-speech (TTS). 
                        nameOfJoke.Text = "Searching the joke ..." + recoResult.Text;
                        await speaker.SpeakTextAsync("The " + recoResult.Text + "joke");

                        // Set the fill color of the rectangle to the recognized color. 

                        textOfJoke.Text = "this is very cool joke"; //jokeCollection.First;// recoResult.Text.ToLower);

                    }
                }
                catch (System.Threading.Tasks.TaskCanceledException)
                {
                    // Ignore the cancellation exception of the recoOperation.
                    // When recoOperation.Cancel() is called to cancel the asynchronous speech recognition operation
                    // initiated by RecognizeAsync(),  a TaskCanceledException is thrown to signify early exit.
                }
                catch (Exception err)
                {
                    // Handle the speech privacy policy error.
                    const int privacyPolicyHResult = unchecked((int)0x80045509);

                    if (err.HResult == privacyPolicyHResult)
                    {
                        MessageBox.Show("To run this sample, you must first accept the speech privacy policy. To do so, navigate to Settings -> speech on your phone and check 'Enable Speech Recognition Service' ");
                        isRecoEnabled = false;
                        btnStartRecognition.Content = "Start speech recognition";
                    }
                    else
                    {
                        textOfJoke.Text = "Error: " + err.Message;
                    }
                }
            }
        }
-----------------------
LONGRUNNING False 3 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\dend+beem\dend-beem-38befb2\Beem\Views\StationPlayer.xaml.cs
TAPReplacable OnNavigatedTo(System.Windows.Navigation.NavigationEventArgs e)
public void ScrobbleTrack(string artist, string track, string sessionKey, Action<string> onCompletion)
        {
            string currentTimestamp = DateHelper.GetUnixTimestamp();

            var parameters = new Dictionary<string, string>();
            parameters.Add("artist[0]", artist);
            parameters.Add("track[0]", track);
            parameters.Add("timestamp[0]", currentTimestamp);
            parameters.Add("method", "track.scrobble");
            parameters.Add("api_key", API_KEY);
            parameters.Add("sk", sessionKey);

            string signature = GetSignature(parameters);

            string comboUrl = string.Concat(CORE_URL, "?method=track.scrobble", "&api_key=", API_KEY,
                "&artist[0]=", HttpUtility.UrlEncode(artist), "&track[0]=", HttpUtility.UrlEncode(track), "&sk=", sessionKey, "&timestamp[0]=", currentTimestamp,
                "&api_sig=", signature);

            var client = new WebClient();
            client.UploadStringAsync(new Uri(comboUrl), string.Empty);
            client.UploadStringCompleted += (s, e) =>
            {
                try
                {
                    onCompletion(e.Result);
                }
                catch (WebException ex)
                {
                    HttpWebResponse response = (HttpWebResponse)ex.Response;
                    using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                    {
                        Debug.WriteLine(reader.ReadToEnd());
                    }
                }
            };
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\Depechie+GF13\Depechie-GF13-51409e3\AppCreativity.GentseFeesten.WP8\AppCreativity.GentseFeesten.WP8\ViewModel\MainViewModel.cs
TAPReplacable InitializeCategories()
private async Task InitializeCategories()
        {
            if (ReferenceEquals(Categories, null) || Categories.Count == 0)
            {
                string path = string.Format(@"{0}\resources\GFCategories.json", _installFolder);
                StorageFile storageFile = await StorageFile.GetFileFromPathAsync(path);
                Stream stream = await storageFile.OpenStreamForReadAsync();
                string jsonContent;
                using (StreamReader streamReader = new StreamReader(stream))
                {
                    jsonContent = streamReader.ReadToEnd();
                }

                List<GFCategory> gfCategories = GFService.GetInstance().ParseCategories(jsonContent);

                int itemCount = 0;
                foreach (GFCategory gfCategory in gfCategories)
                {
                    ++itemCount;
                    if (itemCount == 1)
                    {
                        this.Categories.Add(new CategoryListItem(gfCategory, "0,0,0,1", "12,6,12,0"));
                        continue;
                    }

                    if (itemCount == gfCategories.Count)
                    {
                        this.Categories.Add(new CategoryListItem(gfCategory, "0,0,0,0", "12,0,12,6"));
                        continue;
                    }

                    this.Categories.Add(new CategoryListItem(gfCategory, "0,0,0,1", "12,0,12,0"));
                }
            }
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\Depechie+GF13\Depechie-GF13-51409e3\AppCreativity.GentseFeesten.WP8\AppCreativity.GentseFeesten.WP8\ViewModel\MainViewModel.cs
TAPReplacable InitializeEvents()
private async Task InitializeEvents()
        {
            if (ReferenceEquals(_allGFEvents, null) || _allGFEvents.Count == 0)
            {
                string path = string.Format(@"{0}\resources\GFEvents.json", _installFolder);
                StorageFile storageFile = await StorageFile.GetFileFromPathAsync(path);
                Stream stream = await storageFile.OpenStreamForReadAsync();
                string jsonContent;
                using (StreamReader streamReader = new StreamReader(stream))
                {
                    jsonContent = streamReader.ReadToEnd();
                }

                _allGFEvents = GFService.GetInstance().ParseEvents(jsonContent);
            }
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\Depechie+GF13\Depechie-GF13-51409e3\AppCreativity.GentseFeesten.WP8\AppCreativity.GentseFeesten.WP8\ViewModel\MainViewModel.cs
TAPReplacable InitializeDays()
private async Task InitializeDays()
        {
            if (ReferenceEquals(Days, null) || Days.Count == 0)
            {
                string path = string.Format(@"{0}\resources\GFDates.json", _installFolder);
                StorageFile storageFile = await StorageFile.GetFileFromPathAsync(path);
                Stream stream = await storageFile.OpenStreamForReadAsync();
                string jsonContent;
                using (StreamReader streamReader = new StreamReader(stream))
                {
                    jsonContent = streamReader.ReadToEnd();
                }

                List<GFDay> gfDays = GFService.GetInstance().ParseDays(jsonContent);

                int itemCount = 0;
                foreach (GFDay gfDay in gfDays)
                {
                    ++itemCount;
                    if (itemCount == 1)
                    {
                        this.Days.Add(new DayListItem(gfDay, "0,0,0,1", "12,6,12,0"));
                        continue;
                    }

                    if (itemCount == gfDays.Count)
                    {
                        this.Days.Add(new DayListItem(gfDay, "0,0,0,0", "12,0,12,6"));
                        continue;
                    }

                    this.Days.Add(new DayListItem(gfDay, "0,0,0,1", "12,0,12,0"));
                }
            }
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\Digillect+mvvm-wp\Digillect-mvvm-wp-e2bd8c3\src\Digillect.Mvvm.WindowsPhone\Services\NavigationService.cs
public async void Navigate( string viewName, XParameters parameters )
        {
            if( _navigationIsInProgress )
            {
                return;
            }

            var context = new NavigationContext { ViewName = viewName, Parameters = parameters };

            foreach( var handler in _navigationHandlers )
            {
                if( await handler.HandleNavigation( context ) )
                {
                    break;
                }
            }

            if( context.Cancel )
            {
                return;
            }

            ViewDescriptor descriptor;

            if( !_views.TryGetValue( context.ViewName, out descriptor ) )
            {
                throw new ViewNavigationException( String.Format( "View '{0}' is not registered.", context.ViewName ) );
            }

            var uri = new Uri( string.Format( "/{0}{1}", descriptor.Path, context.Parameters != null ? "?" + string.Join( "&", context.Parameters.Select( p => p.Key + "=" + ParametersSerializer.EncodeValue( p.Value ) ) ) : string.Empty ), UriKind.Relative );

            if( context.DisplaceCurrentView )
            {
                _removeLastJournalEntry = true;
            }

            ((PhoneApplication) Application.Current).RootFrame.Navigate( uri );
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\Digillect+mvvm-wp\Digillect-mvvm-wp-e2bd8c3\src\Digillect.Mvvm.WindowsPhone\Services\NavigationService.cs
public async void Navigate( string viewName, XParameters parameters )
        {
            if( _navigationIsInProgress )
            {
                return;
            }

            var context = new NavigationContext { ViewName = viewName, Parameters = parameters };

            foreach( var handler in _navigationHandlers )
            {
                if( await handler.HandleNavigation( context ) )
                {
                    break;
                }
            }

            if( context.Cancel )
            {
                return;
            }

            ViewDescriptor descriptor;

            if( !_views.TryGetValue( context.ViewName, out descriptor ) )
            {
                throw new ViewNavigationException( String.Format( "View '{0}' is not registered.", context.ViewName ) );
            }

            var uri = new Uri( string.Format( "/{0}{1}", descriptor.Path, context.Parameters != null ? "?" + string.Join( "&", context.Parameters.Select( p => p.Key + "=" + ParametersSerializer.EncodeValue( p.Value ) ) ) : string.Empty ), UriKind.Relative );

            if( context.DisplaceCurrentView )
            {
                _removeLastJournalEntry = true;
            }

            ((PhoneApplication) Application.Current).RootFrame.Navigate( uri );
        }
-----------------------
LONGRUNNING True 0 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepraCore\ConnectionAgent.cs
APMTAPReplacable Login(String username, String password, String captcha, String loginCode)
public async Task<String> Login(String username, String password, String captcha, String loginCode)
        {
            var postString = String.Format("user={0}&pass={1}&captcha={2}&logincode={3}&save=1", username, password, captcha, loginCode);
            var byteArray = Encoding.UTF8.GetBytes(postString);

            var httpWebRequest = (HttpWebRequest) WebRequest.Create("http://leprosorium.ru/login/");
            httpWebRequest.AllowAutoRedirect = false;
            httpWebRequest.AllowReadStreamBuffering = true;
            httpWebRequest.Method = HttpMethod.Post.Method;
            httpWebRequest.ContentType = "application/x-www-form-urlencoded";
            httpWebRequest.ContentLength = byteArray.Length;

            var requestStream = await httpWebRequest.GetRequestStreamAsync();
            requestStream.Write(byteArray, 0, byteArray.Length);
            requestStream.Close();

            var response = await httpWebRequest.GetResponseAsync();
            var setCookie = response.Headers["Set-Cookie"];

            var success = SetAuthCookies(setCookie);
            if (!success)
            {
                using (var responseContentStream = response.GetResponseStream())
                {
                    var reader = new StreamReader(responseContentStream);
                    var responseContent = await reader.ReadToEndAsync();
                    return HtmlParser.ExtractLoginError(responseContent);
                }
            }

            IsAuthenticated = true;
            return String.Empty;
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepraCore\HtmlParser.cs
public static async Task<List<UIElement>> ConvertHtmlToXaml(string htmlData)
        {
            var doc = new HtmlDocument();
            doc.LoadHtml(htmlData);

            var nodes = doc.DocumentNode.DescendantNodes().ToList();

            var elements = new List<UIElement>();

            foreach (var htmlNode in nodes)
            {
                if (htmlNode.Name == "#text")
                {
                    var text = new TextBlock();
                    text.TextWrapping = TextWrapping.Wrap;
                    text.Text = htmlNode.InnerText;
                    elements.Add(text);
                }
                else if (htmlNode.Name == "p")
                {
                    var text = new TextBlock();
                    text.Inlines.Add(new LineBreak());
                    elements.Add(text);
                }
                else if (htmlNode.Name == "img")
                {
                    var src = Regex.Match(htmlNode.OuterHtml, "<img src=\"(.+?)\"").Groups[1].Value;

                    var image = new Image();
                    var imageStream = await ConnectionAgent.Current.GetImageStream(src);
                    image.Source = PictureDecoder.DecodeJpeg(imageStream);

                    elements.Add(image);
                }
            }

            return elements;
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepra.App\ViewModel\MainViewModel.cs
private async Task LoadGeneralPosts()
        {
            var latestPosts = await ConnectionAgent.Current.GetLatestPosts();

            var latestPostsViewModel = latestPosts.Select(x => new PostViewModel(x)).ToList();
            if (latestPostsViewModel.Count == 0)
            {
                GeneralPosts = new ObservableCollection<PostViewModel>();
                return;
            }

            if (GeneralPosts != null)
                GeneralPosts.Clear();

            foreach (var postViewModel in latestPostsViewModel)
            {
                await postViewModel.DownloadHeaderImage();

                if (GeneralPosts == null)
                    GeneralPosts = new ObservableCollection<PostViewModel>();

                GeneralPosts.Add(postViewModel);
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepra.App\ViewModel\MainViewModel.cs
private async Task LoadMyStuffPosts()
        {
            var myStuff = await ConnectionAgent.Current.GetMyStuff();

            var latestPostsViewModel = myStuff.Select(x => new PostViewModel(x)).ToList();
            if (latestPostsViewModel.Count == 0)
            {
                MyStuffPosts = new ObservableCollection<PostViewModel>();
                return;
            }

            if (MyStuffPosts != null)
                MyStuffPosts.Clear();

            foreach (var postViewModel in latestPostsViewModel)
            {
                await postViewModel.DownloadHeaderImage();

                if (MyStuffPosts == null)
                    MyStuffPosts = new ObservableCollection<PostViewModel>();
                MyStuffPosts.Add(postViewModel);
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepra.App\ViewModel\MainViewModel.cs
private async Task LoadInboxPosts()
        {
            var inbox = await ConnectionAgent.Current.GetInbox();

            var inboxPostsViewModel = inbox.Select(x => new PostViewModel(x)).ToList();
            if (inboxPostsViewModel.Count == 0)
            {
                InboxPosts = new ObservableCollection<PostViewModel>();
                return;
            }

            if (InboxPosts != null)
                InboxPosts.Clear();

            foreach (var postViewModel in inboxPostsViewModel)
            {
                await postViewModel.DownloadHeaderImage();

                if (InboxPosts == null)
                    InboxPosts = new ObservableCollection<PostViewModel>();
                InboxPosts.Add(postViewModel);
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepra.App\View\Test.xaml.cs
protected override async void OnNavigatedTo(NavigationEventArgs e)
        {
            base.OnNavigatedTo(e);

            var posts = await ConnectionAgent.Current.GetInbox();

            var post = posts[0];

            var body = post.Body;

            var doc = new HtmlDocument();
            doc.LoadHtml(body);

            var nodes = doc.DocumentNode.DescendantNodes().ToList();

            var elements = new List<UIElement>();
            foreach (var htmlNode in nodes)
            {
                if (htmlNode.Name == "#text")
                {
                    var text = new TextBlock();
                    text.TextWrapping = TextWrapping.Wrap;
                    text.Text = htmlNode.InnerText;
                    elements.Add(text);
                    continue;
                }
                else if (htmlNode.Name == "p")
                {
                    var text = new TextBlock();
                    text.Inlines.Add(new LineBreak());
                    elements.Add(text);
                    continue;
                }
                else if (htmlNode.Name == "img")
                {
                    var src = Regex.Match(htmlNode.OuterHtml, "<img src=\"(.+?)\"").Groups[1].Value;

                    var image = new Image();
                    var imageStream = await ConnectionAgent.Current.GetImageStream(src);
                    image.Source = PictureDecoder.DecodeJpeg(imageStream);

                    elements.Add(image);
                }
            }

            list.ItemsSource = new ObservableCollection<UIElement>(elements);
        }
-----------------------
LONGRUNNING True 2 System.IO.MemoryStream.Write(byte[], int, int) D:\CodeCorpus\WPApps\dotMorten+SharpGIS.HttpClient.WP\dotMorten-SharpGIS.HttpClient.WP-6552715\src\SharpGIS.HttpClient.WP\Http\HttpClient.cs
APMTAPReplacable GetStringAsync(Uri requestUri)
public async Task<byte[]> ReadAsByteArrayAsync()
        {
            Stream stream = await ReadAsStreamAsync();
            if (!stream.CanSeek)
            {
                MemoryStream ms = new MemoryStream();
                int count = 0;
                byte[] buffer = new byte[1024];
                while ((count = await stream.ReadAsync(buffer, 0, 1024)) > 0)
                {
                    ms.Write(buffer, 0, count);
                }
                return ms.ToArray();
            }
            else
            {
                byte[] buffer = new byte[stream.Length];
                await stream.ReadAsync(buffer, 0, buffer.Length);
                return buffer;
            }
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\dotMorten+SharpGIS.HttpClient.WP\dotMorten-SharpGIS.HttpClient.WP-6552715\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
-----------------------
LONGRUNNING True 0 System.IO.StreamWriter.Write(string) D:\CodeCorpus\WPApps\dotMorten+SharpGIS.HttpClient.WP\dotMorten-SharpGIS.HttpClient.WP-6552715\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
TAPReplacable SerializeToStreamAsync(Stream stream, TransportContext context)
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamWriter.Write(string) D:\CodeCorpus\WPApps\dotMorten+SharpGIS.HttpClient.WP\dotMorten-SharpGIS.HttpClient.WP-6552715\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
TAPReplacable SerializeToStreamAsync(Stream stream, TransportContext context)
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
--------------------------
LONGRUNNING True 0 System.IO.TextWriter.WriteLine() D:\CodeCorpus\WPApps\dotMorten+SharpGIS.HttpClient.WP\dotMorten-SharpGIS.HttpClient.WP-6552715\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
TAPReplacable SerializeToStreamAsync(Stream stream, TransportContext context)
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
--------------------------
LONGRUNNING True 0 System.IO.TextWriter.WriteLine() D:\CodeCorpus\WPApps\dotMorten+SharpGIS.HttpClient.WP\dotMorten-SharpGIS.HttpClient.WP-6552715\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
TAPReplacable SerializeToStreamAsync(Stream stream, TransportContext context)
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamWriter.Write(string) D:\CodeCorpus\WPApps\dotMorten+SharpGIS.HttpClient.WP\dotMorten-SharpGIS.HttpClient.WP-6552715\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
TAPReplacable SerializeToStreamAsync(Stream stream, TransportContext context)
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamWriter.Write(string) D:\CodeCorpus\WPApps\dotMorten+SharpGIS.HttpClient.WP\dotMorten-SharpGIS.HttpClient.WP-6552715\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
TAPReplacable SerializeToStreamAsync(Stream stream, TransportContext context)
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamWriter.Flush() D:\CodeCorpus\WPApps\dotMorten+SharpGIS.HttpClient.WP\dotMorten-SharpGIS.HttpClient.WP-6552715\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
TAPReplacable SerializeToStreamAsync(Stream stream, TransportContext context)
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamWriter.Write(string) D:\CodeCorpus\WPApps\dotMorten+SharpGIS.HttpClient.WP\dotMorten-SharpGIS.HttpClient.WP-6552715\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
TAPReplacable SerializeToStreamAsync(Stream stream, TransportContext context)
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamWriter.Flush() D:\CodeCorpus\WPApps\dotMorten+SharpGIS.HttpClient.WP\dotMorten-SharpGIS.HttpClient.WP-6552715\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
TAPReplacable SerializeToStreamAsync(Stream stream, TransportContext context)
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\dotMorten+SharpGIS.HttpClient.WP\dotMorten-SharpGIS.HttpClient.WP-6552715\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
-----------------------
LONGRUNNING False 1 System.IO.Stream.Read(byte[], int, int) D:\CodeCorpus\WPApps\dotnetautor+WP8Kochbuch\dotnetautor-WP8Kochbuch-5444511\Buch.Beispiele\Kapitel 06\02 PlattformAdapter\FeedReaderWP8\Utilities\PhonePlatformAdapter.cs
APMTAPReplacable ReadResponseStream(HttpWebResponse response)
public static Stream Decompress(this Stream stream) {
     
      ?// Copyright (C) Microsoft Corporation. All Rights Reserved.
      // This code released under the terms of the Microsoft Public License
      // (Ms-PL, http://opensource.org/licenses/ms-pl.html).

      // Read header
      if ((0x1f != stream.ReadByte()) || // ID1
          (0x8b != stream.ReadByte()) || // ID2
          (8 != stream.ReadByte()))    // CM (8 == deflate)
                {
        throw new NotSupportedException("Compressed data not in the expected format.");
      }

      // Read flags
      var flg = stream.ReadByte(); // FLG
      var fhcrc = 0 != (0x2 & flg); // CRC16 present before compressed data
      var fextra = 0 != (0x4 & flg); // extra fields present
      var fname = 0 != (0x8 & flg); // original file name present
      var fcomment = 0 != (0x10 & flg); // file comment present

      // Skip unsupported fields
      stream.ReadByte(); stream.ReadByte(); stream.ReadByte(); stream.ReadByte(); // MTIME
      stream.ReadByte(); // XFL
      stream.ReadByte(); // OS
      if (fextra) {
        // Skip XLEN bytes of data
        var xlen = stream.ReadByte() | (stream.ReadByte() << 8);
        while (0 < xlen) {
          stream.ReadByte();
          xlen--;
        }
      }
      if (fname) {
        // Skip 0-terminated file name
        while (0 != stream.ReadByte()) {
        }
      }
      if (fcomment) {
        // Skip 0-terminated file comment
        while (0 != stream.ReadByte()) {
        }
      }
      if (fhcrc) {
        stream.ReadByte(); stream.ReadByte(); // CRC16
      }

      // Read compressed data
      const int zipHeaderSize = 30 + 1; // 30 bytes + 1 character for file name
      const int zipFooterSize = 68 + 1; // 68 bytes + 1 character for file name

      // Download unknown amount of compressed data efficiently (note: Content-Length header is not always reliable)
      var buffers = new List<byte[]>();
      var buffer = new byte[4096];
      var bytesInBuffer = 0;
      var totalBytes = 0;
      var bytesRead = 0;
      do {
        if (buffer.Length == bytesInBuffer) {
          // Full, allocate another
          buffers.Add(buffer);
          buffer = new byte[buffer.Length];
          bytesInBuffer = 0;
        }
        Debug.Assert(bytesInBuffer < buffer.Length);
        bytesRead = stream.Read(buffer, bytesInBuffer, buffer.Length - bytesInBuffer);
        bytesInBuffer += bytesRead;
        totalBytes += bytesRead;
      } while (0 < bytesRead);
      buffers.Add(buffer);

      // "Trim" crc32 and isize fields off the end
      var compressedSize = totalBytes - 4 - 4;
      if (compressedSize < 0) {
        throw new NotSupportedException("Compressed data not in the expected format.");
      }

      // Create contiguous buffer
      var compressedBytes = new byte[zipHeaderSize + compressedSize + zipFooterSize];
      var offset = zipHeaderSize;
      var remainingBytes = totalBytes;
      foreach (var b in buffers) {
        var length = Math.Min(b.Length, remainingBytes);
        Array.Copy(b, 0, compressedBytes, offset, length);
        offset += length;
        remainingBytes -= length;
      }
      Debug.Assert(0 == remainingBytes);

      // Read footer from end of compressed bytes (note: footer is within zipFooterSize; will be overwritten below)
      Debug.Assert(totalBytes <= compressedSize + zipFooterSize);
      offset = zipHeaderSize + compressedSize;
      var crc32 = compressedBytes[offset + 0] | (compressedBytes[offset + 1] << 8) | (compressedBytes[offset + 2] << 16) | (compressedBytes[offset + 3] << 24);
      var isize = compressedBytes[offset + 4] | (compressedBytes[offset + 5] << 8) | (compressedBytes[offset + 6] << 16) | (compressedBytes[offset + 7] << 24);

      // Create ZIP file stream
      const string fileName = "f"; // MUST be 1 character (offsets below assume this)
      Debug.Assert(1 == fileName.Length);
      var zipFileMemoryStream = new MemoryStream(compressedBytes);
      var writer = new BinaryWriter(zipFileMemoryStream);

      // Local file header
      writer.Write((uint)0x04034b50); // local file header signature
      writer.Write((ushort)20); // version needed to extract (2.0 == compressed using deflate)
      writer.Write((ushort)0); // general purpose bit flag
      writer.Write((ushort)8); // compression method (8: deflate)
      writer.Write((ushort)0); // last mod file time
      writer.Write((ushort)0); // last mod file date
      writer.Write(crc32); // crc-32
      writer.Write(compressedSize); // compressed size
      writer.Write(isize); // uncompressed size
      writer.Write((ushort)1); // file name length
      writer.Write((ushort)0); // extra field length
      writer.Write((byte)fileName[0]); // file name

      // File data (already present)
      zipFileMemoryStream.Seek(compressedSize, SeekOrigin.Current);

      // Central directory structure
      writer.Write((uint)0x02014b50); // central file header signature
      writer.Write((ushort)20); // version made by
      writer.Write((ushort)20); // version needed to extract (2.0 == compressed using deflate)
      writer.Write((ushort)0); // general purpose bit flag
      writer.Write((ushort)8); // compression method
      writer.Write((ushort)0); // last mod file time
      writer.Write((ushort)0); // last mod file date
      writer.Write(crc32); // crc-32
      writer.Write(compressedSize); // compressed size
      writer.Write(isize); // uncompressed size
      writer.Write((ushort)1); // file name length
      writer.Write((ushort)0); // extra field length
      writer.Write((ushort)0); // file comment length
      writer.Write((ushort)0); // disk number start
      writer.Write((ushort)0); // internal file attributes
      writer.Write((uint)0); // external file attributes
      writer.Write((uint)0); // relative offset of local header
      writer.Write((byte)fileName[0]); // file name
      // End of central directory record
      writer.Write((uint)0x06054b50); // end of central dir signature
      writer.Write((ushort)0); // number of this disk
      writer.Write((ushort)0); // number of the disk with the start of the central directory
      writer.Write((ushort)1); // total number of entries in the central directory on this disk
      writer.Write((ushort)1); // total number of entries in the central directory
      writer.Write((uint)(46 + 1)); // size of the central directory (46 bytes + 1 character for file name)
      writer.Write((uint)(zipHeaderSize + compressedSize)); // offset of start of central directory with respect to the starting disk number
      writer.Write((ushort)0); // .ZIP file comment length

      // Reset ZIP file stream to beginning
      zipFileMemoryStream.Seek(0, SeekOrigin.Begin);

      // Return the decompressed stream
      return Application.GetResourceStream(
          new StreamResourceInfo(zipFileMemoryStream, null),
          new Uri(fileName, UriKind.Relative))
          .Stream;
    }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\EgorBo+MvvmNavigationToolkit\EgorBo-MvvmNavigationToolkit-adf2827\src\MvvmNavigationToolkit.WindowsPhone.Sample\ViewModels\NotesViewModel.cs
public override async void OnNavigatedTo()
        {
            base.OnNavigatedTo();
            if (!_isLoaded)
            {
                _isLoaded = true;
                IsBusy = true;
                await Task.Delay(150);
                for (int i = 0; i < 10; i++)
                {
                    Notes.Add(new NoteViewModel("note " + i, "note description " + i));
                    await Task.Delay(20);
                }
                IsBusy = false;
            }
        }
-----------------------
BLOCKING False 1 Thread.Sleep
D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\EtaSampleApp\Views\MainPage.xaml.cs 
Initialize()
private Task<bool> InitializeSplachScreenAsync()
        {
            var tcs = new TaskCompletionSource<bool>();
            splashScreenPopup = new Popup();
            this.LayoutRoot.Children.Add(splashScreenPopup);  
            splashScreenPopup.IsOpen = true;
            splashScreenPopup.Child = new SplashScreenLoadingUserControl();

            splachscreenWorker = new BackgroundWorker();

            splachscreenWorker.DoWork += ((s, args) =>
            {
                Thread.Sleep(int.Parse(AppResources.SplashScreenPopupLoadtime));
            });

            splachscreenWorker.RunWorkerCompleted += ((s, args) =>
            {
                this.Dispatcher.BeginInvoke(() =>
                {
                    this.splashScreenPopup.IsOpen = false;
                    this.ApplicationBar.IsVisible = true;
                    tcs.TrySetResult(true);
                }
            );
            });
            splachscreenWorker.RunWorkerAsync();
            return tcs.Task;
        }
--------------------------
BLOCKING True 1 Thread.Sleep
D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\EtaSampleApp\Views\MainPage.xaml.cs 
Initialize()
async private Task WaitForNetwork()
        {
            if (IsNetworkAvailable)
            {
                return;
            }
            else
            {
                await TaskEx.Run(() =>
                {
                    while (!IsNetworkAvailable)
                    {
                        Thread.Sleep(250);
                    }
                });
            }
        }
--------------------------
BLOCKING True 1 Thread.Sleep
D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\EtaSampleApp\Views\MainPage.xaml.cs 
Initialize()
async private Task InitializeUserDataAndServices()
        {
            var userData = App.ViewModel.UserViewModel;
            bool isFirstTimeApplicationRuns = userData.FirstTimeApplicationRuns;
            bool showApplicationIntroductionGuide = true;

            if (isFirstTimeApplicationRuns)
            {
                // optional Show App introduction
                // Get User persmission and location information
                var locationSetup = new LocationSetupUserControl();
                var locationSetupPopup = new Popup()
                {
                    IsOpen = true,
                    Child = locationSetup
                };
                await TaskEx.Run(() => {
                    var run = true;
                    while (run) 
                    {
                        Deployment.Current.Dispatcher.BeginInvoke(() => {
                            run =  locationSetupPopup.IsOpen;
                        });
                        Thread.Sleep(250);
                    } 
                });
            }
            else
            {
                // use excisting persmissions and location with respect to user choise!
            }
            splashScreenPopup = null;
            App.ViewModel.LoadData();

            if (showApplicationIntroductionGuide)
            {
                // optional show app intro guide (slide show)
            }
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\facebook-csharp-sdk+facebook-winclient-sdk\facebook-csharp-sdk-facebook-winclient-sdk-61e6f73\Samples\BasicApp-WP7\MainPage.xaml.cs
private async System.Threading.Tasks.Task Authenticate()
        {
            while (session == null)
            {
                string message;
                try
                {
                    session = await App.FacebookSessionClient.LoginAsync("publish_checkins,manage_notifications");
                    message = "You are now logged in";
                }
                catch (InvalidOperationException)
                {
                    message = "You must log in. Login Required";
                }

                MessageBox.Show(message);
            }
        }
-----------------------
LONGRUNNING False 1 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\fastestways\WazePocWP8\Server\WazeEngine.cs
TAPReplacable GetRoute()
private Task<RootObject> GetRouteFor(double fromX, double fromY, double toX, double toY, string country)
        {
            WebRequest httpRequest =  null;
            if (country == "ISR")
                httpRequest = WebRequest.Create(String.Format("http://www.waze.co.il/RoutingManager/routingRequest?from=x%3A{0}+y%3A{1}&to=x%3A{2}+y%3A{3}&returnJSON=false&returnGeometries=false&returnInstructions=true&timeout=60000&nPaths=1#", 
                                                              fromX, fromY, toX, toY));
            if (country == "USA")
                httpRequest = WebRequest.Create(String.Format("http://www.waze.com/RoutingManager/routingRequest?from=x%3A{0}+y%3A{1}&to=x%3A{2}+y%3A{3}&returnJSON=false&returnGeometries=false&returnInstructions=true&timeout=60000&nPaths=1#",
                                                              fromX, fromY, toX, toY));

            TaskCompletionSource<RootObject> tcs = new TaskCompletionSource<RootObject>();

            if (httpRequest != null)
                httpRequest.BeginGetResponse(state =>
                    {
                        var response = httpRequest.EndGetResponse(state);
                        using (var s = response.GetResponseStream())
                        using (var sr = new StreamReader(s))
                        {
                            string responseText = sr.ReadToEnd().Replace("NaN", "0.0");
                            var myResponse = JsonConvert.DeserializeObject<RootObject>(responseText);
                            tcs.SetResult(myResponse);
                        }
                    }, null);

            return tcs.Task;
        }
--------------------------
LONGRUNNING True 0 System.IO.Stream.Read(byte[], int, int) D:\CodeCorpus\WPApps\fdrapp\FreedomainRadio\FreedomainRadio.TaskScheduler\ShellContent.cs
APMTAPReplacable DownloadImageAsync(Uri uri)
public static async Task<Uri> DownloadImageAsync(Uri uri)
        {
            string dir = "Shared/ShellContent/";

            var client = new HttpClient();

            using (var isoStore = IsolatedStorageFile.GetUserStoreForApplication())
            {
                string filename = CreateFileName(uri);

                string targetName = dir + filename;

                if (!isoStore.FileExists(targetName))
                {
                    DeleteAndRecreateShellContent(isoStore);

                    using (var isoStoreFile = isoStore.OpenFile(
                        targetName,
                        FileMode.Create,
                        FileAccess.ReadWrite))
                    {
                        using (var response = await client.GetStreamAsync(uri))
                        {
                            var dataBuffer = new byte[1024];
                            while (response.Read(dataBuffer, 0, dataBuffer.Length) > 0)
                            {
                                isoStoreFile.Write(dataBuffer, 0, dataBuffer.Length);
                            }
                        }
                    }
                }

                return new Uri("isostore:" + targetName);
            }
        }
--------------------------
LONGRUNNING True 0 System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(byte[], int, int) D:\CodeCorpus\WPApps\fdrapp\FreedomainRadio\FreedomainRadio.TaskScheduler\ShellContent.cs
APMTAPReplacable DownloadImageAsync(Uri uri)
public static async Task<Uri> DownloadImageAsync(Uri uri)
        {
            string dir = "Shared/ShellContent/";

            var client = new HttpClient();

            using (var isoStore = IsolatedStorageFile.GetUserStoreForApplication())
            {
                string filename = CreateFileName(uri);

                string targetName = dir + filename;

                if (!isoStore.FileExists(targetName))
                {
                    DeleteAndRecreateShellContent(isoStore);

                    using (var isoStoreFile = isoStore.OpenFile(
                        targetName,
                        FileMode.Create,
                        FileAccess.ReadWrite))
                    {
                        using (var response = await client.GetStreamAsync(uri))
                        {
                            var dataBuffer = new byte[1024];
                            while (response.Read(dataBuffer, 0, dataBuffer.Length) > 0)
                            {
                                isoStoreFile.Write(dataBuffer, 0, dataBuffer.Length);
                            }
                        }
                    }
                }

                return new Uri("isostore:" + targetName);
            }
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\Services\NestWebService.cs
public async Task<GetStatusResult> GetStructureAndDeviceStatusAsync(Structure structure) {
            var structureResult = await GetStructureStatusAsync(structure);
            if (structureResult.Exception != null)
                return structureResult;

            foreach (var thermostat in structure.Thermostats) {
                GetThermostatStatusResult sharedResult = await GetSharedThermostatPropertiesAsync(thermostat);
                if (sharedResult.Exception != null)
                    return new GetStatusResult(sharedResult.Error, sharedResult.Exception);
                GetThermostatStatusResult thermostatResult = await GetDeviceThermostatPropertiesAsync(thermostat, sharedResult);
                if (thermostatResult.Exception != null)
                    return new GetStatusResult(thermostatResult.Error, thermostatResult.Exception);

                structureResult.Structures.ElementAt(0).Thermostats.Add(sharedResult.Thermostat);
            }
            return structureResult;
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\Services\NestWebService.cs
public async Task<GetStatusResult> GetStructureAndDeviceStatusAsync(Structure structure) {
            var structureResult = await GetStructureStatusAsync(structure);
            if (structureResult.Exception != null)
                return structureResult;

            foreach (var thermostat in structure.Thermostats) {
                GetThermostatStatusResult sharedResult = await GetSharedThermostatPropertiesAsync(thermostat);
                if (sharedResult.Exception != null)
                    return new GetStatusResult(sharedResult.Error, sharedResult.Exception);
                GetThermostatStatusResult thermostatResult = await GetDeviceThermostatPropertiesAsync(thermostat, sharedResult);
                if (thermostatResult.Exception != null)
                    return new GetStatusResult(thermostatResult.Error, thermostatResult.Exception);

                structureResult.Structures.ElementAt(0).Thermostats.Add(sharedResult.Thermostat);
            }
            return structureResult;
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\Services\NestWebService.cs
public async Task<GetStatusResult> GetStructureAndDeviceStatusAsync(Structure structure) {
            var structureResult = await GetStructureStatusAsync(structure);
            if (structureResult.Exception != null)
                return structureResult;

            foreach (var thermostat in structure.Thermostats) {
                GetThermostatStatusResult sharedResult = await GetSharedThermostatPropertiesAsync(thermostat);
                if (sharedResult.Exception != null)
                    return new GetStatusResult(sharedResult.Error, sharedResult.Exception);
                GetThermostatStatusResult thermostatResult = await GetDeviceThermostatPropertiesAsync(thermostat, sharedResult);
                if (thermostatResult.Exception != null)
                    return new GetStatusResult(thermostatResult.Error, thermostatResult.Exception);

                structureResult.Structures.ElementAt(0).Thermostats.Add(sharedResult.Thermostat);
            }
            return structureResult;
        }
-----------------------
LONGRUNNING True 0 System.IO.StreamWriter.Write(string) D:\CodeCorpus\WPApps\gep13+VBForums-Viewer\gep13-VBForums-Viewer-1b11a7a\Gep13.WindowsPhone.VBForumsMetro.Core\Web\VBForumsWebService.cs
TAPReplacable IsValidLoginCredential(LoginCredentialModel loginCredential)
public async Task<bool> IsValidLoginCredential(LoginCredentialModel loginCredential)
        {
            var uri = new Uri("http://www.vbforums.com/login.php?do=login");

            var postString =
                string.Format(
                    "do=login&url=%2Fusercp.php&vb_login_md5password=&vb_login_md5password_utf=&s=&securitytoken=guest&vb_login_username={0}&vb_login_password={1}",
                    loginCredential.UserName,
                    loginCredential.Password);

            var request = WebRequest.CreateHttp(uri);
            request.Method = "POST";
            request.ContentType = "application/x-www-form-urlencoded";

            var requestSteam = await request.GetRequestStreamAsync();

            using (var writer = new StreamWriter(requestSteam))
            {
                writer.Write(postString);
            }

            var response = (HttpWebResponse)await request.GetResponseAsync();
            var statusCode = response.StatusCode;

            if ((int)statusCode >= 400)
            {
                return false;
            }

            string responseString;
            using (var responseStream = new StreamReader(response.GetResponseStream()))
            {
                responseString = await responseStream.ReadToEndAsync();
            }

            return !responseString.Contains("<!-- main error message -->");
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamWriter.Write(string) D:\CodeCorpus\WPApps\gep13+VBForums-Viewer\gep13-VBForums-Viewer-1b11a7a\Gep13.WindowsPhone.VBForumsMetro.Core\Web\VBForumsWebService.cs
TAPReplacable GetProfileForUser(int memberId, LoginCredentialModel loginCredential)
public async Task<ProfileModel> GetProfileForUser(int memberId, LoginCredentialModel loginCredential)
        {
            var uri = new Uri("http://www.vbforums.com/login.php?do=login");

            var postString =
                string.Format(
                    "do=login&url=%2Fusercp.php&vb_login_md5password=&vb_login_md5password_utf=&s=&securitytoken=guest&vb_login_username={0}&vb_login_password={1}",
                    loginCredential.UserName,
                    loginCredential.Password);

            var cookieContainer = new CookieContainer();
            var request = WebRequest.CreateHttp(uri);
            request.Method = "POST";
            request.ContentType = "application/x-www-form-urlencoded";
            request.CookieContainer = cookieContainer;

            var requestSteam = await request.GetRequestStreamAsync();

            using (var writer = new StreamWriter(requestSteam))
            {
                writer.Write(postString);
            }

            var loginResponse = await request.GetResponseAsync();
            loginResponse.Close();

            uri = new Uri(string.Format("http://www.vbforums.com/member.php?u={0}", memberId));

            request = WebRequest.CreateHttp(uri);
            request.Method = "GET";
            request.CookieContainer = cookieContainer;

            var response = (HttpWebResponse)await request.GetResponseAsync();
            var statusCode = response.StatusCode;

            if ((int)statusCode >= 400)
            {
                return null;
            }     

            string responseString;
            using (var responseStream = new StreamReader(response.GetResponseStream()))
            {
                responseString = await responseStream.ReadToEndAsync();
            }

            var profile = new ProfileModel();

            // Example HTML that is being parsed at this point
            // <li><span class="shade">Join Date:</span> Nov 16th, 2004</li>
            var rx = new Regex("<li><span class=\"shade\">Join Date:</span> (.* [0-9]{1,2}).*, ([0-9]{2,4})</li>", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            var matches = rx.Matches(responseString);
            
            var joinDate = DateTime.MinValue;

            if (matches.Count != 1)
            {
                joinDate = DateTime.MaxValue;
            }
            else
            {
                var dateTimeString = string.Format(
                    "{0}, {1}", matches[0].Groups[1], matches[0].Groups[2]);

                if (!DateTime.TryParseExact(dateTimeString, "MMM d, yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out joinDate))
                {
                    joinDate = DateTime.MaxValue;
                }
            }

            profile.JoinDate = joinDate;

            // Example HTML that is being parsed at this point
            // <li><span class="shade">Posts Per Day:</span> 7.61</li>
            rx = new Regex("<li><span class=\"shade\">Posts Per Day:</span> (.*)</li>", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            matches = rx.Matches(responseString);
            var postsPerDay = 0d;

            if (matches.Count != 1)
            {
                postsPerDay = -1d;
            }
            else
            {
                if (!double.TryParse(matches[0].Groups[1].ToString(), out postsPerDay))
                {
                    postsPerDay = -1d;
                }
            }

            profile.PostsPerDay = postsPerDay;

            // Example HTML that is being parsed at this point
            // <li><span class="shade">Total Posts:</span> 21,358</li>
            rx = new Regex("<li><span class=\"shade\">Total Posts:</span> (.*)</li>", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            matches = rx.Matches(responseString);
            var posts = 0;

            if (matches.Count != 1)
            {
                posts = -1;
            }
            else
            {
                if (!int.TryParse(matches[0].Groups[1].ToString(), out posts))
                {
                    posts = -1;
                }
            }

            profile.Posts = posts;

            // Example HTML that is being parsed at this point
            // <td id="profilepic_cell" class="tborder alt2"><img src="image.php?u=53106&amp;dateline=1277553514&amp;type=profile"  width="64" height="64"  alt="gep13's Profile Picture" /></td>
            rx = new Regex("<td id=\"profilepic_cell\" class=\"tborder alt2\"><img src=\"(.*)\"", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            matches = rx.Matches(responseString);

            profile.ProfilePictureUrl = matches.Count != 1 ? null : new Uri(matches[0].ToString());

            // Example HTML that is being parsed at this point
            // <strong>Welcome, <a href="member.php?u=53106">gep13</a>.</strong><br />
            var pattern = string.Format("<strong>Welcome, <a href=\"member.php{0}u=.*\">(.*)</a>", Regex.Escape("?"));

            rx = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
            matches = rx.Matches(responseString);

            profile.UserName = matches.Count != 1 ? string.Empty : matches[0].Groups[1].ToString();

            return profile;
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamWriter.Write(string) D:\CodeCorpus\WPApps\gep13+VBForums-Viewer\gep13-VBForums-Viewer-1b11a7a\Gep13.WindowsPhone.VBForumsMetro.Core\Web\VBForumsWebService.cs
TAPReplacable GetMemberIdForUser(LoginCredentialModel loginCredential)
public async Task<int> GetMemberIdForUser(LoginCredentialModel loginCredential)
        {
            var uri = new Uri("http://www.vbforums.com/login.php?do=login");

            var postString =
                string.Format(
                    "do=login&url=%2Fusercp.php&vb_login_md5password=&vb_login_md5password_utf=&s=&securitytoken=guest&vb_login_username={0}&vb_login_password={1}",
                    loginCredential.UserName,
                    loginCredential.Password);

            var cookieContainer = new CookieContainer();
            var request = WebRequest.CreateHttp(uri);
            request.Method = "POST";
            request.ContentType = "application/x-www-form-urlencoded";
            request.CookieContainer = cookieContainer;

            var requestSteam = await request.GetRequestStreamAsync();

            using (var writer = new StreamWriter(requestSteam))
            {
                writer.Write(postString);
            }

            var loginResponse = await request.GetResponseAsync();
            loginResponse.Close();

            uri = new Uri("http://www.vbforums.com/usercp.php");

            request = WebRequest.CreateHttp(uri);
            request.Method = "GET";
            request.CookieContainer = cookieContainer;

            var response = (HttpWebResponse)await request.GetResponseAsync();
            var statusCode = response.StatusCode;

            if ((int)statusCode >= 400)
            {
                return 0;
            }

            string responseString;
            using (var responseStream = new StreamReader(response.GetResponseStream()))
            {
                responseString = await responseStream.ReadToEndAsync();
            }

            // Example HTML that is being parsed at this point
            // <strong>Welcome, <a href="member.php?u=53106">gep13</a>.</strong><br />
            var pattern = string.Format("<strong>Welcome, <a href=\"member.php{0}u=(.*)\"", Regex.Escape("?"));

            var rx = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
            var matches = rx.Matches(responseString);
            var memberId = 0;

            if (matches.Count != 1)
            {
                memberId = -1;
            }
            else
            {
                if (!int.TryParse(matches[0].Groups[1].ToString(), out memberId))
                {
                    memberId = -1;
                }
            }
            
            return memberId;
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\googleanalyticssdk\GoogleAnalytics.WP7\..\GoogleAnalytics.Common\GAServiceManager.cs
private async Task DispatchQueuedPayloads(IEnumerable<Payload> payloads)
        {
            using (var httpClient = GetHttpClient())
            {
                var now = DateTime.UtcNow;
                foreach (var payload in payloads)
                {
                    // clone the data
                    var payloadData = payload.Data.ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
                    payloadData.Add("qt", ((long)now.Subtract(payload.TimeStamp).TotalMilliseconds).ToString());
                    await DispatchPayloadData(payload, httpClient, payloadData);
                }
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\googleanalyticssdk\GoogleAnalytics.WP8\..\GoogleAnalytics.Common\GAServiceManager.cs
private async Task DispatchQueuedPayloads(IEnumerable<Payload> payloads)
        {
            using (var httpClient = GetHttpClient())
            {
                var now = DateTime.UtcNow;
                foreach (var payload in payloads)
                {
                    // clone the data
                    var payloadData = payload.Data.ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
                    payloadData.Add("qt", ((long)now.Subtract(payload.TimeStamp).TotalMilliseconds).ToString());
                    await DispatchPayloadData(payload, httpClient, payloadData);
                }
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\iFixit+ifixit-microsoft\iFixit-ifixit-microsoft-a045ba8\iFixit.WP8.UI\Services\UiUx.cs
public async Task OpenTextSpeechUI(Domain.ViewModels.Guide guideToRead)
        {
            ObservableCollection<GuideBasePage> pagesToRead = guideToRead.Items;

            SpeechSynthesizer synth = new SpeechSynthesizer();
            var voices = InstalledVoices.All.Where(o => o.Language.StartsWith("en"));
            synth.SetVoice(voices.First());

            guideToRead.BeingRead = true;


            if (guideToRead.SelectedPageIndex == 0)
            {
                var toRead = ((GuideIntro)pagesToRead[0]);
                if (!string.IsNullOrEmpty(toRead.Subject))
                {
                    task = synth.SpeakTextAsync(toRead.Subject);
                    await task;
                }
                if (!string.IsNullOrEmpty(toRead.Summary))
                {
                    task = synth.SpeakTextAsync(toRead.Summary);
                    await task;
                }

                guideToRead.SelectedPageIndex = 1;
            }


            for (int i = guideToRead.SelectedPageIndex; i < pagesToRead.Count; i++)
            {
                if (guideToRead.BeingRead == false)
                    break;

                guideToRead.SelectedPage = (GuideBasePage)pagesToRead[i];

                guideToRead.SelectedPageIndex = guideToRead.Items.IndexOf(guideToRead.SelectedPage);

                var item = (GuideStepItem)pagesToRead[i];
                int m = 0;

                foreach (var line in item.Lines)
                {
                    if (guideToRead.BeingRead == false)
                        break;

                    guideToRead.SelectedStepLine = m;
                    try
                    {
                        task = synth.SpeakTextAsync(line.VoiceText);
                        await task;
                    }
                    catch (Exception ex)
                    {

                        //  throw;
                    }
                    m++;
                }

            }

            guideToRead.BeingRead = false;

        }
-----------------------
LONGRUNNING False 1 System.IO.Stream.CopyTo(System.IO.Stream) D:\CodeCorpus\WPApps\isaacOjeda+Tareas\isaacOjeda-Tareas-2ecc716\Semana 3\LiveImages\LiveImages\LiveImages.ScheduledTask\ScheduledAgent.cs
TAPReplacable OnInvoke(ScheduledTask task)
private System.Threading.Tasks.Task<bool> DownloadNewImageTest()
        {
            var taskComplete = new System.Threading.Tasks.TaskCompletionSource<bool>();
            List<Image> allImages = StorageHelper.GetImagesAux();

            if (allImages.Count == 0)
            {
                taskComplete.TrySetResult(false);
                return taskComplete.Task;
            }
            Image pendingImage = allImages
                .Where(i => String.IsNullOrEmpty(i.UrlLocal))
                .First<Image>();



            string[] tokens = pendingImage.URL.Split('.');
            string extension = tokens[tokens.Length - 1];
            string[] fileName = tokens[tokens.Length - 2].Split('/');
            string file = fileName[fileName.Length - 1];

            // Si no es jpg o png no se descargarᡮada
            if (!extension.Equals("jpg") && !extension.Equals("png"))
            {
                allImages.Remove(pendingImage);
                StorageHelper.SaveImagesAux(allImages);
                taskComplete.TrySetResult(false);
                return taskComplete.Task;
            }

            Uri remote = new Uri(pendingImage.URL, UriKind.Absolute);
            Uri local = new Uri(String.Format("Shared/ShellContent/{0}.{1}", file, extension), UriKind.Relative);

            WebRequest request = HttpWebRequest.Create(remote.ToString());
            request.Method = "GET";
            request.BeginGetResponse((async) =>
                {
                    HttpWebRequest webRequest = (HttpWebRequest)async.AsyncState;
                    var response = webRequest.EndGetResponse(async);
                    using (var stream = response.GetResponseStream())
                    {
                        using (var isf = IsolatedStorageFile.GetUserStoreForApplication())
                        {
                            if(isf.FileExists(local.ToString()))
                            {
                                isf.DeleteFile(local.ToString());
                            }

                            using (var newFileStream = isf.CreateFile(local.ToString()))
                            {
                                stream.CopyTo(newFileStream);
                            }
                        }
                    }

                    allImages.Remove(pendingImage);
                    StorageHelper.SaveImagesAux(allImages);
                    pendingImage.UrlLocal = local.ToString();
                    
                    var downloadedImages = StorageHelper.GetImages();
                    if (downloadedImages.Count == 9)
                    {
                        var imageToDelete = downloadedImages.First();
                        downloadedImages.Remove(imageToDelete);
                    }

                    downloadedImages.Add(pendingImage);
                    StorageHelper.SaveImages(downloadedImages);
                    taskComplete.TrySetResult(true);

                },request);

            return  taskComplete.Task;
        }
--------------------------
LONGRUNNING False 2 System.IO.StreamWriter.Flush() D:\CodeCorpus\WPApps\jarvisji+kanboxwp\jarvisji-kanboxwp-acb86e8\kanboxwp\kanboxwp\AuthPage.xaml.cs
TAPReplacable wb_auth_Navigating(object sender, NavigatingEventArgs e)
private static void writeIsolatedStorageFile(string filename, object data)
        {
            IsolatedStorageFile isf = IsolatedStorageFile.GetUserStoreForApplication();
            if (isf.FileExists(filename))
            {
                isf.DeleteFile(filename);
            }
            using (var isfs = isf.CreateFile(filename))
            {
                StreamWriter sw = new StreamWriter(isfs);
                sw.WriteLine(JsonConvert.SerializeObject(data));
                sw.Flush();
                sw.Close();
            }
        }
--------------------------
LONGRUNNING False 4 System.IO.StreamReader.ReadLine() D:\CodeCorpus\WPApps\jarvisji+kanboxwp\jarvisji-kanboxwp-acb86e8\kanboxwp\kanboxwp\MainPage.xaml.cs
TAPReplacable lbMyKanbox_SelectionChanged(object sender, SelectionChangedEventArgs e)
private static object readIsolatedStorageFile<T>(string filename)
        {
            object ret = null;
            IsolatedStorageFile isf = IsolatedStorageFile.GetUserStoreForApplication();
            if (isf.FileExists(filename))
            {
                using (var isfs = isf.OpenFile(filename, FileMode.Open))
                {
                    StreamReader sr = new StreamReader(isfs);
                    ret = JsonConvert.DeserializeObject<T>(sr.ReadLine());
                    sr.Close();
                }
            }
            return ret;
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\jarvisji+kanboxwp\jarvisji-kanboxwp-acb86e8\kanboxwp\kanboxwp\Utils\FileUtil.cs
private static async Task<StorageFile> CreateFileInFolders(string fileName)
        {
            int lastPathSeperatorIndex = fileName.LastIndexOf("/");
            string fPath = null;
            string fName = fileName;
            if (lastPathSeperatorIndex >= 0)
            {
                fPath = fileName.Substring(0, lastPathSeperatorIndex);
                fName = fileName.Substring(lastPathSeperatorIndex + 1);
            }

            StorageFolder localFolder = ApplicationData.Current.LocalFolder;
            string[] pathes = fPath.Split('/');
            for (int i = 0; i < pathes.Length; i++)
            {
                if (!string.IsNullOrEmpty(pathes[i].Trim()))
                {
                    localFolder = await localFolder.CreateFolderAsync(pathes[i], CreationCollisionOption.OpenIfExists);
                }
            }
            StorageFile localFile = await localFolder.CreateFileAsync(fName, CreationCollisionOption.ReplaceExisting);
            return localFile;
        }
-----------------------
LONGRUNNING False 1 System.Xml.XmlWriter.WriteProcessingInstruction(string, string) D:\CodeCorpus\WPApps\jhalbrecht+Walker-Wp8\jhalbrecht-Walker-Wp8-df5fc58\Walker\Walker.Wp8\Service\WalkerDataService.cs
TAPReplacable ToggleActivity()
public string ToGpx()
        {
            const string gpx = "http://www.topografix.com/GPX/1/1";
            StringBuilder sb = new StringBuilder();
            using (XmlWriter writer = XmlWriter.Create(sb))
            {
                writer.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"utf-8\"");

                writer.WriteStartElement("gpx", gpx);
                writer.WriteAttributeString("version", "1.1");
                writer.WriteAttributeString("creator", "Walker");

                writer.WriteAttributeString("xmlns", "xsd", null, "http://www.w3.org/2001/XMLSchema");
                writer.WriteAttributeString("xmlns", "xsi", null, "http://www.w3.org/2001/XMLSchema-instance");

                //Bounds b = CalculateBounds();
                //writer.WriteStartElement("bounds", gpx);
                //writer.WriteAttributeString("minlat", XmlConvert.ToString(b.MinLat));
                //writer.WriteAttributeString("maxlat", XmlConvert.ToString(b.MaxLat));
                //writer.WriteAttributeString("minlon", XmlConvert.ToString(b.MinLon));
                //writer.WriteAttributeString("maxlon", XmlConvert.ToString(b.MaxLon));

                writer.WriteStartElement("trk", gpx);
                writer.WriteStartElement("name", gpx);
                // writer.WriteValue(Name);
                writer.WriteValue("TrackName");
                writer.WriteEndElement();

                writer.WriteStartElement("trkseg", gpx);
                // foreach (TrackPoint p in Points)
                foreach (var p in Geos)
                {
                    writer.WriteStartElement("trkpt", gpx);
                    writer.WriteAttributeString("lat", XmlConvert.ToString(p.Latitude));
                    writer.WriteAttributeString("lon", XmlConvert.ToString(p.Longitude));
                    writer.WriteStartElement("ele", gpx);
                    writer.WriteValue(XmlConvert.ToString(p.Altitude));
                    writer.WriteEndElement();
                    // writer.WriteStartElement("time", gpx);
                    // writer.WriteValue(p. Time.ToString("s") + "Z");
                    // writer.WriteEndElement();
                    writer.WriteEndElement();
                }

                writer.WriteEndElement();
            }
            return sb.ToString();
        }
--------------------------
LONGRUNNING False 1 System.Xml.XmlWriter.WriteStartElement(string, string) D:\CodeCorpus\WPApps\jhalbrecht+Walker-Wp8\jhalbrecht-Walker-Wp8-df5fc58\Walker\Walker.Wp8\Service\WalkerDataService.cs
TAPReplacable ToggleActivity()
public string ToGpx()
        {
            const string gpx = "http://www.topografix.com/GPX/1/1";
            StringBuilder sb = new StringBuilder();
            using (XmlWriter writer = XmlWriter.Create(sb))
            {
                writer.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"utf-8\"");

                writer.WriteStartElement("gpx", gpx);
                writer.WriteAttributeString("version", "1.1");
                writer.WriteAttributeString("creator", "Walker");

                writer.WriteAttributeString("xmlns", "xsd", null, "http://www.w3.org/2001/XMLSchema");
                writer.WriteAttributeString("xmlns", "xsi", null, "http://www.w3.org/2001/XMLSchema-instance");

                //Bounds b = CalculateBounds();
                //writer.WriteStartElement("bounds", gpx);
                //writer.WriteAttributeString("minlat", XmlConvert.ToString(b.MinLat));
                //writer.WriteAttributeString("maxlat", XmlConvert.ToString(b.MaxLat));
                //writer.WriteAttributeString("minlon", XmlConvert.ToString(b.MinLon));
                //writer.WriteAttributeString("maxlon", XmlConvert.ToString(b.MaxLon));

                writer.WriteStartElement("trk", gpx);
                writer.WriteStartElement("name", gpx);
                // writer.WriteValue(Name);
                writer.WriteValue("TrackName");
                writer.WriteEndElement();

                writer.WriteStartElement("trkseg", gpx);
                // foreach (TrackPoint p in Points)
                foreach (var p in Geos)
                {
                    writer.WriteStartElement("trkpt", gpx);
                    writer.WriteAttributeString("lat", XmlConvert.ToString(p.Latitude));
                    writer.WriteAttributeString("lon", XmlConvert.ToString(p.Longitude));
                    writer.WriteStartElement("ele", gpx);
                    writer.WriteValue(XmlConvert.ToString(p.Altitude));
                    writer.WriteEndElement();
                    // writer.WriteStartElement("time", gpx);
                    // writer.WriteValue(p. Time.ToString("s") + "Z");
                    // writer.WriteEndElement();
                    writer.WriteEndElement();
                }

                writer.WriteEndElement();
            }
            return sb.ToString();
        }
--------------------------
LONGRUNNING False 1 System.Xml.XmlWriter.WriteAttributeString(string, string) D:\CodeCorpus\WPApps\jhalbrecht+Walker-Wp8\jhalbrecht-Walker-Wp8-df5fc58\Walker\Walker.Wp8\Service\WalkerDataService.cs
TAPReplacable ToggleActivity()
public string ToGpx()
        {
            const string gpx = "http://www.topografix.com/GPX/1/1";
            StringBuilder sb = new StringBuilder();
            using (XmlWriter writer = XmlWriter.Create(sb))
            {
                writer.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"utf-8\"");

                writer.WriteStartElement("gpx", gpx);
                writer.WriteAttributeString("version", "1.1");
                writer.WriteAttributeString("creator", "Walker");

                writer.WriteAttributeString("xmlns", "xsd", null, "http://www.w3.org/2001/XMLSchema");
                writer.WriteAttributeString("xmlns", "xsi", null, "http://www.w3.org/2001/XMLSchema-instance");

                //Bounds b = CalculateBounds();
                //writer.WriteStartElement("bounds", gpx);
                //writer.WriteAttributeString("minlat", XmlConvert.ToString(b.MinLat));
                //writer.WriteAttributeString("maxlat", XmlConvert.ToString(b.MaxLat));
                //writer.WriteAttributeString("minlon", XmlConvert.ToString(b.MinLon));
                //writer.WriteAttributeString("maxlon", XmlConvert.ToString(b.MaxLon));

                writer.WriteStartElement("trk", gpx);
                writer.WriteStartElement("name", gpx);
                // writer.WriteValue(Name);
                writer.WriteValue("TrackName");
                writer.WriteEndElement();

                writer.WriteStartElement("trkseg", gpx);
                // foreach (TrackPoint p in Points)
                foreach (var p in Geos)
                {
                    writer.WriteStartElement("trkpt", gpx);
                    writer.WriteAttributeString("lat", XmlConvert.ToString(p.Latitude));
                    writer.WriteAttributeString("lon", XmlConvert.ToString(p.Longitude));
                    writer.WriteStartElement("ele", gpx);
                    writer.WriteValue(XmlConvert.ToString(p.Altitude));
                    writer.WriteEndElement();
                    // writer.WriteStartElement("time", gpx);
                    // writer.WriteValue(p. Time.ToString("s") + "Z");
                    // writer.WriteEndElement();
                    writer.WriteEndElement();
                }

                writer.WriteEndElement();
            }
            return sb.ToString();
        }
--------------------------
LONGRUNNING False 1 System.Xml.XmlWriter.WriteAttributeString(string, string) D:\CodeCorpus\WPApps\jhalbrecht+Walker-Wp8\jhalbrecht-Walker-Wp8-df5fc58\Walker\Walker.Wp8\Service\WalkerDataService.cs
TAPReplacable ToggleActivity()
public string ToGpx()
        {
            const string gpx = "http://www.topografix.com/GPX/1/1";
            StringBuilder sb = new StringBuilder();
            using (XmlWriter writer = XmlWriter.Create(sb))
            {
                writer.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"utf-8\"");

                writer.WriteStartElement("gpx", gpx);
                writer.WriteAttributeString("version", "1.1");
                writer.WriteAttributeString("creator", "Walker");

                writer.WriteAttributeString("xmlns", "xsd", null, "http://www.w3.org/2001/XMLSchema");
                writer.WriteAttributeString("xmlns", "xsi", null, "http://www.w3.org/2001/XMLSchema-instance");

                //Bounds b = CalculateBounds();
                //writer.WriteStartElement("bounds", gpx);
                //writer.WriteAttributeString("minlat", XmlConvert.ToString(b.MinLat));
                //writer.WriteAttributeString("maxlat", XmlConvert.ToString(b.MaxLat));
                //writer.WriteAttributeString("minlon", XmlConvert.ToString(b.MinLon));
                //writer.WriteAttributeString("maxlon", XmlConvert.ToString(b.MaxLon));

                writer.WriteStartElement("trk", gpx);
                writer.WriteStartElement("name", gpx);
                // writer.WriteValue(Name);
                writer.WriteValue("TrackName");
                writer.WriteEndElement();

                writer.WriteStartElement("trkseg", gpx);
                // foreach (TrackPoint p in Points)
                foreach (var p in Geos)
                {
                    writer.WriteStartElement("trkpt", gpx);
                    writer.WriteAttributeString("lat", XmlConvert.ToString(p.Latitude));
                    writer.WriteAttributeString("lon", XmlConvert.ToString(p.Longitude));
                    writer.WriteStartElement("ele", gpx);
                    writer.WriteValue(XmlConvert.ToString(p.Altitude));
                    writer.WriteEndElement();
                    // writer.WriteStartElement("time", gpx);
                    // writer.WriteValue(p. Time.ToString("s") + "Z");
                    // writer.WriteEndElement();
                    writer.WriteEndElement();
                }

                writer.WriteEndElement();
            }
            return sb.ToString();
        }
--------------------------
LONGRUNNING False 1 System.Xml.XmlWriter.WriteAttributeString(string, string, string, string) D:\CodeCorpus\WPApps\jhalbrecht+Walker-Wp8\jhalbrecht-Walker-Wp8-df5fc58\Walker\Walker.Wp8\Service\WalkerDataService.cs
TAPReplacable ToggleActivity()
public string ToGpx()
        {
            const string gpx = "http://www.topografix.com/GPX/1/1";
            StringBuilder sb = new StringBuilder();
            using (XmlWriter writer = XmlWriter.Create(sb))
            {
                writer.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"utf-8\"");

                writer.WriteStartElement("gpx", gpx);
                writer.WriteAttributeString("version", "1.1");
                writer.WriteAttributeString("creator", "Walker");

                writer.WriteAttributeString("xmlns", "xsd", null, "http://www.w3.org/2001/XMLSchema");
                writer.WriteAttributeString("xmlns", "xsi", null, "http://www.w3.org/2001/XMLSchema-instance");

                //Bounds b = CalculateBounds();
                //writer.WriteStartElement("bounds", gpx);
                //writer.WriteAttributeString("minlat", XmlConvert.ToString(b.MinLat));
                //writer.WriteAttributeString("maxlat", XmlConvert.ToString(b.MaxLat));
                //writer.WriteAttributeString("minlon", XmlConvert.ToString(b.MinLon));
                //writer.WriteAttributeString("maxlon", XmlConvert.ToString(b.MaxLon));

                writer.WriteStartElement("trk", gpx);
                writer.WriteStartElement("name", gpx);
                // writer.WriteValue(Name);
                writer.WriteValue("TrackName");
                writer.WriteEndElement();

                writer.WriteStartElement("trkseg", gpx);
                // foreach (TrackPoint p in Points)
                foreach (var p in Geos)
                {
                    writer.WriteStartElement("trkpt", gpx);
                    writer.WriteAttributeString("lat", XmlConvert.ToString(p.Latitude));
                    writer.WriteAttributeString("lon", XmlConvert.ToString(p.Longitude));
                    writer.WriteStartElement("ele", gpx);
                    writer.WriteValue(XmlConvert.ToString(p.Altitude));
                    writer.WriteEndElement();
                    // writer.WriteStartElement("time", gpx);
                    // writer.WriteValue(p. Time.ToString("s") + "Z");
                    // writer.WriteEndElement();
                    writer.WriteEndElement();
                }

                writer.WriteEndElement();
            }
            return sb.ToString();
        }
--------------------------
LONGRUNNING False 1 System.Xml.XmlWriter.WriteAttributeString(string, string, string, string) D:\CodeCorpus\WPApps\jhalbrecht+Walker-Wp8\jhalbrecht-Walker-Wp8-df5fc58\Walker\Walker.Wp8\Service\WalkerDataService.cs
TAPReplacable ToggleActivity()
public string ToGpx()
        {
            const string gpx = "http://www.topografix.com/GPX/1/1";
            StringBuilder sb = new StringBuilder();
            using (XmlWriter writer = XmlWriter.Create(sb))
            {
                writer.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"utf-8\"");

                writer.WriteStartElement("gpx", gpx);
                writer.WriteAttributeString("version", "1.1");
                writer.WriteAttributeString("creator", "Walker");

                writer.WriteAttributeString("xmlns", "xsd", null, "http://www.w3.org/2001/XMLSchema");
                writer.WriteAttributeString("xmlns", "xsi", null, "http://www.w3.org/2001/XMLSchema-instance");

                //Bounds b = CalculateBounds();
                //writer.WriteStartElement("bounds", gpx);
                //writer.WriteAttributeString("minlat", XmlConvert.ToString(b.MinLat));
                //writer.WriteAttributeString("maxlat", XmlConvert.ToString(b.MaxLat));
                //writer.WriteAttributeString("minlon", XmlConvert.ToString(b.MinLon));
                //writer.WriteAttributeString("maxlon", XmlConvert.ToString(b.MaxLon));

                writer.WriteStartElement("trk", gpx);
                writer.WriteStartElement("name", gpx);
                // writer.WriteValue(Name);
                writer.WriteValue("TrackName");
                writer.WriteEndElement();

                writer.WriteStartElement("trkseg", gpx);
                // foreach (TrackPoint p in Points)
                foreach (var p in Geos)
                {
                    writer.WriteStartElement("trkpt", gpx);
                    writer.WriteAttributeString("lat", XmlConvert.ToString(p.Latitude));
                    writer.WriteAttributeString("lon", XmlConvert.ToString(p.Longitude));
                    writer.WriteStartElement("ele", gpx);
                    writer.WriteValue(XmlConvert.ToString(p.Altitude));
                    writer.WriteEndElement();
                    // writer.WriteStartElement("time", gpx);
                    // writer.WriteValue(p. Time.ToString("s") + "Z");
                    // writer.WriteEndElement();
                    writer.WriteEndElement();
                }

                writer.WriteEndElement();
            }
            return sb.ToString();
        }
--------------------------
LONGRUNNING False 1 System.Xml.XmlWriter.WriteStartElement(string, string) D:\CodeCorpus\WPApps\jhalbrecht+Walker-Wp8\jhalbrecht-Walker-Wp8-df5fc58\Walker\Walker.Wp8\Service\WalkerDataService.cs
TAPReplacable ToggleActivity()
public string ToGpx()
        {
            const string gpx = "http://www.topografix.com/GPX/1/1";
            StringBuilder sb = new StringBuilder();
            using (XmlWriter writer = XmlWriter.Create(sb))
            {
                writer.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"utf-8\"");

                writer.WriteStartElement("gpx", gpx);
                writer.WriteAttributeString("version", "1.1");
                writer.WriteAttributeString("creator", "Walker");

                writer.WriteAttributeString("xmlns", "xsd", null, "http://www.w3.org/2001/XMLSchema");
                writer.WriteAttributeString("xmlns", "xsi", null, "http://www.w3.org/2001/XMLSchema-instance");

                //Bounds b = CalculateBounds();
                //writer.WriteStartElement("bounds", gpx);
                //writer.WriteAttributeString("minlat", XmlConvert.ToString(b.MinLat));
                //writer.WriteAttributeString("maxlat", XmlConvert.ToString(b.MaxLat));
                //writer.WriteAttributeString("minlon", XmlConvert.ToString(b.MinLon));
                //writer.WriteAttributeString("maxlon", XmlConvert.ToString(b.MaxLon));

                writer.WriteStartElement("trk", gpx);
                writer.WriteStartElement("name", gpx);
                // writer.WriteValue(Name);
                writer.WriteValue("TrackName");
                writer.WriteEndElement();

                writer.WriteStartElement("trkseg", gpx);
                // foreach (TrackPoint p in Points)
                foreach (var p in Geos)
                {
                    writer.WriteStartElement("trkpt", gpx);
                    writer.WriteAttributeString("lat", XmlConvert.ToString(p.Latitude));
                    writer.WriteAttributeString("lon", XmlConvert.ToString(p.Longitude));
                    writer.WriteStartElement("ele", gpx);
                    writer.WriteValue(XmlConvert.ToString(p.Altitude));
                    writer.WriteEndElement();
                    // writer.WriteStartElement("time", gpx);
                    // writer.WriteValue(p. Time.ToString("s") + "Z");
                    // writer.WriteEndElement();
                    writer.WriteEndElement();
                }

                writer.WriteEndElement();
            }
            return sb.ToString();
        }
--------------------------
LONGRUNNING False 1 System.Xml.XmlWriter.WriteStartElement(string, string) D:\CodeCorpus\WPApps\jhalbrecht+Walker-Wp8\jhalbrecht-Walker-Wp8-df5fc58\Walker\Walker.Wp8\Service\WalkerDataService.cs
TAPReplacable ToggleActivity()
public string ToGpx()
        {
            const string gpx = "http://www.topografix.com/GPX/1/1";
            StringBuilder sb = new StringBuilder();
            using (XmlWriter writer = XmlWriter.Create(sb))
            {
                writer.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"utf-8\"");

                writer.WriteStartElement("gpx", gpx);
                writer.WriteAttributeString("version", "1.1");
                writer.WriteAttributeString("creator", "Walker");

                writer.WriteAttributeString("xmlns", "xsd", null, "http://www.w3.org/2001/XMLSchema");
                writer.WriteAttributeString("xmlns", "xsi", null, "http://www.w3.org/2001/XMLSchema-instance");

                //Bounds b = CalculateBounds();
                //writer.WriteStartElement("bounds", gpx);
                //writer.WriteAttributeString("minlat", XmlConvert.ToString(b.MinLat));
                //writer.WriteAttributeString("maxlat", XmlConvert.ToString(b.MaxLat));
                //writer.WriteAttributeString("minlon", XmlConvert.ToString(b.MinLon));
                //writer.WriteAttributeString("maxlon", XmlConvert.ToString(b.MaxLon));

                writer.WriteStartElement("trk", gpx);
                writer.WriteStartElement("name", gpx);
                // writer.WriteValue(Name);
                writer.WriteValue("TrackName");
                writer.WriteEndElement();

                writer.WriteStartElement("trkseg", gpx);
                // foreach (TrackPoint p in Points)
                foreach (var p in Geos)
                {
                    writer.WriteStartElement("trkpt", gpx);
                    writer.WriteAttributeString("lat", XmlConvert.ToString(p.Latitude));
                    writer.WriteAttributeString("lon", XmlConvert.ToString(p.Longitude));
                    writer.WriteStartElement("ele", gpx);
                    writer.WriteValue(XmlConvert.ToString(p.Altitude));
                    writer.WriteEndElement();
                    // writer.WriteStartElement("time", gpx);
                    // writer.WriteValue(p. Time.ToString("s") + "Z");
                    // writer.WriteEndElement();
                    writer.WriteEndElement();
                }

                writer.WriteEndElement();
            }
            return sb.ToString();
        }
--------------------------
LONGRUNNING False 1 System.Xml.XmlWriter.WriteEndElement() D:\CodeCorpus\WPApps\jhalbrecht+Walker-Wp8\jhalbrecht-Walker-Wp8-df5fc58\Walker\Walker.Wp8\Service\WalkerDataService.cs
TAPReplacable ToggleActivity()
public string ToGpx()
        {
            const string gpx = "http://www.topografix.com/GPX/1/1";
            StringBuilder sb = new StringBuilder();
            using (XmlWriter writer = XmlWriter.Create(sb))
            {
                writer.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"utf-8\"");

                writer.WriteStartElement("gpx", gpx);
                writer.WriteAttributeString("version", "1.1");
                writer.WriteAttributeString("creator", "Walker");

                writer.WriteAttributeString("xmlns", "xsd", null, "http://www.w3.org/2001/XMLSchema");
                writer.WriteAttributeString("xmlns", "xsi", null, "http://www.w3.org/2001/XMLSchema-instance");

                //Bounds b = CalculateBounds();
                //writer.WriteStartElement("bounds", gpx);
                //writer.WriteAttributeString("minlat", XmlConvert.ToString(b.MinLat));
                //writer.WriteAttributeString("maxlat", XmlConvert.ToString(b.MaxLat));
                //writer.WriteAttributeString("minlon", XmlConvert.ToString(b.MinLon));
                //writer.WriteAttributeString("maxlon", XmlConvert.ToString(b.MaxLon));

                writer.WriteStartElement("trk", gpx);
                writer.WriteStartElement("name", gpx);
                // writer.WriteValue(Name);
                writer.WriteValue("TrackName");
                writer.WriteEndElement();

                writer.WriteStartElement("trkseg", gpx);
                // foreach (TrackPoint p in Points)
                foreach (var p in Geos)
                {
                    writer.WriteStartElement("trkpt", gpx);
                    writer.WriteAttributeString("lat", XmlConvert.ToString(p.Latitude));
                    writer.WriteAttributeString("lon", XmlConvert.ToString(p.Longitude));
                    writer.WriteStartElement("ele", gpx);
                    writer.WriteValue(XmlConvert.ToString(p.Altitude));
                    writer.WriteEndElement();
                    // writer.WriteStartElement("time", gpx);
                    // writer.WriteValue(p. Time.ToString("s") + "Z");
                    // writer.WriteEndElement();
                    writer.WriteEndElement();
                }

                writer.WriteEndElement();
            }
            return sb.ToString();
        }
--------------------------
LONGRUNNING False 1 System.Xml.XmlWriter.WriteStartElement(string, string) D:\CodeCorpus\WPApps\jhalbrecht+Walker-Wp8\jhalbrecht-Walker-Wp8-df5fc58\Walker\Walker.Wp8\Service\WalkerDataService.cs
TAPReplacable ToggleActivity()
public string ToGpx()
        {
            const string gpx = "http://www.topografix.com/GPX/1/1";
            StringBuilder sb = new StringBuilder();
            using (XmlWriter writer = XmlWriter.Create(sb))
            {
                writer.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"utf-8\"");

                writer.WriteStartElement("gpx", gpx);
                writer.WriteAttributeString("version", "1.1");
                writer.WriteAttributeString("creator", "Walker");

                writer.WriteAttributeString("xmlns", "xsd", null, "http://www.w3.org/2001/XMLSchema");
                writer.WriteAttributeString("xmlns", "xsi", null, "http://www.w3.org/2001/XMLSchema-instance");

                //Bounds b = CalculateBounds();
                //writer.WriteStartElement("bounds", gpx);
                //writer.WriteAttributeString("minlat", XmlConvert.ToString(b.MinLat));
                //writer.WriteAttributeString("maxlat", XmlConvert.ToString(b.MaxLat));
                //writer.WriteAttributeString("minlon", XmlConvert.ToString(b.MinLon));
                //writer.WriteAttributeString("maxlon", XmlConvert.ToString(b.MaxLon));

                writer.WriteStartElement("trk", gpx);
                writer.WriteStartElement("name", gpx);
                // writer.WriteValue(Name);
                writer.WriteValue("TrackName");
                writer.WriteEndElement();

                writer.WriteStartElement("trkseg", gpx);
                // foreach (TrackPoint p in Points)
                foreach (var p in Geos)
                {
                    writer.WriteStartElement("trkpt", gpx);
                    writer.WriteAttributeString("lat", XmlConvert.ToString(p.Latitude));
                    writer.WriteAttributeString("lon", XmlConvert.ToString(p.Longitude));
                    writer.WriteStartElement("ele", gpx);
                    writer.WriteValue(XmlConvert.ToString(p.Altitude));
                    writer.WriteEndElement();
                    // writer.WriteStartElement("time", gpx);
                    // writer.WriteValue(p. Time.ToString("s") + "Z");
                    // writer.WriteEndElement();
                    writer.WriteEndElement();
                }

                writer.WriteEndElement();
            }
            return sb.ToString();
        }
--------------------------
LONGRUNNING False 1 System.Xml.XmlWriter.WriteStartElement(string, string) D:\CodeCorpus\WPApps\jhalbrecht+Walker-Wp8\jhalbrecht-Walker-Wp8-df5fc58\Walker\Walker.Wp8\Service\WalkerDataService.cs
TAPReplacable ToggleActivity()
public string ToGpx()
        {
            const string gpx = "http://www.topografix.com/GPX/1/1";
            StringBuilder sb = new StringBuilder();
            using (XmlWriter writer = XmlWriter.Create(sb))
            {
                writer.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"utf-8\"");

                writer.WriteStartElement("gpx", gpx);
                writer.WriteAttributeString("version", "1.1");
                writer.WriteAttributeString("creator", "Walker");

                writer.WriteAttributeString("xmlns", "xsd", null, "http://www.w3.org/2001/XMLSchema");
                writer.WriteAttributeString("xmlns", "xsi", null, "http://www.w3.org/2001/XMLSchema-instance");

                //Bounds b = CalculateBounds();
                //writer.WriteStartElement("bounds", gpx);
                //writer.WriteAttributeString("minlat", XmlConvert.ToString(b.MinLat));
                //writer.WriteAttributeString("maxlat", XmlConvert.ToString(b.MaxLat));
                //writer.WriteAttributeString("minlon", XmlConvert.ToString(b.MinLon));
                //writer.WriteAttributeString("maxlon", XmlConvert.ToString(b.MaxLon));

                writer.WriteStartElement("trk", gpx);
                writer.WriteStartElement("name", gpx);
                // writer.WriteValue(Name);
                writer.WriteValue("TrackName");
                writer.WriteEndElement();

                writer.WriteStartElement("trkseg", gpx);
                // foreach (TrackPoint p in Points)
                foreach (var p in Geos)
                {
                    writer.WriteStartElement("trkpt", gpx);
                    writer.WriteAttributeString("lat", XmlConvert.ToString(p.Latitude));
                    writer.WriteAttributeString("lon", XmlConvert.ToString(p.Longitude));
                    writer.WriteStartElement("ele", gpx);
                    writer.WriteValue(XmlConvert.ToString(p.Altitude));
                    writer.WriteEndElement();
                    // writer.WriteStartElement("time", gpx);
                    // writer.WriteValue(p. Time.ToString("s") + "Z");
                    // writer.WriteEndElement();
                    writer.WriteEndElement();
                }

                writer.WriteEndElement();
            }
            return sb.ToString();
        }
--------------------------
LONGRUNNING False 1 System.Xml.XmlWriter.WriteAttributeString(string, string) D:\CodeCorpus\WPApps\jhalbrecht+Walker-Wp8\jhalbrecht-Walker-Wp8-df5fc58\Walker\Walker.Wp8\Service\WalkerDataService.cs
TAPReplacable ToggleActivity()
public string ToGpx()
        {
            const string gpx = "http://www.topografix.com/GPX/1/1";
            StringBuilder sb = new StringBuilder();
            using (XmlWriter writer = XmlWriter.Create(sb))
            {
                writer.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"utf-8\"");

                writer.WriteStartElement("gpx", gpx);
                writer.WriteAttributeString("version", "1.1");
                writer.WriteAttributeString("creator", "Walker");

                writer.WriteAttributeString("xmlns", "xsd", null, "http://www.w3.org/2001/XMLSchema");
                writer.WriteAttributeString("xmlns", "xsi", null, "http://www.w3.org/2001/XMLSchema-instance");

                //Bounds b = CalculateBounds();
                //writer.WriteStartElement("bounds", gpx);
                //writer.WriteAttributeString("minlat", XmlConvert.ToString(b.MinLat));
                //writer.WriteAttributeString("maxlat", XmlConvert.ToString(b.MaxLat));
                //writer.WriteAttributeString("minlon", XmlConvert.ToString(b.MinLon));
                //writer.WriteAttributeString("maxlon", XmlConvert.ToString(b.MaxLon));

                writer.WriteStartElement("trk", gpx);
                writer.WriteStartElement("name", gpx);
                // writer.WriteValue(Name);
                writer.WriteValue("TrackName");
                writer.WriteEndElement();

                writer.WriteStartElement("trkseg", gpx);
                // foreach (TrackPoint p in Points)
                foreach (var p in Geos)
                {
                    writer.WriteStartElement("trkpt", gpx);
                    writer.WriteAttributeString("lat", XmlConvert.ToString(p.Latitude));
                    writer.WriteAttributeString("lon", XmlConvert.ToString(p.Longitude));
                    writer.WriteStartElement("ele", gpx);
                    writer.WriteValue(XmlConvert.ToString(p.Altitude));
                    writer.WriteEndElement();
                    // writer.WriteStartElement("time", gpx);
                    // writer.WriteValue(p. Time.ToString("s") + "Z");
                    // writer.WriteEndElement();
                    writer.WriteEndElement();
                }

                writer.WriteEndElement();
            }
            return sb.ToString();
        }
--------------------------
LONGRUNNING False 1 System.Xml.XmlWriter.WriteAttributeString(string, string) D:\CodeCorpus\WPApps\jhalbrecht+Walker-Wp8\jhalbrecht-Walker-Wp8-df5fc58\Walker\Walker.Wp8\Service\WalkerDataService.cs
TAPReplacable ToggleActivity()
public string ToGpx()
        {
            const string gpx = "http://www.topografix.com/GPX/1/1";
            StringBuilder sb = new StringBuilder();
            using (XmlWriter writer = XmlWriter.Create(sb))
            {
                writer.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"utf-8\"");

                writer.WriteStartElement("gpx", gpx);
                writer.WriteAttributeString("version", "1.1");
                writer.WriteAttributeString("creator", "Walker");

                writer.WriteAttributeString("xmlns", "xsd", null, "http://www.w3.org/2001/XMLSchema");
                writer.WriteAttributeString("xmlns", "xsi", null, "http://www.w3.org/2001/XMLSchema-instance");

                //Bounds b = CalculateBounds();
                //writer.WriteStartElement("bounds", gpx);
                //writer.WriteAttributeString("minlat", XmlConvert.ToString(b.MinLat));
                //writer.WriteAttributeString("maxlat", XmlConvert.ToString(b.MaxLat));
                //writer.WriteAttributeString("minlon", XmlConvert.ToString(b.MinLon));
                //writer.WriteAttributeString("maxlon", XmlConvert.ToString(b.MaxLon));

                writer.WriteStartElement("trk", gpx);
                writer.WriteStartElement("name", gpx);
                // writer.WriteValue(Name);
                writer.WriteValue("TrackName");
                writer.WriteEndElement();

                writer.WriteStartElement("trkseg", gpx);
                // foreach (TrackPoint p in Points)
                foreach (var p in Geos)
                {
                    writer.WriteStartElement("trkpt", gpx);
                    writer.WriteAttributeString("lat", XmlConvert.ToString(p.Latitude));
                    writer.WriteAttributeString("lon", XmlConvert.ToString(p.Longitude));
                    writer.WriteStartElement("ele", gpx);
                    writer.WriteValue(XmlConvert.ToString(p.Altitude));
                    writer.WriteEndElement();
                    // writer.WriteStartElement("time", gpx);
                    // writer.WriteValue(p. Time.ToString("s") + "Z");
                    // writer.WriteEndElement();
                    writer.WriteEndElement();
                }

                writer.WriteEndElement();
            }
            return sb.ToString();
        }
--------------------------
LONGRUNNING False 1 System.Xml.XmlWriter.WriteStartElement(string, string) D:\CodeCorpus\WPApps\jhalbrecht+Walker-Wp8\jhalbrecht-Walker-Wp8-df5fc58\Walker\Walker.Wp8\Service\WalkerDataService.cs
TAPReplacable ToggleActivity()
public string ToGpx()
        {
            const string gpx = "http://www.topografix.com/GPX/1/1";
            StringBuilder sb = new StringBuilder();
            using (XmlWriter writer = XmlWriter.Create(sb))
            {
                writer.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"utf-8\"");

                writer.WriteStartElement("gpx", gpx);
                writer.WriteAttributeString("version", "1.1");
                writer.WriteAttributeString("creator", "Walker");

                writer.WriteAttributeString("xmlns", "xsd", null, "http://www.w3.org/2001/XMLSchema");
                writer.WriteAttributeString("xmlns", "xsi", null, "http://www.w3.org/2001/XMLSchema-instance");

                //Bounds b = CalculateBounds();
                //writer.WriteStartElement("bounds", gpx);
                //writer.WriteAttributeString("minlat", XmlConvert.ToString(b.MinLat));
                //writer.WriteAttributeString("maxlat", XmlConvert.ToString(b.MaxLat));
                //writer.WriteAttributeString("minlon", XmlConvert.ToString(b.MinLon));
                //writer.WriteAttributeString("maxlon", XmlConvert.ToString(b.MaxLon));

                writer.WriteStartElement("trk", gpx);
                writer.WriteStartElement("name", gpx);
                // writer.WriteValue(Name);
                writer.WriteValue("TrackName");
                writer.WriteEndElement();

                writer.WriteStartElement("trkseg", gpx);
                // foreach (TrackPoint p in Points)
                foreach (var p in Geos)
                {
                    writer.WriteStartElement("trkpt", gpx);
                    writer.WriteAttributeString("lat", XmlConvert.ToString(p.Latitude));
                    writer.WriteAttributeString("lon", XmlConvert.ToString(p.Longitude));
                    writer.WriteStartElement("ele", gpx);
                    writer.WriteValue(XmlConvert.ToString(p.Altitude));
                    writer.WriteEndElement();
                    // writer.WriteStartElement("time", gpx);
                    // writer.WriteValue(p. Time.ToString("s") + "Z");
                    // writer.WriteEndElement();
                    writer.WriteEndElement();
                }

                writer.WriteEndElement();
            }
            return sb.ToString();
        }
--------------------------
LONGRUNNING False 1 System.Xml.XmlWriter.WriteEndElement() D:\CodeCorpus\WPApps\jhalbrecht+Walker-Wp8\jhalbrecht-Walker-Wp8-df5fc58\Walker\Walker.Wp8\Service\WalkerDataService.cs
TAPReplacable ToggleActivity()
public string ToGpx()
        {
            const string gpx = "http://www.topografix.com/GPX/1/1";
            StringBuilder sb = new StringBuilder();
            using (XmlWriter writer = XmlWriter.Create(sb))
            {
                writer.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"utf-8\"");

                writer.WriteStartElement("gpx", gpx);
                writer.WriteAttributeString("version", "1.1");
                writer.WriteAttributeString("creator", "Walker");

                writer.WriteAttributeString("xmlns", "xsd", null, "http://www.w3.org/2001/XMLSchema");
                writer.WriteAttributeString("xmlns", "xsi", null, "http://www.w3.org/2001/XMLSchema-instance");

                //Bounds b = CalculateBounds();
                //writer.WriteStartElement("bounds", gpx);
                //writer.WriteAttributeString("minlat", XmlConvert.ToString(b.MinLat));
                //writer.WriteAttributeString("maxlat", XmlConvert.ToString(b.MaxLat));
                //writer.WriteAttributeString("minlon", XmlConvert.ToString(b.MinLon));
                //writer.WriteAttributeString("maxlon", XmlConvert.ToString(b.MaxLon));

                writer.WriteStartElement("trk", gpx);
                writer.WriteStartElement("name", gpx);
                // writer.WriteValue(Name);
                writer.WriteValue("TrackName");
                writer.WriteEndElement();

                writer.WriteStartElement("trkseg", gpx);
                // foreach (TrackPoint p in Points)
                foreach (var p in Geos)
                {
                    writer.WriteStartElement("trkpt", gpx);
                    writer.WriteAttributeString("lat", XmlConvert.ToString(p.Latitude));
                    writer.WriteAttributeString("lon", XmlConvert.ToString(p.Longitude));
                    writer.WriteStartElement("ele", gpx);
                    writer.WriteValue(XmlConvert.ToString(p.Altitude));
                    writer.WriteEndElement();
                    // writer.WriteStartElement("time", gpx);
                    // writer.WriteValue(p. Time.ToString("s") + "Z");
                    // writer.WriteEndElement();
                    writer.WriteEndElement();
                }

                writer.WriteEndElement();
            }
            return sb.ToString();
        }
--------------------------
LONGRUNNING False 1 System.Xml.XmlWriter.WriteEndElement() D:\CodeCorpus\WPApps\jhalbrecht+Walker-Wp8\jhalbrecht-Walker-Wp8-df5fc58\Walker\Walker.Wp8\Service\WalkerDataService.cs
TAPReplacable ToggleActivity()
public string ToGpx()
        {
            const string gpx = "http://www.topografix.com/GPX/1/1";
            StringBuilder sb = new StringBuilder();
            using (XmlWriter writer = XmlWriter.Create(sb))
            {
                writer.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"utf-8\"");

                writer.WriteStartElement("gpx", gpx);
                writer.WriteAttributeString("version", "1.1");
                writer.WriteAttributeString("creator", "Walker");

                writer.WriteAttributeString("xmlns", "xsd", null, "http://www.w3.org/2001/XMLSchema");
                writer.WriteAttributeString("xmlns", "xsi", null, "http://www.w3.org/2001/XMLSchema-instance");

                //Bounds b = CalculateBounds();
                //writer.WriteStartElement("bounds", gpx);
                //writer.WriteAttributeString("minlat", XmlConvert.ToString(b.MinLat));
                //writer.WriteAttributeString("maxlat", XmlConvert.ToString(b.MaxLat));
                //writer.WriteAttributeString("minlon", XmlConvert.ToString(b.MinLon));
                //writer.WriteAttributeString("maxlon", XmlConvert.ToString(b.MaxLon));

                writer.WriteStartElement("trk", gpx);
                writer.WriteStartElement("name", gpx);
                // writer.WriteValue(Name);
                writer.WriteValue("TrackName");
                writer.WriteEndElement();

                writer.WriteStartElement("trkseg", gpx);
                // foreach (TrackPoint p in Points)
                foreach (var p in Geos)
                {
                    writer.WriteStartElement("trkpt", gpx);
                    writer.WriteAttributeString("lat", XmlConvert.ToString(p.Latitude));
                    writer.WriteAttributeString("lon", XmlConvert.ToString(p.Longitude));
                    writer.WriteStartElement("ele", gpx);
                    writer.WriteValue(XmlConvert.ToString(p.Altitude));
                    writer.WriteEndElement();
                    // writer.WriteStartElement("time", gpx);
                    // writer.WriteValue(p. Time.ToString("s") + "Z");
                    // writer.WriteEndElement();
                    writer.WriteEndElement();
                }

                writer.WriteEndElement();
            }
            return sb.ToString();
        }
--------------------------
LONGRUNNING False 1 System.Xml.XmlWriter.WriteEndElement() D:\CodeCorpus\WPApps\jhalbrecht+Walker-Wp8\jhalbrecht-Walker-Wp8-df5fc58\Walker\Walker.Wp8\Service\WalkerDataService.cs
TAPReplacable ToggleActivity()
public string ToGpx()
        {
            const string gpx = "http://www.topografix.com/GPX/1/1";
            StringBuilder sb = new StringBuilder();
            using (XmlWriter writer = XmlWriter.Create(sb))
            {
                writer.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"utf-8\"");

                writer.WriteStartElement("gpx", gpx);
                writer.WriteAttributeString("version", "1.1");
                writer.WriteAttributeString("creator", "Walker");

                writer.WriteAttributeString("xmlns", "xsd", null, "http://www.w3.org/2001/XMLSchema");
                writer.WriteAttributeString("xmlns", "xsi", null, "http://www.w3.org/2001/XMLSchema-instance");

                //Bounds b = CalculateBounds();
                //writer.WriteStartElement("bounds", gpx);
                //writer.WriteAttributeString("minlat", XmlConvert.ToString(b.MinLat));
                //writer.WriteAttributeString("maxlat", XmlConvert.ToString(b.MaxLat));
                //writer.WriteAttributeString("minlon", XmlConvert.ToString(b.MinLon));
                //writer.WriteAttributeString("maxlon", XmlConvert.ToString(b.MaxLon));

                writer.WriteStartElement("trk", gpx);
                writer.WriteStartElement("name", gpx);
                // writer.WriteValue(Name);
                writer.WriteValue("TrackName");
                writer.WriteEndElement();

                writer.WriteStartElement("trkseg", gpx);
                // foreach (TrackPoint p in Points)
                foreach (var p in Geos)
                {
                    writer.WriteStartElement("trkpt", gpx);
                    writer.WriteAttributeString("lat", XmlConvert.ToString(p.Latitude));
                    writer.WriteAttributeString("lon", XmlConvert.ToString(p.Longitude));
                    writer.WriteStartElement("ele", gpx);
                    writer.WriteValue(XmlConvert.ToString(p.Altitude));
                    writer.WriteEndElement();
                    // writer.WriteStartElement("time", gpx);
                    // writer.WriteValue(p. Time.ToString("s") + "Z");
                    // writer.WriteEndElement();
                    writer.WriteEndElement();
                }

                writer.WriteEndElement();
            }
            return sb.ToString();
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\joshtwist+Votabl\joshtwist-Votabl-ffddb88\Source\WindowsPhone8\Votabl\MainPage.xaml.cs
private async void btnSubscribe_Click_1(object sender, EventArgs e)
        {
            // TODO - subscribe to events by enumerating _subscriptions collection
            // and uncheck the checkboxes
            foreach (var sub in _subscriptions.ToArray())
            {
                var uc = new UserCategory
                {
                    CategoryId = sub.Category.Id,
                    UserId = App.MobileService.CurrentUser.UserId
                };

                await App.MobileService.GetTable<UserCategory>().InsertAsync(uc);
                sub.CheckBox.IsChecked = false;
                _subscriptions.Remove(sub);
            }

        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\joshtwist+Votabl\joshtwist-Votabl-ffddb88\Source\WindowsPhone8\Votabl\NewEvent.xaml.cs
private async void btnSave_Click_1(object sender, EventArgs e)
        {
            // TODO - save new event and votables
            var newEvent = new Event
            {
                Title = txtTitle.Text,
                Subtitle = txtSubtitle.Text,
                CategoryId = App.ViewModel.CurrentCategory.Id
            };

            await App.MobileService.GetTable<Event>().InsertAsync(newEvent);

            foreach (var votableName in listVotables.Items.OfType<String>())
            {
                var votable = new Votable
                {
                    Name = votableName,
                    EventId = newEvent.Id
                };

                await App.MobileService.GetTable<Votable>().InsertAsync(votable);
            }

            this.NavigationService.GoBack();
        }
-----------------------
LONGRUNNING False 4 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\authentication\ADFSWSTrustIdentityProvider.cs
TAPReplacable RequestToken(Uri identityProviderUrl, string scope)
public Response Send(Request request, Action<long[]> onProgress = null)
            {
                try
                {
                    this.request = request;
                    response = null;
                    allDone.Reset();

                    foreach (var h in request.Headers)
                        this.Headers[h.Key] = h.Value;

                    this.UploadStringCompleted += downloadCompleted;
                    this.DownloadStringCompleted += downloadCompleted;
                    this.OpenWriteCompleted += openWriteCompleted;
                    this.WriteStreamClosed += writeStreamClosed;

                    var contentType = request.GetHeader("Content-Type");
                    if (contentType != null && contentType.Contains("application/octet-stream"))
                    {
                        this.OpenWriteAsync(request.Uri, request.Method);
                    }
                    else
                    {
                        if (request.Content.Length == 0 && request.Method=="GET")
                        {
                            this.DownloadStringAsync(request.Uri);
                        }
                        else
                        {
                            using (var reader = new StreamReader(request.Content))
                            {
                                var data = reader.ReadToEnd();
                                this.UploadStringAsync(request.Uri, request.Method, data);
                            }
                        }
                    }

                    allDone.WaitOne();
                    return response;
                }
                catch (Exception)
                {
                    throw;
                } 
                finally
                {
                    if (request != null) request.Dispose();
                    if (httpWebResponse != null) httpWebResponse.Dispose();
                }
            }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Extensions.cs
internal static async Task<ServiceEvent<T>> ExecuteAsync<T>(this Uri uri, KZApplication app, Stream content = null, string method = "GET", bool cache = false, TimeSpan? timeout = null, Dictionary<string, string> headers = null, UseToken useToken = UseToken.Application, Action<long[]> onProgress = null, bool cors = false)
        {
            Request request = null;
            Response response = null;
            if (headers==null) headers = new Dictionary<string,string>();

            try
            {
                // Does the URL require a no cache?
                if (!cache)
                {
                    uri = addNoCache(uri);
                    headers.Add("Cache-Control", "no-cache");
                    headers.Add("Pragma", "no-cache");
                }
                
                // Adds authentication's header
                if (useToken != UseToken.None && app != null && app.Authentication != null && app.Authentication.User != null)
                {
                    addAuthenticationHeader(app, useToken, headers);
                }

                request = await Request.Create(uri, method.ToUpper(), content, headers, timeout);
                response = (method=="POST" || method=="GET" || method=="PUT")?
                    await request.Send_POST_GET_PUT(onProgress) :
                    await request.Send_OTHERS(onProgress);

                // Is token expired?
                if (response.StatusCode == HttpStatusCode.Unauthorized && app.User != null)
                {
                    // Refresh token if it is expired
                    var authHeader = response.Headers["WWW-Authenticate"];
                    if (!string.IsNullOrWhiteSpace(authHeader))
                    {
                        var realm = authHeader
                            .Split(',')
                            .Where(r => r.StartsWith("error="))
                            .FirstOrDefault();
                        if (!string.IsNullOrWhiteSpace(realm))
                        {
                            var message = realm.Split('=')[1].Trim();
                            if (string.Compare(message, "\"Token is expired\"", StringComparison.CurrentCultureIgnoreCase) == 0)
                            {
                                // Do refresh tokens
                                app.Authentication.RemoveFromCache(app.User.Credential.UserName, app.User.Credential.Password, app.User.Provider);
                                await app.Authentication.Authenticate(app.User.Credential.UserName, app.User.Credential.Password, app.User.Provider);

                                // Set new auth header
                                addAuthenticationHeader(app, useToken, request.Headers);
                                request.Content.Seek(0, SeekOrigin.Begin);
                                
                                // Send request
                                response = (method == "POST" || method == "GET" || method == "PUT") ?
                                    await request.Send_POST_GET_PUT(onProgress) :
                                    await request.Send_OTHERS(onProgress);
                            }
                        }
                    }
                }

                // Process response
                var evt = new ServiceEvent<T>();
                evt.StatusCode = response.StatusCode;
                evt.Headers = response.Headers;

                var read = 0L;
                var total = response.Body == null ? 0 : response.Body.Length;

                if (typeof(T) == typeof(Stream))
                {
                    // Download the body as stream an send progress information

                    // Sends initial progress notification
                    if (onProgress != null) onProgress(new[] { read, total });

                    // Creates the stream that will be returned to the client
                    dynamic result = new MemoryStream();
                    if (total > 0)
                    {
                        // Copies the response body's stream
                        var buffer = new byte[4096];
                        var bytesRead = await response.Body.ReadAsync(buffer, 0, 4096);
                        while (bytesRead > 0)
                        {
                            result.WriteAsync(buffer, 0, bytesRead);
                            if (onProgress != null)
                            {
                                read += bytesRead;
                                onProgress(new[] { read, total });
                            }
                            bytesRead = await response.Body.ReadAsync(buffer, 0, 4096);
                        }
                        // Rewinds the stream
                        result.Seek(0, SeekOrigin.Begin);
                    }
                    evt.Data = result;
                }
                else if (typeof(T) == typeof(object))
                {
                    using (var stream = response.Body)
                    {
                        using (var reader = new StreamReader(stream, UTF8Encoding.UTF8))
                        {
                            dynamic data = await reader.ReadToEndAsync();
                            evt.Data = data;
                        }
                    }
                }
                else if (response.Headers.ContainsKey("Content-Type") && response.Headers["Content-Type"].Contains("application/json"))
                {
                    using (var reader = new StreamReader(response.Body, Encoding.UTF8))
                    {
                        using (var jsonReader = new JsonTextReader(reader))
                        {
                            evt.Data = serializer.Deserialize<T>(jsonReader);
                        }
                    }
                }
                return evt;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (request != null) request.Dispose();
                if (response != null) response.Dispose();
            }
        }
-----------------------
BLOCKING False 1 openSocket(onMessage, onError).Wait
D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\test.wp80\..\tests\PubSub.cs 
PublishSubcribeUnsubscribe()
public void Susbscribe<T>(Action<T> onMessage, Action<Exception> onError)
        {
            if (onMessage == null) throw new ArgumentNullException("onMessage");

            lock (sync)
            {
                if (webSocket == null) openSocket(onMessage, onError).Wait();
                webSocket.Send("bindToChannel::{\"application\":\"local\", \"channel\":\"" + Name + "\"}");
            }
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\labs\Main\DaveSexton.Labs\Source\DaveSexton.Labs-Phone 7.1\..\DaveSexton.Labs\GUIConsoleLab.cs
protected internal async Task WhenMainCompletesAsync()
        {
            while (registeredTasks.Count > 0)
            {
                Task task;
                if (registeredTasks.TryDequeue(out task))
                {
                    await task;
                }
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\labs\Main\DaveSexton.Labs\Source\DaveSexton.Labs-Phone 7.1\..\DaveSexton.Labs\Lab.cs
protected internal async Task WhenMainCompletesAsync()
        {
            while (registeredTasks.Count > 0)
            {
                Task task;
                if (registeredTasks.TryDequeue(out task))
                {
                    await task;
                }
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\labs\Main\DaveSexton.Labs\Source\DaveSexton.Labs-Phone 7.1\..\DaveSexton.Labs\Lab.cs
private async Task RunExperimentsAsync(
            Func<IList<IExperiment>, int, Task<bool>> starting,
            Func<IList<IExperiment>, int, Task> executing,
            Func<IList<IExperiment>, int, Task> completed)
        {
            Contract.Requires(starting != null);
            Contract.Requires(executing != null);
            Contract.Requires(completed != null);

            IsRunningAllExperiments = true;

            try
            {
                var currentExperiments = OverriddenExperiments;

                var list = currentExperiments as IList<IExperiment> ?? currentExperiments.ToList();

                if (!list.IsReadOnly)
                {
                    list = new System.Collections.ObjectModel.ReadOnlyCollection<IExperiment>(list);
                }

                for (int i = 0; i < list.Count; i++)
                {
                    Contract.Assume(list.IsReadOnly);

                    if (!(await ExecuteExperimentAsync(list, i, starting, executing, completed)))
                    {
                        break;
                    }
                }
            }
            finally
            {
                IsRunningAllExperiments = false;
            }

            Contract.Assert(IsProxy || overriddenExperiments == null);
            Contract.Assert(overriddenExperiments == null || overriddenExperiments.IsReadOnly);
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\labs\Main\DaveSexton.Labs\Source\DaveSexton.Labs-Phone 7.1\..\DaveSexton.Labs\LabController.cs
protected virtual async Task ExecuteAsync(ICollection<Lab> labs, bool showDescription, bool showSourceCode)
        {
            Contract.Requires(labs != null);
            Contract.Requires(labs.Count > 0);
            ////Contract.Requires(Contract.ForAll(labs, lab => lab != null));
            ////Contract.Requires(Contract.ForAll(labs, lab => lab.IsEnabled));

            int total = labs.Count;
            int number = 0;

            foreach (var lab in labs)
            {
                Contract.Assume(lab != null);

                await ExecuteAsync(lab, ++number, total, showDescription, showSourceCode);
            }

            WriteLine();
            WriteLine(Resources.AllLabsCompleted);
        }
-----------------------
BLOCKING True 0 System.Threading.Thread.Sleep
D:\CodeCorpus\WPApps\lanceseidman+iRacer_MotionControl\lanceseidman-iRacer_MotionControl-27fb0e3\Arduino2WP8\MainPage.xaml.cs 
BT2Arduino_Send(string WhatToSend)
private async void BT2Arduino_Send(string WhatToSend)
        {
            if (BTSock == null) // If we don't have a connection, Send Error Control
            {
                // MessageBox.Show("Please connect to a device first."); // Alert the user with a Notification (Optional)
                txtBTStatus.Text = "No RC Car Connection. Waiting..."; // Alert the UI
                return; // Stop
            }

            if (BTSock != null) // Since we have a Connection
            {
              //  System.Threading.Thread.Sleep(5000);
                var datab = GetBufferFromByteArray(UTF8Encoding.UTF8.GetBytes(WhatToSend)); // Create Buffer/Packet for Sending

                await BTSock.OutputStream.WriteAsync(datab); // Send our Message to Connected Arduino
                // txtBTStatus.Text = "Message Sent (" + WhatToSend + ")"; // Show what we sent to Device to UI (good for Debug)
                txtBTStatus.Text = "sent";
                System.Threading.Thread.Sleep(5000);

            }
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson10\ContactStoreTipsDemo\ContactStoreTipsDemo\MainPage.xaml.cs
private async void Button_Click_1(object sender, RoutedEventArgs e)
        {
            ContactQueryResult result = store.CreateContactQuery();
            var contacts = await result.GetContactsAsync();
            foreach (var contact in contacts)
            {
                var stream = await contact.ToVcardAsync(VCardFormat.Version2_1);
                byte[] datas = StreamToBytes(stream.AsStreamForRead());
                string vcard = System.Text.Encoding.UTF8.GetString(datas, 0, datas.Length);
                Debug.WriteLine(vcard);
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson12\StreamSocketDemo\StreamSocketDemo\MainPage.xaml.cs
async void streamSocketListener_ConnectionReceived(StreamSocketListener sender, StreamSocketListenerConnectionReceivedEventArgs args)
        {
            int i = 0;
            DataReader dataReader = new DataReader(args.Socket.InputStream);
            DataWriter serverWriter = new DataWriter(args.Socket.OutputStream);
            try
            {
                while (true)
                {
                    uint sizeCount = await dataReader.LoadAsync(4);
                    uint length = dataReader.ReadUInt32();
                    uint contentLength = await dataReader.LoadAsync(length);
                    string msg = dataReader.ReadString(contentLength);
                    i++;
                    Deployment.Current.Dispatcher.BeginInvoke(() => msgList.Children.Add(
                        new TextBlock { Text = "?????????:" + msg }));
                    string serverStr = msg + "|" + i;
                    serverWriter.WriteUInt32(serverWriter.MeasureString(serverStr));
                    serverWriter.WriteString(serverStr);
                    try
                    {
                        await serverWriter.StoreAsync();
                    }
                    catch (Exception err)
                    {
                        if (SocketError.GetStatus(err.HResult) == SocketErrorStatus.AddressAlreadyInUse)
                        {

                        }
                    }
                }
            }
            catch (Exception err)
            {
                if (SocketError.GetStatus(err.HResult) == SocketErrorStatus.AddressAlreadyInUse)
                {

                }
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson12\StreamSocketDemo\StreamSocketDemo\MainPage.xaml.cs
async void ReadMessage()
        {
            dataReader = new DataReader(socket.InputStream);
            while (true)
            {
                uint sizeCount = await dataReader.LoadAsync(4);
                uint length = dataReader.ReadUInt32();
                uint contentLength = await dataReader.LoadAsync(length);
                string msg = dataReader.ReadString(contentLength);
                msgList.Children.Add(
                     new TextBlock { Text = "?????????:" + msg });
            }
        }
-----------------------
BLOCKING True 0 someTask.Result
D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson2\AsyncAwaitDemo\AsyncAwaitDemo\MainPage.xaml.cs 
btAsync2_Click(object sender, RoutedEventArgs e)
private async void btAsync2_Click(object sender, RoutedEventArgs e)
        {
            Debug.WriteLine("???????");
            // ??????
            var someTask = Task<int>.Factory.StartNew(() => LongTimeFun(1, 2));
            // ????,??????UI??
            await someTask;
            Debug.WriteLine("????,??????????");
            MessageBox.Show("Result: " + someTask.Result.ToString());
        }
--------------------------
BLOCKING False 1 System.Threading.Thread.Sleep
D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson2\AsyncAwaitDemo\AsyncAwaitDemo\MainPage.xaml.cs 
btAsync2_Click(object sender, RoutedEventArgs e)
private int LongTimeFun(int a, int b)
        {
            System.Threading.Thread.Sleep(10000);
            return a + b;
        }
--------------------------
LONGRUNNING True 0 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\lockscreen\Coding4Fun.Lockscreen.Core\Storage\LocalStorageHelper.cs
APMTAPReplacable WriteData(string folderName, string fileName, byte[] content)
public async static Task<bool> WriteData(string folderName, string fileName, byte[] content)
        {
            try
            {
                IStorageFolder rootFolder = ApplicationData.Current.LocalFolder;

                if (folderName != string.Empty)
                {
                    rootFolder = await rootFolder.CreateFolderAsync(folderName,
                        CreationCollisionOption.OpenIfExists);
                }

                IStorageFile file = await rootFolder.CreateFileAsync(fileName, CreationCollisionOption.ReplaceExisting);
                using (var s = await file.OpenStreamForWriteAsync())
                {
                    s.Write(content, 0, content.Length);
                }

                return true;
            }
            catch
            {
                return false;
            }
        }
--------------------------
BLOCKING False 2 Thread.Sleep
D:\CodeCorpus\WPApps\lucaswerkmeister+wp_geohashing\lucaswerkmeister-wp_geohashing-30abc4c\App\MainPage.xaml.cs 
OnLoaded(object sender, RoutedEventArgs e)
private void endTask(string message = "")
        {
            Dispatcher.BeginInvoke(() =>
            {
                bool hasText = !String.IsNullOrWhiteSpace(message);
                SystemTray.SetProgressIndicator(this, new ProgressIndicator
                {
                    IsVisible = hasText,
                    IsIndeterminate = false,
                    Text = message,
                    Value = 0
                });
                if (hasText)
                    new Thread(() =>
                    {
                        Thread.Sleep(TimeSpan.FromSeconds(5));
                        Dispatcher.BeginInvoke(() =>
                            SystemTray.SetProgressIndicator(this, new ProgressIndicator
                            {
                                IsVisible = false
                            }));
                    }).Start();
            });
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\lucaswerkmeister+wp_geohashing\lucaswerkmeister-wp_geohashing-30abc4c\Base\Geohash.cs
public static async Task<Geohash> Get(GeoCoordinate position, DateTime date, GeohashMode geohashMode = GeohashMode.CurrentGraticule)
        {
            int[] deltas = geohashMode == GeohashMode.CurrentGraticule ? new[] { 0 } : new[] { -1, 0, 1 };

            GeoCoordinate nearestHash = position; // Will get overwritten anyways,
            double distance = Double.MaxValue;    // because of this
            foreach (int dx in deltas)
                foreach (int dy in deltas)
                {
                    GeoCoordinate newCoordinate = new GeoCoordinate(position.Latitude - dx, position.Longitude - dy);
                    string[] appendices = calculateAppendices(date, await Djia.Get(convertDate30W(date, newCoordinate)));
                    string latStr = (int)newCoordinate.Latitude + "." + appendices[0];
                    string lonStr = (int)newCoordinate.Longitude + "." + appendices[1];
                    double latitude = Convert.ToDouble(latStr, CultureInfo.InvariantCulture);
                    double longitude = Convert.ToDouble(lonStr, CultureInfo.InvariantCulture);
                    GeoCoordinate newHash = new GeoCoordinate(latitude, longitude);
                    double newDistance = position.GetDistanceTo(newHash);
                    if (newDistance < distance)
                    {
                        nearestHash = newHash;
                        distance = newDistance;
                    }
                }

            return new Geohash(date, nearestHash);
        }
-----------------------
LONGRUNNING True 2 System.IO.Stream.CopyTo(System.IO.Stream) D:\CodeCorpus\WPApps\lucaswerkmeister+wp_geohashing\lucaswerkmeister-wp_geohashing-30abc4c\Base\Tiles.cs
TAPReplacable UpdateAll()
public static async Task<FlipTileData> CreateTileData(Uri tileUri)
        {
            string query = tileUri.ToString().Substring(tileUri.ToString().IndexOf('?') + 1);
            string[] parts = query.Split('&');
            string key = "";
            IEnumerable<string> filter = from part in parts
                                         where part.Split('=')[0] == key
                                         select part.Split('=')[1];
            key = "lat";
            double lat = Double.Parse(filter.First(), CultureInfo.InvariantCulture);
            key = "lon";
            double lon = Double.Parse(filter.First(), CultureInfo.InvariantCulture);
            key = "mapmode";
            MapCartographicMode mapmode = (MapCartographicMode)Enum.Parse(typeof(MapCartographicMode), filter.DefaultIfEmpty(MapCartographicMode.Road.ToString()).First());
            key = "hashmode";
            GeohashMode hashmode = (GeohashMode)Enum.Parse(typeof(GeohashMode), filter.DefaultIfEmpty(GeohashMode.Nearest.ToString()).First());

            string title = "Geohash: " + lat.ToString("F2", CultureInfo.CurrentCulture) + ", " + lon.ToString("F2", CultureInfo.CurrentCulture);
            GeoCoordinate location = new GeoCoordinate(lat, lon);

            try
            {
                Geohash hash = await Geohash.Get(location, DateTime.Now, hashmode);

                const int imgSize = 210;

                string mapModeForRequest = new Dictionary<MapCartographicMode, string>
                {
                    {MapCartographicMode.Hybrid, "AerialWithLabels"},
                    {MapCartographicMode.Road, "Road"},
                    {MapCartographicMode.Aerial, "Aerial"},
                    {MapCartographicMode.Terrain, "AerialWithLabels"} // not supported by bing maps
                }[mapmode];
                string mapRequest = "http://dev.virtualearth.net/REST/v1/Imagery/Map/"
                    + mapModeForRequest
                    + "?pushpin=" + location.Latitude.ToString(CultureInfo.InvariantCulture) + "," + location.Longitude.ToString(CultureInfo.InvariantCulture) + ";0" // Icon style 0 is a star similar to the one on the "pin to start" button
                    + "&pushpin=" + hash.Position.Latitude.ToString(CultureInfo.InvariantCulture) + "," + hash.Position.Longitude.ToString(CultureInfo.InvariantCulture) + ";21" // Icon style 21 is a downwards-pointing arrow inside a speech bubble
                    + "&mapSize=" + imgSize + "," + imgSize
                    + "&format=png"
                    + "&key=" + PrivateResources.BingMapsKey;

                Settings settings = new Settings();
                IsolatedStorageFile store = IsolatedStorageFile.GetUserStoreForApplication();
                string filename = "/Shared/ShellContent/" + hash.Date.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) + '-' + location.Latitude.ToString("F2", CultureInfo.InvariantCulture) + "," + location.Longitude.ToString("F2", CultureInfo.InvariantCulture) + "-" + mapModeForRequest + ".png";
                if (!store.FileExists(filename) && (!settings.LoadImagesOverWifi || DeviceNetworkInformation.IsWiFiEnabled))
                    using (IsolatedStorageFileStream stream = store.OpenFile(filename, FileMode.OpenOrCreate))
                        (await HttpWebRequest.Create(mapRequest).GetResponseAsync()).GetResponseStream().CopyTo(stream);

                return new FlipTileData
                {
                    Title = title,
                    BackgroundImage = new Uri("isostore:" + filename, UriKind.Absolute),
                    BackTitle = title,
                    BackContent = settings.CoordinateToString(hash.Position) + ";\n"
                                    + settings.LengthToString(hash.Position.GetDistanceTo(location))
                };
            }
            catch (Exception)
            {
                return new FlipTileData
                {
                    Title = title,
                    BackTitle = title
                };
            }
        }
--------------------------
LONGRUNNING True 2 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\meteofvg\OsmerFvg\OsmerFvg\ViewModels\MainPageViewModel.cs
TAPReplacable OnActivate()
private async Task DownloadDescription(Pages page)
        {

            var urlString = "";

            switch (page)
            {
                case Pages.Today:
                    urlString = AppResources.TodayDescription;
                    break;
                case Pages.Tomorrow:
                    urlString = AppResources.TomorrowDescription;
                    break;
                case Pages.TomorrowAfter:
                    urlString = AppResources.TomorrowAfterDescription;
                    break;
            }

            // Initialize a new web request
            var request = (HttpWebRequest)WebRequest.Create(urlString);

            using (var response = await request.GetResponseAsync())
            using (var source = response.GetResponseStream())
            {
                // Read the response stream
                var streamReader = new StreamReader(source, Encoding.UTF8);
                var sWebPage = streamReader.ReadToEnd();
                streamReader.Close();

                var panoramaItemHeader = GetTitleFromWebPage(sWebPage);
                var forecastHeader = GetHeaderFromWebPage(sWebPage);
                var forecast = GetForecastFromWebPage(sWebPage);

                switch (page)
                {
                    case Pages.Today:
                        Deployment.Current.Dispatcher.BeginInvoke(() => { TodayItem = panoramaItemHeader; });
                        Deployment.Current.Dispatcher.BeginInvoke(() => { TodayHeader = forecastHeader; });
                        Deployment.Current.Dispatcher.BeginInvoke(() => { TodayForecast = forecast; });
                        break;
                    case Pages.Tomorrow:
                        Deployment.Current.Dispatcher.BeginInvoke(() => { TomorrowItem = panoramaItemHeader; });
                        Deployment.Current.Dispatcher.BeginInvoke(() => { TomorrowHeader = forecastHeader; });
                        Deployment.Current.Dispatcher.BeginInvoke(() => { TomorrowForecast = forecast; });
                        break;
                    case Pages.TomorrowAfter:
                        Deployment.Current.Dispatcher.BeginInvoke(() => { TomorrowAfterItem = panoramaItemHeader; });
                        Deployment.Current.Dispatcher.BeginInvoke(() => { TomorrowAfterHeader = forecastHeader; });
                        Deployment.Current.Dispatcher.BeginInvoke(() => { TomorrowAfterForecast = forecast; });
                        break;
                }
            }
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\meteofvg\OsmerFvg\OsmerFvg\ViewModels\RadarPageViewModel.cs
TAPReplacable DownloadImage(Images image)
private async void DownloadImage(Images image)
        {

            string urlString = "";

            switch (image)
            {
                case Images.Riflettivita:
                    urlString = "http://meteo-fvg.mobi/RAD/radar.php?g=VMI_100&p=indexRAD.html";
                    break;
                case Images.Precipitazione:
                    urlString = "http://meteo-fvg.mobi/RAD/radar.php?g=SRI&p=indexRAD.html";
                    break;
                case Images.PrecipitazioneIn6Ore:
                    urlString = "http://meteo-fvg.mobi/RAD/radar.php?g=SRT6h&p=indexRAD.html";
                    break;
                case Images.Animazione:
                    urlString = "http://meteo-fvg.mobi/RAD/radar.php?g=MovieVmi&p=indexRAD.html";
                    break;
            }

            bool imageAvailable;

            var request = (HttpWebRequest)WebRequest.Create(urlString);

            using (var response = await request.GetResponseAsync())
            using (var source = response.GetResponseStream())
            {
                var streamReader = new StreamReader(source, Encoding.UTF8);
                var sWebPage = streamReader.ReadToEnd();
                streamReader.Close();
                imageAvailable = !sWebPage.Contains("[ n. d. ]");
            }

            switch (image)
            {
                case Images.Riflettivita:
                    if (imageAvailable)
                    {
                        Deployment.Current.Dispatcher.BeginInvoke(() => { RiflettivitaImageSource = new Uri(AppResources.RiflettivitaImageSource, UriKind.Absolute); });
                        Deployment.Current.Dispatcher.BeginInvoke(() => { ScalaZImageSource = new Uri(AppResources.ScalaZImageSource, UriKind.Absolute); });
                    }
                    else
                    {
                        Deployment.Current.Dispatcher.BeginInvoke(() => { RiflettivitaImageSource = new Uri("/OsmerFvg;component/Images/NoImageAvailable.gif", UriKind.Relative); });
                    }
                    break;
                case Images.Precipitazione:
                    if (imageAvailable)
                    {
                        Deployment.Current.Dispatcher.BeginInvoke(() => { PrecipitazioneImageSource = new Uri(AppResources.PrecipitazioneImageSource, UriKind.Absolute); });
                        Deployment.Current.Dispatcher.BeginInvoke(() => { ScalaRImageSource = new Uri(AppResources.ScalaRImageSource, UriKind.Absolute); });
                    }
                    else
                    {
                        Deployment.Current.Dispatcher.BeginInvoke(() => { PrecipitazioneImageSource = new Uri("/OsmerFvg;component/Images/NoImageAvailable.gif", UriKind.Absolute); });
                    }
                    break;
                case Images.PrecipitazioneIn6Ore:
                    if (imageAvailable)
                    {
                        Deployment.Current.Dispatcher.BeginInvoke(() => { PrecipitazioneIn6OreImageSource = new Uri(AppResources.PrecipitazioneIn6OreImageSource, UriKind.Absolute); });
                        Deployment.Current.Dispatcher.BeginInvoke(() => { ScalaRtImageSource = new Uri(AppResources.ScalaRtImageSource, UriKind.Absolute); });
                    }
                    else
                    {
                        Deployment.Current.Dispatcher.BeginInvoke(() => { PrecipitazioneIn6OreImageSource = new Uri("/OsmerFvg;component/Images/NoImageAvailable.gif", UriKind.Absolute); });
                        Deployment.Current.Dispatcher.BeginInvoke(() => { ScalaZImageSource = new Uri(AppResources.ScalaZImageSource, UriKind.Absolute); });
                    }
                    break;
                case Images.Animazione:
                    if (imageAvailable)
                    {
                        Deployment.Current.Dispatcher.BeginInvoke(() => { AnimazioneImageSource = new Uri(AppResources.AnimazioneImageSource, UriKind.Absolute); });
                    }
                    else
                    {
                        Deployment.Current.Dispatcher.BeginInvoke(() => { AnimazioneImageSource = new Uri("/OsmerFvg;component/Images/NoImageAvailable.gif", UriKind.Absolute); });
                    }
                    break;
            }




        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\metroeeg\Trunk\JustinAngel.MindwaveSensor.WP8\JustinAngel.MindwaveSensor.WP8\Mindwave.cs
private async void InitalizeListeningToSocket()
        {
            while (IsConnected)
            {
                var resultArray = await GetNextBuffer();
                //Debug.WriteLine(string.Join(",", resultArray.Select(b => b.ToString())));

                int? indexOfUsefulDataHeader = GetUsefulDataHeaderIndex(resultArray);
                if (indexOfUsefulDataHeader.HasValue == false)
                {
                    // ignore data and just dump it
                }
                else
                {
                    // Check if enough data exists to finalize this useful data packet, if not, get another
                    if (indexOfUsefulDataHeader.Value + LengthOfUsefulPacket > resultArray.Length)
                    {
                        var nextResultsArray = await GetNextBuffer();
                        resultArray = resultArray.Concat(nextResultsArray).ToArray();
                    }

                    var usefulDataPacket =
                        resultArray
                            .Skip(indexOfUsefulDataHeader.Value)
                            .Take(LengthOfUsefulPacket + 4)
                            .ToArray();
                    //Print(string.Join(",", usefulDataPacket.Select(b => b.ToString())));

                    // based on http://wearcam.org/ece516/mindset_communications_protocol.pdf
                    var data = new MindwaveReading(
                        usefulDataPacket[4],
                        IntHelper.GetUnsignedInt24ValueFrom3Bytes(usefulDataPacket, 7),
                        IntHelper.GetUnsignedInt24ValueFrom3Bytes(usefulDataPacket, 10),
                        IntHelper.GetUnsignedInt24ValueFrom3Bytes(usefulDataPacket, 13),
                        IntHelper.GetUnsignedInt24ValueFrom3Bytes(usefulDataPacket, 16),
                        IntHelper.GetUnsignedInt24ValueFrom3Bytes(usefulDataPacket, 19),
                        IntHelper.GetUnsignedInt24ValueFrom3Bytes(usefulDataPacket, 22),
                        IntHelper.GetUnsignedInt24ValueFrom3Bytes(usefulDataPacket, 25),
                        IntHelper.GetUnsignedInt24ValueFrom3Bytes(usefulDataPacket, 28),
                        usefulDataPacket[32],
                        usefulDataPacket[34],
                        DateTime.Now);
                    //Print(data.ToString());
                    HandleNewMindwaveReading(data);
                }
            }

            if (!IsConnected)
            {
                Socket.Dispose();
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\metroeeg\Trunk\JustinAngel.MindwaveSensor.WP8\JustinAngel.MindwaveSensor.WP8.TestApp\Standalone.xaml.cs
private async void ListenToResult()
        {
            while (true)
            {
                var resultArray = await GetNextBuffer();
                //Debug.WriteLine(string.Join(",", resultArray.Select(b => b.ToString())));

                int? indexOfUsefulDataHeader = GetUsefulDataHeaderIndex(resultArray);
                if (indexOfUsefulDataHeader.HasValue == false)
                {
                    // ignore data and just dump it
                }
                else
                {
                    // Check if enough data exists to finalize this useful data packet, if not, get another
                    if (indexOfUsefulDataHeader.Value  + LengthOfUsefulPacket
                        > resultArray.Length)
                    {
                        var nextResultsArray = await GetNextBuffer();
                        resultArray = resultArray.Concat(nextResultsArray).ToArray();
                    }

                    var usefulDataPacket =
                        resultArray
                            .Skip(indexOfUsefulDataHeader.Value)
                            .Take(LengthOfUsefulPacket + 4)
                            .ToArray();

                    //Print(string.Join(",", usefulDataPacket.Select(b => b.ToString())));

                    // based on http://wearcam.org/ece516/mindset_communications_protocol.pdf
                    var data = new MindsetData(
                        usefulDataPacket[4],
                        GetIntValue(usefulDataPacket, 7, 9),
                        GetIntValue(usefulDataPacket, 10, 12),
                        GetIntValue(usefulDataPacket, 13, 15),
                        GetIntValue(usefulDataPacket, 16, 18),
                        GetIntValue(usefulDataPacket, 19, 21),
                        GetIntValue(usefulDataPacket, 22, 24),
                        GetIntValue(usefulDataPacket, 25, 27),
                        GetIntValue(usefulDataPacket, 28, 30),
                        usefulDataPacket[32],
                        usefulDataPacket[34],
                        DateTime.Now);
                    Print(data.ToString());
                    HandleMindsetData(data);
                }
            }
        }
-----------------------
LONGRUNNING True 0 System.IO.StreamWriter.Write(string) D:\CodeCorpus\WPApps\mikkoviitala+battlelogmobile\mikkoviitala-battlelogmobile-fc0a9ec\BattlelogMobile.Client\ViewModel\MainViewModel.cs
TAPReplacable LogInCommandReceived()
private async Task LogInCommandReceived()
        {
            UserInterfaceEnabled = false;
            StatusInformation = Common.StatusInformationVerifyingCredential;
            SaveCredentials();

            var request = WebRequest.Create(ViewModelLocator.WebRequestLogInUri) as HttpWebRequest;
            if (request == null)
                throw new ArgumentNullException();

            request.Credentials = new NetworkCredential(Email, Password);
            request.Method = Common.HttpPostMethod;
            request.Accept = Common.HttpAccept;
            request.UserAgent = Common.HttpUserAgent;
            request.ContentType = Common.HttpContentType;
            request.CookieContainer = ViewModelLocator.CookieJar;

            _timedOut = false;
            var dispatchTimer = new DispatcherTimer { Interval = TimeSpan.FromSeconds(Common.TimeOutInSeconds) };
            dispatchTimer.Tick += TimerTicked;
            dispatchTimer.Start();

            var streamTask = request.GetRequestStreamAsync();
            {
                var requestStream = await streamTask.ConfigureAwait(false);
                using (var writer = new StreamWriter(requestStream))
                {
                    writer.Write(ConstructPostData(Email, Password));
                    writer.Close();
                }

                // Got response
                var responseTask = request.GetResponseAsync();

                if (_timedOut)
                {
                    ((App) Application.Current).RootFrame.Dispatcher.BeginInvoke(() =>
                        UserInterfaceEnabled = true);
                    ((App) Application.Current).RootFrame.Dispatcher.BeginInvoke(() =>
                        StatusInformation = string.Empty);
                    ((App) Application.Current).RootFrame.Dispatcher.BeginInvoke(() =>
                        LogInFailedReason = Common.LogInFailedReasonTimedOut);
                    return;
                }

                try
                {
                    var response = await responseTask.ConfigureAwait(false);
                    if (response.ResponseUri.Equals(ViewModelLocator.WebRequestLogInResponseUri))
                    {
                        Messenger.Default.Send(new BattlelogCredentialsAcceptedMessage(Email));
                    }
                    else
                    {
                        ((App) Application.Current).RootFrame.Dispatcher.BeginInvoke(() =>
                            UserInterfaceEnabled = true);
                        ((App) Application.Current).RootFrame.Dispatcher.BeginInvoke(() =>
                            StatusInformation = string.Empty);
                        ((App) Application.Current).RootFrame.Dispatcher.BeginInvoke(() =>
                            LogInFailedReason = Common.LogInFailedReasonInvalidCredentials);
                    }
                }
                catch (WebException we)
                {
                    ((App) Application.Current).RootFrame.Dispatcher.BeginInvoke(() =>
                        StatusInformation = string.Empty);
                    ((App) Application.Current).RootFrame.Dispatcher.BeginInvoke(() =>
                        LogInFailedReason = we.Message);
                    ((App) Application.Current).RootFrame.Dispatcher.BeginInvoke(() =>
                        UserInterfaceEnabled = true);
                }
            }
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\mikkoviitala+battlelogmobile\mikkoviitala-battlelogmobile-fc0a9ec\BattlelogMobile.Core\Service\DownloadService.cs
TAPReplacable RetrieveServerMessage(string url)
public async Task RetrieveServerMessage(string url)
        {
            var request = WebRequest.Create(new Uri(url)) as HttpWebRequest;
            if (request == null)
                throw new ArgumentNullException();

            request.Method = Common.HttpGetMethod;
            request.Accept = Common.HttpAccept;
            request.UserAgent = Common.HttpUserAgent;
            request.CookieContainer = CookieJar;

            var task = request.GetResponseAsync();

            try
            {
                var response = (HttpWebResponse) await task.ConfigureAwait(false);
                var responseStream = response.GetResponseStream();
                var reader = new StreamReader(responseStream);
                string message = reader.ReadToEnd();
                response.Close();
                if (message.Length > 0)
                    Messenger.Default.Send(new DialogMessage(this, null, message, null));
            }
            catch (WebException we)
            {
                // Omitted
            }
        }
--------------------------
LONGRUNNING True 0 System.IO.TextWriter.WriteLine(string) D:\CodeCorpus\WPApps\mrlacey+wp8demos\mrlacey-wp8demos-2f4604c\demos\launchingSource\LsMainPage.xaml.cs
TAPReplacable CreateAndOpenFileClicked(object sender, RoutedEventArgs e)
private async void CreateAndOpenFileClicked(object sender, RoutedEventArgs e)
        {
            using (var fileStorage = IsolatedStorageFile.GetUserStoreForApplication())
            {
                using (var writer = new StreamWriter(new IsolatedStorageFileStream("test.matt", FileMode.Create, fileStorage)))
                {
                    writer.WriteLine("hello file contents");
                    writer.Close();
                }
            }

            var local = ApplicationData.Current.LocalFolder;

            var file = await local.GetFileAsync("test.matt");

            Launcher.LaunchFileAsync(file);
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\mytoolkit\Phone\..\shared\messaging\Messenger.cs
public static async Task<T> SendAsync<T>(T message)
        {
            var type = typeof(T);
            foreach (var a in actions.Where(a => a.Type == type).ToArray())
            {
                if (a.Action is Action<T>)
                    ((Action<T>)a.Action)(message);
                else
                    await ((Func<T, Task>)a.Action)(message);
            }
            return message;
        }
-----------------------
BLOCKING True 2 System.Threading.Thread.Sleep
D:\CodeCorpus\WPApps\nothingmn+WindowsPhone.Common\nothingmn-WindowsPhone.Common-8f90192\WindowsPhone.Common\Communication\BluetoothConnection.cs 
Open(string peer)
private async void ReadData()
        {
            while (true)
            {
                List<Byte> bigBuffer = new List<byte>();
                while (_dataReader.UnconsumedBufferLength > 0)
                {
                    var buffer = new byte[_dataReader.UnconsumedBufferLength];
                    _dataReader.ReadBytes(buffer);
                    bigBuffer.AddRange(buffer);
                }
                if (bigBuffer.Count > 0)
                {
                    object data = _channel.ConvertTo(bigBuffer.ToArray());
                    if (OnReceived != null) OnReceived(data, _socket, null, DateTime.Now);
                }
                else
                {
                    System.Threading.Thread.Sleep(100);
                }
            }
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\noxo+bluetoothchat-wp8-winrt\noxo-bluetoothchat-wp8-winrt-7f11005\BluetoothChatWP8\PhoneApp1\ChatConnection.cs
private static async Task readSocket()
        {
            while (State == STATE_CONNECTED)
            {

                try
                {
                    
                    uint len = await reader.LoadAsync(1024);

                    if (len > 0)
                    {

                        String msg = reader.ReadString(len);

                        ChatMessage chatMsg = new ChatMessage()
                        {
                            Content = "<< " + msg
                        };

                        ChatMessages.Data.Add(chatMsg);
                    }

                }
                catch (Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine("ERROR/readSocket/" + ex.ToString());
                    CleanUp();
                    break;
                }
            }

            State = STATE_DISCONNECTED; 
            
        }
-----------------------
LONGRUNNING False 2 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\Nznoonee+VKAgent\Nznoonee-VKAgent-9194c0e\VKAgent\ApiRelated\TaskRelated\TaskExecutor.cs
TAPReplacable ExecuteHttpRequest()
private string GetResponseString(WebResponse response)
        {
            string resultString;

            var respStream = response.GetResponseStream();

            var firstByte = respStream.ReadByte();
            var secondByte = respStream.ReadByte();

            respStream.Position = 0;

            if (IsGzipCompressed(firstByte, secondByte))
            {
                using (var gzipInputStream = new GZipInputStream(response.GetResponseStream()))
                {
                    using (var reader = new StreamReader(gzipInputStream))
                    {
                        resultString = reader.ReadToEnd();
                    }
                }
            }
            else
            {
                using (var responseStream = new StreamReader(response.GetResponseStream()))
                {
                    resultString = responseStream.ReadToEnd();
                }
            }

            return resultString;
        }
--------------------------
LONGRUNNING False 2 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\Nznoonee+VKAgent\Nznoonee-VKAgent-9194c0e\VKAgent\ApiRelated\TaskRelated\TaskExecutor.cs
TAPReplacable ExecuteHttpRequest()
private string GetResponseString(WebResponse response)
        {
            string resultString;

            var respStream = response.GetResponseStream();

            var firstByte = respStream.ReadByte();
            var secondByte = respStream.ReadByte();

            respStream.Position = 0;

            if (IsGzipCompressed(firstByte, secondByte))
            {
                using (var gzipInputStream = new GZipInputStream(response.GetResponseStream()))
                {
                    using (var reader = new StreamReader(gzipInputStream))
                    {
                        resultString = reader.ReadToEnd();
                    }
                }
            }
            else
            {
                using (var responseStream = new StreamReader(response.GetResponseStream()))
                {
                    resultString = responseStream.ReadToEnd();
                }
            }

            return resultString;
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\Nznoonee+VKAgent\Nznoonee-VKAgent-9194c0e\VKAgent\Services\ImageUploader\ImageUploader.cs
TAPReplacable Upload(string uploadUrl, byte[] content)
public static async Task<string> Upload(string uploadUrl, byte[] content)
        {
            Uri requestUri;
            try
            {
                requestUri = new Uri(uploadUrl);
            }
            catch (UriFormatException)
            {
                return string.Empty;
            }

            var request = (HttpWebRequest) WebRequest.Create(requestUri);
            request.Method = "POST";

            var boundary = Guid.NewGuid();
            request.ContentType = "multipart/form-data; boundary=" + boundary;

            using (var requestStream = await request.GetRequestStreamAsync())
            {
                var bytes = Encoding.UTF8.GetBytes("--" + boundary + "\r\n");
                requestStream.Write(bytes, 0, bytes.Length);

                var bytes2 = Encoding.UTF8.GetBytes("Content-Disposition: form-data; name=\"photo\"; filename=\"image.jpg\";\r\nContent-Type: image/jpeg\r\n\r\n");
                requestStream.Write(bytes2, 0, bytes2.Length);
                requestStream.Write(content, 0, content.Length);

                bytes = Encoding.UTF8.GetBytes("\r\n--" + boundary + "--\r\n");
                requestStream.Write(bytes, 0, bytes.Length);
            }

            string resultString;
            using (var response = await request.GetResponseAsync())
            {
                using (var responseStream = response.GetResponseStream())
                {
                    using (var reader = new StreamReader(responseStream))
                    {
                        resultString = reader.ReadToEnd();
                    }
                }
            }

            return resultString;
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\Nznoonee+VKAgent\Nznoonee-VKAgent-9194c0e\VKAgent\ViewModels\BaseConversationViewModel.cs
private async Task<string> UploadPhotosOnServer(string uploadUrl, IEnumerable<IAttachment> attList)
        {
            if (uploadUrl.IsEmpty())
                return string.Empty;

            var sb = new StringBuilder();

            foreach (var item in attList)
            {
                if (item is AttachmentImage)
                {
                    var bitmapImage = ((AttachmentImage) item).Image;
                    if (bitmapImage != null)
                    {
                        var response = await ImageUploader.Upload(uploadUrl, bitmapImage.ToByteArray());

                        if (response.IsEmpty())
                            continue;

                        var uploadResult = JsonConvert.DeserializeObject<ImageUploadResult>(response);

                        var saveMsgPhotoTask = new SaveMessagePhotoTask(uploadResult.Server, uploadResult.Photo, uploadResult.Hash);
                        var saveResult = await TaskManager.ExecuteAwaitableTask(saveMsgPhotoTask);

                        if (saveResult.IsSuccess)
                        {
                            var sucResult = (SuccessTaskResult<object>) saveResult;
                            sb.Append((string) sucResult.ResultArgs).Append(",");
                        }
                        else
                            return string.Empty;
                    }
                }
            }

            return sb.ToString();
        }
-----------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\S1Nyan.App.WP7\Model\ServerModel.cs
TAPReplacable UpdateListFromRemote()
public async Task UpdateListFromRemote()
        {
            Stream s = StorageHelper.ReadFromLocalCache(ServerListCacheName, ServerListCacheDays);
            if (s != null)
            {
                s.Dispose();
                return;
            }

            WebClient client = new WebClient();
            try
            {
                s = await client.OpenReadTaskAsync(RemoteServerPath);
                Debug.WriteLine("Update server list from remote");
                UpdateList(s);

                UpdateHostList();

                using (s)
                {
                    using (var reader = new StreamReader(s))
                    {
                        s.Seek(0, SeekOrigin.Begin);
                        StorageHelper.WriteToLocalCache(ServerListCacheName, reader.ReadToEnd());
                    }
                }
            }
            catch (Exception) { }
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\S1Nyan.App.WP7\ViewModel\UserViewModel.cs
public async Task<string> DoSendPost(string replyLink, string replyText)
        {
            UserErrorTypes result = UserErrorTypes.Unknown;
            int retryTimes = 0;
            try
            {
                while (result != UserErrorTypes.Success)
                {
                    if (retryTimes > 2)
                        throw new S1UserException("MaxRetry", UserErrorTypes.MaxRetryTime);
                    if (result == UserErrorTypes.InvalidVerify)
                    {
                        Uid = null;
                        var error = await DoLogin(SettingView.CurrentUsername, SettingView.CurrentPassword);
                        if (error != null)
                            throw new S1UserException(error, UserErrorTypes.LoginFailed);
                    }

                    await CheckVerify();
                    result = await new S1WebClient().Reply(SettingView.VerifyString,
                        reletivePostUrl: replyLink,
                        content: replyText,
                        signature: S1Nyan.Views.SettingView.GetSignature());

                    retryTimes++;
                }
                return null;
            }
            catch (Exception ex)
            {
                return S1Nyan.Utils.Util.ErrorMsg.GetExceptionMessage(ex);
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\UnderDev\ViewModel\UserTestViewModel.cs
private async Task DoPost()
        {
            UserErrorTypes result = UserErrorTypes.Unknown;
            int retryTimes = 0;
            try
            {
                IsSending = true;
                while (result != UserErrorTypes.Success)
                {
                    if (retryTimes > 2)
                        throw new S1UserException("MaxRetry", UserErrorTypes.MaxRetryTime);
                    if (result == UserErrorTypes.InvalidVerify)
                    {
                        await UserLogin();
                    }

                    await CheckVerify();
                    result = await new S1WebClient().Reply(verify,
                        reletivePostUrl: replyLink,
                        content: ReplyText + "\r\n" + DateTime.Now.ToShortTimeString(),
                        signature: deviceInfo);

                    if (result == UserErrorTypes.Success)
                        Result = "Success";
                    retryTimes++;
                }
            }
            catch (Exception ex)
            {
                Result = ex.Message;
            }
            finally
            {
                IsSending = false;
            }
        }
-----------------------
LONGRUNNING True 0 System.IO.StreamReader.Read() D:\CodeCorpus\WPApps\orsko+WP8HF\orsko-WP8HF-74fbaf4\WP8HF\MainPage.xaml.cs
TAPReplacable LoadData()
public async void LoadData()
        {
            var httpClient = new HttpClient();
            try
            {
                completed = await httpClient.GetStringAsync("http://nfconlab.azurewebsites.net/Home/AllQuestions");                
                string[] jsons = completed.Split('\n');
                var serializer = new DataContractJsonSerializer(typeof(MyJSON));

                foreach (var element in jsons)
                {
                    if (element.Equals(""))
                        continue;
                    byte[] byteArray = System.Text.Encoding.UTF8.GetBytes(element);
                    using (var stream = new MemoryStream(byteArray))
                    {
                        using (var reader = new StreamReader(stream))
                        {
                            reader.Read();
                            var myJson = (MyJSON)serializer.ReadObject(stream);
                            QuestionItem item = myJson.ToQuestionItem();
                            questions.QuestionItems.InsertOnSubmit(item);                           
                        }
                    }
                }

                questions.SubmitChanges();

                GetLocation();

                foreach (var item in questions.QuestionItems)
                {
                    var a = item.Position.Split(',');
                    double lat;
                    try
                    {
                        lat = double.Parse(a[0]);
                    }
                    catch
                    {
                        a[0] = a[0].Replace('.', ',');
                        a[1] = a[1].Replace('.', ',');
                    }
                    lat = double.Parse(a[0]);
                    double lon = double.Parse(a[1]);
                    //a pin kiteveset is itt hivjuk meg
                    var gc = new GeoCoordinate();
                    gc.Latitude = lat;
                    gc.Longitude = lon;
                    DrawMapMarker(gc, item.QuestionItemId);
                }

                LoadImages();

                allQuestions.Clear();
                newQuestions.Clear();
                currentQuestions.Clear();

                foreach (var x in questions.QuestionItems)
                {
                    allQuestions.Add(x);
                    var date = DateTime.ParseExact(x.Date, "yyyy-MM-dd HH:mm", null);
                    var delta = (DateTime.Now - date).TotalDays;
                    if (delta < 30)
                    {
                        newQuestions.Add(x);                    
                    }
                }

                SystemTray.ProgressIndicator.IsIndeterminate = false;
            }
            catch
            {
                MessageBox.Show(AppResources.ConnectionError);
                SystemTray.ProgressIndicator.IsIndeterminate = false;
            }
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\orsko+WP8HF\orsko-WP8HF-74fbaf4\WP8HF\MainPage.xaml.cs
private async void LoadImages()
        {
            //var image = new BitmapImage();

            //var wb = new WriteableBitmap(image);

            // Local Storage-ba ment곊            try
            {
                //k걥k beolvasⴡ
                StorageFolder storageFolder = ApplicationData.Current.LocalFolder;
                var testFiles = await storageFolder.GetFilesAsync();
                ImgFile = testFiles.First();
                //ImageFiles = testFiles;
                ImageFiles=new ObservableCollection<StorageFile>();
                foreach (var storageFile in testFiles)
                {
                    if(storageFile.Path.Contains(".jpg"))
                        ImageFiles.Add(storageFile);
                    using (var streamReader = new StreamReader(await storageFile.OpenStreamForReadAsync()))                       
                    {
                       // wb.LoadJpeg(streamReader.BaseStream);
                    }
                }
            }
            catch
            {
                MessageBox.Show(AppResources.LocalLoadError);
            }
        }
-----------------------
LONGRUNNING True 0 System.IO.MemoryStream.Read(byte[], int, int) D:\CodeCorpus\WPApps\orsko+WP8HF\orsko-WP8HF-74fbaf4\WP8HF\AnswerQuestion.xaml.cs
APMTAPReplacable CameraCaptureTaskCompleted(object sender, PhotoResult e)
private async void CameraCaptureTaskCompleted(object sender, PhotoResult e)
        {
            ToPost = false;
            if (e == null)
            {
                NavigationService.GoBack();
            }
            //Ha nincs k갬 csak feed-re posztol
            if (e.ChosenPhoto == null)
            {
                try
                {
                    var client =
                        new FacebookClient(IsolatedStorageSettings.ApplicationSettings["FacebookToken"].ToString());

                    var parameters = new Dictionary<string, object>
                        {
                            {"message", AppResources.ShareText + Question},
                        };

                    await client.PostTaskAsync("me/feed", parameters);
                    MessageBox.Show(AppResources.PostSuccess);
                    NavigationService.GoBack();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(AppResources.PostError);
                    NavigationService.GoBack();
                }
            }

            //Ha volt k갬 azt is postolja
            else
            {
                var image = new BitmapImage();
                image.SetSource(e.ChosenPhoto);

                var wb = new WriteableBitmap(image);

                //Egyedi n궬 fura karakterek n꭫��               string fileName = Question + DateTime.Now;
                fileName = fileName + ".jpg";
                fileName = fileName.Replace(" ", "");
                fileName = fileName.Replace("��"o");
                fileName = fileName.Replace("֢, "O");
                fileName = fileName.Replace("��"u");
                fileName = fileName.Replace("ܢ, "U");
                fileName = fileName.Replace("󢬠"o");
                fileName = fileName.Replace("Ӣ, "O");
                fileName = fileName.Replace("o", "o");
                fileName = fileName.Replace("O", "O");
                fileName = fileName.Replace("򢬠"u");
                fileName = fileName.Replace("ڢ, "U");
                fileName = fileName.Replace("u", "u");
                fileName = fileName.Replace("U", "U");
                fileName = fileName.Replace("颬 "e");
                fileName = fileName.Replace("ɢ, "E");
                fileName = fileName.Replace("᢬ "a");
                fileName = fileName.Replace(":", "_");
                fileName = fileName.Replace("/", "_");
                fileName = fileName.Replace("?", "_");

                
                // Local Storage-ba ment곊                try
                {
                    //ez a mappa ugyanaz mint a GetUserStoreForApplication
                    StorageFolder storageFolder = ApplicationData.Current.LocalFolder;
                    StorageFile testFile = await storageFolder.CreateFileAsync(fileName, CreationCollisionOption.ReplaceExisting);

                    using (var streamWriter = new StreamWriter(await testFile.OpenStreamForWriteAsync()))
                    //innentol ugyanaz mint elobb
                    {
                        wb.SaveJpeg(streamWriter.BaseStream, wb.PixelWidth, wb.PixelHeight, 0, 100);
                    }
                }
                catch
                {
                    MessageBox.Show(AppResources.LocalSaveError);
                }
                
                //Post facebookra
                var fbUpl = new Facebook.FacebookMediaObject
                    {
                        FileName = fileName,
                        ContentType = "image/jpg"
                    };
                using (MemoryStream ms = new MemoryStream())
                {
                    wb.SaveJpeg(ms, wb.PixelWidth, wb.PixelHeight, 0, 95);
                    ms.Seek(0, 0);
                    byte[] data = new byte[ms.Length];
                    ms.Read(data, 0, data.Length);
                    ms.Close();

                    fbUpl.SetValue(data);
                }


                try
                {
                    var client =
                        new FacebookClient(IsolatedStorageSettings.ApplicationSettings["FacebookToken"].ToString());

                    var parameters = new Dictionary<string, object>
                        {
                            {"message", AppResources.ShareText + Question},
                            {"file", fbUpl},
                        };

                    await client.PostTaskAsync("me/photos", parameters);

                    MessageBox.Show(AppResources.PostSuccess);
                    NavigationService.GoBack();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(AppResources.PostError);
                    NavigationService.GoBack();
                }
            }
        }
--------------------------
LONGRUNNING True 0 Cimbalino.Phone.Toolkit.Services.IMessageBoxService.Show(string, string) D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\ViewModel\AuthorizationViewModel.cs
TAPReplacable ExchangeAuthorizationCode(string authorizationCode)
private async void ExchangeAuthorizationCode(string authorizationCode)
        {
            try
            {
                var authToken = await _googleAuthService.ExchangeAuthorizationCode(authorizationCode, CancellationToken.None);

                var userInfo = await _googleOAuth2Service.GetUserInfo(authToken, CancellationToken.None);

                _systemTrayService.HideProgressIndicator();

                var email = userInfo.EMail;

                var oldAccount = _mainModel.AvailableAccounts.FirstOrDefault(x => x.Name == email);

                if (oldAccount != null)
                {
                    _mainModel.AvailableAccounts.Remove(oldAccount);
                }

                _mainModel.AvailableAccounts.Add(new AccountModel(email, authToken));
                _mainModel.Save();

                MessengerInstance.Send(new AvailableAccountsChangedMessage());

                _navigationService.GoBack();
            }
            catch
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Unable to retrieve the access tokens!", "Error");
            }
        }
--------------------------
LONGRUNNING True 0 Cimbalino.Phone.Toolkit.Services.IMessageBoxService.Show(string, string) D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\ViewModel\ExplorerViewModel.cs
TAPReplacable ExecuteInitialLoad()
private async void ExecuteInitialLoad()
        {
            if (!_mainModel.ExecuteInitialLoad)
            {
                return;
            }

            _mainModel.ExecuteInitialLoad = false;

            AbortCurrentCall();

            try
            {
                await _mainModel.CheckToken(_cancellationTokenSource.Token);

                _systemTrayService.SetProgressIndicator("Reading drive info...");

                var about = await _googleDriveService.About(_mainModel.CurrentAccount.AuthToken, new GoogleDriveAboutRequest()
                {
                    ETag = _mainModel.CurrentAccount.Info != null ? _mainModel.CurrentAccount.Info.ETag : null
                }, _cancellationTokenSource.Token);

                if (about != null)
                {
                    _mainModel.CurrentAccount.Info = about;
                    _mainModel.Save();
                }

                await RefreshFilesAsync();
            }
            catch (TaskCanceledException)
            {
                _systemTrayService.HideProgressIndicator();
            }
            catch (Exception)
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Unable to get the drive information!", "Error");
            }
        }
--------------------------
LONGRUNNING True 1 Cimbalino.Phone.Toolkit.Services.IMessageBoxService.Show(string, string) D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\ViewModel\ExplorerViewModel.cs
TAPReplacable ExecuteInitialLoad()
private async Task RefreshFilesAsync()
        {
            AbortCurrentCall();

            try
            {
                var currentFolderId = _mainModel.CurrentFolderId;

                await _mainModel.CheckToken(_cancellationTokenSource.Token);

                _systemTrayService.SetProgressIndicator("Refreshing the file list...");

                Files.Clear();
                PictureFiles.Clear();

                string pageToken = null;

                while (true)
                {
                    var filesListResponse = await _googleDriveService.FilesList(_mainModel.CurrentAccount.AuthToken, new GoogleDriveFilesListRequest()
                    {
                        Query = "trashed=false and '{0}' in parents".FormatWith(currentFolderId),
                        Fields = GoogleDriveFilesListFields,
                        PageToken = pageToken
                    }, _cancellationTokenSource.Token);

                    if (filesListResponse.Items != null)
                    {
                        foreach (var item in filesListResponse.Items)
                        {
                            var googleFileViewModel = new GoogleFileViewModel(item);

                            Files.Add(googleFileViewModel);

                            if (item != null && !string.IsNullOrEmpty(item.ThumbnailLink))
                            {
                                PictureFiles.Add(googleFileViewModel);
                            }
                        }
                    }

                    pageToken = filesListResponse.NextPageToken;

                    if (string.IsNullOrEmpty(pageToken))
                    {
                        _systemTrayService.HideProgressIndicator();

                        return;
                    }
                }
            }
            catch (TaskCanceledException)
            {
                _systemTrayService.HideProgressIndicator();
            }
            catch (Exception)
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Unable to update the file list!", "Error");
            }
        }
--------------------------
LONGRUNNING True 0 Cimbalino.Phone.Toolkit.Services.IMessageBoxService.Show(string, string) D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\ViewModel\ExplorerViewModel.cs
TAPReplacable ChangeStaredStatus(GoogleFileViewModel fileViewModel)
private async void ChangeStaredStatus(GoogleFileViewModel fileViewModel)
        {
            if (IsBusy)
            {
                return;
            }

            AbortCurrentCall();

            try
            {
                await _mainModel.CheckToken(_cancellationTokenSource.Token);

                _systemTrayService.SetProgressIndicator("Changing file star state...");

                var currentStaredtatus = fileViewModel.FileModel.Labels.Starred;

                var fileModel = await _googleDriveService.FilesUpdate(_mainModel.CurrentAccount.AuthToken, fileViewModel.Id, new GoogleDriveFilesUpdateRequest()
                {
                    File = new GoogleDriveFile()
                    {
                        Labels = new GoogleDriveLabels()
                        {
                            Starred = !currentStaredtatus.GetValueOrDefault()
                        }
                    },
                    Fields = GoogleDriveFileFields
                }, _cancellationTokenSource.Token);

                fileViewModel.FileModel = fileModel;

                _systemTrayService.HideProgressIndicator();
            }
            catch (TaskCanceledException)
            {
                _systemTrayService.HideProgressIndicator();
            }
            catch (Exception)
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Unable to change the file star state!", "Error");
            }
        }
--------------------------
LONGRUNNING True 1 Cimbalino.Phone.Toolkit.Services.IMessageBoxService.Show(string, string) D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\ViewModel\ExplorerViewModel.cs
TAPReplacable DeleteFile(GoogleFileViewModel fileViewModel)
private async Task<bool> DeleteFileAsync(GoogleFileViewModel fileViewModel)
        {
            try
            {
                await _mainModel.CheckToken(_cancellationTokenSource.Token);

                _systemTrayService.SetProgressIndicator(string.Format("Deleting: {0}...", fileViewModel.Title));

                await _googleDriveService.FilesDelete(_mainModel.CurrentAccount.AuthToken, fileViewModel.Id, _cancellationTokenSource.Token);

                lock (Files)
                {
                    if (Files.Contains(fileViewModel))
                    {
                        Files.Remove(fileViewModel);
                    }
                }

                return true;
            }
            catch
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show(string.Format("Unable to delete '{0}'!", fileViewModel.Title), "Error");
            }

            return false;
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\ViewModel\ExplorerViewModel.cs
private async void DeleteFiles(IEnumerable<GoogleFileViewModel> filesToDelete)
        {
            AbortCurrentCall();

            foreach (var fileViewModel in filesToDelete)
            {
                if (!await DeleteFileAsync(fileViewModel))
                {
                    break;
                }
            }

            _systemTrayService.HideProgressIndicator();
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\ViewModel\ExplorerViewModel.cs
private async Task RefreshFilesAsync()
        {
            AbortCurrentCall();

            try
            {
                var currentFolderId = _mainModel.CurrentFolderId;

                await _mainModel.CheckToken(_cancellationTokenSource.Token);

                _systemTrayService.SetProgressIndicator("Refreshing the file list...");

                Files.Clear();
                PictureFiles.Clear();

                string pageToken = null;

                while (true)
                {
                    var filesListResponse = await _googleDriveService.FilesList(_mainModel.CurrentAccount.AuthToken, new GoogleDriveFilesListRequest()
                    {
                        Query = "trashed=false and '{0}' in parents".FormatWith(currentFolderId),
                        Fields = GoogleDriveFilesListFields,
                        PageToken = pageToken
                    }, _cancellationTokenSource.Token);

                    if (filesListResponse.Items != null)
                    {
                        foreach (var item in filesListResponse.Items)
                        {
                            var googleFileViewModel = new GoogleFileViewModel(item);

                            Files.Add(googleFileViewModel);

                            if (item != null && !string.IsNullOrEmpty(item.ThumbnailLink))
                            {
                                PictureFiles.Add(googleFileViewModel);
                            }
                        }
                    }

                    pageToken = filesListResponse.NextPageToken;

                    if (string.IsNullOrEmpty(pageToken))
                    {
                        _systemTrayService.HideProgressIndicator();

                        return;
                    }
                }
            }
            catch (TaskCanceledException)
            {
                _systemTrayService.HideProgressIndicator();
            }
            catch (Exception)
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Unable to update the file list!", "Error");
            }
        }
-----------------------
LONGRUNNING True 0 Cimbalino.Phone.Toolkit.Services.IMessageBoxService.Show(string, string) D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\ViewModel\NewFolderViewModel.cs
TAPReplacable CreateNewFolder()
private async void CreateNewFolder()
        {
            try
            {
                await _mainModel.CheckToken(CancellationToken.None);
            
                _systemTrayService.SetProgressIndicator("Creating new folder...");

                var file = await _googleDriveService.FilesInsert(_mainModel.CurrentAccount.AuthToken, new GoogleDriveFilesInsertRequest()
                {
                    Filename = FolderName,
                    FolderId = _mainModel.CurrentFolderId,
                    Fields = GoogleDriveFileFields
                }, CancellationToken.None);

                FolderName = string.Empty;

                MessengerInstance.Send(new RefreshFilesMessage());

                _navigationService.GoBack();
            }
            catch (TaskCanceledException)
            {
                _systemTrayService.HideProgressIndicator();
            }
            catch (Exception)
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Unable to create the new folder!", "Error");
            }
        }
--------------------------
LONGRUNNING True 0 Cimbalino.Phone.Toolkit.Services.IMessageBoxService.Show(string, string) D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\ViewModel\RenameFileViewModel.cs
TAPReplacable RenameFile()
private async void RenameFile()
        {
            try
            {
                await _mainModel.CheckToken(CancellationToken.None);

                _systemTrayService.SetProgressIndicator("Renaming the file...");

                var file = await _googleDriveService.FilesUpdate(_mainModel.CurrentAccount.AuthToken, _mainModel.SelectedFile.Id, new GoogleDriveFilesUpdateRequest()
                {
                    File = new GoogleDriveFile()
                    {
                        Title = FileName
                    },
                    Fields = GoogleDriveFileFields
                }, CancellationToken.None);

                _mainModel.SelectedFile = null;

                MessengerInstance.Send(new RefreshFilesMessage());

                _navigationService.GoBack();
            }
            catch (TaskCanceledException)
            {
                _systemTrayService.HideProgressIndicator();
            }
            catch (Exception)
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Unable to rename the file!", "Error");
            }
        }
--------------------------
LONGRUNNING True 0 Cimbalino.Phone.Toolkit.Services.IMessageBoxService.Show(string, string) D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\ViewModel\ViewFileViewModel.cs
TAPReplacable DownloadFile()
private async void DownloadFile()
        {
            try
            {
                AbortCurrentCall();

                await _mainModel.CheckToken(CancellationToken.None);

                _systemTrayService.SetProgressIndicator("Downloading file...");

                var fileData = await _googleDriveService.FileDownload(_mainModel.CurrentAccount.AuthToken, _mainModel.SelectedFile.DownloadUrl, CancellationToken.None);

                var destinationFilename = string.Format("{0}_{1:ddMMyyyyHHmmss}{2}", 
                    Path.GetFileNameWithoutExtension(_mainModel.SelectedFile.Title), 
                    DateTime.Now, 
                    Path.GetExtension(_mainModel.SelectedFile.Title));

                _mediaLibraryService.SavePicture(destinationFilename, fileData);

                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Image file downloaded and saved to phone successfully!", "File Downloaded");
            }
            catch (TaskCanceledException)
            {
                _systemTrayService.HideProgressIndicator();
            }
            catch (Exception)
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Unable to download file!", "Error");
            }
        }
--------------------------
LONGRUNNING True 0 Cimbalino.Phone.Toolkit.Services.IMessageBoxService.Show(string, string) D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\ViewModel\ViewFileViewModel.cs
TAPReplacable DownloadFile()
private async void DownloadFile()
        {
            try
            {
                AbortCurrentCall();

                await _mainModel.CheckToken(CancellationToken.None);

                _systemTrayService.SetProgressIndicator("Downloading file...");

                var fileData = await _googleDriveService.FileDownload(_mainModel.CurrentAccount.AuthToken, _mainModel.SelectedFile.DownloadUrl, CancellationToken.None);

                var destinationFilename = string.Format("{0}_{1:ddMMyyyyHHmmss}{2}", 
                    Path.GetFileNameWithoutExtension(_mainModel.SelectedFile.Title), 
                    DateTime.Now, 
                    Path.GetExtension(_mainModel.SelectedFile.Title));

                _mediaLibraryService.SavePicture(destinationFilename, fileData);

                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Image file downloaded and saved to phone successfully!", "File Downloaded");
            }
            catch (TaskCanceledException)
            {
                _systemTrayService.HideProgressIndicator();
            }
            catch (Exception)
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Unable to download file!", "Error");
            }
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP8\..\PedroLamas.GDrive.WP7\ViewModel\ExplorerViewModel.cs
private async void DeleteFiles(IEnumerable<GoogleFileViewModel> filesToDelete)
        {
            AbortCurrentCall();

            foreach (var fileViewModel in filesToDelete)
            {
                if (!await DeleteFileAsync(fileViewModel))
                {
                    break;
                }
            }

            _systemTrayService.HideProgressIndicator();
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP8\..\PedroLamas.GDrive.WP7\ViewModel\ExplorerViewModel.cs
private async Task RefreshFilesAsync()
        {
            AbortCurrentCall();

            try
            {
                var currentFolderId = _mainModel.CurrentFolderId;

                await _mainModel.CheckToken(_cancellationTokenSource.Token);

                _systemTrayService.SetProgressIndicator("Refreshing the file list...");

                Files.Clear();
                PictureFiles.Clear();

                string pageToken = null;

                while (true)
                {
                    var filesListResponse = await _googleDriveService.FilesList(_mainModel.CurrentAccount.AuthToken, new GoogleDriveFilesListRequest()
                    {
                        Query = "trashed=false and '{0}' in parents".FormatWith(currentFolderId),
                        Fields = GoogleDriveFilesListFields,
                        PageToken = pageToken
                    }, _cancellationTokenSource.Token);

                    if (filesListResponse.Items != null)
                    {
                        foreach (var item in filesListResponse.Items)
                        {
                            var googleFileViewModel = new GoogleFileViewModel(item);

                            Files.Add(googleFileViewModel);

                            if (item != null && !string.IsNullOrEmpty(item.ThumbnailLink))
                            {
                                PictureFiles.Add(googleFileViewModel);
                            }
                        }
                    }

                    pageToken = filesListResponse.NextPageToken;

                    if (string.IsNullOrEmpty(pageToken))
                    {
                        _systemTrayService.HideProgressIndicator();

                        return;
                    }
                }
            }
            catch (TaskCanceledException)
            {
                _systemTrayService.HideProgressIndicator();
            }
            catch (Exception)
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Unable to update the file list!", "Error");
            }
        }
-----------------------
LONGRUNNING True 0 Newtonsoft.Json.JsonConvert.DeserializeObject<Com.Penrillian.Kinvey.KinveyHandshakeResponse>(string) D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyHandshake.cs
TAPReplacable Do()
public async Task<KinveyHandshakeResponse> Do()
        {
            var uri = new Uri(string.Format("/appdata/{0}", KinveySettings.Get().AppKey), UriKind.Relative);

            var resp = await _httpClient.GetAsync(uri);
            var json = await resp.Content.ReadAsStringAsync();

            return JsonConvert.DeserializeObject<KinveyHandshakeResponse>(json);
        }
--------------------------
LONGRUNNING True 0 Newtonsoft.Json.JsonConvert.SerializeObject(object) D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyService.cs
TAPReplacable Create(T t)
public async Task<T> Create(T t)
        {
            var body = _factory.Get<IHttpContent>(JsonConvert.SerializeObject(t));
            var uri = new Uri(string.Format("/appdata/{0}/{1}/", KinveySettings.Get().AppKey, _entityName), UriKind.Relative);

            var response = await _httpClient.PostAsync(uri, body);
            return await GetResult<T>(response);
        }
--------------------------
LONGRUNNING True 1 Newtonsoft.Json.JsonConvert.DeserializeObject<Com.Penrillian.Kinvey.KinveyError>(string) D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyService.cs
TAPReplacable Create(T t)
private static async Task<TR> GetResult<TR>(IHttpResponseMessage response)
        {
            var content = response.Content;
            var json = await content.ReadAsStringAsync();

            try
            {
                var errorObject = JsonConvert.DeserializeObject<KinveyError>(json);
                if (null != errorObject.Error)
                    throw new KinveyException(errorObject);
            }
            catch (JsonSerializationException)
            { }

            return JsonConvert.DeserializeObject<TR>(json);
        }
--------------------------
LONGRUNNING True 1 Newtonsoft.Json.JsonConvert.DeserializeObject<TR>(string) D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyService.cs
TAPReplacable Create(T t)
private static async Task<TR> GetResult<TR>(IHttpResponseMessage response)
        {
            var content = response.Content;
            var json = await content.ReadAsStringAsync();

            try
            {
                var errorObject = JsonConvert.DeserializeObject<KinveyError>(json);
                if (null != errorObject.Error)
                    throw new KinveyException(errorObject);
            }
            catch (JsonSerializationException)
            { }

            return JsonConvert.DeserializeObject<TR>(json);
        }
--------------------------
LONGRUNNING True 0 Newtonsoft.Json.JsonConvert.SerializeObject(object) D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyService.cs
TAPReplacable Update(T t)
public async Task<T> Update(T t)
        {
            var body = _factory.Get<IHttpContent>(JsonConvert.SerializeObject(t));
            var uri = new Uri(string.Format("/appdata/{0}/{1}/{2}", KinveySettings.Get().AppKey, _entityName, t.Id), UriKind.Relative);

            var response = await _httpClient.PutAsync(uri, body);
            return await GetResult<T>(response);
        }
--------------------------
LONGRUNNING False 2 Newtonsoft.Json.JsonConvert.SerializeObject(object) D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyUserService.cs
TAPReplacable LogIn(string username, string password)
private IHttpContent GetContent<TR>(TR tr)
        {
            return _factory.Get<IHttpContent>(JsonConvert.SerializeObject(tr));
        }
--------------------------
LONGRUNNING True 2 Newtonsoft.Json.JsonConvert.DeserializeObject<Com.Penrillian.Kinvey.KinveyError>(string) D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyUserService.cs
TAPReplacable LogIn(string username, string password)
private static async Task<TResponse> ResponseOrError<TResponse>(IHttpResponseMessage response)
        {
            var responseContent = response.Content;
            var responseJson = await responseContent.ReadAsStringAsync();
            var errorObject = JsonConvert.DeserializeObject<KinveyError>(responseJson);
            if (null != errorObject.Error)
                throw new KinveyException(errorObject);
            var responseObject = JsonConvert.DeserializeObject<TResponse>(responseJson);
            return responseObject;
        }
--------------------------
LONGRUNNING True 2 Newtonsoft.Json.JsonConvert.DeserializeObject<TResponse>(string) D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyUserService.cs
TAPReplacable LogIn(string username, string password)
private static async Task<TResponse> ResponseOrError<TResponse>(IHttpResponseMessage response)
        {
            var responseContent = response.Content;
            var responseJson = await responseContent.ReadAsStringAsync();
            var errorObject = JsonConvert.DeserializeObject<KinveyError>(responseJson);
            if (null != errorObject.Error)
                throw new KinveyException(errorObject);
            var responseObject = JsonConvert.DeserializeObject<TResponse>(responseJson);
            return responseObject;
        }
--------------------------
LONGRUNNING True 0 System.IO.Stream.Read(byte[], int, int) D:\CodeCorpus\WPApps\playerframework\Phone.TimedText\Compatibility\HttpClient.cs
APMTAPReplacable GetByteArrayAsync(string address)
public async Task<byte[]> GetByteArrayAsync(string address)
        {
            using (var stream = await GetStreamAsync(new Uri(address)))
            {
                var buffer = new byte[stream.Length];
                stream.Read(buffer, 0, buffer.Length);
                return buffer;
            }
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\AdHandlerController.cs
public async Task CancelActiveAds()
#else
        public IAsyncAction CancelActiveAds()
        {
            return CancelActiveAdsInternal().AsAsyncAction();
        }

        internal async Task CancelActiveAdsInternal()
#endif
        {
            // cancel any active ads
            foreach (var handler in AdPayloadHandlers)
            {
                await handler.CancelAd(true);
            }
        }
-----------------------
BLOCKING True 5 errorTask.Result
D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\DocumentAdPayloadHandler.cs 
LoadAdUnitAsync(ICollection<ICreative> creativeSet, Ad ad, IAdSource adSource, CancellationToken cancellationToken)
public static async Task InitAdAsync(this IVpaid vpaid, double width, double height, string viewMode, int desiredBitrate, string creativeData, string environmentVariables, CancellationToken cancellationToken)
#else
        internal static async Task InitAdAsync(this IVpaid vpaid, double width, double height, string viewMode, int desiredBitrate, string creativeData, string environmentVariables, CancellationToken cancellationToken)
#endif
        {
            var errorTask = vpaid.GetErrorTask(cancellationToken);
            var loadedTask = vpaid.GetLoadedTask(cancellationToken);
            var cancellationTask = cancellationToken.AsTask();

            vpaid.InitAd(width, height, viewMode, desiredBitrate, creativeData, environmentVariables);

#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
            var completedTask = await TaskEx.WhenAny(loadedTask, errorTask, cancellationTask);
#else
            var completedTask = await Task.WhenAny(loadedTask, errorTask, cancellationTask);
#endif
            if (completedTask == errorTask)
            {
                throw errorTask.Result;
            }
            else if (completedTask == cancellationTask)
            {
                vpaid.StopAd();
            }
            cancellationToken.ThrowIfCancellationRequested();
        }
--------------------------
BLOCKING False 6 t.Result
D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\DocumentAdPayloadHandler.cs 
LoadAdUnitAsync(ICollection<ICreative> creativeSet, Ad ad, IAdSource adSource, CancellationToken cancellationToken)
internal static Task<Exception> GetErrorTask(this IVpaid vpaid, CancellationToken cancellationToken)
        {
            return TaskHelpers.FromEvent<VpaidMessageEventArgs>(eh => vpaid.AdError += eh, eh => vpaid.AdError -= eh, cancellationToken).ContinueWith(t => new Exception(t.Result.Message), TaskContinuationOptions.OnlyOnRanToCompletion);
        }
--------------------------
BLOCKING True 3 errorTask.Result
D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\DocumentAdPayloadHandler.cs 
StartAdUnitAsync(ActiveAdUnit adUnit, Ad ad, CancellationToken cancellationToken)
public static async Task StartAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
#else
        internal static async Task StartAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
#endif
        {
            var errorTask = vpaid.GetErrorTask(cancellationToken);
            var startedTask = vpaid.GetStartedTask(cancellationToken);
            var cancellationTask = cancellationToken.AsTask();

            vpaid.StartAd();

#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
            var completedTask = await TaskEx.WhenAny(startedTask, errorTask, cancellationTask);
#else
            var completedTask = await Task.WhenAny(startedTask, errorTask, cancellationTask);
#endif
            if (completedTask == errorTask)
            {
                throw errorTask.Result;
            }
            else if (completedTask == cancellationTask)
            {
                vpaid.StopAd();
            }
            cancellationToken.ThrowIfCancellationRequested();
        }
--------------------------
BLOCKING True 2 errorTask.Result
D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\DocumentAdPayloadHandler.cs 
PlayAdUnitAsync(ActiveAdUnit adUnit, CancellationToken cancellationToken)
public static async Task FinishAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
#else
        internal static async Task FinishAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
#endif
        {
            var errorTask = vpaid.GetErrorTask(cancellationToken);
            var stoppedTask = vpaid.GetStoppedTask(cancellationToken);
            var cancellationTask = cancellationToken.AsTask();

#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
            var completedTask = await TaskEx.WhenAny(stoppedTask, errorTask, cancellationTask);
#else
            var completedTask = await Task.WhenAny(stoppedTask, errorTask, cancellationTask);
#endif
            if (completedTask == errorTask)
            {
                throw errorTask.Result;
            }
            else if (completedTask == cancellationTask)
            {
                vpaid.StopAd();
            }
            cancellationToken.ThrowIfCancellationRequested();
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\DocumentAdPayloadHandler.cs
async Task PreloadAdAsync(AdDocumentPayload adDocument, IAdSource adSource, CancellationToken cancellationToken)
        {
            foreach (var adPod in adDocument.AdPods)
            {
                try
                {
                    // model expects ads to be in the correct order.
                    foreach (var ad in adPod.Ads)
                    {
                        // group the creatives by sequence number. Always put the group without sequence number at the back of the piority list in compliance with VAST spec.
                        foreach (var creativeSet in ad.Creatives.GroupBy(c => c.Sequence).OrderBy(cs => cs.Key.GetValueOrDefault(int.MaxValue)))
                        {
                            var newAdUnit = CreateAdUnit(creativeSet, ad, adSource);
                            if (newAdUnit != null) // a violation of the VAST spec but we will just ignore
                            {
                                loadOperation = LoadAdUnit(newAdUnit, cancellationToken);
                                try
                                {
                                    await loadOperation.Task;
                                    cancellationToken.ThrowIfCancellationRequested();
                                }
                                catch
                                {
                                    loadOperation = null;
                                    throw;
                                }
                                return;
                            }
                        }
                    }
                }
                catch (LoadException) { /* ignore, move to the next adpod */ }
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\Freewheel\FreewheelFactory.cs
public static async Task<AdDocumentPayload> GetAdDocumentPayload(FWTemporalAdSlot adSlot, FWAdResponse adResponse, CancellationToken c)
#endif
        {
            var payload = new AdDocumentPayload();
            var adPod = new AdPod();
            payload.AdPods.Add(adPod);
            foreach (var adReference in adSlot.SelectedAds)
            {
                var ad = await CreateAd(adResponse, adReference);
                adPod.Ads.Add(ad);

                foreach (var fallbackAdReference in adReference.FallbackAds)
                {
                    var fallbackAd = await CreateAd(adResponse, fallbackAdReference);
                    ad.FallbackAds.Add(fallbackAd);
                }
            }
            return payload;
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\Freewheel\FreewheelFactory.cs
static async Task<Ad> CreateLinearAd(FWAd source, FWAdReference reference)
        {
            var ad = new Ad();

            var allCallbacks = reference.EventCallbacks;
            foreach (var url in allCallbacks.Where(ec => ec.Type == FWCallbackType.Impression && ec.Name == FWEventCallback.DefaultImpression).SelectMany(ec => ec.GetUrls()))
            {
                ad.Impressions.Add(url);
            }

            int index = 0;
            IEnumerable<FWCreative> creatives = source.Creatives;
            if (reference.CreativeId != null)
            {
                creatives = creatives.Where(c => c.Id == reference.CreativeId);
            }
            foreach (var creative in creatives)
            {
                index++;
                var wrappedAds = new List<Ad>();
                var linear = new CreativeLinear();
                linear.Duration = creative.Duration;
                linear.Sequence = index;

                IEnumerable<FWCreativeRendition> creativeRenditions = creative.CreativeRenditions;
                if (reference.CreativeRenditionId != null)
                {
                    creativeRenditions = creativeRenditions.Where(cr => cr.Id == reference.CreativeRenditionId).DefaultIfEmpty(creativeRenditions);
                    if (reference.ReplicaId != null)
                    {
                        creativeRenditions = creativeRenditions.Where(cr => cr.AdReplicaId == reference.ReplicaId).DefaultIfEmpty(creativeRenditions);
                    }
                }

                foreach (var rendition in creativeRenditions)
                {
                    if (!string.IsNullOrEmpty(rendition.WrapperType))
                    {
                        switch (rendition.WrapperType.ToLowerInvariant())
                        {
                            case "external/vast-2":
                                try
                                {
                                    var vastAdUri = new Uri(rendition.WrapperUrl);
                                    // load the stream from the web
                                    using (var s = await Extensions.LoadStreamAsync(vastAdUri))
                                    {
                                        var wrappedVastDoc = await AdModelFactory.CreateFromVast(s, null, true);
                                        if (wrappedVastDoc != null)
                                        {
                                            // use the first ad
                                            var wrappedAd = wrappedVastDoc.AdPods.SelectMany(pod => pod.Ads).FirstOrDefault();
                                            if (wrappedAd != null)
                                            {
                                                wrappedAds.Add(wrappedAd);
                                            }
                                        }
                                    }
                                }
                                catch { /* swallow */ }
                                break;
                        }
                    }
                    else
                    {
                        // TODO: FreeWheel assets can contain Content instead of Url. This could be supported someday; for now it is ignored.
                        if (rendition.Asset != null)
                        {
                            var mediaFile = CreateMediaFile(creative, rendition, rendition.Asset);
                            if (mediaFile != null)
                            {
                                mediaFile.Ranking = (int)rendition.Preference + 1; // add one to indicate this is preferred over "OtherAssets"
                                linear.MediaFiles.Add(mediaFile);
                            }
                        }

                        foreach (var asset in rendition.OtherAssets)
                        {
                            var mediaFile = CreateMediaFile(creative, rendition, asset);
                            if (mediaFile != null)
                            {
                                mediaFile.Ranking = (int)rendition.Preference;
                                linear.MediaFiles.Add(mediaFile);
                            }
                        }
                    }
                }

                // generate callback urls from one base url
                foreach (var eventCallback in allCallbacks.Where(ec => ec.Type == FWCallbackType.Impression))
                {
                    foreach (var url in eventCallback.GetUrls())
                    {
                        switch (eventCallback.Name.ToLower())
                        {
                            case "start":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Start, Value = url });
                                break;
                            case "firstquartile":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.FirstQuartile, Value = url });
                                break;
                            case "midpoint":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Midpoint, Value = url });
                                break;
                            case "thirdquartile":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.ThirdQuartile, Value = url });
                                break;
                            case "complete":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Complete, Value = url });
                                break;
                        }
                    }
                }

                // generate callback urls from one base url
                foreach (var eventCallback in allCallbacks.Where(ec => ec.Type == FWCallbackType.Standard))
                {
                    foreach (var url in eventCallback.GetUrls())
                    {
                        switch (eventCallback.Name.Replace("-", "").ToLower())
                        {
                            case "_creativeview":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.CreativeView, Value = url });
                                break;
                            case "_mute":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Mute, Value = url });
                                break;
                            case "_unmute":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Unmute, Value = url });
                                break;
                            case "_pause":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Pause, Value = url });
                                break;
                            case "_rewind":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Rewind, Value = url });
                                break;
                            case "_resume":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Resume, Value = url });
                                break;
                            case "_fullscreen":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Fullscreen, Value = url });
                                break;
                            case "_exitfullscreen":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.ExitFullscreen, Value = url });
                                break;
                            case "_expand":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Expand, Value = url });
                                break;
                            case "_collapse":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Collapse, Value = url });
                                break;
                            case "_acceptinvitation":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.AcceptInvitation, Value = url });
                                break;
                            case "_close":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Close, Value = url });
                                break;
                            case "_skip":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Skip, Value = url });
                                break;
                            case "_progress":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Progress, Value = url });
                                break;
                        }
                    }
                }

                foreach (var url in allCallbacks.Where(ec => ec.Type == FWCallbackType.Click && !ec.ShowBrowser).SelectMany(ec => ec.GetUrls()))
                {
                    linear.ClickTracking.Add(url);
                }

                var clickUrl = allCallbacks.Where(ec => ec.Type == FWCallbackType.Click && ec.ShowBrowser).SelectMany(ec => ec.GetUrls()).FirstOrDefault();
                if (clickUrl != null)
                {
                    linear.ClickThrough = new Uri(clickUrl);
                }

                // generate callback urls from one base url ONLY when the callback does not already exist
                foreach (var eventCallback in allCallbacks.Where(ec => ec.Type == FWCallbackType.Generic))
                {
                    foreach (var url in eventCallback.GetUrls())
                    {
                        var baseUrl = url + string.Format("&metr={0}", FreeWheelFactory.GetSupportedMetrics());

                        // quartile events
                        var quartileUrl = baseUrl + "&ct=[LASTQUARTILE]&et=i"; // [LASTQUARTILE] will get replaced by the VPAID controller
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.FirstQuartile, Value = quartileUrl + "&cn=firstQuartile" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Midpoint, Value = quartileUrl + "&cn=midPoint" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.ThirdQuartile, Value = quartileUrl + "&cn=thirdQuartile" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Complete, Value = quartileUrl + "&cn=complete" });

                        // advanced metrics
                        var advancedUrl = baseUrl + "&et=s";
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Mute, Value = advancedUrl + "&cn=_mute" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Unmute, Value = advancedUrl + "&cn=_un-mute" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Collapse, Value = advancedUrl + "&cn=_collapse" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Expand, Value = advancedUrl + "&cn=_expand" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Pause, Value = advancedUrl + "&cn=_pause" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Resume, Value = advancedUrl + "&cn=_resume" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Rewind, Value = advancedUrl + "&cn=_rewind" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.AcceptInvitation, Value = advancedUrl + "&cn=_accept-invitation" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Close, Value = advancedUrl + "&cn=_close" });
                        //AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Minimize, Value = advancedUrl + "&cn=_minimize" });
                    }
                }

                ad.Creatives.Add(linear);

                foreach (var wrappedAd in wrappedAds)
                {
                    AdModelFactory.MergeWrappedAdBeacons(wrappedAd, ad);
                    var wrappedCreative = AdModelFactory.FindMatchingCreative(linear, wrappedAd);
                    AdModelFactory.MergeWrappedCreative(wrappedCreative, linear);
                }
            }

            return ad;
        }
-----------------------
BLOCKING True 0 errorTask.Result
D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\helpers\VpaidExtensions.cs 
PlayAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
public static async Task<bool> PlayAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
#else
        internal static async Task<bool> PlayAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
#endif
        {
            var errorTask = vpaid.GetErrorTask(cancellationToken);
            var stoppedTask = vpaid.GetStoppedTask(cancellationToken);
            var approachingEndTask = vpaid.GetApproachingEndTask(cancellationToken);
            var cancellationTask = cancellationToken.AsTask();

#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
            var completedTask = await TaskEx.WhenAny(stoppedTask, approachingEndTask, errorTask, cancellationTask);
#else
            var completedTask = await Task.WhenAny(stoppedTask, approachingEndTask, errorTask, cancellationTask);
#endif
            bool result = true;
            if (completedTask == errorTask)
            {
                throw errorTask.Result;
            }
            else if (completedTask == cancellationTask)
            {
                vpaid.StopAd();
            }
            else if (completedTask == approachingEndTask)
            {
                result = false;
            }
            cancellationToken.ThrowIfCancellationRequested();
            return result;
        }
--------------------------
BLOCKING True 0 errorTask.Result
D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\helpers\VpaidExtensions.cs 
StopAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
public static async Task StopAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
#else
        internal static async Task StopAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
#endif
        {
            var errorTask = vpaid.GetErrorTask(cancellationToken);
            var stoppedTask = vpaid.GetStoppedTask(cancellationToken);
            var cancellationTask = cancellationToken.AsTask();

            vpaid.StopAd();
#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
            var completedTask = await TaskEx.WhenAny(stoppedTask, errorTask, cancellationTask);
#else
            var completedTask = await Task.WhenAny(stoppedTask, errorTask, cancellationTask);
#endif
            if (completedTask == errorTask)
            {
                throw errorTask.Result;
            }
            cancellationToken.ThrowIfCancellationRequested();
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\vast\AdModelFactory.cs
public static async Task<AdDocumentPayload> CreateFromVast(Stream stream, int? maxRedirectDepth, bool allowMultipleAds)
#else
        public static IAsyncOperation<AdDocumentPayload> CreateFromVast(IInputStream stream, int? maxRedirectDepth, bool allowMultipleAds)
        {
            return AsyncInfo.Run(c => CreateFromVast(stream.AsStreamForRead(), maxRedirectDepth, allowMultipleAds));
        }

        internal static async Task<AdDocumentPayload> CreateFromVast(Stream stream, int? maxRedirectDepth, bool allowMultipleAds)
#endif
        {
            XDocument xDoc = XDocument.Load(stream);
            XElement vastRoot = xDoc.Element("VAST");
            if (vastRoot == null)
            {
                vastRoot = xDoc.Element("VideoAdServingTemplate");
                if (vastRoot == null) throw new NotImplementedException();
                return await CreateFromVast1(vastRoot, maxRedirectDepth, allowMultipleAds);
            }
            else
            {
                var result = new AdDocumentPayload();
                result.Version = (string)vastRoot.Attribute("version");
                result.Error = (string)vastRoot.Element("Error");

                var eligableAds = vastRoot.Elements("Ad");
                if (!allowMultipleAds)
                {
                    eligableAds = eligableAds.Where(va => string.IsNullOrEmpty((string)va.Attribute("sequence")));
                }
                foreach (var vastAdPod in eligableAds.GroupBy(va => va.Attribute("sequence") != null ? 1 : int.MaxValue).OrderBy(vap => vap.Key))
                {
                    var adPod = new AdPod();
                    foreach (var vastAd in vastAdPod.OrderBy(va => ToNullableInt((string)va.Attribute("sequence")).GetValueOrDefault(0)))
                    {
                        var ad = new Ad();
                        ad.Id = (string)vastAd.Attribute("id");

                        if (vastAd.Elements("InLine").Any())
                        {
                            var vastAdInline = vastAd.Element("InLine");

                            ad.AdSystem = GetAdSystem(vastAdInline.Element("AdSystem"));

                            ad.Advertiser = (string)vastAdInline.Element("Advertiser");
                            ad.Description = (string)vastAdInline.Element("Description");
                            var error = (string)vastAdInline.Element("Error");
                            if (error != null) ad.Errors.Add(error);
                            ad.Title = (string)vastAdInline.Element("AdTitle");
                            ad.Survey = GetUriValue(vastAdInline.Element("Survey"));

                            ad.Pricing = new Pricing();
                            var pricing = vastAdInline.Element("Pricing");
                            if (pricing != null)
                            {
                                ad.Pricing.Currency = (string)pricing.Attribute("currency");
                                ad.Pricing.Model = (PricingModel)Enum.Parse(typeof(PricingModel), (string)pricing.Attribute("model"), true);
                                ad.Pricing.Value = Convert.ToDouble((string)pricing);
                            }

                            foreach (var vastImpression in vastAdInline.Elements("Impression"))
                            {
                                ad.Impressions.Add((string)vastImpression);
                            }

                            if (vastAdInline.Elements("Extensions").Any())
                            {
                                foreach (var vastExtension in vastAdInline.Element("Extensions").Elements("Extension"))
                                {
                                    ad.Extensions.Add(new Extension()); // TODO
                                }
                            }

                            LoadCreatives(vastAdInline, ad);

                            adPod.Ads.Add(ad);
                        }
                        else if (vastAd.Elements("Wrapper").Any())
                        {
                            Ad wrapper = new Ad();
                            var vastAdWrapper = vastAd.Element("Wrapper");

                            // parse the wrapper itself
                            wrapper.AdSystem = GetAdSystem(vastAdWrapper.Element("AdSystem"));
                            var error = (string)vastAdWrapper.Element("Error");
                            if (error != null) wrapper.Errors.Add(error);

                            foreach (var vastImpression in vastAdWrapper.Elements("Impression"))
                            {
                                wrapper.Impressions.Add((string)vastImpression);
                            }

                            LoadCreatives(vastAdWrapper, wrapper);

                            if (vastAdWrapper.Elements("Extensions").Any())
                            {
                                foreach (var vastExtension in vastAdWrapper.Element("Extensions").Elements("Extension"))
                                {
                                    ad.Extensions.Add(new Extension()); // TODO
                                }
                            }

                            AdDocumentPayload wrappedVastDoc = null;
                            var vastAdUri = GetUriValue(vastAdWrapper.Element("VASTAdTagURI"));
                            if (vastAdUri != null && (!maxRedirectDepth.HasValue || maxRedirectDepth.Value > 0))
                            {
                                try
                                {
                                    // load the stream from the web
                                    using (var s = await Extensions.LoadStreamAsync(vastAdUri))
                                    {
                                        var newAllowMultipleAds = vastAdWrapper.GetBoolAttribute("allowMultipleAds", allowMultipleAds);
                                        var followAdditionalWrappers = vastAdWrapper.GetBoolAttribute("followAdditionalWrappers", true);
                                        int? nextMaxRedirectDepth = followAdditionalWrappers ? (maxRedirectDepth.HasValue ? maxRedirectDepth.Value - 1 : maxRedirectDepth) : 0;
                                        wrappedVastDoc = await CreateFromVast(s, nextMaxRedirectDepth, newAllowMultipleAds);
                                    }
                                }
                                catch { /* swallow */ }
                            }

                            AdPod wrappedAdPod = null;
                            if (wrappedVastDoc != null)
                            {
                                wrappedAdPod = wrappedVastDoc.AdPods.FirstOrDefault();
                            }

                            if (wrappedAdPod == null || !wrappedAdPod.Ads.Any())
                            {
                                // no ads were returned
                                var fallbackOnNoAd = vastAdWrapper.GetBoolAttribute("fallbackOnNoAd", true);
                                if (fallbackOnNoAd)
                                {
                                    wrappedAdPod = FallbackAdPod;
                                }
                            }

                            if (wrappedAdPod != null)
                            {
                                // merge tracking info from this wrapper to every ad in the first adpod in the child
                                foreach (Ad inlineAd in wrappedAdPod.Ads)
                                    MergeWrappedAd(wrapper, inlineAd);

                                // add each ad from the first adpod in the child to the current adpod
                                foreach (Ad inlineAd in wrappedAdPod.Ads)
                                    adPod.Ads.Add(inlineAd);
                            }
                        }
                    }
                    result.AdPods.Add(adPod);
                }
                return result;
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\Vast\AdModelFactory_Vast1.cs
internal static async Task<AdDocumentPayload> CreateFromVast1(XElement vastRoot, int? maxRedirectDepth, bool allowMultipleAds)
        {
            var result = new AdDocumentPayload();
            result.Version = (string)vastRoot.Attribute("version");

            foreach (var vastAdPod in vastRoot.Elements("Ad").GroupBy(va => va.Attribute("sequence") != null ? 1 : int.MaxValue).OrderBy(vap => vap.Key))
            {
                var adPod = new AdPod();
                foreach (var vastAd in vastAdPod.OrderBy(va => ToNullableInt((string)va.Attribute("sequence")).GetValueOrDefault(0)))
                {
                    var ad = new Ad();
                    ad.Id = (string)vastAd.Attribute("id");

                    if (vastAd.Elements("InLine").Any())
                    {
                        throw new NotImplementedException();
                    }
                    else if (vastAd.Elements("Wrapper").Any())
                    {
                        Ad wrapper = new Ad();
                        var vastAdWrapper = vastAd.Element("Wrapper");

                        // parse the wrapper itself
                        wrapper.AdSystem = GetAdSystem(vastAdWrapper.Element("AdSystem"));
                        var error = (string)vastAdWrapper.Element("Error");
                        if (error == null) wrapper.Errors.Add(error);

                        var linearCreative = new CreativeLinear();

                        foreach (var trackingEvent in GetTrackingEvents(vastAdWrapper))
                            linearCreative.TrackingEvents.Add(trackingEvent);

                        LoadVideoClicks(vastAdWrapper, linearCreative);

                        wrapper.Creatives.Add(linearCreative);

                        var vastAdUri = GetUriValue(vastAdWrapper.Element("VASTAdTagURL"));
                        if (vastAdUri != null)
                        {
                            // load the stream from the web
                            using (var s = await Extensions.LoadStreamAsync(vastAdUri))
                            {
                                int? nextMaxRedirectDepth = maxRedirectDepth.HasValue ? maxRedirectDepth.Value - 1 : maxRedirectDepth;
                                var vastDoc = await CreateFromVast(s, nextMaxRedirectDepth, allowMultipleAds);

                                var firstAdPodInChild = vastDoc.AdPods.FirstOrDefault();

                                if (firstAdPodInChild != null)
                                {
                                    // merge tracking info from this wrapper to every ad in the first adpod in the child
                                    foreach (Ad inlineAd in firstAdPodInChild.Ads)
                                        MergeWrappedAd(wrapper, inlineAd);

                                    // add each ad from the first adpod in the child to the current adpod
                                    foreach (Ad inlineAd in firstAdPodInChild.Ads)
                                        adPod.Ads.Add(inlineAd);
                                }
                            }
                        }
                    }
                }
                result.AdPods.Add(adPod);
            }
            return result;
        }
-----------------------
LONGRUNNING True 1 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\playerframework\Phone.SL.TimedText\..\Win8.Xaml.TimedText\CaptionsPlugin.cs
TAPReplacable RefreshCaption(Caption caption, bool forceRefresh)
public static async Task<string> LoadToString(this Uri source)
        {
            using (var stream = await source.LoadToStream())
            {
                return new StreamReader(stream).ReadToEnd();
            }
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\AdSchedulerPlugin.cs
async Task PlayAds(IEnumerable<Advertisement> advertisements, CancellationToken cancellationToken)
        {
            foreach (var advertisement in advertisements)
            {
                try
                {
                    await PlayAdAsync(advertisement, cancellationToken);
                }
                catch { /* swallow */ }
                if (cancellationToken.IsCancellationRequested) break;
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\FreewheelPlugin.cs
public async Task LoadAds(Uri source, CancellationToken c)
        {
            adSlots.Clear();
            var cancellationToken = CancellationTokenSource.CreateLinkedTokenSource(c, cts.Token).Token;

#if SILVERLIGHT
            adResponse = await FreeWheelFactory.LoadSource(source, cancellationToken);
#else
            adResponse = await FreeWheelFactory.LoadSource(source).AsTask(cancellationToken);
#endif

            var videoTracking = adResponse.SiteSection.VideoPlayer.VideoAsset.EventCallbacks.FirstOrDefault(ec => ec.Name == FWEventCallback.VideoView);
            if (videoTracking != null)
            {
                // use the tracking plugins to help with tracking markers. Create it if it doesn't exist.
                var positionTrackingPlugin = MediaPlayer.Plugins.OfType<PositionTrackingPlugin>().FirstOrDefault();
                if (positionTrackingPlugin == null)
                {
                    positionTrackingPlugin = new PositionTrackingPlugin();
                    MediaPlayer.Plugins.Add(positionTrackingPlugin);
                }
                positionTrackingPlugin.EventTracked += trackingPlugin_EventTracked;
                lastTrackingEvent = null; // reset
                trackingEnded = false;
                positionTrackingPlugin.TrackingEvents.Add(new PositionTrackingEvent() { PositionPercentage = 1, Data = videoTracking, Area = TrackingEventArea });

                var playTimeTrackingPlugin = MediaPlayer.Plugins.OfType<PlayTimeTrackingPlugin>().FirstOrDefault();
                if (playTimeTrackingPlugin == null)
                {
                    playTimeTrackingPlugin = new PlayTimeTrackingPlugin();
                    MediaPlayer.Plugins.Add(playTimeTrackingPlugin);
                }
                playTimeTrackingPlugin.EventTracked += trackingPlugin_EventTracked;
                for (int i = 0; i < 60; i = i + 15)
                    playTimeTrackingPlugin.TrackingEvents.Add(new PlayTimeTrackingEvent() { PlayTime = TimeSpan.FromSeconds(i), Data = videoTracking, Area = TrackingEventArea });
                for (int i = 60; i < 60 * 3; i = i + 30)
                    playTimeTrackingPlugin.TrackingEvents.Add(new PlayTimeTrackingEvent() { PlayTime = TimeSpan.FromSeconds(i), Data = videoTracking, Area = TrackingEventArea });
                for (int i = 60 * 3; i < 60 * 10; i = i + 60)
                    playTimeTrackingPlugin.TrackingEvents.Add(new PlayTimeTrackingEvent() { PlayTime = TimeSpan.FromSeconds(i), Data = videoTracking, Area = TrackingEventArea });
                for (int i = 60 * 10; i < 60 * 30; i = i + 120)
                    playTimeTrackingPlugin.TrackingEvents.Add(new PlayTimeTrackingEvent() { PlayTime = TimeSpan.FromSeconds(i), Data = videoTracking, Area = TrackingEventArea });
                for (int i = 60 * 30; i < 60 * 60; i = i + 300)
                    playTimeTrackingPlugin.TrackingEvents.Add(new PlayTimeTrackingEvent() { PlayTime = TimeSpan.FromSeconds(i), Data = videoTracking, Area = TrackingEventArea });
                for (int i = 60 * 60; i < 60 * 180; i = i + 600)
                    playTimeTrackingPlugin.TrackingEvents.Add(new PlayTimeTrackingEvent() { PlayTime = TimeSpan.FromSeconds(i), Data = videoTracking, Area = TrackingEventArea });
            }

            var videoAsset = adResponse.SiteSection.VideoPlayer.VideoAsset;
            if (videoAsset != null)
            {
                foreach (var adSlot in videoAsset.AdSlots)
                {
                    Advertisement ad = null;
                    switch (adSlot.TimePositionClass)
                    {
                        case "preroll":
                            ad = new PrerollAdvertisement();
                            break;
                        case "postroll":
                            ad = new PostrollAdvertisement();
                            break;
                        default:
                            var midroll = new MidrollAdvertisement();
                            midroll.Time = adSlot.TimePosition;
                            ad = midroll;
                            break;
                    }

#if SILVERLIGHT
                    var payload = await FreeWheelFactory.GetAdDocumentPayload(adSlot, adResponse, cancellationToken);
#else
                    var payload = await FreeWheelFactory.GetAdDocumentPayload(adSlot, adResponse).AsTask(cancellationToken);
#endif
                    ad.Source = new AdSource(payload, DocumentAdPayloadHandler.AdType);

                    Advertisements.Add(ad);
                    adSlots.Add(ad, adSlot);
                }
            }

            ShowCompanions();
        }
-----------------------
LONGRUNNING False 3 System.IO.StringReader.ReadLine() D:\CodeCorpus\WPApps\playerframework\Phone.SL.WebVTT\..\Win8.Xaml.WebVTT\WebVTTPlugin.cs
TAPReplacable LoadWebVTTDocument(string webvtt, TimeSpan startTime, TimeSpan endTime)
public string ReadBlock()
        {
            StringBuilder result = new StringBuilder();
            while (true)
            {
                var line = Reader.ReadLine();
                if (!string.IsNullOrWhiteSpace(line))
                {
                    if (result.Length > 0) result.AppendLine();
                    result.Append(line);
                }
                else if (line == null || result.Length > 0) // allow for multiple blank lines
                {
                    break;
                }
            }
            return result.Length > 0 ? result.ToString() : null;
        }
--------------------------
LONGRUNNING False 3 System.IO.StringReader.ReadLine() D:\CodeCorpus\WPApps\playerframework\Phone.SL.WebVTT\..\Win8.Xaml.WebVTT\WebVTTPlugin.cs
TAPReplacable LoadWebVTTDocument(string webvtt, TimeSpan startTime, TimeSpan endTime)
private static WebVTTCue ParseCue(string block, TimeSpan timeOffset)
        {
            var cueReader = new StringReader(block);

            WebVTTCue result = new WebVTTCue();
            var line = cueReader.ReadLine();
            if (!line.Contains(cueIdentifier))
            {
                result.StyleClass = line;
                line = cueReader.ReadLine();
            }

            var parts = line.Split(cueHeaderSeparator, StringSplitOptions.RemoveEmptyEntries);
            if (parts[1] != cueIdentifier) throw new Exception("Invalid WebVTT cue time separator");
            result.Begin = ParseTimeStamp(parts[0]).Add(timeOffset);
            result.End = ParseTimeStamp(parts[2]).Add(timeOffset);
            if (parts.Length >= 3)
            {
                var settingsDictionary = parts.Skip(3)
                    .Select(p => p.Split(':'))
                    .ToDictionary(i => i[0], i => i[1]);
                result.Settings = ParseCueSettings(settingsDictionary);
            }

            StringBuilder cueContent = new StringBuilder();
            do
            {
                line = cueReader.ReadLine();
                if (line == null) break;
                if (line.Contains(cueIdentifier)) throw new Exception("Invalid WebVTT cue content");
                if (cueContent.Length > 0) cueContent.AppendLine();
                cueContent.Append(line);

            } while (true);
            result.Content = ParseCueContent(cueContent.ToString(), timeOffset);

            return result;
        }
--------------------------
LONGRUNNING False 3 System.IO.StringReader.ReadLine() D:\CodeCorpus\WPApps\playerframework\Phone.SL.WebVTT\..\Win8.Xaml.WebVTT\WebVTTPlugin.cs
TAPReplacable LoadWebVTTDocument(string webvtt, TimeSpan startTime, TimeSpan endTime)
private static WebVTTCue ParseCue(string block, TimeSpan timeOffset)
        {
            var cueReader = new StringReader(block);

            WebVTTCue result = new WebVTTCue();
            var line = cueReader.ReadLine();
            if (!line.Contains(cueIdentifier))
            {
                result.StyleClass = line;
                line = cueReader.ReadLine();
            }

            var parts = line.Split(cueHeaderSeparator, StringSplitOptions.RemoveEmptyEntries);
            if (parts[1] != cueIdentifier) throw new Exception("Invalid WebVTT cue time separator");
            result.Begin = ParseTimeStamp(parts[0]).Add(timeOffset);
            result.End = ParseTimeStamp(parts[2]).Add(timeOffset);
            if (parts.Length >= 3)
            {
                var settingsDictionary = parts.Skip(3)
                    .Select(p => p.Split(':'))
                    .ToDictionary(i => i[0], i => i[1]);
                result.Settings = ParseCueSettings(settingsDictionary);
            }

            StringBuilder cueContent = new StringBuilder();
            do
            {
                line = cueReader.ReadLine();
                if (line == null) break;
                if (line.Contains(cueIdentifier)) throw new Exception("Invalid WebVTT cue content");
                if (cueContent.Length > 0) cueContent.AppendLine();
                cueContent.Append(line);

            } while (true);
            result.Content = ParseCueContent(cueContent.ToString(), timeOffset);

            return result;
        }
--------------------------
LONGRUNNING False 3 System.IO.StringReader.ReadLine() D:\CodeCorpus\WPApps\playerframework\Phone.SL.WebVTT\..\Win8.Xaml.WebVTT\WebVTTPlugin.cs
TAPReplacable LoadWebVTTDocument(string webvtt, TimeSpan startTime, TimeSpan endTime)
private static WebVTTCue ParseCue(string block, TimeSpan timeOffset)
        {
            var cueReader = new StringReader(block);

            WebVTTCue result = new WebVTTCue();
            var line = cueReader.ReadLine();
            if (!line.Contains(cueIdentifier))
            {
                result.StyleClass = line;
                line = cueReader.ReadLine();
            }

            var parts = line.Split(cueHeaderSeparator, StringSplitOptions.RemoveEmptyEntries);
            if (parts[1] != cueIdentifier) throw new Exception("Invalid WebVTT cue time separator");
            result.Begin = ParseTimeStamp(parts[0]).Add(timeOffset);
            result.End = ParseTimeStamp(parts[2]).Add(timeOffset);
            if (parts.Length >= 3)
            {
                var settingsDictionary = parts.Skip(3)
                    .Select(p => p.Split(':'))
                    .ToDictionary(i => i[0], i => i[1]);
                result.Settings = ParseCueSettings(settingsDictionary);
            }

            StringBuilder cueContent = new StringBuilder();
            do
            {
                line = cueReader.ReadLine();
                if (line == null) break;
                if (line.Contains(cueIdentifier)) throw new Exception("Invalid WebVTT cue content");
                if (cueContent.Length > 0) cueContent.AppendLine();
                cueContent.Append(line);

            } while (true);
            result.Content = ParseCueContent(cueContent.ToString(), timeOffset);

            return result;
        }
--------------------------
LONGRUNNING False 5 System.IO.StringReader.Read() D:\CodeCorpus\WPApps\playerframework\Phone.SL.WebVTT\..\Win8.Xaml.WebVTT\WebVTTPlugin.cs
TAPReplacable LoadWebVTTDocument(string webvtt, TimeSpan startTime, TimeSpan endTime)
public WebVTTContentBase Read()
        {
            WebVTTContentBase result = null;
            StringBuilder sb = new StringBuilder();
            bool lookForEnd = false;

            while (true)
            {
                int ci = Reader.Peek();
                if (ci < 0) break; // at the end

                var c = Convert.ToChar(ci);
                if (c == '<' && result != null) break; // we found a new node start, that means we're done and should return without actually reading the next char

                Reader.Read();
                if (c == '<')
                {
                    result = new WebVTTContentNodeStart();
                    lookForEnd = true;
                }
                else if (c == '>')
                {
                    break;
                }
                else
                {
                    if (result == null)
                    {
                        result = new WebVTTContentText();
                    }
                    if (c == '&')
                    {
                        c = ReadEscapedChar(Reader);
                    }
                    sb.Append(c);
                }

                if (lookForEnd)
                {
                    lookForEnd = false;
                    ci = Reader.Peek();
                    if (Convert.ToChar(ci) == '/')
                    {
                        Reader.Read();
                        result = new WebVTTContentNodeEnd();
                    }
                }
            }

            if (result is WebVTTContentText)
            {
                var r = (WebVTTContentText)result;
                r.Text = sb.ToString();
            }
            else if (result is WebVTTContentNodeEnd)
            {
                var r = (WebVTTContentNodeEnd)result;
                r.Name = sb.ToString();
            }
            else if (result is WebVTTContentNodeStart)
            {
                var r = (WebVTTContentNodeStart)result;
                var annotationParts = sb.ToString().Split(new[] { ' ' }, 2);
                r.NameAndClass = annotationParts[0];
                var nameParts = r.NameAndClass.Split('.');
                r.Name = nameParts[0];
                for (int i = 1; i < nameParts.Length; i++)
                {
                    r.Classes.Add(nameParts[i]);
                }
                for (int i = 1; i < annotationParts.Length; i++)
                {
                    r.Annotation = annotationParts[i];
                }
            }

            return result;
        }
--------------------------
LONGRUNNING False 5 System.IO.StringReader.Read() D:\CodeCorpus\WPApps\playerframework\Phone.SL.WebVTT\..\Win8.Xaml.WebVTT\WebVTTPlugin.cs
TAPReplacable LoadWebVTTDocument(string webvtt, TimeSpan startTime, TimeSpan endTime)
public WebVTTContentBase Read()
        {
            WebVTTContentBase result = null;
            StringBuilder sb = new StringBuilder();
            bool lookForEnd = false;

            while (true)
            {
                int ci = Reader.Peek();
                if (ci < 0) break; // at the end

                var c = Convert.ToChar(ci);
                if (c == '<' && result != null) break; // we found a new node start, that means we're done and should return without actually reading the next char

                Reader.Read();
                if (c == '<')
                {
                    result = new WebVTTContentNodeStart();
                    lookForEnd = true;
                }
                else if (c == '>')
                {
                    break;
                }
                else
                {
                    if (result == null)
                    {
                        result = new WebVTTContentText();
                    }
                    if (c == '&')
                    {
                        c = ReadEscapedChar(Reader);
                    }
                    sb.Append(c);
                }

                if (lookForEnd)
                {
                    lookForEnd = false;
                    ci = Reader.Peek();
                    if (Convert.ToChar(ci) == '/')
                    {
                        Reader.Read();
                        result = new WebVTTContentNodeEnd();
                    }
                }
            }

            if (result is WebVTTContentText)
            {
                var r = (WebVTTContentText)result;
                r.Text = sb.ToString();
            }
            else if (result is WebVTTContentNodeEnd)
            {
                var r = (WebVTTContentNodeEnd)result;
                r.Name = sb.ToString();
            }
            else if (result is WebVTTContentNodeStart)
            {
                var r = (WebVTTContentNodeStart)result;
                var annotationParts = sb.ToString().Split(new[] { ' ' }, 2);
                r.NameAndClass = annotationParts[0];
                var nameParts = r.NameAndClass.Split('.');
                r.Name = nameParts[0];
                for (int i = 1; i < nameParts.Length; i++)
                {
                    r.Classes.Add(nameParts[i]);
                }
                for (int i = 1; i < annotationParts.Length; i++)
                {
                    r.Annotation = annotationParts[i];
                }
            }

            return result;
        }
--------------------------
LONGRUNNING False 6 System.IO.StringReader.Read() D:\CodeCorpus\WPApps\playerframework\Phone.SL.WebVTT\..\Win8.Xaml.WebVTT\WebVTTPlugin.cs
TAPReplacable LoadWebVTTDocument(string webvtt, TimeSpan startTime, TimeSpan endTime)
static char ReadEscapedChar(StringReader reader)
        {
            var sb = new StringBuilder();
            char c;
            do
            {
                int i = reader.Read();
                if (i < 0) break; // we reached the end. Indicates bad WebVTT
                c = Convert.ToChar(i);
                sb.Append(c);
            } while (c != ';');
            switch (sb.ToString())
            {
                case "amp;":
                    return '&';
                case "lt;":
                    return '<';
                case "gt;":
                    return '>';
                case "lrm;":
                    return Convert.ToChar(0x200E);
                case "rlm;":
                    return Convert.ToChar(0x200F);
                case "nbsp;":
                    return ' ';
                default:
                    return new char();
            }
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\CFF\CffDownloaderPlugin.cs
TAPReplacable DownloadManifestAsync(Uri source, CancellationToken c)
protected virtual async Task<Stream> DownloadManifestAsync(Uri source, CancellationToken c)
        {
            await this.parser.Parse(source);
            c.ThrowIfCancellationRequested();

            var manifestStream = this.parser.GenerateClientManifestStream();

#if DEBUG
            var reader = new System.IO.StreamReader(manifestStream);
            Debug.WriteLine(reader.ReadToEnd());
            manifestStream.Seek(0, SeekOrigin.Begin);
#endif
            parser.Boxes.Clear();

            return manifestStream;
        }
--------------------------
LONGRUNNING False 3 System.IO.Stream.CopyTo(System.IO.Stream) D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\CFF\Progressive\ProgressiveCffFileParser.cs
TAPReplacable DownloadFragment(Uri uri, long offset, long size)
private static Stream GetStream(HttpWebResponse result)
        {
            var memoryStream = new MemoryStream();
            result.GetResponseStream().CopyTo(memoryStream);
            memoryStream.Seek(0, SeekOrigin.Begin);
            return memoryStream;
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\Dash\DashManifestConverter.cs
public static async Task<DashManifestConversionResult> ConvertToSmoothManifest(XDocument source, Uri rootUri)
        {
            var result = new DashManifestConversionResult();

            SmoothStreamingMedia manifest = new SmoothStreamingMedia();
            result.Manifest = manifest;

            var mpd = MPDFactory.LoadMPD(source.Root);

            // Get Duration
            if (mpd.MediaPresentationDuration.HasValue)
            {
                manifest.Duration = (ulong)mpd.MediaPresentationDuration.Value.Ticks;
            }
            manifest.IsLive = (mpd.Type == Presentation.Dynamic);
            //manifest.LookaheadCount = 2;
            if (mpd.AvailabilityEndTime.HasValue && mpd.AvailabilityStartTime.HasValue)
            {
                manifest.DVRWindowLength = (ulong)mpd.AvailabilityEndTime.Value.Subtract(mpd.AvailabilityStartTime.Value).Ticks;
            }

            foreach (var period in mpd.Period)
            {
                foreach (var adaptationSet in period.AdaptationSet)
                {
                    SmoothStreamingMediaStreamIndex streamIndex = null;
                    int representationIndex = 0;
                    foreach (var representation in adaptationSet.Representation)
                    {
                        string mediaUrl = null;
                        Uri initializationUri = null;
                        WebRequestor.Range initializationRange = null;
                        if (adaptationSet.SegmentTemplate != null)
                        {
                            var segmentTemplate = adaptationSet.SegmentTemplate;
                            var initializationTemplateUrl = segmentTemplate.InitializationValue;

                            initializationTemplateUrl = initializationTemplateUrl
                                .Replace("$$", "$")
                                .Replace("$RepresentationId$", representation.Id)
                                .Replace("$Number$", representationIndex.ToString())
                                .Replace("$Bandwidth$", representation.Bandwidth.ToString());
                            initializationUri = new Uri(rootUri, initializationTemplateUrl);
                            mediaUrl = segmentTemplate.Media
                                .Replace("$$", "$")
                                .Replace("$Bandwidth$", "{bitrate}")
                                .Replace("$Time$", "{start time}");
                        }
                        else if (representation.SegmentBase != null)
                        {
                            var baseUrl = representation.BaseURL.First().Value;
                            var segmentBase = representation.SegmentBase;
                            if (segmentBase.Initialization != null)
                            {
                                if (!string.IsNullOrEmpty(segmentBase.Initialization.SourceURL))
                                {
                                    initializationUri = new Uri(rootUri, segmentBase.Initialization.SourceURL);
                                }
                                initializationRange = WebRequestor.Range.FromString(segmentBase.Initialization.Range);
                            }
                            if (initializationUri == null)
                            {
                                initializationUri = new Uri(rootUri, baseUrl);
                            }
                        }
                        else throw new NotImplementedException();

                        var initializationBoxes = await GetBoxesAsync(initializationUri, initializationRange);

                        if (manifest.Protection == null) // support for CENC encryption
                        {
                            var moov = initializationBoxes.SingleOrDefault(b => b.Type == BoxType.Moov);
                            if (moov != null)
                            {
                                manifest.Protection = SmoothFactory.GetProtectionHeader(moov);
                            }
                        }

                        var trackStreamIndex = SmoothFactory.GenerateClientManifestStreamIndex(initializationBoxes);
                        var track = trackStreamIndex.QualityLevel.First();
                        if (streamIndex != null)
                        {
                            track.Index = (uint)streamIndex.QualityLevel.Count; // index is zero based so this is always equal to the current count
                            streamIndex.QualityLevel.Add(track);
                            streamIndex.MaxWidth = Math.Max(trackStreamIndex.MaxWidth, streamIndex.MaxWidth);
                            streamIndex.MaxHeight = Math.Max(trackStreamIndex.MaxHeight, streamIndex.MaxHeight);
                            streamIndex.DisplayWidth = streamIndex.MaxWidth;
                            streamIndex.DisplayHeight = streamIndex.MaxHeight;
                        }
                        else
                        {
                            streamIndex = trackStreamIndex;
                            if (mediaUrl != null) streamIndex.Url = mediaUrl;
                        }

                        track.Bitrate = representation.Bandwidth;

                        // create chunks
                        if (adaptationSet.SegmentTemplate != null)
                        {
                            if (adaptationSet.SegmentTemplate.SegmentTimeline != null)
                            {
                                if (!streamIndex.c.Any())
                                {
                                    streamIndex.c.AddRange(CreateChunks(adaptationSet.SegmentTemplate.SegmentTimeline));
                                    if (!manifest.IsLive) streamIndex.Chunks = (uint)streamIndex.c.Count;
                                }
                            }
                            else throw new NotImplementedException();
                        }
                        else if (representation.SegmentBase != null)
                        {
                            // TODO:/OPTIMIZE: request at the same time as initialization header
                            var segmentBase = representation.SegmentBase;
                            var indexRange = segmentBase.IndexRange.Split('-').Select(r => long.Parse(r)).ToArray();
                            var baseUrl = representation.BaseURL.First().Value;
                            var segmentIndexUri = new Uri(rootUri, baseUrl);
                            var segmentIndexRange = WebRequestor.Range.FromString(segmentBase.IndexRange);
                            var segmentIndexBoxes = await GetBoxesAsync(segmentIndexUri, segmentIndexRange);
                            var sidx = segmentIndexBoxes.OfType<SegmentIndexBox>().First();

                            // remove the track if the sidx durations don't match the chunk durations.
                            //if (streamIndex.c.Any() && sidx.Subsegments.First().Duration != streamIndex.c.First().d)
                            //{
                            //    streamIndex.QualityLevel.Remove(track);
                            //    break;
                            //}

                            track.Bitrate = CalculateBitrate(sidx);

                            if (!streamIndex.c.Any())
                            {
                                streamIndex.c.AddRange(CreateChunks(sidx));
                                if (!manifest.IsLive) streamIndex.Chunks = (uint)streamIndex.c.Count;
                            }
                            foreach (var kvp in GetChunkLookups(streamIndex, track, segmentIndexUri, sidx))
                            {
                                result.ChunkLookup.Add(kvp.Key, kvp.Value);
                            }
                        }
                        else throw new NotImplementedException();

                        representationIndex++;
                    }
                    
                    manifest.StreamIndex.Add(streamIndex);
                }
            }

            return result;
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\AdHandlerController.cs
public async Task CancelActiveAds()
#else
        public IAsyncAction CancelActiveAds()
        {
            return CancelActiveAdsInternal().AsAsyncAction();
        }

        internal async Task CancelActiveAdsInternal()
#endif
        {
            // cancel any active ads
            foreach (var handler in AdPayloadHandlers)
            {
                await handler.CancelAd(true);
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\DocumentAdPayloadHandler.cs
async Task PreloadAdAsync(AdDocumentPayload adDocument, IAdSource adSource, CancellationToken cancellationToken)
        {
            foreach (var adPod in adDocument.AdPods)
            {
                try
                {
                    // model expects ads to be in the correct order.
                    foreach (var ad in adPod.Ads)
                    {
                        // group the creatives by sequence number. Always put the group without sequence number at the back of the piority list in compliance with VAST spec.
                        foreach (var creativeSet in ad.Creatives.GroupBy(c => c.Sequence).OrderBy(cs => cs.Key.GetValueOrDefault(int.MaxValue)))
                        {
                            var newAdUnit = CreateAdUnit(creativeSet, ad, adSource);
                            if (newAdUnit != null) // a violation of the VAST spec but we will just ignore
                            {
                                loadOperation = LoadAdUnit(newAdUnit, cancellationToken);
                                try
                                {
                                    await loadOperation.Task;
                                    cancellationToken.ThrowIfCancellationRequested();
                                }
                                catch
                                {
                                    loadOperation = null;
                                    throw;
                                }
                                return;
                            }
                        }
                    }
                }
                catch (LoadException) { /* ignore, move to the next adpod */ }
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\Freewheel\FreewheelFactory.cs
public static async Task<AdDocumentPayload> GetAdDocumentPayload(FWTemporalAdSlot adSlot, FWAdResponse adResponse, CancellationToken c)
#endif
        {
            var payload = new AdDocumentPayload();
            var adPod = new AdPod();
            payload.AdPods.Add(adPod);
            foreach (var adReference in adSlot.SelectedAds)
            {
                var ad = await CreateAd(adResponse, adReference);
                adPod.Ads.Add(ad);

                foreach (var fallbackAdReference in adReference.FallbackAds)
                {
                    var fallbackAd = await CreateAd(adResponse, fallbackAdReference);
                    ad.FallbackAds.Add(fallbackAd);
                }
            }
            return payload;
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\Freewheel\FreewheelFactory.cs
static async Task<Ad> CreateLinearAd(FWAd source, FWAdReference reference)
        {
            var ad = new Ad();

            var allCallbacks = reference.EventCallbacks;
            foreach (var url in allCallbacks.Where(ec => ec.Type == FWCallbackType.Impression && ec.Name == FWEventCallback.DefaultImpression).SelectMany(ec => ec.GetUrls()))
            {
                ad.Impressions.Add(url);
            }

            int index = 0;
            IEnumerable<FWCreative> creatives = source.Creatives;
            if (reference.CreativeId != null)
            {
                creatives = creatives.Where(c => c.Id == reference.CreativeId);
            }
            foreach (var creative in creatives)
            {
                index++;
                var wrappedAds = new List<Ad>();
                var linear = new CreativeLinear();
                linear.Duration = creative.Duration;
                linear.Sequence = index;

                IEnumerable<FWCreativeRendition> creativeRenditions = creative.CreativeRenditions;
                if (reference.CreativeRenditionId != null)
                {
                    creativeRenditions = creativeRenditions.Where(cr => cr.Id == reference.CreativeRenditionId).DefaultIfEmpty(creativeRenditions);
                    if (reference.ReplicaId != null)
                    {
                        creativeRenditions = creativeRenditions.Where(cr => cr.AdReplicaId == reference.ReplicaId).DefaultIfEmpty(creativeRenditions);
                    }
                }

                foreach (var rendition in creativeRenditions)
                {
                    if (!string.IsNullOrEmpty(rendition.WrapperType))
                    {
                        switch (rendition.WrapperType.ToLowerInvariant())
                        {
                            case "external/vast-2":
                                try
                                {
                                    var vastAdUri = new Uri(rendition.WrapperUrl);
                                    // load the stream from the web
                                    using (var s = await Extensions.LoadStreamAsync(vastAdUri))
                                    {
                                        var wrappedVastDoc = await AdModelFactory.CreateFromVast(s, null, true);
                                        if (wrappedVastDoc != null)
                                        {
                                            // use the first ad
                                            var wrappedAd = wrappedVastDoc.AdPods.SelectMany(pod => pod.Ads).FirstOrDefault();
                                            if (wrappedAd != null)
                                            {
                                                wrappedAds.Add(wrappedAd);
                                            }
                                        }
                                    }
                                }
                                catch { /* swallow */ }
                                break;
                        }
                    }
                    else
                    {
                        // TODO: FreeWheel assets can contain Content instead of Url. This could be supported someday; for now it is ignored.
                        if (rendition.Asset != null)
                        {
                            var mediaFile = CreateMediaFile(creative, rendition, rendition.Asset);
                            if (mediaFile != null)
                            {
                                mediaFile.Ranking = (int)rendition.Preference + 1; // add one to indicate this is preferred over "OtherAssets"
                                linear.MediaFiles.Add(mediaFile);
                            }
                        }

                        foreach (var asset in rendition.OtherAssets)
                        {
                            var mediaFile = CreateMediaFile(creative, rendition, asset);
                            if (mediaFile != null)
                            {
                                mediaFile.Ranking = (int)rendition.Preference;
                                linear.MediaFiles.Add(mediaFile);
                            }
                        }
                    }
                }

                // generate callback urls from one base url
                foreach (var eventCallback in allCallbacks.Where(ec => ec.Type == FWCallbackType.Impression))
                {
                    foreach (var url in eventCallback.GetUrls())
                    {
                        switch (eventCallback.Name.ToLower())
                        {
                            case "start":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Start, Value = url });
                                break;
                            case "firstquartile":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.FirstQuartile, Value = url });
                                break;
                            case "midpoint":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Midpoint, Value = url });
                                break;
                            case "thirdquartile":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.ThirdQuartile, Value = url });
                                break;
                            case "complete":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Complete, Value = url });
                                break;
                        }
                    }
                }

                // generate callback urls from one base url
                foreach (var eventCallback in allCallbacks.Where(ec => ec.Type == FWCallbackType.Standard))
                {
                    foreach (var url in eventCallback.GetUrls())
                    {
                        switch (eventCallback.Name.Replace("-", "").ToLower())
                        {
                            case "_creativeview":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.CreativeView, Value = url });
                                break;
                            case "_mute":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Mute, Value = url });
                                break;
                            case "_unmute":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Unmute, Value = url });
                                break;
                            case "_pause":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Pause, Value = url });
                                break;
                            case "_rewind":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Rewind, Value = url });
                                break;
                            case "_resume":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Resume, Value = url });
                                break;
                            case "_fullscreen":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Fullscreen, Value = url });
                                break;
                            case "_exitfullscreen":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.ExitFullscreen, Value = url });
                                break;
                            case "_expand":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Expand, Value = url });
                                break;
                            case "_collapse":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Collapse, Value = url });
                                break;
                            case "_acceptinvitation":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.AcceptInvitation, Value = url });
                                break;
                            case "_close":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Close, Value = url });
                                break;
                            case "_skip":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Skip, Value = url });
                                break;
                            case "_progress":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Progress, Value = url });
                                break;
                        }
                    }
                }

                foreach (var url in allCallbacks.Where(ec => ec.Type == FWCallbackType.Click && !ec.ShowBrowser).SelectMany(ec => ec.GetUrls()))
                {
                    linear.ClickTracking.Add(url);
                }

                var clickUrl = allCallbacks.Where(ec => ec.Type == FWCallbackType.Click && ec.ShowBrowser).SelectMany(ec => ec.GetUrls()).FirstOrDefault();
                if (clickUrl != null)
                {
                    linear.ClickThrough = new Uri(clickUrl);
                }

                // generate callback urls from one base url ONLY when the callback does not already exist
                foreach (var eventCallback in allCallbacks.Where(ec => ec.Type == FWCallbackType.Generic))
                {
                    foreach (var url in eventCallback.GetUrls())
                    {
                        var baseUrl = url + string.Format("&metr={0}", FreeWheelFactory.GetSupportedMetrics());

                        // quartile events
                        var quartileUrl = baseUrl + "&ct=[LASTQUARTILE]&et=i"; // [LASTQUARTILE] will get replaced by the VPAID controller
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.FirstQuartile, Value = quartileUrl + "&cn=firstQuartile" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Midpoint, Value = quartileUrl + "&cn=midPoint" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.ThirdQuartile, Value = quartileUrl + "&cn=thirdQuartile" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Complete, Value = quartileUrl + "&cn=complete" });

                        // advanced metrics
                        var advancedUrl = baseUrl + "&et=s";
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Mute, Value = advancedUrl + "&cn=_mute" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Unmute, Value = advancedUrl + "&cn=_un-mute" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Collapse, Value = advancedUrl + "&cn=_collapse" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Expand, Value = advancedUrl + "&cn=_expand" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Pause, Value = advancedUrl + "&cn=_pause" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Resume, Value = advancedUrl + "&cn=_resume" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Rewind, Value = advancedUrl + "&cn=_rewind" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.AcceptInvitation, Value = advancedUrl + "&cn=_accept-invitation" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Close, Value = advancedUrl + "&cn=_close" });
                        //AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Minimize, Value = advancedUrl + "&cn=_minimize" });
                    }
                }

                ad.Creatives.Add(linear);

                foreach (var wrappedAd in wrappedAds)
                {
                    AdModelFactory.MergeWrappedAdBeacons(wrappedAd, ad);
                    var wrappedCreative = AdModelFactory.FindMatchingCreative(linear, wrappedAd);
                    AdModelFactory.MergeWrappedCreative(wrappedCreative, linear);
                }
            }

            return ad;
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\vast\AdModelFactory.cs
public static async Task<AdDocumentPayload> CreateFromVast(Stream stream, int? maxRedirectDepth, bool allowMultipleAds)
#else
        public static IAsyncOperation<AdDocumentPayload> CreateFromVast(IInputStream stream, int? maxRedirectDepth, bool allowMultipleAds)
        {
            return AsyncInfo.Run(c => CreateFromVast(stream.AsStreamForRead(), maxRedirectDepth, allowMultipleAds));
        }

        internal static async Task<AdDocumentPayload> CreateFromVast(Stream stream, int? maxRedirectDepth, bool allowMultipleAds)
#endif
        {
            XDocument xDoc = XDocument.Load(stream);
            XElement vastRoot = xDoc.Element("VAST");
            if (vastRoot == null)
            {
                vastRoot = xDoc.Element("VideoAdServingTemplate");
                if (vastRoot == null) throw new NotImplementedException();
                return await CreateFromVast1(vastRoot, maxRedirectDepth, allowMultipleAds);
            }
            else
            {
                var result = new AdDocumentPayload();
                result.Version = (string)vastRoot.Attribute("version");
                result.Error = (string)vastRoot.Element("Error");

                var eligableAds = vastRoot.Elements("Ad");
                if (!allowMultipleAds)
                {
                    eligableAds = eligableAds.Where(va => string.IsNullOrEmpty((string)va.Attribute("sequence")));
                }
                foreach (var vastAdPod in eligableAds.GroupBy(va => va.Attribute("sequence") != null ? 1 : int.MaxValue).OrderBy(vap => vap.Key))
                {
                    var adPod = new AdPod();
                    foreach (var vastAd in vastAdPod.OrderBy(va => ToNullableInt((string)va.Attribute("sequence")).GetValueOrDefault(0)))
                    {
                        var ad = new Ad();
                        ad.Id = (string)vastAd.Attribute("id");

                        if (vastAd.Elements("InLine").Any())
                        {
                            var vastAdInline = vastAd.Element("InLine");

                            ad.AdSystem = GetAdSystem(vastAdInline.Element("AdSystem"));

                            ad.Advertiser = (string)vastAdInline.Element("Advertiser");
                            ad.Description = (string)vastAdInline.Element("Description");
                            var error = (string)vastAdInline.Element("Error");
                            if (error != null) ad.Errors.Add(error);
                            ad.Title = (string)vastAdInline.Element("AdTitle");
                            ad.Survey = GetUriValue(vastAdInline.Element("Survey"));

                            ad.Pricing = new Pricing();
                            var pricing = vastAdInline.Element("Pricing");
                            if (pricing != null)
                            {
                                ad.Pricing.Currency = (string)pricing.Attribute("currency");
                                ad.Pricing.Model = (PricingModel)Enum.Parse(typeof(PricingModel), (string)pricing.Attribute("model"), true);
                                ad.Pricing.Value = Convert.ToDouble((string)pricing);
                            }

                            foreach (var vastImpression in vastAdInline.Elements("Impression"))
                            {
                                ad.Impressions.Add((string)vastImpression);
                            }

                            if (vastAdInline.Elements("Extensions").Any())
                            {
                                foreach (var vastExtension in vastAdInline.Element("Extensions").Elements("Extension"))
                                {
                                    ad.Extensions.Add(new Extension()); // TODO
                                }
                            }

                            LoadCreatives(vastAdInline, ad);

                            adPod.Ads.Add(ad);
                        }
                        else if (vastAd.Elements("Wrapper").Any())
                        {
                            Ad wrapper = new Ad();
                            var vastAdWrapper = vastAd.Element("Wrapper");

                            // parse the wrapper itself
                            wrapper.AdSystem = GetAdSystem(vastAdWrapper.Element("AdSystem"));
                            var error = (string)vastAdWrapper.Element("Error");
                            if (error != null) wrapper.Errors.Add(error);

                            foreach (var vastImpression in vastAdWrapper.Elements("Impression"))
                            {
                                wrapper.Impressions.Add((string)vastImpression);
                            }

                            LoadCreatives(vastAdWrapper, wrapper);

                            if (vastAdWrapper.Elements("Extensions").Any())
                            {
                                foreach (var vastExtension in vastAdWrapper.Element("Extensions").Elements("Extension"))
                                {
                                    ad.Extensions.Add(new Extension()); // TODO
                                }
                            }

                            AdDocumentPayload wrappedVastDoc = null;
                            var vastAdUri = GetUriValue(vastAdWrapper.Element("VASTAdTagURI"));
                            if (vastAdUri != null && (!maxRedirectDepth.HasValue || maxRedirectDepth.Value > 0))
                            {
                                try
                                {
                                    // load the stream from the web
                                    using (var s = await Extensions.LoadStreamAsync(vastAdUri))
                                    {
                                        var newAllowMultipleAds = vastAdWrapper.GetBoolAttribute("allowMultipleAds", allowMultipleAds);
                                        var followAdditionalWrappers = vastAdWrapper.GetBoolAttribute("followAdditionalWrappers", true);
                                        int? nextMaxRedirectDepth = followAdditionalWrappers ? (maxRedirectDepth.HasValue ? maxRedirectDepth.Value - 1 : maxRedirectDepth) : 0;
                                        wrappedVastDoc = await CreateFromVast(s, nextMaxRedirectDepth, newAllowMultipleAds);
                                    }
                                }
                                catch { /* swallow */ }
                            }

                            AdPod wrappedAdPod = null;
                            if (wrappedVastDoc != null)
                            {
                                wrappedAdPod = wrappedVastDoc.AdPods.FirstOrDefault();
                            }

                            if (wrappedAdPod == null || !wrappedAdPod.Ads.Any())
                            {
                                // no ads were returned
                                var fallbackOnNoAd = vastAdWrapper.GetBoolAttribute("fallbackOnNoAd", true);
                                if (fallbackOnNoAd)
                                {
                                    wrappedAdPod = FallbackAdPod;
                                }
                            }

                            if (wrappedAdPod != null)
                            {
                                // merge tracking info from this wrapper to every ad in the first adpod in the child
                                foreach (Ad inlineAd in wrappedAdPod.Ads)
                                    MergeWrappedAd(wrapper, inlineAd);

                                // add each ad from the first adpod in the child to the current adpod
                                foreach (Ad inlineAd in wrappedAdPod.Ads)
                                    adPod.Ads.Add(inlineAd);
                            }
                        }
                    }
                    result.AdPods.Add(adPod);
                }
                return result;
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\Vast\AdModelFactory_Vast1.cs
internal static async Task<AdDocumentPayload> CreateFromVast1(XElement vastRoot, int? maxRedirectDepth, bool allowMultipleAds)
        {
            var result = new AdDocumentPayload();
            result.Version = (string)vastRoot.Attribute("version");

            foreach (var vastAdPod in vastRoot.Elements("Ad").GroupBy(va => va.Attribute("sequence") != null ? 1 : int.MaxValue).OrderBy(vap => vap.Key))
            {
                var adPod = new AdPod();
                foreach (var vastAd in vastAdPod.OrderBy(va => ToNullableInt((string)va.Attribute("sequence")).GetValueOrDefault(0)))
                {
                    var ad = new Ad();
                    ad.Id = (string)vastAd.Attribute("id");

                    if (vastAd.Elements("InLine").Any())
                    {
                        throw new NotImplementedException();
                    }
                    else if (vastAd.Elements("Wrapper").Any())
                    {
                        Ad wrapper = new Ad();
                        var vastAdWrapper = vastAd.Element("Wrapper");

                        // parse the wrapper itself
                        wrapper.AdSystem = GetAdSystem(vastAdWrapper.Element("AdSystem"));
                        var error = (string)vastAdWrapper.Element("Error");
                        if (error == null) wrapper.Errors.Add(error);

                        var linearCreative = new CreativeLinear();

                        foreach (var trackingEvent in GetTrackingEvents(vastAdWrapper))
                            linearCreative.TrackingEvents.Add(trackingEvent);

                        LoadVideoClicks(vastAdWrapper, linearCreative);

                        wrapper.Creatives.Add(linearCreative);

                        var vastAdUri = GetUriValue(vastAdWrapper.Element("VASTAdTagURL"));
                        if (vastAdUri != null)
                        {
                            // load the stream from the web
                            using (var s = await Extensions.LoadStreamAsync(vastAdUri))
                            {
                                int? nextMaxRedirectDepth = maxRedirectDepth.HasValue ? maxRedirectDepth.Value - 1 : maxRedirectDepth;
                                var vastDoc = await CreateFromVast(s, nextMaxRedirectDepth, allowMultipleAds);

                                var firstAdPodInChild = vastDoc.AdPods.FirstOrDefault();

                                if (firstAdPodInChild != null)
                                {
                                    // merge tracking info from this wrapper to every ad in the first adpod in the child
                                    foreach (Ad inlineAd in firstAdPodInChild.Ads)
                                        MergeWrappedAd(wrapper, inlineAd);

                                    // add each ad from the first adpod in the child to the current adpod
                                    foreach (Ad inlineAd in firstAdPodInChild.Ads)
                                        adPod.Ads.Add(inlineAd);
                                }
                            }
                        }
                    }
                }
                result.AdPods.Add(adPod);
            }
            return result;
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\AdSchedulerPlugin.cs
async Task PlayAds(IEnumerable<Advertisement> advertisements, CancellationToken cancellationToken)
        {
            foreach (var advertisement in advertisements)
            {
                try
                {
                    await PlayAdAsync(advertisement, cancellationToken);
                }
                catch { /* swallow */ }
                if (cancellationToken.IsCancellationRequested) break;
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\FreewheelPlugin.cs
public async Task LoadAds(Uri source, CancellationToken c)
        {
            adSlots.Clear();
            var cancellationToken = CancellationTokenSource.CreateLinkedTokenSource(c, cts.Token).Token;

#if SILVERLIGHT
            adResponse = await FreeWheelFactory.LoadSource(source, cancellationToken);
#else
            adResponse = await FreeWheelFactory.LoadSource(source).AsTask(cancellationToken);
#endif

            var videoTracking = adResponse.SiteSection.VideoPlayer.VideoAsset.EventCallbacks.FirstOrDefault(ec => ec.Name == FWEventCallback.VideoView);
            if (videoTracking != null)
            {
                // use the tracking plugins to help with tracking markers. Create it if it doesn't exist.
                var positionTrackingPlugin = MediaPlayer.Plugins.OfType<PositionTrackingPlugin>().FirstOrDefault();
                if (positionTrackingPlugin == null)
                {
                    positionTrackingPlugin = new PositionTrackingPlugin();
                    MediaPlayer.Plugins.Add(positionTrackingPlugin);
                }
                positionTrackingPlugin.EventTracked += trackingPlugin_EventTracked;
                lastTrackingEvent = null; // reset
                trackingEnded = false;
                positionTrackingPlugin.TrackingEvents.Add(new PositionTrackingEvent() { PositionPercentage = 1, Data = videoTracking, Area = TrackingEventArea });

                var playTimeTrackingPlugin = MediaPlayer.Plugins.OfType<PlayTimeTrackingPlugin>().FirstOrDefault();
                if (playTimeTrackingPlugin == null)
                {
                    playTimeTrackingPlugin = new PlayTimeTrackingPlugin();
                    MediaPlayer.Plugins.Add(playTimeTrackingPlugin);
                }
                playTimeTrackingPlugin.EventTracked += trackingPlugin_EventTracked;
                for (int i = 0; i < 60; i = i + 15)
                    playTimeTrackingPlugin.TrackingEvents.Add(new PlayTimeTrackingEvent() { PlayTime = TimeSpan.FromSeconds(i), Data = videoTracking, Area = TrackingEventArea });
                for (int i = 60; i < 60 * 3; i = i + 30)
                    playTimeTrackingPlugin.TrackingEvents.Add(new PlayTimeTrackingEvent() { PlayTime = TimeSpan.FromSeconds(i), Data = videoTracking, Area = TrackingEventArea });
                for (int i = 60 * 3; i < 60 * 10; i = i + 60)
                    playTimeTrackingPlugin.TrackingEvents.Add(new PlayTimeTrackingEvent() { PlayTime = TimeSpan.FromSeconds(i), Data = videoTracking, Area = TrackingEventArea });
                for (int i = 60 * 10; i < 60 * 30; i = i + 120)
                    playTimeTrackingPlugin.TrackingEvents.Add(new PlayTimeTrackingEvent() { PlayTime = TimeSpan.FromSeconds(i), Data = videoTracking, Area = TrackingEventArea });
                for (int i = 60 * 30; i < 60 * 60; i = i + 300)
                    playTimeTrackingPlugin.TrackingEvents.Add(new PlayTimeTrackingEvent() { PlayTime = TimeSpan.FromSeconds(i), Data = videoTracking, Area = TrackingEventArea });
                for (int i = 60 * 60; i < 60 * 180; i = i + 600)
                    playTimeTrackingPlugin.TrackingEvents.Add(new PlayTimeTrackingEvent() { PlayTime = TimeSpan.FromSeconds(i), Data = videoTracking, Area = TrackingEventArea });
            }

            var videoAsset = adResponse.SiteSection.VideoPlayer.VideoAsset;
            if (videoAsset != null)
            {
                foreach (var adSlot in videoAsset.AdSlots)
                {
                    Advertisement ad = null;
                    switch (adSlot.TimePositionClass)
                    {
                        case "preroll":
                            ad = new PrerollAdvertisement();
                            break;
                        case "postroll":
                            ad = new PostrollAdvertisement();
                            break;
                        default:
                            var midroll = new MidrollAdvertisement();
                            midroll.Time = adSlot.TimePosition;
                            ad = midroll;
                            break;
                    }

#if SILVERLIGHT
                    var payload = await FreeWheelFactory.GetAdDocumentPayload(adSlot, adResponse, cancellationToken);
#else
                    var payload = await FreeWheelFactory.GetAdDocumentPayload(adSlot, adResponse).AsTask(cancellationToken);
#endif
                    ad.Source = new AdSource(payload, DocumentAdPayloadHandler.AdType);

                    Advertisements.Add(ad);
                    adSlots.Add(ad, adSlot);
                }
            }

            ShowCompanions();
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\Dash\DashManifestConverter.cs
public static async Task<DashManifestConversionResult> ConvertToSmoothManifest(XDocument source, Uri rootUri)
        {
            var result = new DashManifestConversionResult();

            SmoothStreamingMedia manifest = new SmoothStreamingMedia();
            result.Manifest = manifest;

            var mpd = MPDFactory.LoadMPD(source.Root);

            // Get Duration
            if (mpd.MediaPresentationDuration.HasValue)
            {
                manifest.Duration = (ulong)mpd.MediaPresentationDuration.Value.Ticks;
            }
            manifest.IsLive = (mpd.Type == Presentation.Dynamic);
            //manifest.LookaheadCount = 2;
            if (mpd.AvailabilityEndTime.HasValue && mpd.AvailabilityStartTime.HasValue)
            {
                manifest.DVRWindowLength = (ulong)mpd.AvailabilityEndTime.Value.Subtract(mpd.AvailabilityStartTime.Value).Ticks;
            }

            foreach (var period in mpd.Period)
            {
                foreach (var adaptationSet in period.AdaptationSet)
                {
                    SmoothStreamingMediaStreamIndex streamIndex = null;
                    int representationIndex = 0;
                    foreach (var representation in adaptationSet.Representation)
                    {
                        string mediaUrl = null;
                        Uri initializationUri = null;
                        WebRequestor.Range initializationRange = null;
                        if (adaptationSet.SegmentTemplate != null)
                        {
                            var segmentTemplate = adaptationSet.SegmentTemplate;
                            var initializationTemplateUrl = segmentTemplate.InitializationValue;

                            initializationTemplateUrl = initializationTemplateUrl
                                .Replace("$$", "$")
                                .Replace("$RepresentationId$", representation.Id)
                                .Replace("$Number$", representationIndex.ToString())
                                .Replace("$Bandwidth$", representation.Bandwidth.ToString());
                            initializationUri = new Uri(rootUri, initializationTemplateUrl);
                            mediaUrl = segmentTemplate.Media
                                .Replace("$$", "$")
                                .Replace("$Bandwidth$", "{bitrate}")
                                .Replace("$Time$", "{start time}");
                        }
                        else if (representation.SegmentBase != null)
                        {
                            var baseUrl = representation.BaseURL.First().Value;
                            var segmentBase = representation.SegmentBase;
                            if (segmentBase.Initialization != null)
                            {
                                if (!string.IsNullOrEmpty(segmentBase.Initialization.SourceURL))
                                {
                                    initializationUri = new Uri(rootUri, segmentBase.Initialization.SourceURL);
                                }
                                initializationRange = WebRequestor.Range.FromString(segmentBase.Initialization.Range);
                            }
                            if (initializationUri == null)
                            {
                                initializationUri = new Uri(rootUri, baseUrl);
                            }
                        }
                        else throw new NotImplementedException();

                        var initializationBoxes = await GetBoxesAsync(initializationUri, initializationRange);

                        if (manifest.Protection == null) // support for CENC encryption
                        {
                            var moov = initializationBoxes.SingleOrDefault(b => b.Type == BoxType.Moov);
                            if (moov != null)
                            {
                                manifest.Protection = SmoothFactory.GetProtectionHeader(moov);
                            }
                        }

                        var trackStreamIndex = SmoothFactory.GenerateClientManifestStreamIndex(initializationBoxes);
                        var track = trackStreamIndex.QualityLevel.First();
                        if (streamIndex != null)
                        {
                            track.Index = (uint)streamIndex.QualityLevel.Count; // index is zero based so this is always equal to the current count
                            streamIndex.QualityLevel.Add(track);
                            streamIndex.MaxWidth = Math.Max(trackStreamIndex.MaxWidth, streamIndex.MaxWidth);
                            streamIndex.MaxHeight = Math.Max(trackStreamIndex.MaxHeight, streamIndex.MaxHeight);
                            streamIndex.DisplayWidth = streamIndex.MaxWidth;
                            streamIndex.DisplayHeight = streamIndex.MaxHeight;
                        }
                        else
                        {
                            streamIndex = trackStreamIndex;
                            if (mediaUrl != null) streamIndex.Url = mediaUrl;
                        }

                        track.Bitrate = representation.Bandwidth;

                        // create chunks
                        if (adaptationSet.SegmentTemplate != null)
                        {
                            if (adaptationSet.SegmentTemplate.SegmentTimeline != null)
                            {
                                if (!streamIndex.c.Any())
                                {
                                    streamIndex.c.AddRange(CreateChunks(adaptationSet.SegmentTemplate.SegmentTimeline));
                                    if (!manifest.IsLive) streamIndex.Chunks = (uint)streamIndex.c.Count;
                                }
                            }
                            else throw new NotImplementedException();
                        }
                        else if (representation.SegmentBase != null)
                        {
                            // TODO:/OPTIMIZE: request at the same time as initialization header
                            var segmentBase = representation.SegmentBase;
                            var indexRange = segmentBase.IndexRange.Split('-').Select(r => long.Parse(r)).ToArray();
                            var baseUrl = representation.BaseURL.First().Value;
                            var segmentIndexUri = new Uri(rootUri, baseUrl);
                            var segmentIndexRange = WebRequestor.Range.FromString(segmentBase.IndexRange);
                            var segmentIndexBoxes = await GetBoxesAsync(segmentIndexUri, segmentIndexRange);
                            var sidx = segmentIndexBoxes.OfType<SegmentIndexBox>().First();

                            // remove the track if the sidx durations don't match the chunk durations.
                            //if (streamIndex.c.Any() && sidx.Subsegments.First().Duration != streamIndex.c.First().d)
                            //{
                            //    streamIndex.QualityLevel.Remove(track);
                            //    break;
                            //}

                            track.Bitrate = CalculateBitrate(sidx);

                            if (!streamIndex.c.Any())
                            {
                                streamIndex.c.AddRange(CreateChunks(sidx));
                                if (!manifest.IsLive) streamIndex.Chunks = (uint)streamIndex.c.Count;
                            }
                            foreach (var kvp in GetChunkLookups(streamIndex, track, segmentIndexUri, sidx))
                            {
                                result.ChunkLookup.Add(kvp.Key, kvp.Value);
                            }
                        }
                        else throw new NotImplementedException();

                        representationIndex++;
                    }
                    
                    manifest.StreamIndex.Add(streamIndex);
                }
            }

            return result;
        }
-----------------------
LONGRUNNING True 0 System.IO.StreamWriter.Write(string) D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCore.cs
TAPReplacable DispatchRequest(string httpMethod, string apiUrl, Dictionary<string, string> parameters)
public async Task<HttpWebResponse> DispatchRequest(string httpMethod, string apiUrl, Dictionary<string, string> parameters)
        {
            HttpWebRequest request;
            if (httpMethod == "GET" || httpMethod == "HEAD" || httpMethod == "DELETE")
            {
                if (parameters != null)
                {
                    // Concat an url string
                    if (apiUrl.Contains("?"))
                        apiUrl += "&";
                    else
                        apiUrl += "?";

                    apiUrl += this.FormatQueryString(parameters);
                }

                request = (HttpWebRequest)WebRequest.Create(apiUrl);
                request.Method = httpMethod;
            }
            else
            {
                request = (HttpWebRequest)WebRequest.Create(apiUrl);
                request.Method = httpMethod;
                request.ContentType = "application/x-www-form-urlencoded;charset=utf-8";
                if (parameters != null)
                {
                    using (Stream stream = await request.GetRequestStreamAsync())
                    {
                        using (StreamWriter writer = new StreamWriter(stream))
                        {
                            writer.Write(this.FormatQueryString(parameters));
                        }
                    }
                }
            }

            // Invoke the API
            try
            {
                HttpWebResponse response = (HttpWebResponse)await request.GetResponseAsync();
                return response;
                //using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                //{
                //    string jsonString = reader.ReadToEnd();
                //    Debug.WriteLine(jsonString);
                //}
            }
            catch (Exception e)
            {
                var we = e.InnerException as WebException;
                if (we != null)
                {
                    var resp = we.Response as HttpWebResponse;
                    var code = resp.StatusCode;                    
                    Debug.WriteLine("Status:{0}", we.Status);

                    return resp;
                }
                else
                    throw;
            }

        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreDiscoveryExtension.cs
TAPReplacable GetDiscoveryStreamAsync(Dictionary<string, string> parameters = null)
public async void GetDiscoveryStreamAsync(Dictionary<string, string> parameters = null)
        {
            IsLoadingDiscoveryStream = true;

            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            Dictionary<string, string> paramDict = new Dictionary<string, string>();
            paramDict["method"] = "flickr.interestingness.getList";
            paramDict["format"] = "json";
            paramDict["nojsoncallback"] = "1";
            paramDict["oauth_consumer_key"] = consumerKey;
            paramDict["oauth_nonce"] = nonce;
            paramDict["oauth_signature_method"] = "HMAC-SHA1";
            paramDict["oauth_timestamp"] = timestamp;
            paramDict["oauth_token"] = AccessToken;
            paramDict["oauth_version"] = "1.0";

            if (parameters != null)
            {
                foreach (var entry in parameters)
                {
                    paramDict[entry.Key] = entry.Value;
                }
            }

            paramDict["extras"] = UrlHelper.Encode(commonExtraParameters);
            string paramString = GenerateParamString(paramDict);
            string signature = GenerateSignature("GET", AccessTokenSecret, "http://api.flickr.com/services/rest", paramString);
            string requestUrl = "http://api.flickr.com/services/rest?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                IsLoadingDiscoveryStream = false;

                if (response.StatusCode != HttpStatusCode.OK)
                {
                    HandleHTTPException(response);
                    return;
                }

                string jsonString = reader.ReadToEnd();
                if (!TryHandleResponseException(jsonString, () => { GetDiscoveryStreamAsync(parameters); }))
                    return;


                GetDiscoveryStreamEventArgs args = new GetDiscoveryStreamEventArgs();
                args.Response = jsonString;
                DiscoveryStreamReturned.DispatchEvent(this, args);
            }
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreGroupExtension.cs
TAPReplacable GetGroupInfoAsync(string groupId, Dictionary<string, string> parameters = null)
public async void GetGroupInfoAsync(string groupId, Dictionary<string, string> parameters = null)
        {
            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            Dictionary<string, string> paramDict = new Dictionary<string, string>();
            paramDict["method"] = "flickr.groups.getInfo";
            paramDict["format"] = "json";
            paramDict["nojsoncallback"] = "1";
            paramDict["oauth_consumer_key"] = consumerKey;
            paramDict["oauth_nonce"] = nonce;
            paramDict["oauth_signature_method"] = "HMAC-SHA1";
            paramDict["oauth_timestamp"] = timestamp;
            paramDict["oauth_token"] = AccessToken;
            paramDict["oauth_version"] = "1.0";
            paramDict["group_id"] = groupId;

            if (parameters != null)
            {
                foreach (var entry in parameters)
                {
                    paramDict[entry.Key] = entry.Value;
                }
            }

            string paramString = GenerateParamString(paramDict);
            string signature = GenerateSignature("GET", AccessTokenSecret, "http://api.flickr.com/services/rest", paramString);
            string requestUrl = "http://api.flickr.com/services/rest?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                if (response.StatusCode != HttpStatusCode.OK)
                {
                    HandleHTTPException(response);
                    return;
                }

                string jsonString = reader.ReadToEnd();
                if (!TryHandleResponseException(jsonString, () => { GetGroupInfoAsync(groupId, parameters); }))
                    return;

                GetGroupInfoEventArgs evt = new GetGroupInfoEventArgs();
                evt.GroupId = groupId;
                evt.Response = jsonString;
                GroupInfoReturned.DispatchEvent(this, evt);

            }
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreGroupExtension.cs
TAPReplacable GetGroupPhotosAsync(string groupId, Dictionary<string, string> parameters = null)
public async void GetGroupPhotosAsync(string groupId, Dictionary<string, string> parameters = null)
        {
            if (groupPhotoFetchingQueue.Contains(groupId))
                return;

            groupPhotoFetchingQueue.Add(groupId);

            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            Dictionary<string, string> paramDict = new Dictionary<string, string>();
            paramDict["method"] = "flickr.groups.pools.getPhotos";
            paramDict["format"] = "json";
            paramDict["nojsoncallback"] = "1";
            paramDict["oauth_consumer_key"] = consumerKey;
            paramDict["oauth_nonce"] = nonce;
            paramDict["oauth_signature_method"] = "HMAC-SHA1";
            paramDict["oauth_timestamp"] = timestamp;
            paramDict["oauth_token"] = AccessToken;
            paramDict["oauth_version"] = "1.0";
            paramDict["group_id"] = groupId;
            
            if (parameters != null)
            {
                foreach (var entry in parameters)
                {
                    paramDict[entry.Key] = entry.Value;
                }
            }

            paramDict["extras"] = UrlHelper.Encode(commonExtraParameters);

            string paramString = GenerateParamString(paramDict);
            string signature = GenerateSignature("GET", AccessTokenSecret, "http://api.flickr.com/services/rest", paramString);
            string requestUrl = "http://api.flickr.com/services/rest?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                groupPhotoFetchingQueue.Remove(groupId);

                if (response.StatusCode != HttpStatusCode.OK)
                {
                    HandleHTTPException(response);
                    return;
                }

                string jsonString = reader.ReadToEnd();
                if (!TryHandleResponseException(jsonString, () => { GetGroupPhotosAsync(groupId, parameters); }))
                    return;

                GetGroupPhotosEventArgs args = new GetGroupPhotosEventArgs();
                args.GroupId = groupId;
                args.Response = jsonString;
                GroupPhotoReturned.DispatchEvent(this, args);
            }
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreOAuthExtension.cs
TAPReplacable GetRequestTokenAsync()
public async void GetRequestTokenAsync()
        {
            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            // Encode the request string
            string paramString = "oauth_callback=" + UrlHelper.Encode(callbackUrl);
            paramString += "&oauth_consumer_key=" + consumerKey;
            paramString += "&oauth_nonce=" + nonce;
            paramString += "&oauth_signature_method=HMAC-SHA1";
            paramString += "&oauth_timestamp=" + timestamp;
            paramString += "&oauth_version=1.0";

            string signature = GenerateSignature("GET", null, "http://www.flickr.com/services/oauth/request_token", paramString);

            // Create the http request
            string requestUrl = "http://www.flickr.com/services/oauth/request_token?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                string jsonString = reader.ReadToEnd();
                System.Diagnostics.Debug.WriteLine(jsonString);
                // Dispatch an event
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    if (jsonString.StartsWith("oauth_callback_confirmed=true"))
                    {
                        // Parse out the request token and secret
                        string[] parts = jsonString.Split('&');
                        string tokenString = parts[1];
                        RequestToken = tokenString.Split('=')[1];

                        string secretString = parts[2];
                        RequestTokenSecret = secretString.Split('=')[1];
                            
                        // Dispatch event
                        RequestTokenGranted(this, null);
                    }
                }
            }
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreOAuthExtension.cs
TAPReplacable GetAccessTokenAsync()
public async void GetAccessTokenAsync()
        {
            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            // Encode the request string
            string paramString = "oauth_consumer_key=" + consumerKey;
            paramString += "&oauth_nonce=" + nonce;
            paramString += "&oauth_signature_method=HMAC-SHA1";
            paramString += "&oauth_timestamp=" + timestamp;
            paramString += "&oauth_token=" + RequestToken;
            paramString += "&oauth_verifier=" + RequestTokenVerifier;
            paramString += "&oauth_version=1.0";

            string signature = GenerateSignature("GET", RequestTokenSecret, "http://www.flickr.com/services/oauth/access_token", paramString);

            // Create the http request
            string requestUrl = "http://www.flickr.com/services/oauth/access_token?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                string jsonString = reader.ReadToEnd();
                System.Diagnostics.Debug.WriteLine(jsonString);
                // Dispatch an event
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    if (jsonString.StartsWith("fullname="))
                    {
                        var dict = jsonString.ParseQueryString();
                        AccessToken = dict["oauth_token"];
                        AccessTokenSecret = dict["oauth_token_secret"];

                        // Store access token
                        this.SaveAccessCredentials();

                        // Construct current user object
                        User currentUser = new User();
                        currentUser.ResourceId = dict["user_nsid"];
                        currentUser.Name = dict["fullname"];
                        currentUser.UserName = dict["username"];

                        Cinderella.Cinderella.CinderellaCore.UserCache[currentUser.ResourceId] = currentUser;
                        Cinderella.Cinderella.CinderellaCore.CurrentUser = currentUser;
                        Cinderella.Cinderella.CinderellaCore.SaveCurrentUserInfo();

                        // Dispatch a login-success event
                        AccessTokenGranted(this, null);
                    }
                }
                else
                {
                    AccessTokenFailed(this, null);
                }
            }

        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCorePhotoExtension.cs
TAPReplacable GetEXIFAsync(string photoId)
public async void GetEXIFAsync(string photoId)
        {
            if (IsGettingEXIFInfo(photoId))
                return;

            exifQueue.Add(photoId);

            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            Dictionary<string, string> paramDict = new Dictionary<string, string>();
            paramDict["method"] = "flickr.photos.getExif";
            paramDict["format"] = "json";
            paramDict["nojsoncallback"] = "1";
            paramDict["oauth_consumer_key"] = consumerKey;
            paramDict["oauth_nonce"] = nonce;
            paramDict["oauth_signature_method"] = "HMAC-SHA1";
            paramDict["oauth_timestamp"] = timestamp;
            paramDict["oauth_token"] = AccessToken;
            paramDict["oauth_version"] = "1.0";
            paramDict["photo_id"] = photoId;
            paramDict["extras"] = UrlHelper.Encode(commonExtraParameters);

            string paramString = GenerateParamString(paramDict);
            string signature = GenerateSignature("GET", AccessTokenSecret, "http://api.flickr.com/services/rest", paramString);
            string requestUrl = "http://api.flickr.com/services/rest?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                exifQueue.Remove(photoId);

                GetEXIFExceptionEventArgs exceptionArgs = null;
                if (response.StatusCode != HttpStatusCode.OK)
                {
                    exceptionArgs = new GetEXIFExceptionEventArgs();
                    exceptionArgs.PhotoId = photoId;
                    EXIFException.DispatchEvent(this, exceptionArgs);

                    return;
                }

                string jsonString = reader.ReadToEnd();
                if (!IsResponseSuccess(jsonString))
                {
                    exceptionArgs = new GetEXIFExceptionEventArgs();
                    exceptionArgs.PhotoId = photoId;
                    EXIFException.DispatchEvent(this, exceptionArgs);

                    return;
                }


                GetEXIFEventArgs args = new GetEXIFEventArgs();
                args.PhotoId = photoId;
                args.Response = jsonString;
                EXIFReturned.DispatchEvent(this, args);
            }
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreSearchExtension.cs
TAPReplacable SearchPhotoAsync(string searchSessionId, string query = null, string tags = null, Dictionary<string, string> parameters = null)
public async void SearchPhotoAsync(string searchSessionId, string query = null, string tags = null, Dictionary<string, string> parameters = null)
        {
            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            Dictionary<string, string> paramDict = new Dictionary<string, string>();
            paramDict["method"] = "flickr.photos.search";
            paramDict["format"] = "json";
            paramDict["nojsoncallback"] = "1";
            paramDict["oauth_consumer_key"] = consumerKey;
            paramDict["oauth_nonce"] = nonce;
            paramDict["oauth_signature_method"] = "HMAC-SHA1";
            paramDict["oauth_timestamp"] = timestamp;
            paramDict["oauth_token"] = AccessToken;
            paramDict["oauth_version"] = "1.0";
            paramDict["extras"] = UrlHelper.Encode(commonExtraParameters);

            if (query != null)
                paramDict["text"] = UrlHelper.Encode(query);

            if (tags != null)
                paramDict["tags"] = UrlHelper.Encode(tags);

            if (parameters != null)
            {
                foreach (var entry in parameters)
                {
                    paramDict[entry.Key] = entry.Value;
                }
            }

            string paramString = GenerateParamString(paramDict);
            string signature = GenerateSignature("GET", AccessTokenSecret, "http://api.flickr.com/services/rest", paramString);
            string requestUrl = "http://api.flickr.com/services/rest?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                if (response.StatusCode != HttpStatusCode.OK)
                {
                    HandleHTTPException(response);
                    return;
                }

                string jsonString = reader.ReadToEnd();
                if (!TryHandleResponseException(jsonString, () => { SearchPhotoAsync(searchSessionId, query, tags, parameters); }))
                    return;

                PhotoSearchEventArgs evt = new PhotoSearchEventArgs();
                evt.SearchSessionId = searchSessionId;
                evt.Response = jsonString;
                PhotoSearchReturned.DispatchEvent(this, evt);

            }
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreSearchExtension.cs
TAPReplacable SearchGroupsAsync(string searchSessionId, string query = null, Dictionary<string, string> parameters = null)
public async void SearchGroupsAsync(string searchSessionId, string query = null, Dictionary<string, string> parameters = null)
        {
            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            Dictionary<string, string> paramDict = new Dictionary<string, string>();
            paramDict["method"] = "flickr.groups.search";
            paramDict["format"] = "json";
            paramDict["nojsoncallback"] = "1";
            paramDict["oauth_consumer_key"] = consumerKey;
            paramDict["oauth_nonce"] = nonce;
            paramDict["oauth_signature_method"] = "HMAC-SHA1";
            paramDict["oauth_timestamp"] = timestamp;
            paramDict["oauth_token"] = AccessToken;
            paramDict["oauth_version"] = "1.0";
            paramDict["text"] = UrlHelper.Encode(query);

            if (parameters != null)
            {
                foreach (var entry in parameters)
                {
                    paramDict[entry.Key] = entry.Value;
                }
            }

            string paramString = GenerateParamString(paramDict);
            string signature = GenerateSignature("GET", AccessTokenSecret, "http://api.flickr.com/services/rest", paramString);
            string requestUrl = "http://api.flickr.com/services/rest?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                if (response.StatusCode != HttpStatusCode.OK)
                {
                    HandleHTTPException(response);
                    return;
                }

                string jsonString = reader.ReadToEnd();
                if (!TryHandleResponseException(jsonString, () => { SearchGroupsAsync(searchSessionId, query, parameters); }))
                    return;

                GroupSearchEventArgs evt = new GroupSearchEventArgs();
                evt.SearchSessionId = searchSessionId;
                evt.Response = jsonString;
                GroupSearchReturned.DispatchEvent(this, evt);

            }
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCorePhotoSetExtension.cs
TAPReplacable GetPhotoSetListAsync(string userId)
public async void GetPhotoSetListAsync(string userId)
        {
            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            string paramString = "oauth_nonce=" + nonce;
            paramString += "&oauth_consumer_key=" + consumerKey;
            paramString += "&oauth_signature_method=HMAC-SHA1";
            paramString += "&oauth_timestamp=" + timestamp;
            paramString += "&oauth_version=1.0";
            paramString += "&oauth_token=" + AccessToken;
            paramString += "&format=json&nojsoncallback=1";
            paramString += "&user_id=" + userId;
            paramString += "&method=flickr.photosets.getList";

            string signature = GenerateSignature("GET", AccessTokenSecret, "http://api.flickr.com/services/rest/", paramString);
            string requestUrl = "http://api.flickr.com/services/rest/?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                if (response.StatusCode != HttpStatusCode.OK)
                {
                    HandleHTTPException(response);
                    return;
                }

                string jsonString = reader.ReadToEnd();
                if (!TryHandleResponseException(jsonString, () => { GetPhotoSetListAsync(userId); }))
                    return;

                PhotoSetListEventArgs evt = new PhotoSetListEventArgs();
                evt.UserId = userId;
                evt.Response = jsonString;
                PhotoSetListReturned.DispatchEvent(this, evt);
            }

        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCorePhotoSetExtension.cs
TAPReplacable GetPhotoSetPhotosAsync(string setId, Dictionary<string, string> parameters = null)
public async void GetPhotoSetPhotosAsync(string setId, Dictionary<string, string> parameters = null)
        {
            if (setPhotoFetchingQueue.Contains(setId))
                return;

            setPhotoFetchingQueue.Add(setId);

            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            Dictionary<string, string> paramDict = new Dictionary<string, string>();
            paramDict["method"] = "flickr.photosets.getPhotos";
            paramDict["format"] = "json";
            paramDict["nojsoncallback"] = "1";
            paramDict["oauth_consumer_key"] = consumerKey;
            paramDict["oauth_nonce"] = nonce;
            paramDict["oauth_signature_method"] = "HMAC-SHA1";
            paramDict["oauth_timestamp"] = timestamp;
            paramDict["oauth_token"] = AccessToken;
            paramDict["oauth_version"] = "1.0";
            paramDict["photoset_id"] = setId;

            if (parameters != null)
            {
                foreach (var entry in parameters)
                {
                    paramDict[entry.Key] = entry.Value;
                }
            }

            paramDict["extras"] = UrlHelper.Encode(commonExtraParameters);

            string paramString = GenerateParamString(paramDict);
            string signature = GenerateSignature("GET", AccessTokenSecret, "http://api.flickr.com/services/rest", paramString);
            string requestUrl = "http://api.flickr.com/services/rest?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                setPhotoFetchingQueue.Remove(setId);

                if (response.StatusCode != HttpStatusCode.OK)
                {
                    HandleHTTPException(response);
                    return;
                }

                string jsonString = reader.ReadToEnd();
                if (!TryHandleResponseException(jsonString, () => { GetPhotoSetPhotosAsync(setId, parameters); }))
                    return;

                GetPhotoSetPhotosEventArgs args = new GetPhotoSetPhotosEventArgs();
                args.PhotoSetId = setId;
                args.Response = jsonString;
                PhotoSetPhotosReturned.DispatchEvent(this, args);
            }
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreTagExtension.cs
TAPReplacable GetPopularTagListAsync()
public async void GetPopularTagListAsync()
        {
            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            string paramString = "oauth_nonce=" + nonce;
            paramString += "&oauth_consumer_key=" + consumerKey;
            paramString += "&oauth_signature_method=HMAC-SHA1";
            paramString += "&oauth_timestamp=" + timestamp;
            paramString += "&oauth_version=1.0";
            paramString += "&oauth_token=" + AccessToken;
            paramString += "&format=json&nojsoncallback=1";
            paramString += "&method=flickr.tags.getHotList";

            string signature = GenerateSignature("GET", AccessTokenSecret, "http://api.flickr.com/services/rest/", paramString);
            string requestUrl = "http://api.flickr.com/services/rest/?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                if (response.StatusCode != HttpStatusCode.OK)
                {
                    HandleHTTPException(response);
                    return;
                }

                string jsonString = reader.ReadToEnd();
                if (!IsResponseSuccess(jsonString))
                    return;

                GetPopularTagListEventArgs args = new GetPopularTagListEventArgs();
                args.Response = jsonString;
                PopularTagListReturned.DispatchEvent(this, args);
            }

        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreUploadExtension.cs
TAPReplacable UploadPhoto(string sessionId, string fileName, Stream stream, Dictionary<string, string> parameters = null)
public async void UploadPhoto(string sessionId, string fileName, Stream stream, Dictionary<string, string> parameters = null)
        {
            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            Dictionary<string, string> paramDict = new Dictionary<string, string>();
            paramDict["oauth_consumer_key"] = consumerKey;
            paramDict["oauth_nonce"] = nonce;
            paramDict["oauth_signature_method"] = "HMAC-SHA1";
            paramDict["oauth_timestamp"] = timestamp;
            paramDict["oauth_token"] = AccessToken;
            paramDict["oauth_version"] = "1.0";

            if (parameters != null)
            {
                foreach (var entry in parameters)
                {
                    paramDict[entry.Key] = entry.Value;
                }
            }

            string signature = OAuthCalculateSignature("POST", "http://api.flickr.com/services/upload/", paramDict, AccessTokenSecret);

            paramDict["oauth_signature"] = signature;

            HttpWebResponse response = await UploadDataAsync(fileName, stream, paramDict);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                if (response.StatusCode != HttpStatusCode.OK)
                {
                    HandleHTTPException(response);
                    return;
                }

                string xmlString = reader.ReadToEnd();
                XDocument xmlDoc = XDocument.Parse(xmlString);
                if (xmlDoc.Element("rsp").Attribute("stat").Value == "fail")
                {
                    if (PhotoUploadError != null)
                    {
                        var errorEvt = new UploadPhotoErrorEventArgs();
                        errorEvt.SessionId = sessionId;
                        PhotoUploadError(this, errorEvt);
                    }
                    return;
                }
                else
                {
                    string photoId = (from x in XDocument.Parse(xmlString).Element("rsp").Descendants().ToList()
                                                 select x).First().Value;

                    if (PhotoUploaded != null)
                    {
                        var evt = new UploadPhotoEventArgs();
                        evt.SessionId = sessionId;
                        evt.PhotoId = photoId;

                        PhotoUploaded(this, evt);
                    }


                }
                
            }
        }
--------------------------
LONGRUNNING True 1 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreUploadExtension.cs
APMTAPReplacable UploadPhoto(string sessionId, string fileName, Stream stream, Dictionary<string, string> parameters = null)
private async Task<HttpWebResponse> UploadDataAsync(string fileName, Stream imageStream, Dictionary<string, string> parameters)
        {
            string boundary = "FLICKR_MIME_" + DateTime.Now.ToString("yyyyMMddhhmmss", System.Globalization.DateTimeFormatInfo.InvariantInfo);

            string authHeader = AnacondaCore.OAuthCalculateAuthHeader(parameters);
            byte[] dataBuffer = CreateUploadData(imageStream, fileName, parameters, boundary);

            HttpWebRequest req = (HttpWebRequest)HttpWebRequest.Create(new Uri("http://api.flickr.com/services/upload/"));
            req.Method = "POST";
            req.ContentType = "multipart/form-data; boundary=" + boundary;           
            if (!String.IsNullOrEmpty(authHeader))
            {
                req.Headers["Authorization"] = authHeader;
            }

            req.ContentLength = dataBuffer.Length;

            using (Stream reqStream = await req.GetRequestStreamAsync())
            {
                int bufferSize = 32 * 1024;
                if (dataBuffer.Length / 100 > bufferSize) bufferSize = bufferSize * 2;

                int uploadedSoFar = 0;

                while (uploadedSoFar < dataBuffer.Length)
                {
                    reqStream.Write(dataBuffer, uploadedSoFar, Math.Min(bufferSize, dataBuffer.Length - uploadedSoFar));
                    uploadedSoFar += bufferSize;

                    if (PhotoUploadProgress != null)
                    {
                        UploadProgressEventArgs args = new UploadProgressEventArgs(uploadedSoFar, dataBuffer.Length);
                        PhotoUploadProgress(this, args);
                    }
                }
                reqStream.Close();
            }

            // Invoke the API
            try
            {
                HttpWebResponse response = (HttpWebResponse)await req.GetResponseAsync();
                return response;
            }
            catch (Exception e)
            {
                var we = e.InnerException as WebException;
                if (we != null)
                {
                    var resp = we.Response as HttpWebResponse;
                    var code = resp.StatusCode;
                    Debug.WriteLine("Status:{0}", we.Status);

                    return resp;
                }
                else
                    throw;
            }
        }
--------------------------
LONGRUNNING False 3 System.IO.Stream.Read(byte[], int, int) D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreUploadExtension.cs
APMTAPReplacable UploadPhoto(string sessionId, string fileName, Stream stream, Dictionary<string, string> parameters = null)
private byte[] ConvertNonSeekableStreamToByteArray(Stream nonSeekableStream)
        {
            MemoryStream ms = new MemoryStream();
            byte[] buffer = new byte[1024];
            int bytes;
            while ((bytes = nonSeekableStream.Read(buffer, 0, buffer.Length)) > 0)
            {
                ms.Write(buffer, 0, bytes);
            }
            byte[] output = ms.ToArray();
            return output;
        }
--------------------------
LONGRUNNING False 3 System.IO.MemoryStream.Write(byte[], int, int) D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreUploadExtension.cs
APMTAPReplacable UploadPhoto(string sessionId, string fileName, Stream stream, Dictionary<string, string> parameters = null)
private byte[] ConvertNonSeekableStreamToByteArray(Stream nonSeekableStream)
        {
            MemoryStream ms = new MemoryStream();
            byte[] buffer = new byte[1024];
            int bytes;
            while ((bytes = nonSeekableStream.Read(buffer, 0, buffer.Length)) > 0)
            {
                ms.Write(buffer, 0, bytes);
            }
            byte[] output = ms.ToArray();
            return output;
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreUserExtension.cs
TAPReplacable GetPhotoStreamAsync(string userId, Dictionary<string, string> parameters = null)
public async void GetPhotoStreamAsync(string userId, Dictionary<string, string> parameters = null)
        {
            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            Dictionary<string, string> paramDict = new Dictionary<string, string>();
            paramDict["method"] = "flickr.people.getPhotos";
            paramDict["format"] = "json";
            paramDict["nojsoncallback"] = "1";
            paramDict["oauth_consumer_key"] = consumerKey;
            paramDict["oauth_nonce"] = nonce;
            paramDict["oauth_signature_method"] = "HMAC-SHA1";
            paramDict["oauth_timestamp"] = timestamp;
            paramDict["oauth_token"] = AccessToken;
            paramDict["oauth_version"] = "1.0";

            if (parameters != null)
            {
                foreach (var entry in parameters)
                {
                    paramDict[entry.Key] = entry.Value;
                }
            }

            if (userId == Cinderella.Cinderella.CinderellaCore.CurrentUser.ResourceId)
                paramDict["user_id"] = "me";
            else
                paramDict["user_id"] = Cinderella.Cinderella.CinderellaCore.CurrentUser.ResourceId;

            paramDict["extras"] = UrlHelper.Encode(commonExtraParameters);

            User user = null;
            if (Cinderella.Cinderella.CinderellaCore.UserCache.ContainsKey(userId))
            {
                user = Cinderella.Cinderella.CinderellaCore.UserCache[userId];
                user.IsLoadingPhotoStream = true;
            }

            string paramString = GenerateParamString(paramDict);
            string signature = GenerateSignature("GET", AccessTokenSecret, "http://api.flickr.com/services/rest", paramString);
            string requestUrl = "http://api.flickr.com/services/rest?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                if (user != null)
                {
                    user.IsLoadingPhotoStream = false;
                }

                if (response.StatusCode != HttpStatusCode.OK)
                {
                    HandleHTTPException(response);
                    return;
                }

                string jsonString = reader.ReadToEnd();
                if (!TryHandleResponseException(jsonString, () => { GetPhotoStreamAsync(userId, parameters); }))
                    return;

                GetPhotoStreamEventArgs args = new GetPhotoStreamEventArgs();
                args.UserId = userId;
                args.Response = jsonString;
                PhotoStreamReturned.DispatchEvent(this, args);
            }
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreUserExtension.cs
TAPReplacable GetGroupListAsync(string userId, Dictionary<string, string> parameters = null)
public async void GetGroupListAsync(string userId, Dictionary<string, string> parameters = null)
        {
            if (groupListFetchingQueue.Contains(userId))
                return;

            groupListFetchingQueue.Add(userId);

            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            Dictionary<string, string> paramDict = new Dictionary<string, string>();
            paramDict["method"] = "flickr.people.getGroups";
            paramDict["format"] = "json";
            paramDict["nojsoncallback"] = "1";
            paramDict["oauth_consumer_key"] = consumerKey;
            paramDict["oauth_nonce"] = nonce;
            paramDict["oauth_signature_method"] = "HMAC-SHA1";
            paramDict["oauth_timestamp"] = timestamp;
            paramDict["oauth_token"] = AccessToken;
            paramDict["oauth_version"] = "1.0";

            if (parameters != null)
            {
                foreach (var entry in parameters)
                {
                    paramDict[entry.Key] = entry.Value;
                }
            }

            paramDict["user_id"] = userId;
            paramDict["extras"] = UrlHelper.Encode("privacy,throttle,restrictions");

            string paramString = GenerateParamString(paramDict);
            string signature = GenerateSignature("GET", AccessTokenSecret, "http://api.flickr.com/services/rest", paramString);
            string requestUrl = "http://api.flickr.com/services/rest?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                groupListFetchingQueue.Remove(userId);
                if (response.StatusCode != HttpStatusCode.OK)
                {
                    HandleHTTPException(response);
                    return;
                }

                string jsonString = reader.ReadToEnd();
                if (!TryHandleResponseException(jsonString, () => { GetGroupListAsync(userId, parameters); }))
                    return;

                GetGroupListEventArgs args = new GetGroupListEventArgs();
                args.UserId = userId;
                args.Response = jsonString;
                GroupListReturned.DispatchEvent(this, args);
            }
        }
--------------------------
LONGRUNNING True 0 QDFeedParser.BaseFeedFactory.CheckFeedType(string) D:\CodeCorpus\WPApps\qdfeed\qdfeed_ad3fd8792e56\QDFeedParser.Mobile (WP8)\..\QDFeedParser (NET45)\BaseFeedFactory.async.cs
TAPReplacable CreateFeedAsync(Uri feeduri)
public async Task<IFeed> CreateFeedAsync(Uri feeduri)
        {
            var feedXml = await DownloadXmlAsync(feeduri);

            var feedtype = CheckFeedType(feedXml);
            return CreateFeed(feeduri, feedtype, feedXml);
        }
--------------------------
LONGRUNNING True 0 QDFeedParser.BaseFeedFactory.CreateFeed(System.Uri, QDFeedParser.FeedType, string) D:\CodeCorpus\WPApps\qdfeed\qdfeed_ad3fd8792e56\QDFeedParser.Mobile (WP8)\..\QDFeedParser (NET45)\BaseFeedFactory.async.cs
APMTAPReplacable CreateFeedAsync(Uri feeduri)
public async Task<IFeed> CreateFeedAsync(Uri feeduri)
        {
            var feedXml = await DownloadXmlAsync(feeduri);

            var feedtype = CheckFeedType(feedXml);
            return CreateFeed(feeduri, feedtype, feedXml);
        }
--------------------------
LONGRUNNING True 0 QDFeedParser.BaseFeedFactory.CreateFeed(System.Uri, QDFeedParser.FeedType, string) D:\CodeCorpus\WPApps\qdfeed\qdfeed_ad3fd8792e56\QDFeedParser.Mobile (WP8)\..\QDFeedParser (NET45)\BaseFeedFactory.async.cs
APMTAPReplacable CreateFeedAsync(Uri feeduri, FeedType feedtype)
public async Task<IFeed> CreateFeedAsync(Uri feeduri, FeedType feedtype)
        {
            var feedXml = await DownloadXmlAsync(feeduri);

            return CreateFeed(feeduri, feedtype, feedXml);
        }
--------------------------
LONGRUNNING True 0 QDFeedParser.BaseFeedFactory.CheckFeedType(string) D:\CodeCorpus\WPApps\qdfeed\qdfeed_ad3fd8792e56\QDFeedParser.Mobile (WP8)\..\QDFeedParser (NET45)\BaseFeedFactory.async.cs
TAPReplacable CheckFeedTypeAsync(Uri feeduri)
public async Task<FeedType> CheckFeedTypeAsync(Uri feeduri)
        {
            var feedXml = await DownloadXmlAsync(feeduri);
            return CheckFeedType(feedXml);
        }
--------------------------
LONGRUNNING False 1 System.IO.StreamWriter.Write(string) D:\CodeCorpus\WPApps\ScottIsAFool+StoreCardBuddy\ScottIsAFool-StoreCardBuddy-c13bc86\StoreCardBuddy.WindowsPhone7\ViewModel\BackupRestoreViewModel.cs
TAPReplacable EncryptAndUploadCards(ObservableCollection<Card> cards)
public static Stream ToStream(this string str)
        {
            var stream = new MemoryStream();
            var writer = new StreamWriter(stream);
            writer.Write(str);
            writer.Flush();
            stream.Position = 0;
            return stream;
        }
--------------------------
LONGRUNNING False 1 System.IO.StreamWriter.Flush() D:\CodeCorpus\WPApps\ScottIsAFool+StoreCardBuddy\ScottIsAFool-StoreCardBuddy-c13bc86\StoreCardBuddy.WindowsPhone7\ViewModel\BackupRestoreViewModel.cs
TAPReplacable EncryptAndUploadCards(ObservableCollection<Card> cards)
public static Stream ToStream(this string str)
        {
            var stream = new MemoryStream();
            var writer = new StreamWriter(stream);
            writer.Write(str);
            writer.Flush();
            stream.Position = 0;
            return stream;
        }
--------------------------
LONGRUNNING False 2 Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings) D:\CodeCorpus\WPApps\SlidePay+WindowsPhoneSDK\SlidePay-WindowsPhoneSDK-ab41c5e\WindowsPhoneSDK\sdk\APIs\endpoint\sp_find_endpoint.cs
TAPReplacable sp_find_endpoint()
private static string serialize_json<T>(T obj)
        {
            try
            {
                return JsonConvert.SerializeObject(obj, Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings { });
            }
            catch (Exception e)
            {
                exception("serialize_json", "Exception while serializing object to JSON", e);
                return null;
            }
        }
--------------------------
LONGRUNNING False 1 Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string) D:\CodeCorpus\WPApps\SlidePay+WindowsPhoneSDK\SlidePay-WindowsPhoneSDK-ab41c5e\WindowsPhoneSDK\sdk\APIs\endpoint\sp_find_endpoint.cs
TAPReplacable sp_find_endpoint()
private T deserialize_json<T>(string json_string)
        {
            try
            {
                if (string_null_or_empty(json_string))
                {
                    log("deserialize_json null input supplied", true);
                    throw new Exception();
                }

                return JsonConvert.DeserializeObject<T>(json_string);
            }
            catch (Exception)
            {
                log("deserialize_json unable to deserialize JSON string", true);
                throw new Exception();
            }
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
public async Task<IEnumerable<Conflict>> UploadSucceeded(Guid state, byte[] bAnchor, 
                            IEnumerable<Conflict> conflicts, IEnumerable<OfflineEntity> entities)
        {
            List<Conflict> returnConflicts = new List<Conflict>();


            // Don't need the sent entitiesChanges anymore
            sentChangesAwaitingResponse.Remove(state);

            string fileName = GetFileName(CacheFileType.UploadResponse);

            var isoFolder = ApplicationData.Current.LocalFolder;


            ResponseData responseData = new ResponseData();
            responseData.Anchor = bAnchor;

            // This approach assumes that there are not duplicates between the conflicts and the updated entities (there shouldn't be)
            responseData.Entities = (from c in conflicts
                                     select (OfflineEntity)c.LiveEntity).Concat(entities);

            using (Stream fileStream = await OpenWriteFile(isoFolder, fileName))
            using (Stream writeStream = OpenWriteCryptoStream(fileStream))
            {
                var serializer = GetSerializer(typeof(ResponseData));

                serializer.WriteObject(writeStream, responseData);
            }

            foreach (Conflict conflict in conflicts)
                returnConflicts.Add(await WriteConflictFile(isoFolder, conflict));

            // Increment creation of a new recent file since the last Archive
            filesSinceArchive++;

            return returnConflicts;
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
private async Task ReadFiles(CacheData cacheData, WinEightContext context)
        {
            StorageFolder isoFolder = ApplicationData.Current.LocalFolder;

            var cacheFolder = await isoFolder.GetFolderAsync(cachePath);

            var files = await cacheFolder.GetFilesAsync();

            files.OrderBy(sf => sf.Name);

            var arrayFiles = files.ToArray();

            bool exceptionCaught = false;

            List<FileInfo> conflictFiles = new List<FileInfo>();

            foreach (StorageFile file in arrayFiles)
            {
                try
                {
                    if (Constants.SpecialFile(file.Name) || !Constants.IsCacheFile(file.Name)) continue;

                    if (exceptionCaught)
                    {
                        await DeleteFile(file);
                    }
                    else
                    {
                        CacheFileType fileType = GetFileType(file.Name);
                        var fc = GetFileCount(file.Name);

                        fileCount = fc >= fileCount ? fc : fileCount;

                        switch (fileType)
                        {
                            case CacheFileType.DownloadResponse:
                                await ReadDownloadResponseFile(file.Name, cachePath, cacheData);
                                filesSinceArchive++;
                                break;

                            case CacheFileType.SaveChanges:
                                await ReadSaveChangesFile(file.Name, cachePath, cacheData);
                                filesSinceArchive++;
                                break;

                            case CacheFileType.UploadResponse:
                                await ReadUploadResponseFile(file.Name, cachePath, cacheData);
                                filesSinceArchive++;
                                break;

                            case CacheFileType.Conflicts:
                            case CacheFileType.Errors:

                                conflictFiles.Add(new FileInfo
                                {
                                    FileName = file.Name,
                                    FileType = fileType
                                });

                                break;

                            case CacheFileType.Archive:
                                await ReadArchiveFile(file.Name, cacheData);
                                filesSinceArchive = 0;
                                break;
                        }
                    }
                }
                catch (SerializationException)
                {
                    // if there's a serialization exception set a flag to remove the subsequent files
                    exceptionCaught = true;

                    DeleteFile(file);

                }
                catch (Exception)
                {
                    // this can happen for a variety of reasons.  The
                    exceptionCaught = true;
                }
            }

            foreach (FileInfo fi in conflictFiles)
            {
                try
                {
                    int count = GetFileCount(fi.FileName);

                    if (exceptionCaught && count > this.fileCount)
                    {
                        var deleteFile = await isoFolder.GetFileAsync(fi.FileName);

                        await DeleteFile(deleteFile);
                    }
                    else
                    {
                        if (fi.FileType == CacheFileType.Conflicts)
                            await ReadConflictFile(fi.FileName, cachePath, cacheData, context);
                        else if (fi.FileType == CacheFileType.Errors)
                            await ReadErrorFile(fi.FileName, cachePath, cacheData, context);
                    }
                }
                catch (SerializationException)
                {
                    // Drop this exception...if reading a conflict fails, it's not the worst thing.
                }
                catch (Exception)
                {
                    // Drop this exception...this will likely happen if a file can't be deleted.
                }
            }

        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
private async Task DeleteFiles(string searchPattern)
        {
            var isoFolder = ApplicationData.Current.LocalFolder;

            var cacheFolder = await isoFolder.GetFolderAsync(cachePath);
            IReadOnlyList<StorageFile> files= null;

            if (searchPattern == "*")
            {
                files = await cacheFolder.GetFilesAsync();
            }
            else
            {
                var options = new QueryOptions(CommonFileQuery.DefaultQuery, new[] { searchPattern });

                if (isoFolder.AreQueryOptionsSupported(options))
                {
                    var query = cacheFolder.CreateFileQueryWithOptions(options);
                    files = await query.GetFilesAsync();
                }
            }

            if (files != null)
                foreach (var file in files)
                    if (file.Name != Constants.LOCKFILE)
                        await DeleteFile(file);
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
private async void CleanupTimerCallback(Object sender, object o)
        {
            int tickCount;

            int originalFilesSyncArchive;

            // The point of lock here is to let any other write operation clear out
            // once that is done, we'll have the tick count and will only be dealing
            // with previously written files, so we don't need the lock anymore, and
            // we want to allow other operations to continue.
            // Releasing the lock as soon as we get the filesSinceArchive is Ok, 
            // since the other operations are not dependant on the Archive file to get written.
            // Anyways if another archive thread kicks in it will be blocked by the _archiveLock.
            lock (syncRoot)
            {
                // Make sure enough files were written so we don't just keep copying
                // archive files
                if (filesSinceArchive < ARCHIVE_FILE_THRESHOLD)
                    return;

                originalFilesSyncArchive = filesSinceArchive;
                filesSinceArchive = 0;
                tickCount = GetNextFileCount();
            }


            var isoFolder = ApplicationData.Current.LocalFolder;
            StorageFolder folder = null;
            bool caughtException = false;

            // The actual files we can do something about
            List<FileInfo> actualFiles = new List<FileInfo>();
            string fileName = null;

            try
            {
                byte[] archiveAnchor = null;
                // Get all the files under the cache path

                folder = await isoFolder.GetFolderAsync(cachePath);

                var fileList = await folder.GetFilesAsync();

                // Tri
                var listOrdered = fileList.OrderByDescending(file => file.Name);

                // reverse so that we can avoid duplicates better
                //fileList.Reverse();

                // Id manager for items that have been saved
                ArchiveIdManager serializedItems = new ArchiveIdManager();

                bool encounteredUpload = false;

                // Preprocess the list files to pick the ones we want.
                foreach (StorageFile file in listOrdered)
                {
                    if (Constants.IsCacheFile(file.Name))
                    {
                        int getFileCount = GetFileCount(file.Name);
                        if (getFileCount > tickCount)
                            continue;

                        CacheFileType fileType = GetFileType(file.Name);

                        if (fileType != CacheFileType.Conflicts && fileType != CacheFileType.Errors)
                        {
                            FileInfo fileInfo = new FileInfo
                            {
                                FileType = fileType,
                                FileName = file.Name,
                                HasUploadFile = false
                            };

                            actualFiles.Add(fileInfo);

                            // If the file is a SaveChanges file, we want to see if we should put
                            // a dirty flag in the archive file or not
                            if (fileType == CacheFileType.SaveChanges && encounteredUpload)
                            {
                                fileInfo.HasUploadFile = true;
                            }
                            // if there's an upload file, make sure we note it so that we can mark future
                            // save entitiesChanges files correctly.
                            else if (fileType == CacheFileType.UploadResponse)
                            {
                                encounteredUpload = true;
                            }
                        }
                    }
                }

                fileName = GetFileName(CacheFileType.Archive, null, tickCount);

                // Go through the files we parsed and handle correctly.
                using (Stream fileStream = await OpenWriteFile(isoFolder, fileName))
                using (Stream writeStream = OpenWriteCryptoStream(fileStream))
                {
                    bool encounteredArchive = false;
                    foreach (FileInfo fi in actualFiles)
                    {
                        byte[] currentAnchor = null;
                        switch (fi.FileType)
                        {
                            case CacheFileType.DownloadResponse:
                                ResponseData drd = await ReadFile<ResponseData>(fi.FileName, folder);
                                currentAnchor = drd.Anchor;
                                WriteArchiveEntities(drd.Entities.Cast<OfflineEntity>(), false, writeStream, serializedItems);
                                break;

                            case CacheFileType.UploadResponse:
                                ResponseData responseData = await ReadFile<ResponseData>(fi.FileName, folder);
                                currentAnchor = responseData.Anchor;
                                WriteArchiveEntities(responseData.Entities.Cast<OfflineEntity>(), false, writeStream, serializedItems);
                                break;

                            case CacheFileType.SaveChanges:
                                OfflineEntity[] entities = await ReadFile<OfflineEntity[]>(fi.FileName, folder);
                                WriteArchiveEntities(entities.Cast<OfflineEntity>(), !fi.HasUploadFile, writeStream, serializedItems);
                                break;

                            case CacheFileType.Archive:
                                currentAnchor = await TransferArchiveFile(folder, fi.FileName, writeStream, serializedItems);
                                encounteredArchive = true;
                                break;

                        }

                        // Since reading is happening from the end, only need to set the anchor if the
                        // last oe was null
                        if (archiveAnchor == null)
                            archiveAnchor = currentAnchor;

                        // Since reading is happening from the end, once an archive file is read, we
                        // can skip everything else.
                        if (encounteredArchive)
                            break;
                    }

                    // At the end write the anchor
                    DataContractJsonSerializer serializer = new DataContractJsonSerializer(typeof(byte[]));
                    serializer.WriteObject(writeStream, archiveAnchor);

                }
            }
            catch (Exception e)
            {
                if (e is SerializationException)
                {
                    caughtException = true;

                    // delete the archive file
                    if (fileName != null)
                        DeleteFile(fileName, folder);

                    // if something failed, restore the files synce archive count
                    lock (syncRoot)
                    {
                        // Do an add here because it could have been incremented.
                        filesSinceArchive += originalFilesSyncArchive;
                    }
                }
                else
                {
                    throw;
                }
            }

            if (caughtException) return;

            // If all of this completed successfully, delete the files. This is outside of the try-catch above
            // because we want to avoid doing a rearchive if the only failure was deleting a file.
            foreach (FileInfo fi in actualFiles)
            {
                await DeleteFile(fi.FileName, folder);
            }

        }
-----------------------
LONGRUNNING True 1 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Explorer.Phone\File.xaml.cs
APMReplacable Share_Click(object sender, EventArgs e)
public async Task MakePrivate()
        {
            /*
            <?xml version="1.0" encoding="UTF-8"?>
            <file>
                <publicLink enabled="false"/>
            </file>
            */

            if (!IsPublicUriEnabled)
            {
                return;
            }

            IsBusy = true;

            var webClient = await Account.GetWebClientAsync();

            XElement file = XElement.Parse("<file/>");

            XElement publicLink = XElement.Parse("<publicLink/>");
            publicLink.Add(new XAttribute("enabled", "false"));

            file.Add(publicLink);

            using (Stream stream = await webClient.OpenWriteTaskAsync(RefUri, "PUT"))
            {
                byte[] buffer = Encoding.UTF8.GetBytes(file.ToString());
                stream.Write(buffer, 0, buffer.Length);
                stream.Flush();
                stream.Close();
            }

            IsBusy = false;
        }
--------------------------
LONGRUNNING True 1 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Explorer.Phone\File.xaml.cs
APMReplacable Share_Click(object sender, EventArgs e)
public async Task MakePublic()
        {
            /*
            <?xml version="1.0" encoding="UTF-8"?>
            <file>
                <publicLink enabled="true"/>
            </file>
            */

            if (IsPublicUriEnabled)
            {
                return;
            }

            IsBusy = true;

            var webClient = await Account.GetWebClientAsync();

            XElement file = XElement.Parse("<file/>");

            XElement publicLink = XElement.Parse("<publicLink/>");
            publicLink.Add(new XAttribute("enabled", "true"));

            file.Add(publicLink);

            using (Stream stream = await webClient.OpenWriteTaskAsync(RefUri, "PUT"))
            {
                byte[] buffer = Encoding.UTF8.GetBytes(file.ToString());
                stream.Write(buffer, 0, buffer.Length);
                stream.Flush();
                stream.Close();
            }

            IsBusy = false;
        }
--------------------------
LONGRUNNING True 0 System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(byte[], int, int) D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Explorer.Phone\File.xaml.cs
APMReplacable Download_Click(object sender, EventArgs e)
private async void Download_Click(object sender, EventArgs e)
        {
            if(Media.CurrentState != MediaElementState.Closed)
            {
                Media.Stop();
                Media.ClearValue(MediaElement.SourceProperty);
            }

            var fileInfo = (SugarSyncFileInfo)DataContext;

            using (var stream = await fileInfo.OpenReadAsync())
            {
                using (IsolatedStorageFile isolatedStorageFile = IsolatedStorageFile.GetUserStoreForApplication())
                {
                    if (isolatedStorageFile.FileExists(fileInfo.Name))
                    {
                        isolatedStorageFile.DeleteFile(fileInfo.Name);
                    }

                    fileInfo.IsBusy = true;

                    using (IsolatedStorageFileStream tempFile = isolatedStorageFile.CreateFile(fileInfo.Name))
                    {
                        int bytesRead;
                        var buffer = new byte[65536];

                        do
                        {
                            bytesRead = stream.Read(buffer, 0, buffer.Length);
                            tempFile.Write(buffer, 0, bytesRead);
                            tempFile.Flush();
                        } while (bytesRead > 0);
                    }
                }
            }

            PreparePreview();
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\IO\SugarSyncDirectoryInfo.cs
private static async Task<SugarSyncDirectoryInfo> InternalCreateDirectory(string path, bool recursive, SugarSyncAccount account)
        {
            /*
             * example path...
             * /Sync Folders/Magic Briefcase/Application Data/Appology
             * 
             */

            // TODO: inspect path for read-only directories...

            var pathParts = new Queue<string>(path.Split(new []{'/','\\'}));

            bool rootProcessed = false;
            SugarSyncDirectoryInfo currentDirectoryInfo = null;

            while (pathParts.Count > 0)
            {
                var pathPart = pathParts.Dequeue();

                if (!rootProcessed && pathPart != null && pathPart.Trim() == string.Empty)
                {
                    #region Process Root and Immediate Child
                    var root = new SugarSyncStorageRoot("root", account);

                    await root.RefreshAsync();

                    // root is read-only, so attempt to match next
                    // path part to an existing path in the root

                    var nextPathPart = pathParts.Dequeue();

                    foreach (var directoryInfo in root.Contents.OfType<SugarSyncDirectoryInfo>())
                    {
                        if (directoryInfo.Name.Equals(nextPathPart, StringComparison.InvariantCultureIgnoreCase))
                        {
                            currentDirectoryInfo = directoryInfo;
                            rootProcessed = true;
                            break;
                        }
                    }

                    if (currentDirectoryInfo == null)
                    {
                        throw new Exception(string.Format("Could not find directory named \"{0}\" under account root.", nextPathPart));
                    }
                    #endregion
                }
                else if (!rootProcessed)
                {
                    throw new Exception(string.Format("Relative paths are not supported. [Path=\"{0}\"]", path));
                }
                else if (pathPart != null && pathPart.Trim() != string.Empty)
                {
                    #region Process Current Directory

                    SugarSyncDirectoryInfo nextDirectoryInfo = null;

                    await currentDirectoryInfo.RefreshAsync();

                    foreach (var pathInfo in currentDirectoryInfo.Contents.OfType<SugarSyncDirectoryInfo>())
                    {
                        if (pathInfo.Name.Equals(pathPart, StringComparison.InvariantCultureIgnoreCase))
                        {
                            nextDirectoryInfo = pathInfo;
                            break;
                        }
                    }

                    if (nextDirectoryInfo == null)
                    {
                        if (recursive || pathParts.Count == 0)
                        {
                            // create directory
                            currentDirectoryInfo = await currentDirectoryInfo.CreateDirectoryInfo(pathPart);
                        }
                        else
                        {
                            throw new Exception(string.Format("Could not find part of path \"{0}\".", path));
                        }
                    }
                    else
                    {
                        currentDirectoryInfo = nextDirectoryInfo;
                    }

                    #endregion
                }
            }

            return currentDirectoryInfo;
        }
-----------------------
LONGRUNNING False 6 System.IO.Stream.Flush() D:\CodeCorpus\WPApps\syncwinrt\Sync Framework 4.0 Toolkit\C#\WP8Client\..\WinRTClient\ClientCommon\CacheControllerAsync.cs
TAPReplacable SynchronizeAsync()
private void WriteUploadRequestStream(Stream requestStream, AsyncArgsWrapper wrapper)
        {
            try
            {
                // Create a SyncWriter to write the contents
                this.syncWriter = (SerializationFormat == SerializationFormat.ODataAtom)
                    ? new ODataAtomWriter(BaseUri)
                    : (SyncWriter)new ODataJsonWriter(BaseUri);

               
                syncWriter.StartFeed(wrapper.CacheRequest.IsLastBatch, wrapper.CacheRequest.KnowledgeBlob ?? new byte[0]);

                foreach (IOfflineEntity entity in wrapper.CacheRequest.Changes)
                {
                    // Skip tombstones that dont have a ID element.
                    if (entity.GetServiceMetadata().IsTombstone && string.IsNullOrEmpty(entity.GetServiceMetadata().Id))
                        continue;

                    string tempId = null;

                    // Check to see if this is an insert. i.e ServiceMetadata.Id is null or empty
                    if (string.IsNullOrEmpty(entity.GetServiceMetadata().Id))
                    {
                        if (wrapper.TempIdToEntityMapping == null)
                            wrapper.TempIdToEntityMapping = new Dictionary<string, IOfflineEntity>();

                        tempId = Guid.NewGuid().ToString();
                        wrapper.TempIdToEntityMapping.Add(tempId, entity);
                    }

                    syncWriter.AddItem(entity, tempId);
                }

                if (SerializationFormat == SerializationFormat.ODataAtom)
                    syncWriter.WriteFeed(XmlWriter.Create(requestStream));
                else
                    this.syncWriter.WriteFeed(new XmlJsonWriter(requestStream));

                requestStream.Flush();
            }
            catch (Exception e)
            {
                if (ExceptionUtility.IsFatal(e))
                {
                    throw;
                }
                wrapper.Error = e;
            }
        }
--------------------------
LONGRUNNING False 6 System.IO.Stream.Flush() D:\CodeCorpus\WPApps\syncwinrt\Sync Framework 4.0 Toolkit\C#\WP8Client\..\WinRTClient\ClientCommon\CacheControllerAsync.cs
TAPReplacable SynchronizeAsync()
private void WriteDownloadRequestStream(Stream requestStream, AsyncArgsWrapper wrapper)
        {
            try
            {
                // Create a SyncWriter to write the contents
                this.syncWriter = (SerializationFormat == SerializationFormat.ODataAtom)
                    ? new ODataAtomWriter(BaseUri)
                    : (SyncWriter)new ODataJsonWriter(BaseUri);

                //syncWriter = new ODataAtomWriter(BaseUri);

                syncWriter.StartFeed(wrapper.CacheRequest.IsLastBatch, wrapper.CacheRequest.KnowledgeBlob ?? new byte[0]);

                if (SerializationFormat == SerializationFormat.ODataAtom)
                    syncWriter.WriteFeed(XmlWriter.Create(requestStream));
                else
                    this.syncWriter.WriteFeed(new XmlJsonWriter(requestStream));

                requestStream.Flush();
            }
            catch (Exception e)
            {
                if (ExceptionUtility.IsFatal(e))
                    throw;

                wrapper.Error = e;
            }
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\timothybinkley+Windows-Phone-8-In-Action\timothybinkley-Windows-Phone-8-In-Action-ebfff44\Chapter12\Speech12.3.1\MainPage.xaml.cs
private async void SetVoiceFromCommand(string voice, string action)
        {
            foreach (var voiceInformation in _availableVoices)
            {
                if (voiceInformation.DisplayName.Split(' ')[1].ToLower() == voice.ToLower())
                {
                    var voiceInfo = voiceInformation;
                    var language = InstalledLanguages.Single(l => l.Name == voiceInfo.Language);

                    LanguagesListBox.SelectedItem = language;

                    VoicesListBox.SelectedItem = voiceInfo;

                    await _speechSynthesizer.SpeakTextAsync("Voice set to " + voice);
                    if (action == "read")
                    {
                        await SayText();
                    }
                    break;
                }
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\timothybinkley+Windows-Phone-8-In-Action\timothybinkley-Windows-Phone-8-In-Action-ebfff44\Chapter12\Speech12.4\MainPage.xaml.cs
private async void SetVoiceFromCommand(string voice, string action)
        {
            foreach (var voiceInformation in _availableVoices)
            {
                if (voiceInformation.DisplayName.Split(' ')[1].ToLower() == voice.ToLower())
                {
                    var voiceInfo = voiceInformation;
                    var language = InstalledLanguages.Single(l => l.Name == voiceInfo.Language);

                    LanguagesListBox.SelectedItem = language;

                    VoicesListBox.SelectedItem = voiceInfo;

                    await _speechSynthesizer.SpeakTextAsync("Voice set to " + voice);
                    if (action == "read")
                    {
                        await SayText();
                    }
                    break;
                }
            }
        }
-----------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadLine() D:\CodeCorpus\WPApps\todayhumor\TodayHumor\Class\Board.cs
TAPReplacable Load()
public async void Load()
        {
            // Boards? ?????
            Boards.Clear();

            // IsolatedStorage? ????
            IsolatedStorageFile storage = IsolatedStorageFile.GetUserStoreForApplication();

            // BoardList.txt? ???? ??? ?
            if (storage.FileExists(BoardSavePath))
            {
                // ??? ????. (??? ?? / ??? ID / ??? ??? \t?? ???)
                using (StreamReader BoardReader = new StreamReader(storage.OpenFile(BoardSavePath, FileMode.Open)))
                {
                    string ReadLine;
                    while ((ReadLine = BoardReader.ReadLine()) != null)
                    {
                        string[] ParsedString = ReadLine.Split('\t');

                        Boards.Add(new Board(ParsedString[0], ParsedString[1], Int32.Parse(ParsedString[2])));
                    }
                }
            }
            else
            {
                try
                {
                    await Refresh();
                }
                catch (WebException e)
                {
                    Debug.WriteLine(e.Response);
                }
            }
        }
--------------------------
LONGRUNNING True 1 System.IO.TextWriter.WriteLine(string) D:\CodeCorpus\WPApps\todayhumor\TodayHumor\Class\Board.cs
TAPReplacable Load()
public async Task<bool> Refresh()
        {
            // WebClient? ???? ??? ??? ??? ?
            RaonWebClient WebClient = new RaonWebClient();

            string Uri = "http://m.todayhumor.co.kr/";
            string Result = await WebClient.DownloadStringTaskAsync(new Uri(Uri));

            // ??? ?
            IEnumerable<Board> BoardList = ParseBoardList(Result);

            // IsolatedStorage? ????
            IsolatedStorageFile storage = IsolatedStorageFile.GetUserStoreForApplication();

            // BoardList.txt? ????.
            using (StreamWriter BoardWriter = new StreamWriter(storage.OpenFile(BoardSavePath, FileMode.Create)))
            {
                foreach (Board board in BoardList)
                {
                    BoardWriter.WriteLine(String.Format("{0}\t{1}\t{2}", board.Name, board.Id, board.Hit));
                    Boards.Add(board);
                }
            }

            return true;
        }
--------------------------
LONGRUNNING False 2 System.IO.TextWriter.WriteLine(string) D:\CodeCorpus\WPApps\todayhumor\TodayHumor\Page\Read.xaml.cs
TAPReplacable PageLoaded(object sender, RoutedEventArgs e)
public void Save()
        {
            // IsolatedStorage? ????
            IsolatedStorageFile storage = IsolatedStorageFile.GetUserStoreForApplication();

            // BoardList.txt? ????.
            using (StreamWriter HistoryWriter = new StreamWriter(storage.OpenFile(HistorySavePath, FileMode.Create)))
            {
                foreach (Article article in Articles)
                {
                    HistoryWriter.WriteLine(String.Format("{0}\t{1}\t{2}\t{3}", article.Title, article.Board, article.Href, article.Writer));
                }
            }
        }
--------------------------
LONGRUNNING True 0 System.IO.Stream.Read(byte[], int, int) D:\CodeCorpus\WPApps\tonyunreal+CKReader-WP8\tonyunreal-CKReader-WP8-39bee50\CKReader\MainPage.xaml.cs
APMTAPReplacable readfile(string filepath)
async public void readfile(string filepath)
        {
            // enables progress indicator
            //ProgressIndicator indicator = SystemTray.ProgressIndicator;
            //if (indicator != null)
            //{
            //    //indicator.Text = "????? ...";
            //    //indicator.IsVisible = true;
            //}

            // Connect to the current SD card.
            ExternalStorageDevice _sdCard = (await ExternalStorage.GetExternalStorageDevicesAsync()).FirstOrDefault();

            // If the SD card is present, add GPX files to the Routes collection.
            if (_sdCard != null)
            {
                try
                {
                    // get file of the specific path
                    ExternalStorageFile esf = await _sdCard.GetFileAsync(filepath);

                    if (esf != null)
                    {
                        Debug.WriteLine("found file " + esf.Name);
                        if (esf.Path.EndsWith(".txtx"))
                        {
                            // print its content
                            Stream x = await esf.OpenForReadAsync();
                            byte[] buffer = new byte[x.Length];
                            x.Read(buffer, 0, (int)x.Length);
                            x.Close();

                            string result = System.Text.Encoding.UTF8.GetString(buffer, 0, buffer.Length);
                            //Debug.WriteLine(result);
                            //this.title.Text = "???";
                            //Debug.WriteLine("title changed");
                            //this.content.Text = result.Substring(0, 10000);
                            //Debug.WriteLine("content changed");
                            this.contentString = result;

                            // cut content into pages
                            this.cutContentIntoPages();

                            // display first page
                            this.currentPage = 0;
                            this.displayCurrentPage();
                        }
                    }
                    Debug.WriteLine("done");
                }
                catch (FileNotFoundException)
                {
                    // No Routes folder is present.
                    this.content.Text = "Error loading file, reason: file not found";
                    Debug.WriteLine("file not found.");
                }
            }
            else
            {
                // No SD card is present.
                Debug.WriteLine("The SD card is mssing.");
            }
        }
--------------------------
LONGRUNNING True 0 System.IO.Stream.Read(byte[], int, int) D:\CodeCorpus\WPApps\tonyunreal+CKReader-WP8\tonyunreal-CKReader-WP8-39bee50\CKReader\MainPage.xaml.cs
APMTAPReplacable readfileToken(string fileToken)
async public void readfileToken(string fileToken)
        {
            // enables progress indicator
            //ProgressIndicator indicator = SystemTray.ProgressIndicator;
            //if (indicator != null)
            //{
            //    //indicator.Text = "????? ...";
            //    //indicator.IsVisible = true;
            //}

            try
            {
                // get file of the specific token
                // Create or open the routes folder.
                IStorageFolder routesFolder = ApplicationData.Current.LocalFolder;

                // Get the full file name of the route (.GPX file) from the file association.
                string incomingRouteFilename = SharedStorageAccessManager.GetSharedFileName(fileToken);

                //// purge all files from the Routes folder.
                //Debug.WriteLine("deleting all files within folder");
                //IEnumerable<StorageFile> files = await routesFolder.GetFilesAsync();

                //// Add each GPX file to the Routes collection.
                //foreach (StorageFile f in files)
                //{
                //    await f.DeleteAsync();
                //}

                // Copy the route (.GPX file) to the Routes folder.
                IStorageFile esf = await SharedStorageAccessManager.CopySharedFileAsync((StorageFolder)routesFolder, incomingRouteFilename, NameCollisionOption.ReplaceExisting, fileToken);

                if (esf != null)
                {
                    Debug.WriteLine("found file " + esf.Name);
                    if (esf.Path.EndsWith(".txtx"))
                    {
                        // print its content
                        var fileStream = await esf.OpenReadAsync();
                        Stream x = fileStream.AsStream();
                        byte[] buffer = new byte[x.Length];
                        x.Read(buffer, 0, (int)x.Length);
                        x.Close();

                        string result = System.Text.Encoding.UTF8.GetString(buffer, 0, buffer.Length);
                        //Debug.WriteLine(result);
                        //this.title.Text = "???";
                        //Debug.WriteLine("title changed");
                        //this.content.Text = result.Substring(0, 10000);
                        //Debug.WriteLine("content changed");
                        this.contentString = result;

                        // cut content into pages
                        this.cutContentIntoPages();

                        // display first page
                        this.currentPage = 0;
                        this.displayCurrentPage();
                    }
                }
                Debug.WriteLine("done");
            }
            catch (FileNotFoundException)
            {
                // No Routes folder is present.
                this.content.Text = "Error loading file, reason: file not found";
                Debug.WriteLine("file not found.");
            }
        }
--------------------------
LONGRUNNING True 0 System.IO.Stream.Read(byte[], int, int) D:\CodeCorpus\WPApps\tonyunreal+CKReader-WP8\tonyunreal-CKReader-WP8-39bee50\CKReader\MainPage.xaml.cs
APMTAPReplacable readfileFromSandbox(string fileToken)
async public void readfileFromSandbox(string fileToken)
        {
            // enables progress indicator
            //ProgressIndicator indicator = SystemTray.ProgressIndicator;
            //if (indicator != null)
            //{
            //    //indicator.Text = "????? ...";
            //    //indicator.IsVisible = true;
            //}

            try
            {
                // get file of the specific token
                // Create or open the routes folder.
                IStorageFolder routesFolder = ApplicationData.Current.LocalFolder;

                //// purge all files from the Routes folder.
                //Debug.WriteLine("deleting all files within folder");
                //IEnumerable<StorageFile> files = await routesFolder.GetFilesAsync();

                //// Add each GPX file to the Routes collection.
                //foreach (StorageFile f in files)
                //{
                //    await f.DeleteAsync();
                //}

                // Copy the route (.GPX file) to the Routes folder.
                IStorageFile esf = await routesFolder.GetFileAsync(filepath);

                if (esf != null)
                {
                    Debug.WriteLine("found file " + esf.Name);
                    if (esf.Path.EndsWith(".txtx"))
                    {
                        // print its content
                        var fileStream = await esf.OpenReadAsync();
                        Stream x = fileStream.AsStream();
                        byte[] buffer = new byte[x.Length];
                        x.Read(buffer, 0, (int)x.Length);
                        x.Close();

                        string result = System.Text.Encoding.UTF8.GetString(buffer, 0, buffer.Length);
                        //Debug.WriteLine(result);
                        //this.title.Text = "???";
                        //Debug.WriteLine("title changed");
                        //this.content.Text = result.Substring(0, 10000);
                        //Debug.WriteLine("content changed");
                        this.contentString = result;

                        // cut content into pages
                        this.cutContentIntoPages();

                        // display first page
                        this.currentPage = 0;
                        this.displayCurrentPage();
                    }
                }
                Debug.WriteLine("done");
            }
            catch (FileNotFoundException)
            {
                // No Routes folder is present.
                this.content.Text = "Error loading file, reason: file not found";
                Debug.WriteLine("file not found.");
            }
        }
--------------------------
BLOCKING True 0 programlist.Result
D:\CodeCorpus\WPApps\vksvgithub+IshaWindowsPhone7App\vksvgithub-IshaWindowsPhone7App-6548f73\src\ProgramFinder\TestPage\MainPage.xaml.cs 
Button_Click_1(object sender, RoutedEventArgs e)
private async void Button_Click_1(object sender, RoutedEventArgs e)
        {   
            ////get program details

            //Task<ProgramDetail[]> pdDetail = JSONFeeds.GetJSONDataAsync<ProgramDetail[]>("http://www.ishafoundation.org/index.php?option=com_program&task=details&program_id=6078&format=json");
            //ProgramDetail[] pd = pdDetail.Result;
            //TextBlock1.Text.Insert(1, pd[0].text);
            

            ////////test list of cities
            //Task<List<string>> cities = JSONFeeds.GetJSONDataAsync<List<string>>("http://www.ishafoundation.org/index.php?option=com_program&task=citylist&format=json");                        
            //List<string> finalcities = cities.Result.Distinct().ToList();
            //TextBlock1.Text.Insert(2,finalcities[0]);
            



            ////get list of programs
            Task<ProgramList> programlist = JSONFeeds.GetProgramListAsync(TextBox1.Text.TrimEnd());

            await programlist;
            ProgramList plist = programlist.Result;

            StringBuilder listofitems = new StringBuilder();
            for (int i = 3, j = 0; i < (plist.resultcount + 3); i++, j++)
            {
                listofitems.Append(plist.results[j].overview.icon);
                listofitems.Append(Environment.NewLine);
            }

            TextBlock1.Text = listofitems.ToString();
            
        }
--------------------------
BLOCKING True 0 searchresult.Result
D:\CodeCorpus\WPApps\vksvgithub+IshaWindowsPhone7App\vksvgithub-IshaWindowsPhone7App-6548f73\src\ProgramFinder\Isha.WP8ProgramSearch\App.xaml.cs 
LoadProgramDetails(string programid)
public static async void LoadProgramDetails(string programid)
        {
            //if (!String.IsNullOrEmpty(_programid) && String.Compare(_programid, programid) == 0)
            //{                
            //    return;
            //}
            //TODO: build a caching and not to call network if already loaded, also notify the View


            string urltocall = AppResources.ProgramDetailsURL + "&program_id=" + programid;

            Task<ProgramDetail[]> searchresult = JSONFeeds.GetJSONDataAsync<ProgramDetail[]>(urltocall);
            await searchresult;

            if (!searchresult.IsCompleted)
            {
                return;
            }

            ProgramDetail[] details = searchresult.Result;

            if (details.Length != 0)
            {
                ProgramDetail detail = details[0];

                selectedProgram.Address = detail.address;
                selectedProgram.ContactEmail = detail.contact_email;
                selectedProgram.ContactPhone = detail.contact_phone;
                selectedProgram.Date = detail.date;
                selectedProgram.EflyerUrl = detail.eflyer_url;
                selectedProgram.Icon = detail.icon;
                selectedProgram.Language = detail.title_ext;
                selectedProgram.PreRegisterUrl = detail.preregister_url;
                selectedProgram.RegisterUrl = detail.register_url;
                selectedProgram.Text = detail.text;
                selectedProgram.Title = detail.title;
            }
        }
--------------------------
LONGRUNNING False 1 System.IO.StreamWriter.Write(string) D:\CodeCorpus\WPApps\vortexwolf+2ch-Browser-WP7\vortexwolf-2ch-Browser-WP7-361ffab\DvachBrowser\Assets\HttpTasks\HttpPostTask.cs
TAPReplacable GetRequestStreamCallback(Task<Stream> task, HttpWebRequest request)
private void WriteMultipartObject(Stream stream, Dictionary<string, object> data)
        {
            StreamWriter writer = new StreamWriter(stream);
            if (data != null)
            {
                foreach (var entry in data)
                {
                    this.WriteEntry(writer, entry.Key, entry.Value);
                }
            }

            writer.Write("--");
            writer.Write(this._boundary);
            writer.WriteLine("--");
            writer.Flush();
        }
--------------------------
LONGRUNNING False 1 System.IO.StreamWriter.Write(string) D:\CodeCorpus\WPApps\vortexwolf+2ch-Browser-WP7\vortexwolf-2ch-Browser-WP7-361ffab\DvachBrowser\Assets\HttpTasks\HttpPostTask.cs
TAPReplacable GetRequestStreamCallback(Task<Stream> task, HttpWebRequest request)
private void WriteMultipartObject(Stream stream, Dictionary<string, object> data)
        {
            StreamWriter writer = new StreamWriter(stream);
            if (data != null)
            {
                foreach (var entry in data)
                {
                    this.WriteEntry(writer, entry.Key, entry.Value);
                }
            }

            writer.Write("--");
            writer.Write(this._boundary);
            writer.WriteLine("--");
            writer.Flush();
        }
--------------------------
LONGRUNNING False 1 System.IO.TextWriter.WriteLine(string) D:\CodeCorpus\WPApps\vortexwolf+2ch-Browser-WP7\vortexwolf-2ch-Browser-WP7-361ffab\DvachBrowser\Assets\HttpTasks\HttpPostTask.cs
TAPReplacable GetRequestStreamCallback(Task<Stream> task, HttpWebRequest request)
private void WriteMultipartObject(Stream stream, Dictionary<string, object> data)
        {
            StreamWriter writer = new StreamWriter(stream);
            if (data != null)
            {
                foreach (var entry in data)
                {
                    this.WriteEntry(writer, entry.Key, entry.Value);
                }
            }

            writer.Write("--");
            writer.Write(this._boundary);
            writer.WriteLine("--");
            writer.Flush();
        }
--------------------------
LONGRUNNING False 1 System.IO.StreamWriter.Flush() D:\CodeCorpus\WPApps\vortexwolf+2ch-Browser-WP7\vortexwolf-2ch-Browser-WP7-361ffab\DvachBrowser\Assets\HttpTasks\HttpPostTask.cs
TAPReplacable GetRequestStreamCallback(Task<Stream> task, HttpWebRequest request)
private void WriteMultipartObject(Stream stream, Dictionary<string, object> data)
        {
            StreamWriter writer = new StreamWriter(stream);
            if (data != null)
            {
                foreach (var entry in data)
                {
                    this.WriteEntry(writer, entry.Key, entry.Value);
                }
            }

            writer.Write("--");
            writer.Write(this._boundary);
            writer.WriteLine("--");
            writer.Flush();
        }
--------------------------
LONGRUNNING False 2 System.IO.StreamWriter.Write(string) D:\CodeCorpus\WPApps\vortexwolf+2ch-Browser-WP7\vortexwolf-2ch-Browser-WP7-361ffab\DvachBrowser\Assets\HttpTasks\HttpPostTask.cs
TAPReplacable GetRequestStreamCallback(Task<Stream> task, HttpWebRequest request)
private void WriteEntry(StreamWriter writer, string key, object value)
        {
            if (value != null)
            {
                writer.Write("--");
                writer.WriteLine(this._boundary);
                if (value is byte[])
                {
                    byte[] ba = value as byte[];

                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""; filename=""{1}""", key, "image.png");
                    writer.WriteLine(@"Content-Type: application/octet-stream");
                    writer.WriteLine(@"Content-Length: " + ba.Length);
                    writer.WriteLine();
                    writer.Flush();
                    Stream output = writer.BaseStream;

                    output.Write(ba, 0, ba.Length);
                    output.Flush();
                    writer.WriteLine();
                }
                else
                {
                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""", key);
                    writer.WriteLine();
                    writer.WriteLine(value.ToString());
                }
            }
        }
--------------------------
LONGRUNNING False 2 System.IO.TextWriter.WriteLine(string) D:\CodeCorpus\WPApps\vortexwolf+2ch-Browser-WP7\vortexwolf-2ch-Browser-WP7-361ffab\DvachBrowser\Assets\HttpTasks\HttpPostTask.cs
TAPReplacable GetRequestStreamCallback(Task<Stream> task, HttpWebRequest request)
private void WriteEntry(StreamWriter writer, string key, object value)
        {
            if (value != null)
            {
                writer.Write("--");
                writer.WriteLine(this._boundary);
                if (value is byte[])
                {
                    byte[] ba = value as byte[];

                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""; filename=""{1}""", key, "image.png");
                    writer.WriteLine(@"Content-Type: application/octet-stream");
                    writer.WriteLine(@"Content-Length: " + ba.Length);
                    writer.WriteLine();
                    writer.Flush();
                    Stream output = writer.BaseStream;

                    output.Write(ba, 0, ba.Length);
                    output.Flush();
                    writer.WriteLine();
                }
                else
                {
                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""", key);
                    writer.WriteLine();
                    writer.WriteLine(value.ToString());
                }
            }
        }
--------------------------
LONGRUNNING False 2 System.IO.TextWriter.WriteLine(string, object, object) D:\CodeCorpus\WPApps\vortexwolf+2ch-Browser-WP7\vortexwolf-2ch-Browser-WP7-361ffab\DvachBrowser\Assets\HttpTasks\HttpPostTask.cs
TAPReplacable GetRequestStreamCallback(Task<Stream> task, HttpWebRequest request)
private void WriteEntry(StreamWriter writer, string key, object value)
        {
            if (value != null)
            {
                writer.Write("--");
                writer.WriteLine(this._boundary);
                if (value is byte[])
                {
                    byte[] ba = value as byte[];

                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""; filename=""{1}""", key, "image.png");
                    writer.WriteLine(@"Content-Type: application/octet-stream");
                    writer.WriteLine(@"Content-Length: " + ba.Length);
                    writer.WriteLine();
                    writer.Flush();
                    Stream output = writer.BaseStream;

                    output.Write(ba, 0, ba.Length);
                    output.Flush();
                    writer.WriteLine();
                }
                else
                {
                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""", key);
                    writer.WriteLine();
                    writer.WriteLine(value.ToString());
                }
            }
        }
--------------------------
LONGRUNNING False 2 System.IO.TextWriter.WriteLine(string) D:\CodeCorpus\WPApps\vortexwolf+2ch-Browser-WP7\vortexwolf-2ch-Browser-WP7-361ffab\DvachBrowser\Assets\HttpTasks\HttpPostTask.cs
TAPReplacable GetRequestStreamCallback(Task<Stream> task, HttpWebRequest request)
private void WriteEntry(StreamWriter writer, string key, object value)
        {
            if (value != null)
            {
                writer.Write("--");
                writer.WriteLine(this._boundary);
                if (value is byte[])
                {
                    byte[] ba = value as byte[];

                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""; filename=""{1}""", key, "image.png");
                    writer.WriteLine(@"Content-Type: application/octet-stream");
                    writer.WriteLine(@"Content-Length: " + ba.Length);
                    writer.WriteLine();
                    writer.Flush();
                    Stream output = writer.BaseStream;

                    output.Write(ba, 0, ba.Length);
                    output.Flush();
                    writer.WriteLine();
                }
                else
                {
                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""", key);
                    writer.WriteLine();
                    writer.WriteLine(value.ToString());
                }
            }
        }
--------------------------
LONGRUNNING False 2 System.IO.TextWriter.WriteLine(string) D:\CodeCorpus\WPApps\vortexwolf+2ch-Browser-WP7\vortexwolf-2ch-Browser-WP7-361ffab\DvachBrowser\Assets\HttpTasks\HttpPostTask.cs
TAPReplacable GetRequestStreamCallback(Task<Stream> task, HttpWebRequest request)
private void WriteEntry(StreamWriter writer, string key, object value)
        {
            if (value != null)
            {
                writer.Write("--");
                writer.WriteLine(this._boundary);
                if (value is byte[])
                {
                    byte[] ba = value as byte[];

                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""; filename=""{1}""", key, "image.png");
                    writer.WriteLine(@"Content-Type: application/octet-stream");
                    writer.WriteLine(@"Content-Length: " + ba.Length);
                    writer.WriteLine();
                    writer.Flush();
                    Stream output = writer.BaseStream;

                    output.Write(ba, 0, ba.Length);
                    output.Flush();
                    writer.WriteLine();
                }
                else
                {
                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""", key);
                    writer.WriteLine();
                    writer.WriteLine(value.ToString());
                }
            }
        }
--------------------------
LONGRUNNING False 2 System.IO.TextWriter.WriteLine() D:\CodeCorpus\WPApps\vortexwolf+2ch-Browser-WP7\vortexwolf-2ch-Browser-WP7-361ffab\DvachBrowser\Assets\HttpTasks\HttpPostTask.cs
TAPReplacable GetRequestStreamCallback(Task<Stream> task, HttpWebRequest request)
private void WriteEntry(StreamWriter writer, string key, object value)
        {
            if (value != null)
            {
                writer.Write("--");
                writer.WriteLine(this._boundary);
                if (value is byte[])
                {
                    byte[] ba = value as byte[];

                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""; filename=""{1}""", key, "image.png");
                    writer.WriteLine(@"Content-Type: application/octet-stream");
                    writer.WriteLine(@"Content-Length: " + ba.Length);
                    writer.WriteLine();
                    writer.Flush();
                    Stream output = writer.BaseStream;

                    output.Write(ba, 0, ba.Length);
                    output.Flush();
                    writer.WriteLine();
                }
                else
                {
                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""", key);
                    writer.WriteLine();
                    writer.WriteLine(value.ToString());
                }
            }
        }
--------------------------
LONGRUNNING False 2 System.IO.StreamWriter.Flush() D:\CodeCorpus\WPApps\vortexwolf+2ch-Browser-WP7\vortexwolf-2ch-Browser-WP7-361ffab\DvachBrowser\Assets\HttpTasks\HttpPostTask.cs
TAPReplacable GetRequestStreamCallback(Task<Stream> task, HttpWebRequest request)
private void WriteEntry(StreamWriter writer, string key, object value)
        {
            if (value != null)
            {
                writer.Write("--");
                writer.WriteLine(this._boundary);
                if (value is byte[])
                {
                    byte[] ba = value as byte[];

                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""; filename=""{1}""", key, "image.png");
                    writer.WriteLine(@"Content-Type: application/octet-stream");
                    writer.WriteLine(@"Content-Length: " + ba.Length);
                    writer.WriteLine();
                    writer.Flush();
                    Stream output = writer.BaseStream;

                    output.Write(ba, 0, ba.Length);
                    output.Flush();
                    writer.WriteLine();
                }
                else
                {
                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""", key);
                    writer.WriteLine();
                    writer.WriteLine(value.ToString());
                }
            }
        }
--------------------------
LONGRUNNING False 2 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\vortexwolf+2ch-Browser-WP7\vortexwolf-2ch-Browser-WP7-361ffab\DvachBrowser\Assets\HttpTasks\HttpPostTask.cs
APMTAPReplacable GetRequestStreamCallback(Task<Stream> task, HttpWebRequest request)
private void WriteEntry(StreamWriter writer, string key, object value)
        {
            if (value != null)
            {
                writer.Write("--");
                writer.WriteLine(this._boundary);
                if (value is byte[])
                {
                    byte[] ba = value as byte[];

                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""; filename=""{1}""", key, "image.png");
                    writer.WriteLine(@"Content-Type: application/octet-stream");
                    writer.WriteLine(@"Content-Length: " + ba.Length);
                    writer.WriteLine();
                    writer.Flush();
                    Stream output = writer.BaseStream;

                    output.Write(ba, 0, ba.Length);
                    output.Flush();
                    writer.WriteLine();
                }
                else
                {
                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""", key);
                    writer.WriteLine();
                    writer.WriteLine(value.ToString());
                }
            }
        }
--------------------------
LONGRUNNING False 2 System.IO.Stream.Flush() D:\CodeCorpus\WPApps\vortexwolf+2ch-Browser-WP7\vortexwolf-2ch-Browser-WP7-361ffab\DvachBrowser\Assets\HttpTasks\HttpPostTask.cs
TAPReplacable GetRequestStreamCallback(Task<Stream> task, HttpWebRequest request)
private void WriteEntry(StreamWriter writer, string key, object value)
        {
            if (value != null)
            {
                writer.Write("--");
                writer.WriteLine(this._boundary);
                if (value is byte[])
                {
                    byte[] ba = value as byte[];

                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""; filename=""{1}""", key, "image.png");
                    writer.WriteLine(@"Content-Type: application/octet-stream");
                    writer.WriteLine(@"Content-Length: " + ba.Length);
                    writer.WriteLine();
                    writer.Flush();
                    Stream output = writer.BaseStream;

                    output.Write(ba, 0, ba.Length);
                    output.Flush();
                    writer.WriteLine();
                }
                else
                {
                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""", key);
                    writer.WriteLine();
                    writer.WriteLine(value.ToString());
                }
            }
        }
--------------------------
LONGRUNNING False 2 System.IO.TextWriter.WriteLine() D:\CodeCorpus\WPApps\vortexwolf+2ch-Browser-WP7\vortexwolf-2ch-Browser-WP7-361ffab\DvachBrowser\Assets\HttpTasks\HttpPostTask.cs
TAPReplacable GetRequestStreamCallback(Task<Stream> task, HttpWebRequest request)
private void WriteEntry(StreamWriter writer, string key, object value)
        {
            if (value != null)
            {
                writer.Write("--");
                writer.WriteLine(this._boundary);
                if (value is byte[])
                {
                    byte[] ba = value as byte[];

                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""; filename=""{1}""", key, "image.png");
                    writer.WriteLine(@"Content-Type: application/octet-stream");
                    writer.WriteLine(@"Content-Length: " + ba.Length);
                    writer.WriteLine();
                    writer.Flush();
                    Stream output = writer.BaseStream;

                    output.Write(ba, 0, ba.Length);
                    output.Flush();
                    writer.WriteLine();
                }
                else
                {
                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""", key);
                    writer.WriteLine();
                    writer.WriteLine(value.ToString());
                }
            }
        }
--------------------------
LONGRUNNING False 2 System.IO.TextWriter.WriteLine(string, object) D:\CodeCorpus\WPApps\vortexwolf+2ch-Browser-WP7\vortexwolf-2ch-Browser-WP7-361ffab\DvachBrowser\Assets\HttpTasks\HttpPostTask.cs
TAPReplacable GetRequestStreamCallback(Task<Stream> task, HttpWebRequest request)
private void WriteEntry(StreamWriter writer, string key, object value)
        {
            if (value != null)
            {
                writer.Write("--");
                writer.WriteLine(this._boundary);
                if (value is byte[])
                {
                    byte[] ba = value as byte[];

                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""; filename=""{1}""", key, "image.png");
                    writer.WriteLine(@"Content-Type: application/octet-stream");
                    writer.WriteLine(@"Content-Length: " + ba.Length);
                    writer.WriteLine();
                    writer.Flush();
                    Stream output = writer.BaseStream;

                    output.Write(ba, 0, ba.Length);
                    output.Flush();
                    writer.WriteLine();
                }
                else
                {
                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""", key);
                    writer.WriteLine();
                    writer.WriteLine(value.ToString());
                }
            }
        }
--------------------------
LONGRUNNING False 2 System.IO.TextWriter.WriteLine() D:\CodeCorpus\WPApps\vortexwolf+2ch-Browser-WP7\vortexwolf-2ch-Browser-WP7-361ffab\DvachBrowser\Assets\HttpTasks\HttpPostTask.cs
TAPReplacable GetRequestStreamCallback(Task<Stream> task, HttpWebRequest request)
private void WriteEntry(StreamWriter writer, string key, object value)
        {
            if (value != null)
            {
                writer.Write("--");
                writer.WriteLine(this._boundary);
                if (value is byte[])
                {
                    byte[] ba = value as byte[];

                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""; filename=""{1}""", key, "image.png");
                    writer.WriteLine(@"Content-Type: application/octet-stream");
                    writer.WriteLine(@"Content-Length: " + ba.Length);
                    writer.WriteLine();
                    writer.Flush();
                    Stream output = writer.BaseStream;

                    output.Write(ba, 0, ba.Length);
                    output.Flush();
                    writer.WriteLine();
                }
                else
                {
                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""", key);
                    writer.WriteLine();
                    writer.WriteLine(value.ToString());
                }
            }
        }
--------------------------
LONGRUNNING False 2 System.IO.TextWriter.WriteLine(string) D:\CodeCorpus\WPApps\vortexwolf+2ch-Browser-WP7\vortexwolf-2ch-Browser-WP7-361ffab\DvachBrowser\Assets\HttpTasks\HttpPostTask.cs
TAPReplacable GetRequestStreamCallback(Task<Stream> task, HttpWebRequest request)
private void WriteEntry(StreamWriter writer, string key, object value)
        {
            if (value != null)
            {
                writer.Write("--");
                writer.WriteLine(this._boundary);
                if (value is byte[])
                {
                    byte[] ba = value as byte[];

                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""; filename=""{1}""", key, "image.png");
                    writer.WriteLine(@"Content-Type: application/octet-stream");
                    writer.WriteLine(@"Content-Length: " + ba.Length);
                    writer.WriteLine();
                    writer.Flush();
                    Stream output = writer.BaseStream;

                    output.Write(ba, 0, ba.Length);
                    output.Flush();
                    writer.WriteLine();
                }
                else
                {
                    writer.WriteLine(@"Content-Disposition: form-data; name=""{0}""", key);
                    writer.WriteLine();
                    writer.WriteLine(value.ToString());
                }
            }
        }
--------------------------
LONGRUNNING True 1 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\vortexwolf+2ch-Browser-WP7\vortexwolf-2ch-Browser-WP7-361ffab\DvachBrowser\Assets\HttpTasks\HttpPostTask.cs
TAPReplacable GetRequestStreamCallback(Task<Stream> task, HttpWebRequest request)
private async Task GetResponseCallback(Task<WebResponse> task)
        {
            // get the response
            HttpWebResponse response;
            try
            {
                response = (HttpWebResponse)await task.ConfigureAwait(false);
            }
            catch (Exception e)
            {
                if (e.InnerException != null && e.InnerException.Message.StartsWith("[net_WebHeaderInvalidControlChars]"))
                {
                    // not an exception, everything is ok
                    this.InvokeInUiThread(() => this.OnCompleted(null));
                }
                else
                {
                    this.InvokeOnErrorHandler(ErrorMessages.HttpPostError);
                }

                return;
            }

            if (response.StatusCode != HttpStatusCode.OK)
            {
                this.InvokeOnErrorHandler((int)response.StatusCode + " " + response.StatusDescription);
                return;
            }

            // response stream
            using (Stream stream = response.GetResponseStream())
            {
                using (StreamReader reader = new StreamReader(stream))
                {
                    string str = reader.ReadToEnd();
                    this.InvokeInUiThread(() => this.OnCompleted(str));
                }
            }
        }
--------------------------
LONGRUNNING False 1 System.IO.Stream.Read(byte[], int, int) D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\cms\CMSProcessableFile.cs
APMTAPReplacable Write(
            Stream zOut)
public static void PipeAll(Stream inStr, Stream outStr)
        {
            byte[] bs = new byte[BufferSize];
            int numRead;
            while ((numRead = inStr.Read(bs, 0, bs.Length)) > 0)
            {
                outStr.Write(bs, 0, numRead);
            }
        }
--------------------------
LONGRUNNING False 1 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\cms\CMSProcessableFile.cs
APMTAPReplacable Write(
            Stream zOut)
public static void PipeAll(Stream inStr, Stream outStr)
        {
            byte[] bs = new byte[BufferSize];
            int numRead;
            while ((numRead = inStr.Read(bs, 0, bs.Length)) > 0)
            {
                outStr.Write(bs, 0, numRead);
            }
        }
--------------------------
LONGRUNNING False 11 System.IO.Stream.Read(byte[], int, int) D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\cms\KeyAgreeRecipientInformation.cs
APMTAPReplacable GetContentStream(
            ICipherParameters key)
public static int ReadFully(Stream inStr, byte[] buf, int off, int len)
        {
            int totalRead = 0;
            while (totalRead < len)
            {
                int numRead = inStr.Read(buf, off + totalRead, len - totalRead);
                if (numRead < 1)
                    break;
                totalRead += numRead;
            }
            return totalRead;
        }
--------------------------
LONGRUNNING True 0 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\crypto\tls\RecordStream.cs
APMTAPReplacable WriteMessageAsync(
            ContentType type,
            byte[] message,
            int offset,
            int len)
internal async Task WriteMessageAsync(
            ContentType type,
            byte[] message,
            int offset,
            int len)
        {
            if (type == ContentType.handshake)
            {
                UpdateHandshakeData(message, offset, len);
            }

            Stream cOut = writeCompression.Compress(buffer);

            byte[] ciphertext;
            if (cOut == buffer)
            {
                ciphertext = writeCipher.EncodePlaintext(type, message, offset, len);
            }
            else
            {
                cOut.Write(message, offset, len);
                cOut.Flush();
                ciphertext = writeCipher.EncodePlaintext(type, buffer.ToArray(), 0, (int)buffer.Position);
                buffer.SetLength(0);
            }

            byte[] writeMessage = new byte[ciphertext.Length + 5];
            TlsUtilities.WriteUint8((byte)type, writeMessage, 0);
            TlsUtilities.WriteVersion(writeMessage, 1);
            TlsUtilities.WriteUint16(ciphertext.Length, writeMessage, 3);
            Array.Copy(ciphertext, 0, writeMessage, 5, ciphertext.Length);
            await outStr.WriteAsync(writeMessage, 0, writeMessage.Length);
            await outStr.FlushAsync();
        }
--------------------------
LONGRUNNING True 0 System.IO.Stream.Flush() D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\crypto\tls\RecordStream.cs
TAPReplacable WriteMessageAsync(
            ContentType type,
            byte[] message,
            int offset,
            int len)
internal async Task WriteMessageAsync(
            ContentType type,
            byte[] message,
            int offset,
            int len)
        {
            if (type == ContentType.handshake)
            {
                UpdateHandshakeData(message, offset, len);
            }

            Stream cOut = writeCompression.Compress(buffer);

            byte[] ciphertext;
            if (cOut == buffer)
            {
                ciphertext = writeCipher.EncodePlaintext(type, message, offset, len);
            }
            else
            {
                cOut.Write(message, offset, len);
                cOut.Flush();
                ciphertext = writeCipher.EncodePlaintext(type, buffer.ToArray(), 0, (int)buffer.Position);
                buffer.SetLength(0);
            }

            byte[] writeMessage = new byte[ciphertext.Length + 5];
            TlsUtilities.WriteUint8((byte)type, writeMessage, 0);
            TlsUtilities.WriteVersion(writeMessage, 1);
            TlsUtilities.WriteUint16(ciphertext.Length, writeMessage, 3);
            Array.Copy(ciphertext, 0, writeMessage, 5, ciphertext.Length);
            await outStr.WriteAsync(writeMessage, 0, writeMessage.Length);
            await outStr.FlushAsync();
        }
--------------------------
LONGRUNNING False 2 Org.BouncyCastle.Crypto.Tls.RecordStream.WriteMessage(Org.BouncyCastle.Crypto.Tls.ContentType, byte[], int, int) D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\crypto\tls\TlsProtocolHandler.cs
TAPReplacable SafeWriteMessageAsync(ContentType type, byte[] buf, int offset, int len)
internal void SendAlert(AlertLevel alertLevel, AlertDescription alertDescription)
        {
            byte[] error = new byte[2];
            error[0] = (byte)alertLevel;
            error[1] = (byte)alertDescription;

            rs.WriteMessage(ContentType.alert, error, 0, 2);
        }
--------------------------
LONGRUNNING False 3 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\crypto\tls\TlsProtocolHandler.cs
APMTAPReplacable SafeWriteMessageAsync(ContentType type, byte[] buf, int offset, int len)
internal void WriteMessage(
            ContentType type,
            byte[] message,
            int offset,
            int len)
        {
            if (type == ContentType.handshake)
            {
                UpdateHandshakeData(message, offset, len);
            }

            Stream cOut = writeCompression.Compress(buffer);

            byte[] ciphertext;
            if (cOut == buffer)
            {
                ciphertext = writeCipher.EncodePlaintext(type, message, offset, len);
            }
            else
            {
                cOut.Write(message, offset, len);
                cOut.Flush();
                ciphertext = writeCipher.EncodePlaintext(type, buffer.ToArray(), 0, (int)buffer.Position);
                buffer.SetLength(0);
            }

            byte[] writeMessage = new byte[ciphertext.Length + 5];
            TlsUtilities.WriteUint8((byte)type, writeMessage, 0);
            TlsUtilities.WriteVersion(writeMessage, 1);
            TlsUtilities.WriteUint16(ciphertext.Length, writeMessage, 3);
            Array.Copy(ciphertext, 0, writeMessage, 5, ciphertext.Length);
            outStr.Write(writeMessage, 0, writeMessage.Length);
            outStr.Flush();
        }
--------------------------
LONGRUNNING False 3 System.IO.Stream.Flush() D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\crypto\tls\TlsProtocolHandler.cs
TAPReplacable SafeWriteMessageAsync(ContentType type, byte[] buf, int offset, int len)
internal void WriteMessage(
            ContentType type,
            byte[] message,
            int offset,
            int len)
        {
            if (type == ContentType.handshake)
            {
                UpdateHandshakeData(message, offset, len);
            }

            Stream cOut = writeCompression.Compress(buffer);

            byte[] ciphertext;
            if (cOut == buffer)
            {
                ciphertext = writeCipher.EncodePlaintext(type, message, offset, len);
            }
            else
            {
                cOut.Write(message, offset, len);
                cOut.Flush();
                ciphertext = writeCipher.EncodePlaintext(type, buffer.ToArray(), 0, (int)buffer.Position);
                buffer.SetLength(0);
            }

            byte[] writeMessage = new byte[ciphertext.Length + 5];
            TlsUtilities.WriteUint8((byte)type, writeMessage, 0);
            TlsUtilities.WriteVersion(writeMessage, 1);
            TlsUtilities.WriteUint16(ciphertext.Length, writeMessage, 3);
            Array.Copy(ciphertext, 0, writeMessage, 5, ciphertext.Length);
            outStr.Write(writeMessage, 0, writeMessage.Length);
            outStr.Flush();
        }
--------------------------
LONGRUNNING False 3 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\crypto\tls\TlsProtocolHandler.cs
APMTAPReplacable SafeWriteMessageAsync(ContentType type, byte[] buf, int offset, int len)
internal void WriteMessage(
            ContentType type,
            byte[] message,
            int offset,
            int len)
        {
            if (type == ContentType.handshake)
            {
                UpdateHandshakeData(message, offset, len);
            }

            Stream cOut = writeCompression.Compress(buffer);

            byte[] ciphertext;
            if (cOut == buffer)
            {
                ciphertext = writeCipher.EncodePlaintext(type, message, offset, len);
            }
            else
            {
                cOut.Write(message, offset, len);
                cOut.Flush();
                ciphertext = writeCipher.EncodePlaintext(type, buffer.ToArray(), 0, (int)buffer.Position);
                buffer.SetLength(0);
            }

            byte[] writeMessage = new byte[ciphertext.Length + 5];
            TlsUtilities.WriteUint8((byte)type, writeMessage, 0);
            TlsUtilities.WriteVersion(writeMessage, 1);
            TlsUtilities.WriteUint16(ciphertext.Length, writeMessage, 3);
            Array.Copy(ciphertext, 0, writeMessage, 5, ciphertext.Length);
            outStr.Write(writeMessage, 0, writeMessage.Length);
            outStr.Flush();
        }
--------------------------
LONGRUNNING False 3 System.IO.Stream.Flush() D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\crypto\tls\TlsProtocolHandler.cs
TAPReplacable SafeWriteMessageAsync(ContentType type, byte[] buf, int offset, int len)
internal void WriteMessage(
            ContentType type,
            byte[] message,
            int offset,
            int len)
        {
            if (type == ContentType.handshake)
            {
                UpdateHandshakeData(message, offset, len);
            }

            Stream cOut = writeCompression.Compress(buffer);

            byte[] ciphertext;
            if (cOut == buffer)
            {
                ciphertext = writeCipher.EncodePlaintext(type, message, offset, len);
            }
            else
            {
                cOut.Write(message, offset, len);
                cOut.Flush();
                ciphertext = writeCipher.EncodePlaintext(type, buffer.ToArray(), 0, (int)buffer.Position);
                buffer.SetLength(0);
            }

            byte[] writeMessage = new byte[ciphertext.Length + 5];
            TlsUtilities.WriteUint8((byte)type, writeMessage, 0);
            TlsUtilities.WriteVersion(writeMessage, 1);
            TlsUtilities.WriteUint16(ciphertext.Length, writeMessage, 3);
            Array.Copy(ciphertext, 0, writeMessage, 5, ciphertext.Length);
            outStr.Write(writeMessage, 0, writeMessage.Length);
            outStr.Flush();
        }
--------------------------
LONGRUNNING False 2 Org.BouncyCastle.Utilities.IO.BaseOutputStream.Write(params byte[]) D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\openpgp\PgpLiteralDataGenerator.cs
APMTAPReplacable Open(
            Stream outStr,
            char format,
            StorageFile file)
private void WriteHeader(
            BcpgOutputStream outStr,
            char format,
            string name,
            long modificationTime)
        {
            byte[] encName = Strings.ToUtf8ByteArray(name);

            outStr.Write(
                (byte)format,
                (byte)encName.Length);

            outStr.Write(encName);

            long modDate = modificationTime / 1000L;

            outStr.Write(
                (byte)(modDate >> 24),
                (byte)(modDate >> 16),
                (byte)(modDate >> 8),
                (byte)modDate);
        }
--------------------------
LONGRUNNING False 2 Org.BouncyCastle.Utilities.IO.BaseOutputStream.Write(params byte[]) D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\openpgp\PgpLiteralDataGenerator.cs
APMTAPReplacable Open(
            Stream outStr,
            char format,
            StorageFile file)
private void WriteHeader(
            BcpgOutputStream outStr,
            char format,
            string name,
            long modificationTime)
        {
            byte[] encName = Strings.ToUtf8ByteArray(name);

            outStr.Write(
                (byte)format,
                (byte)encName.Length);

            outStr.Write(encName);

            long modDate = modificationTime / 1000L;

            outStr.Write(
                (byte)(modDate >> 24),
                (byte)(modDate >> 16),
                (byte)(modDate >> 8),
                (byte)modDate);
        }
--------------------------
LONGRUNNING False 2 Org.BouncyCastle.Utilities.IO.BaseOutputStream.Write(params byte[]) D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\openpgp\PgpLiteralDataGenerator.cs
APMTAPReplacable Open(
            Stream outStr,
            char format,
            StorageFile file)
private void WriteHeader(
            BcpgOutputStream outStr,
            char format,
            string name,
            long modificationTime)
        {
            byte[] encName = Strings.ToUtf8ByteArray(name);

            outStr.Write(
                (byte)format,
                (byte)encName.Length);

            outStr.Write(encName);

            long modDate = modificationTime / 1000L;

            outStr.Write(
                (byte)(modDate >> 24),
                (byte)(modDate >> 16),
                (byte)(modDate >> 8),
                (byte)modDate);
        }
--------------------------
LONGRUNNING False 3 Org.BouncyCastle.Utilities.IO.BaseOutputStream.Write(byte[], int, int) D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\openpgp\PgpLiteralDataGenerator.cs
APMTAPReplacable Open(
            Stream outStr,
            char format,
            StorageFile file)
public virtual void Write(params byte[] buffer)
        {
            Write(buffer, 0, buffer.Length);
        }
--------------------------
LONGRUNNING True 1 System.IO.Stream.Read(byte[], int, int) D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\openpgp\PgpUtilities.cs
APMTAPReplacable WriteFileToLiteralData(
            Stream		output,
            char		fileType,
            StorageFile	file)
private async static Task PipeFileContents(StorageFile file, Stream pOut, int bufSize)
        {
            var inputStream = (await file.OpenReadAsync()).AsStreamForRead(bufSize);
            byte[] buf = new byte[bufSize];

            int len;
            while ((len = inputStream.Read(buf, 0, buf.Length)) > 0)
            {
                pOut.Write(buf, 0, len);
            }

            pOut.Dispose();
            inputStream.Dispose();
        }
--------------------------
LONGRUNNING True 1 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\openpgp\PgpUtilities.cs
APMTAPReplacable WriteFileToLiteralData(
            Stream		output,
            char		fileType,
            StorageFile	file)
private async static Task PipeFileContents(StorageFile file, Stream pOut, int bufSize)
        {
            var inputStream = (await file.OpenReadAsync()).AsStreamForRead(bufSize);
            byte[] buf = new byte[bufSize];

            int len;
            while ((len = inputStream.Read(buf, 0, buf.Length)) > 0)
            {
                pOut.Write(buf, 0, len);
            }

            pOut.Dispose();
            inputStream.Dispose();
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\WindowsPhone8.Core.Xaml\Helpers\HtmlHelper.cs
private static async Task VisitPreLoadHtmlImages(HtmlNode htmlNode)
        {
            switch (htmlNode.NodeType)
            {
                case HtmlNodeType.Document:
                case HtmlNodeType.Element:
                    var tag = htmlNode.Name.ToLower();
                    if (tag.Equals("img") && htmlNode.Attributes.Contains("src"))
                    {
                        var imageSrc = htmlNode.Attributes["src"].Value;
                        try
                        {
                            await CacheManager.GetOrRetrieveUriAsync(imageSrc);
                        }
                        catch { }
                    }
                    else
                    {
                        foreach (var item in htmlNode.ChildNodes)
                        {
                            await VisitPreLoadHtmlImages(item);
                        }
                    }
                    break;
            }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\WindowsPhone8.Core.Xaml\Helpers\StorageHelper.cs
public static async Task<StorageFolder> GetStorageFolderAsync(string name, StorageLocation location)
        {
            StorageFolder folder = null;
            switch (location)
            {
                case StorageLocation.Local:
                    folder = ApplicationData.Current.LocalFolder;
                    break;
                case StorageLocation.Roaming:
                    folder = ApplicationData.Current.RoamingFolder;
                    break;
                case StorageLocation.Temp:
                    folder = ApplicationData.Current.TemporaryFolder;
                    break;
                case StorageLocation.InstalledLocation:
                    folder = Windows.ApplicationModel.Package.Current.InstalledLocation;
                    break;
                case StorageLocation.Path:
                    folder = await StorageFolder.GetFolderFromPathAsync(Path.GetDirectoryName(name));
                    break;
            }
            if (name != null && location != StorageLocation.Path)
            {
                var folderNames = Path.GetDirectoryName(name).Split(new char[] { '\\', '/' }, StringSplitOptions.RemoveEmptyEntries);
                foreach (var folderName in folderNames)
                {
                    folder = await folder.CreateFolderAsync(folderName, CreationCollisionOption.OpenIfExists);
                }
            }
            return folder;
        }
-----------------------
LONGRUNNING True 0 System.IO.TextWriter.Write(object) D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\WindowsPhone8.Core.Xaml\Helpers\WebHelper.cs
TAPReplacable InternalPostStringAsync(Uri uri, object postData, string accept, string user, string password)
protected async override Task<string> InternalPostStringAsync(Uri uri, object postData, string accept, string user, string password)
        {
            var httpWebRequest = HttpWebRequest.CreateHttp(uri);
            httpWebRequest.Method = "POST";

            if (postData is IEnumerable<KeyValuePair<string, string>>)
            {
                throw new NotImplementedException();
                //httpContent = new FormUrlEncodedContent(postData as IEnumerable<KeyValuePair<string, string>>);
            }
            else
            {
                httpWebRequest.ContentType = "application/json";
                //httpWebRequest.Headers["datatype"] = "jsondata";
                //httpWebRequest.Headers["async"] = "false";
                var requestStream = await Task<Stream>.Factory.FromAsync(httpWebRequest.BeginGetRequestStream, httpWebRequest.EndGetRequestStream, null);
                using (var streamWriter = new StreamWriter(requestStream))
                {
                    streamWriter.Write(postData);
                }
            }


            if (accept != null)
                httpWebRequest.Accept = accept;
            if (user != null)
            {
                httpWebRequest.Credentials = new NetworkCredential(user, password);
            }

            var response = await Task<WebResponse>.Factory.FromAsync(httpWebRequest.BeginGetResponse, httpWebRequest.EndGetResponse, null) as HttpWebResponse;
            using (response)
            {
                EnsureSuccessStatusCode(response);
                using (var reader = new StreamReader(response.GetResponseStream()))
                {
                    return await reader.ReadToEndAsync();
                }
            }
        }
--------------------------
LONGRUNNING False 2 System.IO.Stream.Flush() D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\AppHelperBase.cs
TAPReplacable SaveStateAsync()
public static void Serialize(Stream stream, object obj)
        {
            var types = new List<Type>();
            var objects = new List<object>();

            var headerPosition = stream.Position;
            Write(stream, headerPosition);

            WriteObject(stream, obj, types, objects);

            headerPosition = stream.Position;
            
            WriteTypes(stream, types);
            
            stream.Position = 0;
            Write(stream, headerPosition);

            stream.Flush();
        }
--------------------------
LONGRUNNING False 3 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\AppHelperBase.cs
APMTAPReplacable SaveStateAsync()
private static void Write(Stream stream, long value)
        {
            var bytes = BitConverter.GetBytes(value);
            stream.Write(bytes, 0, bytes.Length);
        }
--------------------------
LONGRUNNING False 4 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\AppHelperBase.cs
APMTAPReplacable SaveStateAsync()
private static void Write(Stream stream, int value)
        {
            var bytes = BitConverter.GetBytes(value);
            stream.Write(bytes, 0, bytes.Length);
        }
--------------------------
LONGRUNNING False 5 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\AppHelperBase.cs
APMTAPReplacable SaveStateAsync()
private static void Write(Stream stream, bool value)
        {
            var bytes = BitConverter.GetBytes(value);
            stream.Write(bytes, 0, bytes.Length);
        }
--------------------------
LONGRUNNING False 5 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\AppHelperBase.cs
APMTAPReplacable SaveStateAsync()
private static void Write(Stream stream, char value)
        {
            var bytes = BitConverter.GetBytes(value);
            stream.Write(bytes, 0, bytes.Length);
        }
--------------------------
LONGRUNNING False 5 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\AppHelperBase.cs
APMTAPReplacable SaveStateAsync()
private static void Write(Stream stream, double value)
        {
            var bytes = BitConverter.GetBytes(value);
            stream.Write(bytes, 0, bytes.Length);
        }
--------------------------
LONGRUNNING False 5 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\AppHelperBase.cs
APMTAPReplacable SaveStateAsync()
private static void Write(Stream stream, float value)
        {
            var bytes = BitConverter.GetBytes(value);
            stream.Write(bytes, 0, bytes.Length);
        }
--------------------------
LONGRUNNING False 5 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\AppHelperBase.cs
APMTAPReplacable SaveStateAsync()
private static void Write(Stream stream, short value)
        {
            var bytes = BitConverter.GetBytes(value);
            stream.Write(bytes, 0, bytes.Length);
        }
--------------------------
LONGRUNNING False 5 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\AppHelperBase.cs
APMTAPReplacable SaveStateAsync()
private static void Write(Stream stream, string s)
        {
            var bytes = UnicodeEncoding.UTF8.GetBytes(s);
            Write(stream, bytes.Length);
            stream.Write(bytes, 0, bytes.Length);
        }
--------------------------
LONGRUNNING False 5 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\AppHelperBase.cs
APMTAPReplacable SaveStateAsync()
private static void Write(Stream stream, Guid guid)
        {
            var bytes = guid.ToByteArray();
            stream.Write(bytes, 0, bytes.Length);
        }
--------------------------
LONGRUNNING False 5 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\AppHelperBase.cs
APMTAPReplacable SaveStateAsync()
private static void Write(Stream stream, ushort value)
        {
            var bytes = BitConverter.GetBytes(value);
            stream.Write(bytes, 0, bytes.Length);
        }
--------------------------
LONGRUNNING False 5 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\AppHelperBase.cs
APMTAPReplacable SaveStateAsync()
private static void Write(Stream stream, uint value)
        {
            var bytes = BitConverter.GetBytes(value);
            stream.Write(bytes, 0, bytes.Length);
        }
--------------------------
LONGRUNNING False 5 System.IO.Stream.Write(byte[], int, int) D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\AppHelperBase.cs
APMTAPReplacable SaveStateAsync()
private static void Write(Stream stream, ulong value)
        {
            var bytes = BitConverter.GetBytes(value);
            stream.Write(bytes, 0, bytes.Length);
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\AppHelperBase.cs
public async Task LoadStateAsync()
        {
            try
            {
                var state = await ObjectPersister.LoadAsync<ApplicationState>("AppState.bin", StorageLocation.Local, ObjectPersisterFormat.Binary);
                _State = state;
                _State.Pages = new List<object>();
                for (int i = 0; i < _State.PageTypeNames.Count; i++)
                {
                    _State.Pages.Add(null);
                }

                var previousNavigationStackPosition = _State.NavigationStackPosition;
                _State.NavigationStackPosition = -1;
                for (int i = 0; i < _State.PageTypeNames.Count; i++)
                {
                    _State.NavigationStackPosition++;
                    var pageType = Type.GetType(_State.PageTypeNames[i], true);
                    var parameter = _State.Parameters[i];
                    await NavigateAsync(pageType, parameter);
                }
                var navigationStackPosition = _State.NavigationStackPosition;
                while (navigationStackPosition > previousNavigationStackPosition)
                {
                    await NavigateBack();
                    navigationStackPosition--;
                }
            }
            catch { }
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Caching\CacheManager.cs
private static async Task DeleteOldFiles(string directory, StorageLocation location)
        {
            var minDate = DateTime.Now - CacheExpiration;
            foreach (var file in await StorageHelperBase.Instance.GetFilesAsync(directory + "\\", location))
            {

                if (file.DateCreated < minDate)
                {
                    MemoryUriCache.Remove(file.Name);
                    await StorageHelperBase.Instance.DeleteFilesAsync(file.Path, StorageLocation.Path);
                }
            }
        }
-----------------------
LONGRUNNING True 2 System.IO.Stream.Flush() D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Caching\CacheManager.cs
TAPReplacable GetOrRetrieveUriAsync(string url)
private static async Task RetrieveUriAsync(Uri uri, string cacheKey)
        {
            cacheKey = FixCacheKey(cacheKey);

            using (var response = await WebHelperBase.Instance.GetStreamAsync(uri))
            {
                try
                {
                    await StorageHelperBase.Instance.CreateFileAsync(Path.Combine(URI_CACHE_FOLDER, cacheKey), StorageLocation.Local);
                    using (var stream = await StorageHelperBase.Instance.OpenFileWriteAsync(Path.Combine(URI_CACHE_FOLDER, cacheKey), StorageLocation.Local, true))
                    {
                        await response.CopyToAsync(stream);
                        stream.Flush();
                        MemoryUriCache[cacheKey] = null;
                    }
                }
                catch { }
            }
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\HtmlHelper.cs
private static async Task VisitPreLoadHtmlImages(HtmlNode htmlNode)
        {
            switch (htmlNode.NodeType)
            {
                case HtmlNodeType.Document:
                case HtmlNodeType.Element:
                    var tag = htmlNode.Name.ToLower();
                    if (tag.Equals("img") && htmlNode.Attributes.Contains("src"))
                    {
                        var imageSrc = htmlNode.Attributes["src"].Value;
                        try
                        {
                            await CacheManager.GetOrRetrieveUriAsync(imageSrc);
                        }
                        catch { }
                    }
                    else
                    {
                        foreach (var item in htmlNode.ChildNodes)
                        {
                            await VisitPreLoadHtmlImages(item);
                        }
                    }
                    break;
            }
        }
-----------------------
LONGRUNNING True 0 System.IO.StreamReader.ReadToEnd() D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Storage\StringLoader.cs
TAPReplacable GetContentAsync(string sourceFilePath, StorageLocation storageLocation)
public static async Task<string> GetContentAsync(string sourceFilePath, StorageLocation storageLocation)
        {
            if (!string.IsNullOrEmpty(sourceFilePath))
            {
                try
                {
                    using (var stream = await StorageHelperBase.Instance.OpenFileReadAsync(sourceFilePath, storageLocation))
                    {
                        using (var reader = new StreamReader(stream))
                        {
                            return reader.ReadToEnd();
                        }
                    }
                }
                catch { }
            }
            return null;
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\wp7nl\Wp7nl\wp8\Wp7nl.MvvmLight\Devices\TtcSocketHelper.cs
private async void StartListeningForMessages()
    {
      if( socket != null )
      {
        if (!listening)
        {
          listening = true;
          while (listening)
          {
            var message = await GetMessage();
            if (listening)
            {
              if (message != null && MessageReceived != null)
              {
                MessageReceived(this, new ReceivedMessageEventArgs {Message = message});
              }
            }
          }
        }
      }
    }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\yamac+windows-demos\yamac-windows-demos-cbb221f\YamacDemos.WP8\..\YamacDemos.Common\Yamac\Controls\LongListSelector.cs
private async Task<bool> LoadMoreItems()
        {
            int pageSize = (int)(PageSize * DataFetchSize);
            if (pageSize < 1)
            {
                pageSize = 1;
            }
            var source = ItemsSource as ISupportIncrementalLoading;
            if (!source.HasMoreItems)
            {
                return false;
            }
            while (IsRunning)
            {
                try
                {
                    await source.LoadMoreItemsAsync((uint)(pageSize));
                    break;
                }
                catch
                {
                }
                await Task.Delay(RetryWait);
            }
            return true;
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\yinsee+barcamppg2013-wp\yinsee-barcamppg2013-wp-5af05c5\BarCamp\BarCamp\BarcodeCaptureDevice.cs
private async Task AwaitWhenNotFocusing()
        {
            while (_focusing)
            {
                await Task.Delay(50).ConfigureAwait(false);
                ThrowIfDisposed();
            }
        }
-----------------------
LONGRUNNING True 2 System.IO.MemoryStream.Write(byte[], int, int) D:\CodeCorpus\WPApps\zwaap+HttpClient\zwaap-HttpClient-dc4be71\src\SharpGIS.HttpClient.WP\Http\HttpClient.cs
APMTAPReplacable GetStringAsync(Uri requestUri)
public async Task<byte[]> ReadAsByteArrayAsync()
        {
            Stream stream = await ReadAsStreamAsync();
            if (!stream.CanSeek)
            {
                MemoryStream ms = new MemoryStream();
                int count = 0;
                byte[] buffer = new byte[1024];
                while ((count = await stream.ReadAsync(buffer, 0, 1024)) > 0)
                {
                    ms.Write(buffer, 0, count);
                }
                return ms.ToArray();
            }
            else
            {
                byte[] buffer = new byte[stream.Length];
                await stream.ReadAsync(buffer, 0, buffer.Length);
                return buffer;
            }
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\zwaap+HttpClient\zwaap-HttpClient-dc4be71\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
-----------------------
LONGRUNNING True 0 System.IO.StreamWriter.Write(string) D:\CodeCorpus\WPApps\zwaap+HttpClient\zwaap-HttpClient-dc4be71\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
TAPReplacable SerializeToStreamAsync(Stream stream, TransportContext context)
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamWriter.Write(string) D:\CodeCorpus\WPApps\zwaap+HttpClient\zwaap-HttpClient-dc4be71\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
TAPReplacable SerializeToStreamAsync(Stream stream, TransportContext context)
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
--------------------------
LONGRUNNING True 0 System.IO.TextWriter.WriteLine() D:\CodeCorpus\WPApps\zwaap+HttpClient\zwaap-HttpClient-dc4be71\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
TAPReplacable SerializeToStreamAsync(Stream stream, TransportContext context)
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
--------------------------
LONGRUNNING True 0 System.IO.TextWriter.WriteLine() D:\CodeCorpus\WPApps\zwaap+HttpClient\zwaap-HttpClient-dc4be71\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
TAPReplacable SerializeToStreamAsync(Stream stream, TransportContext context)
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamWriter.Write(string) D:\CodeCorpus\WPApps\zwaap+HttpClient\zwaap-HttpClient-dc4be71\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
TAPReplacable SerializeToStreamAsync(Stream stream, TransportContext context)
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamWriter.Write(string) D:\CodeCorpus\WPApps\zwaap+HttpClient\zwaap-HttpClient-dc4be71\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
TAPReplacable SerializeToStreamAsync(Stream stream, TransportContext context)
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamWriter.Flush() D:\CodeCorpus\WPApps\zwaap+HttpClient\zwaap-HttpClient-dc4be71\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
TAPReplacable SerializeToStreamAsync(Stream stream, TransportContext context)
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamWriter.Write(string) D:\CodeCorpus\WPApps\zwaap+HttpClient\zwaap-HttpClient-dc4be71\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
TAPReplacable SerializeToStreamAsync(Stream stream, TransportContext context)
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
--------------------------
LONGRUNNING True 0 System.IO.StreamWriter.Flush() D:\CodeCorpus\WPApps\zwaap+HttpClient\zwaap-HttpClient-dc4be71\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
TAPReplacable SerializeToStreamAsync(Stream stream, TransportContext context)
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
--------------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\zwaap+HttpClient\zwaap-HttpClient-dc4be71\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
-----------------------
ExpensiveAwaits D:\CodeCorpus\WPApps\zxingnet\trunk\Clients\WindowsPhone8Demo\ViewModels\CaptureViewModel.cs
private async void InitializeAndGo()
        {
            Results = new ObservableCollection<Result>();

            CaptureResolution = await GetBestCaptureResolution();
            await InitializePhotoCaptureDevice(CaptureResolution);

            await StartCapturingAsync();

            while (true)
            {
                Results.Add(await GetBarcodeAsync());
            }
        }
-----------------------
