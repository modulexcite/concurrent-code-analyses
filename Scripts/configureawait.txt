ConfigureAwaitUse D:\CodeCorpus\WPApps\32feet\InTheHand.Phone.Bluetooth\InTheHand.Phone.Bluetooth\Networking\Sockets\RfcommStreamSocketListener.cs
private async void PeerFinder_ConnectionRequested(object sender, ConnectionRequestedEventArgs args)
        {
            PeerInformation info = args.PeerInformation;
            socket = await PeerFinder.ConnectAsync(info);

            if (ConnectionReceived != null)
            {
                ConnectionReceived(this, new RfcommStreamSocketListenerConnectionReceivedEventArgs(socket));
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\32feet\InTheHand.Phone.Bluetooth\InTheHand.Phone.Bluetooth\StreamSocketExtensions.cs
public static async Task ConnectAsync(this StreamSocket s, HostName remoteHostName, InTheHand.Devices.Bluetooth.Rfcomm.RfcommServiceId serviceId)
        {
            await s.ConnectAsync(remoteHostName, serviceId.AsString()).AsTask();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\32feet\InTheHand.Phone.Bluetooth\InTheHand.Phone.Bluetooth\StreamSocketExtensions.cs
public static async Task ConnectAsync(this StreamSocket s, HostName remoteHostName, Guid serviceGuid)
        {
            await s.ConnectAsync(remoteHostName, serviceGuid.ToString("B"));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\32feet\InTheHand.Phone.Bluetooth\InTheHand.Phone.Bluetooth\StreamSocketExtensions.cs
public static async Task ConnectAsync(this StreamSocket s, HostName remoteHostName, int port)
        {
            await s.ConnectAsync(remoteHostName, port.ToString(System.Globalization.CultureInfo.InvariantCulture));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\32feet\InTheHand.Phone.Bluetooth\BluetoothSerialSample\MainPage.xaml.cs
private async void Button_Click_1(object sender, RoutedEventArgs e)
        {
            InTheHand.Devices.Bluetooth.BluetoothDevicePicker bdp = new InTheHand.Devices.Bluetooth.BluetoothDevicePicker();
            //bdp.ServiceFilter = InTheHand.Devices.Bluetooth.Rfcomm.RfcommServiceId.ObexObjectPush.Uuid;
            PeerInformation pi = await bdp.PickDeviceAsync();
            if (pi != null)
            {
                Windows.Networking.HostName hn = new Windows.Networking.HostName(pi.HostName.RawName.ToString());
                
                // do something with the device
                System.Threading.ThreadPool.QueueUserWorkItem(ReadThread, hn);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task<uint> GetSymhandleByNameAsync(string varName) 
        {
            AdsWriteReadCommand adsCommand = new AdsWriteReadCommand(0x0000F003, 0x00000000, varName.ToAdsBytes(), 4);
            var result = await adsCommand.RunAsync(this.ams);
            var handle = BitConverter.ToUInt32(result.Data, 0);
            activeSymhandles.Add(handle);
            return handle;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task<uint> GetSymhandlByNameAsync(IAdsSymhandle symhandle)
        {
            //var symhandle = new AdsSymhandle();
            symhandle.Symhandle = await GetSymhandleByNameAsync(symhandle.VarName);
            symhandle.ConnectionName = Name;
            return symhandle.Symhandle;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task ReleaseSymhandleAsync(uint symhandle)
        {
            activeSymhandles.Remove(symhandle);
            AdsWriteCommand adsCommand = new AdsWriteCommand(0x0000F006, 0x00000000, BitConverter.GetBytes(symhandle));
            var result = await adsCommand.RunAsync(this.ams);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task ReleaseSymhandleAsync(IAdsSymhandle adsSymhandle)
        {
            await ReleaseSymhandleAsync(adsSymhandle.Symhandle);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task<byte[]> ReadBytesAsync(uint varHandle, uint readLength)
        {
            AdsReadCommand adsCommand = new AdsReadCommand(0x0000F005, varHandle, readLength);
            var result = await adsCommand.RunAsync(this.ams);
            return result.Data;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task<byte[]> ReadBytesAsync(IAdsSymhandle adsSymhandle)
        {
            return await ReadBytesAsync(adsSymhandle.Symhandle, adsSymhandle.ByteLength);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task<byte[]> ReadBytesI_Async(uint offset, uint readLength)
        {
            AdsReadCommand adsCommand = new AdsReadCommand(0x0000F020, offset, readLength);
            var result = await adsCommand.RunAsync(this.ams);
            return result.Data;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task<byte[]> ReadBytesQ_Async(uint offset, uint readLength)
        {
            AdsReadCommand adsCommand = new AdsReadCommand(0x0000F030, offset, readLength);
            var result = await adsCommand.RunAsync(this.ams);
            return result.Data;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task<T> ReadAsync<T>(uint varHandle) 
        {
            byte[] value = await ReadBytesAsync(varHandle, GenericHelper.GetByteLengthFromType<T>(DefaultStringLength));
            return GenericHelper.GetResultFromBytes<T>(value, DefaultStringLength);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task<T> ReadAsync<T>(IAdsSymhandle adsSymhandle) 
        {
            return await ReadAsync<T>(adsSymhandle.Symhandle);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task<uint> AddNotificationAsync(uint varHandle, uint length, AdsTransmissionMode transmissionMode, uint cycleTime, object userData)
        {
            return await AddNotificationAsync(varHandle, length, transmissionMode, cycleTime, userData, typeof(byte[]));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task<uint> AddNotificationAsync(IAdsSymhandle adsSymhandle, AdsTransmissionMode transmissionMode, uint cycleTime, object userData)
        {
            return await AddNotificationAsync(adsSymhandle.Symhandle, adsSymhandle.ByteLength, transmissionMode, cycleTime, userData);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task<uint> AddNotificationAsync(uint varHandle, uint length, AdsTransmissionMode transmissionMode, uint cycleTime, object userData, Type typeOfValue)
        {
            var adsCommand = new AdsAddDeviceNotificationCommand(0x0000F005, varHandle, length, transmissionMode);
            adsCommand.CycleTime = cycleTime;
            adsCommand.UserData = userData;
            adsCommand.TypeOfValue = typeOfValue;
            var result = await adsCommand.RunAsync(this.ams);
            adsCommand.Notification.NotificationHandle = result.NotificationHandle;
            return result.NotificationHandle; ;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task<uint> AddNotificationAsync(IAdsSymhandle adsSymhandle, AdsTransmissionMode transmissionMode, uint cycleTime, object userData, Type typeOfValue)
        {
            return await AddNotificationAsync(adsSymhandle.Symhandle, adsSymhandle.ByteLength, transmissionMode, cycleTime, userData, typeOfValue);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task<uint> AddNotificationAsync<T>(uint varHandle, AdsTransmissionMode transmissionMode, uint cycleTime, object userData) 
        {
            uint length = GenericHelper.GetByteLengthFromType<T>(DefaultStringLength);
            return await AddNotificationAsync(varHandle, length, transmissionMode, cycleTime, userData, typeof(T));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task<uint> AddNotificationAsync<T>(IAdsSymhandle adsSymhandle, AdsTransmissionMode transmissionMode, uint cycleTime, object userData)
        {
            return await AddNotificationAsync<T>(adsSymhandle.Symhandle, transmissionMode, cycleTime, userData);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task DeleteNotificationAsync(uint notificationHandle)
        {
            var adsCommand = new AdsDeleteDeviceNotificationCommand(notificationHandle);
            var result = await adsCommand.RunAsync(this.ams);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task WriteBytesAsync(uint varHandle, IEnumerable<byte> varValue)
        {
            AdsWriteCommand adsCommand = new AdsWriteCommand(0x0000F005, varHandle, varValue);
            var result = await adsCommand.RunAsync(this.ams);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task WriteBytesAsync(IAdsSymhandle adsSymhandle, IEnumerable<byte> varValue)
        {
            await WriteBytesAsync(adsSymhandle.Symhandle, varValue);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task WriteAsync<T>(uint varHandle, T varValue) 
        {
            IEnumerable<byte> varValueBytes = GenericHelper.GetBytesFromType<T>(varValue, defaultStringLenght);
            await this.WriteBytesAsync(varHandle, varValueBytes);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task WriteAsync<T>(IAdsSymhandle adsSymhandle, T varValue) 
        {
            await WriteAsync<T>(adsSymhandle.Symhandle, varValue);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task<AdsDeviceInfo> ReadDeviceInfoAsync()
        {
            AdsReadDeviceInfoCommand adsCommand = new AdsReadDeviceInfoCommand();
            var result = await adsCommand.RunAsync(this.ams);
            return result.AdsDeviceInfo;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task<AdsState> ReadStateAsync()
        {
            var adsCommand = new AdsReadStateCommand();
            var result = await adsCommand.RunAsync(this.ams);
            return result.AdsState;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task DeleteActiveNotificationsAsync()
        {

            while (ams.NotificationRequests.Count > 0)
            {
                await DeleteNotificationAsync(ams.NotificationRequests[0].NotificationHandle);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AdsClient.cs
public async Task ReleaseActiveSymhandlesAsync()
        {
            while (activeSymhandles.Count > 0)
            {
                await ReleaseSymhandleAsync(activeSymhandles[0]);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\Ams.cs
internal async Task<T> RunCommandAsync<T>(AdsCommand adsCommand) where T : AdsCommandResponse
        {
            await this.amsSocket.ConnectAndListenAsync();
            if (ConnectedAsync == false) throw new AdsException("You are combining async and non-async methods!");
            invokeId++;
            byte[] message = GetAmsMessage(adsCommand);
            var responseTask = Task.Factory.FromAsync<T>(BeginGetResponse<T>, EndGetResponse<T>, invokeId);
            await amsSocket.SendAsync(message);
            return await responseTask;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AmsSocket.cs
public async Task ConnectAndListenAsync()
        {
            if (!socket.Connected)
            {
                connectedAsync = true;
                await ConnectAsync();
                Listen();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AmsSocket.cs
private async Task<bool> ConnectAsync()
        {
            var tcs = new TaskCompletionSource<bool>(socket);
            #if !SILVERLIGHT
            socket.Bind(LocalEndPoint);
            #endif
            SocketAsyncEventArgs args = new SocketAsyncEventArgs();
            args.RemoteEndPoint = new DnsEndPoint(ipTarget, ipPortTarget);
            args.Completed += (sender, e) => { tcs.TrySetResult(e.SocketError == SocketError.Success); };
            socket.ConnectAsync(args);
            return await tcs.Task;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AmsSocket.cs
public async Task<bool> SendAsync(byte[] message)
        {
            var tcs = new TaskCompletionSource<bool>(socket);
            SocketAsyncEventArgs args = new SocketAsyncEventArgs();
            args.Completed += (sender, e) => { tcs.TrySetResult(e.SocketError == SocketError.Success); };
            args.SetBuffer(message, 0, message.Length);
            socket.SendAsync(args);
            return await tcs.Task;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\AmsSocket.cs
private async Task<bool> ReceiveAsync(byte[] message)
        {
            var tcs = new TaskCompletionSource<bool>(socket);
            SocketAsyncEventArgs args = new SocketAsyncEventArgs();
            args.Completed += (sender, e) =>
            {
                try { tcs.TrySetResult(e.SocketError == SocketError.Success); }
                catch (Exception ex) { tcs.TrySetException(ex); }
            };
            args.SetBuffer(message, 0, message.Length);
            try
            {
                socket.ReceiveAsync(args);
            }
            catch (Exception ex)
            {
                if (!Object.ReferenceEquals(ex.GetType(), typeof(ObjectDisposedException))) throw ex;
            }
            return await tcs.Task;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\Commands\AdsAddDeviceNotificationCommand.cs
public async Task<AdsAddDeviceNotificationCommandResponse> RunAsync(Ams ams)
        {
            return await RunAsync<AdsAddDeviceNotificationCommandResponse>(ams);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\Commands\AdsCommand.cs
protected async Task<T> RunAsync<T>(Ams ams) where T : AdsCommandResponse
        {
            RunBefore(ams);
            var result = await ams.RunCommandAsync<T>(this);
            if (result.AdsErrorCode > 0)
                throw new AdsException(result.AdsErrorCode);
            RunAfter(ams);
            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\Commands\AdsDeleteDeviceNotificationCommand.cs
public async Task<AdsDeleteDeviceNotificationCommandResponse> RunAsync(Ams ams)
        {
            return await RunAsync<AdsDeleteDeviceNotificationCommandResponse>(ams);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\Commands\AdsReadCommand.cs
public async Task<AdsReadCommandResponse> RunAsync(Ams ams) 
        {
            return await RunAsync<AdsReadCommandResponse>(ams);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\Commands\AdsReadDeviceInfoCommand.cs
public async Task<AdsReadDeviceInfoCommandResponse> RunAsync(Ams ams)
        {
            return await RunAsync<AdsReadDeviceInfoCommandResponse>(ams);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\Commands\AdsReadStateCommand.cs
public async Task<AdsReadStateCommandResponse> RunAsync(Ams ams)
        {
            return await RunAsync<AdsReadStateCommandResponse>(ams);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\Commands\AdsWriteCommand.cs
public async Task<AdsWriteCommandResponse> RunAsync(Ams ams)
        {
            return await RunAsync<AdsWriteCommandResponse>(ams);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\Commands\AdsWriteReadCommand.cs
public async Task<AdsWriteReadCommandResponse> RunAsync(Ams ams)
        {
            return await RunAsync<AdsWriteReadCommandResponse>(ams);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\adsclient\src\AdsClient.Phone\..\AdsClient\Special\AdsSpecial.cs
public async Task<IList<IAdsSymhandle>> GetSymbolsAsync()
        {
            AdsReadCommand adsCommand = new AdsReadCommand(0x0000f00f, 0x000000, 0x30);
            var result = await adsCommand.RunAsync(ams);

            uint readLength = (uint)BitConverter.ToInt32(result.Data, 4);
            adsCommand = new AdsReadCommand(0x0000f00b, 0x000000, readLength);
            result = await adsCommand.RunAsync(ams);

            var symbols = GetSymbolsFromBytes(result.Data);

            return symbols;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\AlbertoMonteiro+QCon12WindowsPhone\AlbertoMonteiro-QCon12WindowsPhone-f67aa2a\QCon12.Mobile\Requests\ServiceRequest.cs
public async Task<List<T>> BaseList(int skip = 0)
        {
            if (skip != 0)
                additional = "/?$skip=" + skip;
            return await DownloadAndDeserialize<List<T>>();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\AlbertoMonteiro+QCon12WindowsPhone\AlbertoMonteiro-QCon12WindowsPhone-f67aa2a\QCon12.Mobile\Requests\ServiceRequest.cs
public async Task<T> BaseGet(int id)
        {
            additional = "/" + id;
            return await DownloadAndDeserialize<T>();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\AlbertoMonteiro+QCon12WindowsPhone\AlbertoMonteiro-QCon12WindowsPhone-f67aa2a\QCon12.Mobile\Requests\ServiceRequest.cs
protected async Task<TR> DownloadAndDeserialize<TR>()
        {
            var instance = default(TR);
            GlobalLoading.Instance.PushLoading();
            var keepTrying = true;
            while (keepTrying)
            {
                var request = new WebClient();
                var uri = new Uri(URL + controller + additional);
                try
                {
                    var str = await request.DownloadStringTaskAsync(uri);
                    var serializer = JsonSerializer.Create(settings);
                    using (var stringReader = new StringReader(str))
                    {
                        instance = serializer.Deserialize<TR>(new JsonTextReader(stringReader));
                        stringReader.Close();
                        keepTrying = false;
                    }
                }
                catch (Exception e)
                {
                    if (count++ < 3)
                        keepTrying = false;
                }
            }
            GlobalLoading.Instance.PopLoading();
            return instance;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\AlbertoMonteiro+QCon12WindowsPhone\AlbertoMonteiro-QCon12WindowsPhone-f67aa2a\QCon12.Mobile\Requests\PalestrantesRequest.cs
public async Task<IEnumerable<Palestrante>> List(int skip = 0)
        {
            var palestrantes = cacheContext.Palestrantes;
            if (!palestrantes.Any())
                await SaveCache(skip);
            else if (palestrantes.Count() <= skip)
                await SaveCache(skip);

            if (palestrantes != null && palestrantes.Count() > 10)
                return palestrantes.Skip(skip).Take(10).Select(cache => (Palestrante) cache);

            return palestrantes.Select(cache => (Palestrante) cache);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\AlbertoMonteiro+QCon12WindowsPhone\AlbertoMonteiro-QCon12WindowsPhone-f67aa2a\QCon12.Mobile\Requests\PalestrantesRequest.cs
public async Task<Palestrante> Get(int id)
        {
            Palestrante palestrante = cacheContext.Palestrantes.FirstOrDefault(cache => cache.Id == id);

            if (palestrante == null)
            {
                var tempPalestrante = await BaseGet(id);
                var trackCache = AsPalestranteCache(tempPalestrante);
                cacheContext.Palestrantes.InsertOnSubmit(trackCache);
                cacheContext.SubmitChanges();
            }

            return palestrante;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\AlbertoMonteiro+QCon12WindowsPhone\AlbertoMonteiro-QCon12WindowsPhone-f67aa2a\QCon12.Mobile\Requests\PalestrantesRequest.cs
private async Task SaveCache(int skip)
        {
            var tempPalestrantes = await BaseList(skip);
            if (tempPalestrantes != null)
            {
                var palestranteCaches = tempPalestrantes.Select(AsPalestranteCache);
                cacheContext.Palestrantes.InsertAllOnSubmit(palestranteCaches);
                cacheContext.SubmitChanges();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\AlbertoMonteiro+QCon12WindowsPhone\AlbertoMonteiro-QCon12WindowsPhone-f67aa2a\QCon12.Mobile\Requests\PalestrasRequest.cs
public async Task<IEnumerable<Palestra>> List(int skip = 0)
        {
            var palestraCaches = cacheContext.Palestras;
            if (!palestraCaches.Any())
                await SaveCache(skip);
            else if (palestraCaches.Count() <= skip)
                await SaveCache(skip);

            if (palestraCaches != null && palestraCaches.Count() > 10)
                return palestraCaches.Skip(skip).Take(10).Select(cache => (Palestra)cache);

            return palestraCaches.Select(cache => (Palestra)cache);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\AlbertoMonteiro+QCon12WindowsPhone\AlbertoMonteiro-QCon12WindowsPhone-f67aa2a\QCon12.Mobile\Requests\PalestrasRequest.cs
public async Task<Palestra> Get(int id)
        {
            Palestra palestra = cacheContext.Palestras.FirstOrDefault(cache => cache.Id == id);

            if (palestra == null)
            {
                var tempPalestra = await BaseGet(id);
                var trackCache = AsPalestraCache(tempPalestra);
                cacheContext.Palestras.InsertOnSubmit(trackCache);
                cacheContext.SubmitChanges();
            }

            return palestra;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\AlbertoMonteiro+QCon12WindowsPhone\AlbertoMonteiro-QCon12WindowsPhone-f67aa2a\QCon12.Mobile\Requests\PalestrasRequest.cs
public async Task<IEnumerable<Palestra>> FromTrack(int id)
        {
            var palestraCaches = cacheContext.Palestras.Where(cache => cache.Track.Id == id);

            if (!palestraCaches.Any())
            {
                additional = "/FromTrack/" + id;
                var palestras = await BaseList();
                if (palestras != null)
                {
                    foreach (var palestra in palestras)
                    {
                        var p = cacheContext.Palestras.FirstOrDefault(cache => cache.Id == palestra.Id);
                        if (p == null)
                        {
                            var tPalestraCaches = palestras.Select(AsPalestraCache);
                            cacheContext.Palestras.InsertAllOnSubmit(tPalestraCaches);
                        } else
                        {
                            var trackCache = cacheContext.Tracks.FirstOrDefault(cache => cache.Id == palestra.Track.Id);
                            if (trackCache != null)
                                trackCache.Palestras.Add(p);
                        }

                        cacheContext.SubmitChanges();
                    }
                }
            }
            return palestraCaches.Select(cache => (Palestra)cache);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\AlbertoMonteiro+QCon12WindowsPhone\AlbertoMonteiro-QCon12WindowsPhone-f67aa2a\QCon12.Mobile\Requests\PalestrasRequest.cs
private async Task SaveCache(int skip = 0)
        {
            var palestrantes = await BaseList(skip);
            if (palestrantes != null)
            {
                var palestraCaches = palestrantes.Select(AsPalestraCache);
                cacheContext.Palestras.InsertAllOnSubmit(palestraCaches);
                cacheContext.SubmitChanges();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\AlbertoMonteiro+QCon12WindowsPhone\AlbertoMonteiro-QCon12WindowsPhone-f67aa2a\QCon12.Mobile\Requests\TracksRequest.cs
public async Task<IEnumerable<Track>> List(int skip = 0)
        {
            var tracks = cacheContext.Tracks;
            if (!tracks.Any())
            {
                var tempTracks = await BaseList(skip);
                if (tempTracks != null)
                {
                    var trackCaches = tempTracks.Select(track => new TrackCache(track.Id, track.Nome, track.Bio, track.Logo));
                    cacheContext.Tracks.InsertAllOnSubmit(trackCaches);
                    cacheContext.SubmitChanges();
                }
            }
            return tracks.Select(cache => (Track)cache);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\AlbertoMonteiro+QCon12WindowsPhone\AlbertoMonteiro-QCon12WindowsPhone-f67aa2a\QCon12.Mobile\Requests\TracksRequest.cs
public async Task<Track> Get(int id)
        {
            Track track = cacheContext.Tracks.FirstOrDefault(cache => cache.Id == id);

            if (track == null)
            {
                var tempTrack = await BaseGet(id);
                var trackCache = new TrackCache(tempTrack.Id, tempTrack.Nome, tempTrack.Nome, tempTrack.Logo);
                cacheContext.Tracks.InsertOnSubmit(trackCache);
                cacheContext.SubmitChanges();
            }

            return track;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\AlbertoMonteiro+QCon12WindowsPhone\AlbertoMonteiro-QCon12WindowsPhone-f67aa2a\QCon12.Mobile\ViewModel\MainViewModel.cs
private async void LoadTracks()
        {
            var tracksRequest = new TracksRequest();
            var tracks = await tracksRequest.List();
            if (tracks != null)
                foreach (var track in tracks)
                    Tracks.Add(track);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\AlbertoMonteiro+QCon12WindowsPhone\AlbertoMonteiro-QCon12WindowsPhone-f67aa2a\QCon12.Mobile\ViewModel\MainViewModel.cs
private async void LoadPalestrantes()
        {
            if (!canLoadPalestrantes) return;

            canLoadPalestrantes = false;
            var palestrantesRequest = new PalestrantesRequest();
            var palestrantes = await palestrantesRequest.List(Palestrantes.Count);
            if (palestrantes != null)
                foreach (var palestrante in palestrantes)
                    Palestrantes.Add(palestrante);
            canLoadPalestrantes = true;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\AlbertoMonteiro+QCon12WindowsPhone\AlbertoMonteiro-QCon12WindowsPhone-f67aa2a\QCon12.Mobile\ViewModel\MainViewModel.cs
private async void LoadPalestras()
        {
            var palestrasRequest = new PalestrasRequest();
            var palestras = await palestrasRequest.List();
            SynchronizationContext.Current.Post(state =>
            {
                if (palestras != null)
                    foreach (var palestra in palestras)
                        Palestras.Add(palestra);
            }, null);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\AlbertoMonteiro+QCon12WindowsPhone\AlbertoMonteiro-QCon12WindowsPhone-f67aa2a\QCon12.Mobile\ViewModel\PalestranteViewModel.cs
private async void LoadTweets()
        {
            var tweetRequest = new TweetRequest(Palestrante.Twitter);
            var tweets = await tweetRequest.BaseList();
            if (tweets != null)
                foreach (var tweet in tweets)
                    UltimosTweets.Add(tweet);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\AlbertoMonteiro+QCon12WindowsPhone\AlbertoMonteiro-QCon12WindowsPhone-f67aa2a\QCon12.Mobile\ViewModel\PalestranteViewModel.cs
private async void LoadPalestrante()
        {
            var palestrantesRequest = new PalestrantesRequest();
            var palestrante = await palestrantesRequest.Get(id);
            if (palestrante != null)
            {
                Palestrante = palestrante;
                LoadTweets();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\AlbertoMonteiro+QCon12WindowsPhone\AlbertoMonteiro-QCon12WindowsPhone-f67aa2a\QCon12.Mobile\ViewModel\PalestraViewModel.cs
public async void LoadPalestra(int tempId)
        {
            var request = new PalestrasRequest();
            Palestra = await request.Get(tempId);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\AlbertoMonteiro+QCon12WindowsPhone\AlbertoMonteiro-QCon12WindowsPhone-f67aa2a\QCon12.Mobile\ViewModel\TrackViewModel.cs
private async void LoadTrack()
        {
            var trackService = new TracksRequest();
            var track = await trackService.Get(id);
            if (track != null)
            {
                Track = track;
                LoadPalestras();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\AlbertoMonteiro+QCon12WindowsPhone\AlbertoMonteiro-QCon12WindowsPhone-f67aa2a\QCon12.Mobile\ViewModel\TrackViewModel.cs
private async void LoadPalestras()
        {
            var palestrasRequest = new PalestrasRequest();
            var palestras = await palestrasRequest.FromTrack(Track.Id);
            if (palestras != null)
                foreach (var palestra in palestras)
                    Palestras.Add(palestra);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\alexpeta+LocationBasedReminderWP8\alexpeta-LocationBasedReminderWP8-f7d0082\LocationBasedNotifications\ViewModels\LocationViewModel.cs
private async void OnGetGeolocationCommand(object obj)
        {
            IsBusy = true;
            Geocoordinate currentPosition = await HelperMethods.GetCurrentLocation();
            if (currentPosition != null)
            {
                MyLocation.Latitude = currentPosition.Latitude;
                MyLocation.Longitude = currentPosition.Longitude;
            }
            IsBusy = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\alexpeta+LocationBasedReminderWP8\alexpeta-LocationBasedReminderWP8-f7d0082\ScheduledTaskAgent\ScheduledAgent.cs
private async Task<Geoposition> TryGetGeoCoordinate()
        {
            Geolocator geolocator = new Geolocator();
            geolocator.DesiredAccuracyInMeters = 100;

            Geoposition geoposition = await geolocator.GetGeopositionAsync(maximumAge: TimeSpan.FromMinutes(1), timeout: TimeSpan.FromSeconds(30));
            return geoposition;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Anthuan+TheOldReaderWP\Anthuan-TheOldReaderWP-d63a295\PhoneApp1\AnthuanUtils.cs
public static async Task WriteFile(string fileName, string text)
        {
            IStorageFolder applicationFolder = ApplicationData.Current.LocalFolder;

            IStorageFile storageFile = await applicationFolder.CreateFileAsync(fileName, CreationCollisionOption.ReplaceExisting);

            using (Stream stream = await storageFile.OpenStreamForWriteAsync())
            {
                byte[] content = Encoding.UTF8.GetBytes(text);
                await stream.WriteAsync(content, 0, content.Length);
                stream.Close();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Anthuan+TheOldReaderWP\Anthuan-TheOldReaderWP-d63a295\PhoneApp1\AnthuanUtils.cs
public async static Task<bool> DeleteFile(string fileName)
        {
            try
            {
                IStorageFolder applicationFolder = ApplicationData.Current.LocalFolder;
                IStorageFile storageFile = await applicationFolder.GetFileAsync(fileName);
                await storageFile.DeleteAsync(StorageDeleteOption.PermanentDelete);
                return true;
            }
            catch (Exception e)
            {
                return false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Anthuan+TheOldReaderWP\Anthuan-TheOldReaderWP-d63a295\PhoneApp1\AnthuanUtils.cs
public async static Task<bool> FileExists(string fileName)
        {
            try
            {
                IStorageFolder applicationFolder = ApplicationData.Current.LocalFolder;
                IStorageFile storageFile = await applicationFolder.GetFileAsync(fileName);
                return true;
            }
            catch (Exception e)
            {
                return false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Anthuan+TheOldReaderWP\Anthuan-TheOldReaderWP-d63a295\PhoneApp1\AnthuanUtils.cs
public static async Task<string> ReadFile(string fileName)
        {
            string text;
            IStorageFolder applicationFolder = ApplicationData.Current.LocalFolder;

            IStorageFile storageFile = await applicationFolder.GetFileAsync(fileName);

            IRandomAccessStream accessStream = await storageFile.OpenReadAsync();

            using (Stream stream = accessStream.AsStreamForRead((int)accessStream.Size))
            {
                byte[] content = new byte[stream.Length];
                await stream.ReadAsync(content, 0, (int)stream.Length);

                text = Encoding.UTF8.GetString(content, 0, content.Length);
            }

            return text;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Anthuan+TheOldReaderWP\Anthuan-TheOldReaderWP-d63a295\PhoneApp1\MainPage.xaml.cs
public async void PrepareMasterObject()
        {
            bool bTimedOut = false;
            Task<bool> a = AnthuanUtils.FileExists("token");
            await a;
            if (!bTimedOut && a.Result)
            {
                m_TheOldReaderManager = new TheOldReader(m_TheOldReaderManager_AuthenticationCompleted);
                m_TheOldReaderManager.DownloadToReadCompleted += TheOldReaderManager_DownloadToReadCompleted;
                m_TheOldReaderManager.DownloadStarted += m_TheOldReaderManager_DownloadStarted;
                m_TheOldReaderManager.ArticleDownloadCompleted += m_TheOldReaderManager_ArticleDownloadCompleted;
                App.Current.TheOldReaderManager = m_TheOldReaderManager;
                StartBar();
            }
            else
            {
                DoNothing();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Anthuan+TheOldReaderWP\Anthuan-TheOldReaderWP-d63a295\PhoneApp1\TheOldReader.cs
public async void Authenticate()
        {
            try
            {
                m_AuthenticationInProgress = true;
                m_Token = await AnthuanUtils.ReadFile("token");
                m_AuthenticationInProgress = false;
                m_isAuthenticated = true;
                m_TokenReady.Release();
            }
            catch (Exception e)
            {
                m_Token = null;
                m_isAuthenticated = false;
            }
            if (AuthenticationCompleted != null) 
            {
                new Thread(() => AuthenticationCompleted(this, EventArgs.Empty)).Start();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+ArcOrganization\anttikajanus-ArcOrganization-9288033\src\ArcOrganization\Hub\HubViewModel.cs
public async void RefreshActiveItemAsync()
        {
            try
            {
                await LoadAllContentAsync();
            }
            catch (Exception)
            {
                throw;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+ArcOrganization\anttikajanus-ArcOrganization-9288033\src\ArcOrganization\Hub\NewMaps\NewMapsViewModel.cs
public override async Task LoadContentAsync()
        {           
            try
            {
                var results = await _portalService.GetNewestOrganizationWebMapsAsync();
                if (results == null)
                {
                    return;
                }

                Items = new BindableCollection<ArcGISPortalItem>(results);
                IsLoaded = true;
            }
            catch (Exception exception)
            {
                // TODO
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+ArcOrganization\anttikajanus-ArcOrganization-9288033\src\ArcOrganization\Hub\NewServices\NewServicesViewModel.cs
public override async Task LoadContentAsync()
        {           
            try
            {
                var results = await _portalService.GetNewestOrganizationFeatureServicesAsync();
                if (results == null)
                {
                    return;
                }

                Items = new BindableCollection<ArcGISPortalItem>(results);
                IsLoaded = true;
            }
            catch (Exception exception)
            {
                // TODO
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+ArcOrganization\anttikajanus-ArcOrganization-9288033\src\ArcOrganization\Hub\Account\AccountViewModel.cs
public override async Task LoadContentAsync()
        {
            UserInformation = await _portalService.GetUserInformationAsync();
            base.LoadContentAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+ArcOrganization\anttikajanus-ArcOrganization-9288033\src\ArcOrganization\Infrastructure\ViewModels\ConductorViewModel.cs
protected override async void OnActivate()
        {
            if (!IsLoaded)
            {
                SetBusy();
                await LoadAllContentAsync();
                SetNotBusy();
            }

            base.OnActivate();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+ArcOrganization\anttikajanus-ArcOrganization-9288033\src\ArcOrganization\Infrastructure\ViewModels\ConductorViewModel.cs
public virtual async Task LoadAllContentAsync()
        {
            SetBusy("Loading content...");

            var loadContentOperations = (from item in Items select item.LoadContentAsync()).ToArray();
            try
            {
                await Task.WhenAll(loadContentOperations);
            }
            catch (Exception exc)
            {
                foreach (Task<string> faulted in loadContentOperations.Where(t => t.IsFaulted))
                {
                    // work with faulted and faulted.Exception
                    // TODO
                }
            }

            SetNotBusy();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+ArcOrganization\anttikajanus-ArcOrganization-9288033\src\ArcOrganization\Infrastructure\ViewModels\ScreenViewModel.cs
protected async override void OnActivate()
        {
            if (!IsLoaded)
            {
                SetBusy();
                await LoadContentAsync();
                SetNotBusy();
            }

            base.OnActivate();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+ArcOrganization\anttikajanus-ArcOrganization-9288033\src\ArcOrganization\Infrastructure\ViewModels\SubScreenViewModel.cs
public virtual async Task RefreshContentAsync()
        {
            await  LoadContentAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+ArcOrganization\anttikajanus-ArcOrganization-9288033\src\ArcOrganization\Infrastructure\ViewModels\WebMapScreenViewModel.cs
public override async Task LoadContentAsync()
        {
            var basemapLayer = new ArcGISTiledMapServiceLayer()
                                   {
                                       Url =
                                           @"http://services.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer",
                                       ID = "Basemap",
                                       DisplayName = "Topographic map"
                                   };
            basemapLayer.SetValue(Document.IsBaseMapProperty, true);
            Layers.Add(basemapLayer);

            await LoadWebMap(WebMapId);

            var gpsLayer = new GpsLayer();
            var geoCoordinateWatcher = new GeoCoordinateWatcher(GeoPositionAccuracy.Default) { MovementThreshold = 10 };
            gpsLayer.GeoPositionWatcher = geoCoordinateWatcher;
            gpsLayer.DisplayName = "Location";
            gpsLayer.IsEnabled = true;
            geoCoordinateWatcher.Start();
            Layers.Add(gpsLayer);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+ArcOrganization\anttikajanus-ArcOrganization-9288033\src\ArcOrganization\Infrastructure\ViewModels\WebMapScreenViewModel.cs
private async Task LoadWebMap(string id)
        {
            if (string.IsNullOrEmpty(id))
            {
                return;
            }

            var webMapDocument = new Document();

            // Get the Map from the ArcGIS Online
            var result = await webMapDocument.LoadWebMapAsync(id);
            Extent = result.ItemInfo.Extent;

            // Find all layers that are added from WebMaps.
            var existingLayers = Layers.Where(x => !string.IsNullOrEmpty(x.GetWebMapId())).ToList();

            // Remove existing layers that are loaded from other WebMap
            if (existingLayers.Count > 0)
            {
                existingLayers.ForEach(x => Layers.Remove(x));
            }

            // Iterate through all layers that are not basemaps and add them to
            var layersToAdd = result.Map.Layers.Where(x => !Document.GetIsBaseMap(x)).ToList();

            // Remove layer references from loaded map
            result.Map.Layers.Clear();

            // Add loaded layers to the layers used
            foreach (var layer in layersToAdd)
            {
                Layers.Add(layer);
            }

            
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+ArcOrganization\anttikajanus-ArcOrganization-9288033\src\ArcOrganization\Login\LoginViewModel.cs
public async void Login(string password)
        {
            SetBusy("Logining...");
            ErrorMessage = string.Empty;
            CanLogin = false;

            await LoginAndNavigateAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+ArcOrganization\anttikajanus-ArcOrganization-9288033\src\ArcOrganization\Services\PortalService.cs
public async Task InitializeAsync(string username, string password)
        {
            if (_portal.IsInitialized)
            {
                return;
            }

            try
            {
                var credential = await IdentityManager.Current.GetCredentialsAsync(username, password, "ArcOrganization");
                _portal.Credentials = credential.Credentials;

                 await _portal.InitializeAsync();
            }
            catch (Exception exception)
            {
                throw;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+ArcOrganization\anttikajanus-ArcOrganization-9288033\src\ArcOrganization\Services\PortalService.cs
public async Task<IEnumerable<ArcGISPortalItem>> LoadBasemapGalleryAsync(int limit = 10)
        {
            var parameters = new SearchParameters() { Limit = limit };

            // Load ArcGISPortalItems from the Online that contains basemaps.
            var items = await _portal.LoadBasemapGalleryAsync(parameters);

            /// Note that basemaps provided by the Esri Finland doesn't contain Name value
            var filteredItems = items.Where(basemap => !string.IsNullOrEmpty(basemap.Name)).ToList();

            // Filter away Bing maps since we don't have a token.
            return filteredItems.Where(l => !l.Name.Contains("Bing"));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+ArcOrganization\anttikajanus-ArcOrganization-9288033\src\ArcOrganization\Services\PortalService.cs
public async Task<Map> LoadWebmapByIdAsync(string id)
        {
            var webMapDocument = new Document { Token = _portal.Token };

            // Load Map from the ArcGIS Online.
            var result = await webMapDocument.LoadWebMapAsync(id);

            // Set WebMap origin information to the layers.
            result.Map.Layers.ToList().ForEach(x => x.SetWebMapId(id));
            return result.Map;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+ArcOrganization\anttikajanus-ArcOrganization-9288033\src\ArcOrganization\Services\PortalService.cs
public async Task<IEnumerable<ArcGISPortalItem>> GetNewestOrganizationWebMapsAsync(int limit = 10)
        {
            if (!_portal.IsInitialized)
            {
                throw new Exception("Portal is not initialized.");
            }

            var parameters = new SearchParameters
            {
                Limit = limit,
                QueryString = string.Format("accountid:\"{0}\" AND type:\"Web Map\" AND -type:\"Web Mapping Application\"", _portal.CurrentUser.OrgId),
                SortField = "uploaded",
                SortOrder = QuerySortOrder.Descending
            };

            return await _portal.SearchItemsAsync(parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+ArcOrganization\anttikajanus-ArcOrganization-9288033\src\ArcOrganization\Services\PortalService.cs
public async Task<IEnumerable<ArcGISPortalItem>> GetNewestOrganizationFeatureServicesAsync(int limit = 10)
        {
            if (!_portal.IsInitialized)
            {
                throw new Exception("Portal is not initialized.");
            }

            var parameters = new SearchParameters
            {
                Limit = limit,
                QueryString = string.Format("accountid:\"{0}\" AND type:\"Feature Service\"", _portal.CurrentUser.OrgId),
                SortField = "uploaded",
                SortOrder = QuerySortOrder.Descending
            };

            return await _portal.SearchItemsAsync(parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+ArcOrganization\anttikajanus-ArcOrganization-9288033\src\ArcOrganization\WepMap\WebMapViewModel.cs
public override async Task LoadContentAsync()
        {
            await base.LoadContentAsync();
            var foundBasemaps = await _portalService.LoadBasemapGalleryAsync();
            Basemaps = new BindableCollection<ArcGISPortalItem>(foundBasemaps);

            // Get default search
            var defaultSearch = await _portalService.GetNewestOrganizationFeatureServicesAsync();
            SearchResults = new BindableCollection<MapPortalItem>();
            defaultSearch.ToList().ForEach(x => SearchResults.Add(new MapPortalItem { Item = x, IsOnMap = false }));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+ArcOrganization\anttikajanus-ArcOrganization-9288033\src\ArcOrganization\WepMap\WebMapViewModel.cs
public async void ChangeBasemap(ArcGISPortalItem portalItem)
        {
            try
            {
                await BasemapChangedAsync(portalItem);
            }
            catch (Exception exception)
            {
                // TODO
                throw;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+ArcOrganization\anttikajanus-ArcOrganization-9288033\src\ArcOrganization\WepMap\WebMapViewModel.cs
private async Task BasemapChangedAsync(ArcGISPortalItem basemapItem)
        {
            var map = await _portalService.LoadWebmapByIdAsync(basemapItem.Id);
            var newBasemapLayers = new LayerCollection();

            // Clear basemaps from the layers
            foreach (var layer in Layers.ToList().Where(Document.GetIsBaseMap))
            {
                Layers.Remove(layer);
            }

            // Get new basemap layers
            foreach (var layer in map.Layers.Where(Document.GetIsBaseMap))
            {
                newBasemapLayers.Add(layer);
            }

            // Clearing reference to existing map
            map.Layers.Clear();

            var index = 0;
            foreach (var layer in newBasemapLayers)
            {
                // Set to true to enable legend usage.
                layer.ShowLegend = true;

                // Check if layer is a reference layer (ie labels that go on top)
                var data = layer.GetValue(Document.WebMapDataProperty) as IDictionary<string, object>;
                if (!data.ContainsKey("isReference"))
                {
                    Layers.Insert(index++, layer);
                }
                else
                {
                    // Reference layers go on top.
                    Layers.Add(layer);
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+Peruka\anttikajanus-Peruka-99a4816\src\Peruka\Login\LoginViewModel.cs
private async void LoginAndNavigateAsync(string password)
        {
            try
            {
                // Generates token for the user and then naviates to the main view
                await this._portalService.InitializeAsync(this.Username, password);

                // Store username for later use.
                this._settingsService.Username = this.Username;

                // Store password if set so.
                if (this.RememberMe)
                {
                    this._settingsService.Password = password;
                }

                this.IsBusy = false;
                this._navigationService.UriFor<TrackRouteViewModel>().WithParam(p => p.BackNavSkipOne, true).Navigate();
            }
            catch (Exception exception)
            {
                this.ErrorMessage = exception.Message;
                this.IsBusy = false;
                this.CanLogin = true;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+Peruka\anttikajanus-Peruka-99a4816\src\Peruka\SplashView\SplashViewModel.cs
private async void LoginAndNavigateAsync()
        {
            try
            {
                IsBusy = true;
                BusyText = "Login...";

                Debug.WriteLine("Logining...");

                // Generates token for the user and then naviates to the main view
                await _portalService.InitializeAsync(_settingsService.Username, _settingsService.Password);

                Debug.WriteLine("Login completed.");

                Debug.WriteLine("Navigating to the TrackRouteView");
                _navigationService.UriFor<TrackRouteViewModel>().WithParam(p => p.BackNavSkipOne, true).Navigate();
                IsBusy = false;
            }
            catch (Exception exception)
            {
                // TODO : indicate exception somehow here or in the login page.
                Debug.WriteLine("Login failed : {0}", exception);

                _navigationService.UriFor<LoginViewModel>().WithParam(wm => wm.BackNavSkipOne, true);
                IsBusy = false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+Peruka\anttikajanus-Peruka-99a4816\src\Peruka\TrackRoute\TrackRouteViewModel.cs
protected override async void OnActivate()
        {
            await _routeService.InitializeAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+Peruka\anttikajanus-Peruka-99a4816\src\PerukaCore\Services\PortalService.cs
public async Task<IEnumerable<ArcGISPortalItem>> LoadBasemapGalleryAsync(int limit = 10)
        {
            var parameters = new SearchParameters { Limit = limit };

            // Load ArcGISPortalItems from the Online that contains basemaps.
            var items = await _portal.LoadBasemapGalleryAsync(parameters);

            // Filter away Bing maps since we don't have a token.
            return items.Where(l => !l.Name.Contains("Bing"));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+Peruka\anttikajanus-Peruka-99a4816\src\PerukaCore\Services\PortalService.cs
public async Task<IEnumerable<ArcGISPortalItem>> GetItemsAsync(string query)
        {
            var parameters = new SearchParameters { QueryString = query };

            return await _portal.SearchItemsAsync(parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+Peruka\anttikajanus-Peruka-99a4816\src\PerukaCore\Services\PortalService.cs
public async Task<GetMapCompletedEventArgs> LoadWebmapByIdAsync(string id)
        {
            var webMapDocument = new Document();

            try
            {
                webMapDocument.Token = _credentials.Token;
                return await webMapDocument.LoadWebMapAsync(id);
            }
            catch (Exception)
            {
                throw;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+Peruka\anttikajanus-Peruka-99a4816\src\PerukaCore\Services\PortalService.cs
public async Task<IEnumerable<ArcGISPortalItem>> GetNewestOrganizationalItemsAsync(int limit)
        {
            if (! _portal.IsInitialized)
            {
                return null;
            }

            var parameters = new SearchParameters
                                 {
                                     Limit = limit,
                                     QueryString =
                                         string.Format(
                                             "accountid:\"{0}\" AND type:\"Web Map\" AND -type:\"Web Mapping Application\"",
                                             UserInformation.OrgId),
                                     SortField = "modified",
                                     SortOrder = QuerySortOrder.Descending
                                 };

            try
            {
                return await _portal.SearchItemsAsync(parameters);
            }
            catch (Exception exception)
            {
                throw;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+Peruka\anttikajanus-Peruka-99a4816\src\PerukaCore\Services\PortalService.cs
public async Task<IEnumerable<ArcGISPortalItem>> GetMostUsedWebMapsFromOrganizationAsync(int limit)
        {
            if (! _portal.IsInitialized)
            {
                return null;
            }

            var parameters = new SearchParameters
                                 {
                                     Limit = limit,
                                     QueryString =
                                         string.Format(
                                             "accountid:\"{0}\" AND type:\"Web Map\" AND -type:\"Web Mapping Application\"",
                                             UserInformation.OrgId),
                                     SortField = "numviews",
                                     SortOrder = QuerySortOrder.Descending
                                 };

            try
            {
                return await _portal.SearchItemsAsync(parameters);
            }
            catch (Exception exception)
            {
                throw;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+Peruka\anttikajanus-Peruka-99a4816\src\PerukaCore\Services\PortalService.cs
public async Task<IEnumerable<ArcGISPortalItem>> GetFeaturedWebMapsAsync(int limit)
        {
            var parameters = new SearchParameters
                                 {
                                     Limit = limit,
                                     QueryString =
                                         string.Format(
                                             "type:\"Web Map\" AND -type:\"Web Mapping Application\""),
                                     SortField = "modified",
                                     SortOrder = QuerySortOrder.Descending
                                 };

            try
            {
                return await _portal.ArcGISPortalInfo.SearchFeaturedItemsAsync(parameters);
            }
            catch (Exception exception)
            {
                throw;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+Peruka\anttikajanus-Peruka-99a4816\src\PerukaCore\Services\RouteService.cs
private async Task AddPoint(Graphic point)
        {
            RoutePoints.Add(point);

            var parameters = new AddFeatureParameters();
            parameters.AddGraphics.Add(point);

            var addTask = new AddFeatureTask(ServiceUrl);
            var results = await addTask.ExecuteAsync(parameters);

            _points.Add(point.Geometry as MapPoint);
            //this.AddPointToRoute(point.Geometry as MapPoint);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+Peruka\anttikajanus-Peruka-99a4816\src\Knet.Phone.ArcGIS\Layers\CreateLayersTask.cs
public async Task<LayersCreatedEventArgs> ExecuteAsync()
        {
            // Create layers
            this.CreateLayers();

            // Initialize layers
            var failedInitializations = await this.InitializeAsync();

            var results = new LayersCreatedEventArgs()
                              {
                                  Layers = this.Layers,
                                  FailedLayerInitializations = failedInitializations
                              };

            return results;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+Peruka\anttikajanus-Peruka-99a4816\src\Knet.Phone.ArcGIS\Layers\LayerFactory.cs
public static async Task<LayersCreatedEventArgs> CreateLayersAsync<T>() where T : CreateLayersTask, new()
        {
            var task = new T();
            return await task.ExecuteAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+Peruka\anttikajanus-Peruka-99a4816\src\Knet.Phone.ArcGIS\Tasks\AddAttachementTask.cs
public override async Task<AddAttachementResults> ExecuteAsync(AddAttachementParameters parameter)
        {
            var url = this.Url + "/" + parameter.FeatureId + "/addAttachment";
           
            var parameters = new Dictionary<string, string>
                {
                    { "f", "json" },
                    { "attachment", parameter.Name + ".jpg" }
                };

            this.WebClient.DisableClientCaching = true;

            var results = new AddAttachementResults();

            try
            {
                var contentStreams = new List<ArcGISWebClient.StreamContent>
                    {
                        new ArcGISWebClient.StreamContent()
                            {
                                ContentType = "image/x-jpeg",
                                Filename = parameter.Name.ToString(CultureInfo.InvariantCulture) + ".jpg",
                                Name = parameter.Name,
                                Stream = new MemoryStream(parameter.Attachement)
                            }
                    };

                var result = await this.WebClient.PostMultipartTaskAsync(url, parameters, contentStreams);
                results = AddAttachementResults.Create(result.Result);
                results.FeatureId = parameter.FeatureId;
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex);
                results.Error = ex;
            }

            return results;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+Peruka\anttikajanus-Peruka-99a4816\src\Knet.Phone.ArcGIS\Tasks\AddFeaturesTask.cs
public override async Task<AddFeaturesResult> ExecuteAsync(AddFeatureParameters parameter)
        {
            var url = this.Url + "/applyEdits";

            var parameters = new Dictionary<string, string>
                {
                    { "id", "0" },
                    { "version", "defaultVersion" },
                    { "rollbackOnFailure", "true" },
                    { "f", "json" }
                };

            var serializer = new ArcGISSerializationUtils();

            if (parameter.AddGraphics.Count > 0)
            {
                var graphicJson = serializer.ToJson(parameter.AddGraphics);
                parameters.Add("adds", graphicJson);
            }

            if (parameter.UpdateGraphics.Count > 0)
            {
                var updatesJson = serializer.ToJson(parameter.UpdateGraphics, true, false);
                parameters.Add("updates", updatesJson);
            }

            this.WebClient.DisableClientCaching = true;
            var results = new AddFeaturesResult();

            try
            {
                var result = await this.WebClient.DownloadStringTaskAsync(url, parameters);
                results = AddFeaturesResult.Create(result.Result);
            }
            catch (Exception exception)
            {
                Debug.WriteLine(exception);
                results.Error = exception;
            }

            return results;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+Peruka\anttikajanus-Peruka-99a4816\src\Knet.Phone.ArcGIS\Tasks\GetAttachementInfoTask.cs
public override async Task<GetAttachementInfoResults> ExecuteAsync(GetAttachementInfoParameters parameter)
        {
            var url = this.Url + "/" + parameter.FeatureId + "/attachments";

            var parameters = new Dictionary<string, string> { { "f", "json" }, };

            this.WebClient.DisableClientCaching = true;

            var results = new GetAttachementInfoResults();

            try
            {
                var result = await this.WebClient.DownloadStringTaskAsync(url, parameters);

                results = GetAttachementInfoResults.Create(result.Result);
                results.FeatureId = parameter.FeatureId;
            }
            catch (Exception exception) 
            {
                results.Error = exception;
            }

            return results;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+Peruka\anttikajanus-Peruka-99a4816\src\Knet.Phone.ArcGIS\Tasks\UpdateAttachementTask.cs
public override async Task<UpdateAttachmentResults> ExecuteAsync(UpdateAttachmentParameters parameter)
        {
            var url = this.Url + "/" + parameter.FeatureId + "/updateAttachment";

            var parameters = new Dictionary<string, string>
                {
                    { "f", "json" },
                    { "attachmentId", parameter.AttachmentId.ToString(CultureInfo.InvariantCulture) },
                    { "attachment", parameter.Name }
                };

            this.WebClient.DisableClientCaching = true;

            var results = new UpdateAttachmentResults();

            try
            {
                var contentStreams = new List<ArcGISWebClient.StreamContent>
                    {
                        new ArcGISWebClient.StreamContent
                            {
                                ContentType = "image/x-jpeg",
                                Filename = parameter.Name.ToString(CultureInfo.InvariantCulture) + ".jpg",
                                Name = parameter.Name,
                                Stream = new MemoryStream(parameter.Attachment)
                            }
                    };

                var result = await this.WebClient.PostMultipartTaskAsync(url, parameters, contentStreams);

                results = UpdateAttachmentResults.Create(result.Result);
                results.FeatureId = parameter.FeatureId;
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex);
                results.Error = ex;
            }

            return results;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+Peruka\anttikajanus-Peruka-99a4816\src\Knet.Phone.Client\ViewModels\ConductorViewModel.cs
private async void LoadActiveItemsContentAsync(string message)
        {
            this.BusyText = message;
            this.IsBusy = true;

            await this.ActiveItem.LoadContentAsync();

            this.IsBusy = false;
            this.BusyText = string.Empty;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\anttikajanus+Peruka\anttikajanus-Peruka-99a4816\src\Knet.Phone.Client\ViewModels\ContentScreenViewModel.cs
public async Task RefreshContentAsync()
        {
            await this.LoadContentAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\ApexHAB+apex-lumia\ApexHAB-apex-lumia-47fb019\ApexLumia\Twitter.cs
public async void newStatusAsync(string tweet, string latitude = "", string longitude = "")
        {
            string url = "https://api.twitter.com/1/statuses/update.json";

            var parameters = new Dictionary<string, string>();
            parameters.Add("status",Utils.UrlEncodeRelaxed(tweet));
            parameters.Add("display_coordinates", "true");
            if (latitude != "") { parameters.Add("lat", Utils.UrlEncodeRelaxed(latitude)); }
            if (longitude != "") { parameters.Add("long", Utils.UrlEncodeRelaxed(longitude)); }

            string authorization = generateAuthorizationHeader(url, "POST", parameters);
            string content = string.Format("status={0}",Utils.UrlEncodeRelaxed(tweet));
            content += string.Format("&display_coordinates={0}", "true");
            if (latitude != "") { content += string.Format("&lat={0}", Utils.UrlEncodeRelaxed(latitude)); }
            if (longitude != "") { content += string.Format("&long={0}", Utils.UrlEncodeRelaxed(longitude)); }

            string result = await HTTPRequests.postRequestAsync(url, content, authorization);
            if (result == "") { _status = false; } else { _status = true; }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\ApexHAB+apex-lumia\ApexHAB-apex-lumia-47fb019\ApexLumia\HTTPRequests.cs
public static async Task<String> getRequestAsync(string url)
        {
            string result = "";

            try
            {
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                WebResponse response = await request.GetResponseAsync();
                result = new StreamReader(response.GetResponseStream()).ReadToEnd();
            }
            catch { return ""; }

            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\ApexHAB+apex-lumia\ApexHAB-apex-lumia-47fb019\ApexLumia\HTTPRequests.cs
public static async Task<String> putRequestAsync(string url, string putData)
        {
            string result;
            try
            {
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                request.Method = "PUT";
                byte[] putbytes = System.Text.Encoding.UTF8.GetBytes(putData);
                request.Headers[HttpRequestHeader.ContentLength] = putbytes.Length.ToString();

                Stream putStream = await request.GetRequestStreamAsync();
                putStream.Write(putbytes, 0, putbytes.Length);
                putStream.Close();

                WebResponse response = await request.GetResponseAsync();
                result = new StreamReader(response.GetResponseStream()).ReadToEnd();


            }
            catch { return ""; }


            return result;

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\ApexHAB+apex-lumia\ApexHAB-apex-lumia-47fb019\ApexLumia\HTTPRequests.cs
public static async Task<String> postRequestAsync(string url, string postData, string authorization = "", bool Expect100Continue = true)
        {
            string result;
            try
            {
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                request.Method = "POST";
               
                byte[] postbytes = System.Text.Encoding.UTF8.GetBytes(postData);
                request.Headers[HttpRequestHeader.ContentLength] = postbytes.Length.ToString();
                request.Headers[HttpRequestHeader.Authorization] = authorization;

                Stream postStream = await request.GetRequestStreamAsync();
                postStream.Write(postbytes, 0, postbytes.Length);
                postStream.Close();

                WebResponse response = await request.GetResponseAsync();
                result = new StreamReader(response.GetResponseStream()).ReadToEnd();

            }
            catch { return ""; }


            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\ApexHAB+apex-lumia\ApexHAB-apex-lumia-47fb019\ApexLumia\CouchInterface.cs
private async Task<string> getNewUUID()
        {
            string url = _databaseurl + "_uuids";
            string retrievedJSON = await HTTPRequests.getRequestAsync(url);
            Dictionary<string, string[]> json;
            string newUUID = "";

            try
            {
                json = JsonConvert.DeserializeObject<Dictionary<string, string[]>>(retrievedJSON);
                newUUID = json["uuids"][0];
            }
            catch
            { return ""; }

            return newUUID;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\artem-zinnatullin+jet-image-loader\artem-zinnatullin-jet-image-loader-e7b87eb\JetImageLoader\Cache\Storage\BaseStorageCache.cs
protected async virtual Task<bool> InternalSaveAsync(string fullFilePath, Stream cacheStream)
        {
            using (var fileStream = new IsolatedStorageFileStream(fullFilePath, FileMode.Create, FileAccess.ReadWrite, ISF))
            {
                try
                {
                    await cacheStream.CopyToAsync(fileStream);
                    return true;
                }
                catch
                {
                    try
                    {
                        // If file was not saved normally, we should delete it
                        ISF.DeleteFile(fullFilePath);
                    }
                    catch
                    {
                        JetImageLoader.Log("[error] can not delete unsaved file: " + fullFilePath);
                    }
                }
            }

            JetImageLoader.Log("[error] can not save cache to the: " + fullFilePath);
            return false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\artem-zinnatullin+jet-image-loader\artem-zinnatullin-jet-image-loader-e7b87eb\JetImageLoader\Cache\Storage\BaseStorageCache.cs
public async virtual Task<Stream> LoadCacheStreamAsync(string cacheKey)
        {
            var fullFilePath = GetFullFilePath(CacheFileNameGenerator.GenerateCacheFileName(cacheKey));

            if (!ISF.FileExists(fullFilePath)) return null;
            
            try
            {
                var cacheFileMemoryStream = new MemoryStream();

                using (var cacheFileStream = ISF.OpenFile(fullFilePath, FileMode.Open, FileAccess.Read))
                {
                    await cacheFileStream.CopyToAsync(cacheFileMemoryStream);
                    return cacheFileMemoryStream;
                }
            }
            catch
            {
                JetImageLoader.Log("[error] can not load file stream from: " + fullFilePath);
                return null;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\artem-zinnatullin+jet-image-loader\artem-zinnatullin-jet-image-loader-e7b87eb\JetImageLoader\Cache\Storage\CacheImpl\LimitedStorageCache.cs
public async override Task<bool> SaveAsync(string cacheKey, Stream cacheStream)
        {
            var fullFileName = Path.Combine(CacheDirectory, CacheFileNameGenerator.GenerateCacheFileName(cacheKey));
            var cacheSizeInBytes = cacheStream.Length;

            while (_currentCacheSizeInBytes + cacheSizeInBytes > _cacheLimitInBytes)
            {
                if (!RemoveOldestCacheFile())
                {
                    break; // All cache deleted
                }
            }

            var wasFileSaved = await base.InternalSaveAsync(fullFileName, cacheStream);
            
            if (wasFileSaved)
            {
                _lastAccessTimeDictionary[Path.Combine(CacheDirectory, fullFileName)] = DateTime.Now.Millisecond;
                Interlocked.Add(ref _currentCacheSizeInBytes, cacheStream.Length); // Updating current cache size
            }

            return wasFileSaved;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\artem-zinnatullin+jet-image-loader\artem-zinnatullin-jet-image-loader-e7b87eb\JetImageLoader\JetImageLoader.cs
public async Task<Stream> LoadImageStream(Uri imageUri)
        {
            CheckConfig();

            var imageUrl = imageUri.ToString();

            if (Config.CacheMode != CacheMode.NoCache)
            {
                var resultFromCache = await LoadImageStreamFromCache(imageUrl);
                if (resultFromCache != null) return resultFromCache;
            }

            try
            {
                Log("[network] loading " + imageUrl);
                var downloadResult = await Config.DownloaderImpl.DownloadAsync(imageUri);

                if (downloadResult.Exception != null || downloadResult.ResultStream == null)
                {
                    Log("[error] failed to download: " + imageUrl);
                    return null;
                }

                Log("[network] loaded " + imageUrl);

                if (Config.CacheMode != CacheMode.NoCache)
                {
                    if (Config.CacheMode == CacheMode.MemoryAndStorageCache || Config.CacheMode == CacheMode.OnlyMemoryCache) Config.MemoryCacheImpl.Put(imageUrl, downloadResult.ResultStream);

                    if (Config.CacheMode == CacheMode.MemoryAndStorageCache || Config.CacheMode == CacheMode.OnlyStorageCache)
                    {
                        // Async saving to the storage cache without await
                        var saveAsync = Config.StorageCacheImpl.SaveAsync(imageUrl, downloadResult.ResultStream)
                            .ContinueWith(
                            task => 
                                {
                                    if (task.IsFaulted || !task.Result)
                                    {
                                        Log("[error] failed to save in storage: " + imageUri);
                                    }
                                }
                        );
                    }
                }

                return downloadResult.ResultStream;
            }
            catch
            {
                Log("[error] failed to save loaded image: " + imageUrl);
            }

            // May be another thread has saved image to the cache
            // It is real working case
            if (Config.CacheMode != CacheMode.NoCache)
            {
                var resultFromCache = await LoadImageStreamFromCache(imageUrl);
                if (resultFromCache != null) return resultFromCache;
            }

            Log("[error] failed to load image stream from cache and network: " + imageUrl);

            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\artem-zinnatullin+jet-image-loader\artem-zinnatullin-jet-image-loader-e7b87eb\JetImageLoader\JetImageLoader.cs
protected async Task<Stream> LoadImageStreamFromCache(string imageUrl)
        {
            if (Config.CacheMode == CacheMode.MemoryAndStorageCache || Config.CacheMode == CacheMode.OnlyMemoryCache)
            {
                Stream memoryStream;

                if (Config.MemoryCacheImpl.TryGetValue(imageUrl, out memoryStream))
                {
                    Log("[memory] " + imageUrl);
                    return memoryStream;
                }
            }

            if (Config.CacheMode == CacheMode.MemoryAndStorageCache ||
                Config.CacheMode == CacheMode.OnlyStorageCache)
            {
                if (Config.StorageCacheImpl.IsCacheExists(imageUrl))
                {
                    Log("[storage] " + imageUrl);
                    var storageStream = await Config.StorageCacheImpl.LoadCacheStreamAsync(imageUrl);

                    // Moving cache to the memory
                    if (Config.CacheMode == CacheMode.MemoryAndStorageCache)
                        Config.MemoryCacheImpl.Put(imageUrl, storageStream);

                    return storageStream;
                }
            }

            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\atomaras+CrossGIS\atomaras-CrossGIS-c2a9032\CrossGIS.WP8\..\CrossGIS.Core\ViewModels\PlaceSearchViewModel.cs
private async Task SearchAsync()
        {
            IsSearching = true;
            try
            {
                //Start with the Map's current center
                MapPoint searchCenter = MapViewModel.Center;

                //If Gps is active and has a valid position
                if (MainViewModel.GpsViewModel != null &&
                    MainViewModel.GpsViewModel.IsEnabled &&
                    MainViewModel.GpsViewModel.IsPositionValid)
                {
                    var gpsPosition = MainViewModel.GpsViewModel.Position;

                    //Use the GPS position as our search center only if it's within view
                    if (MapViewModel.ViewArea.Intersects(gpsPosition.Extent))
                    {
                        searchCenter = gpsPosition;
                    }
                }
                var locations =
                    await _locatorService.FindPlacesAsync(SearchText, searchCenter, MapViewModel.SpatialReference);

                SearchResults.Clear();

                foreach (var location in locations)
                {
                    SearchResults.Add(CreatePlaceSearchResult(location));
                }

                

                if (!MapViewModel.Layers.Contains(PlaceSearchLayer))
                    MapViewModel.Layers.Add(PlaceSearchLayer);

                PlaceSearchLayer.IsVisible = SearchResults.Any();

            }
            catch (Exception ex)
            {

            }
            finally
            {
                IsSearching = false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\atomaras+CrossGIS\atomaras-CrossGIS-c2a9032\CrossGIS.Core\ViewModels\PlaceSearchViewModel.cs
private async Task SearchAsync()
        {
            IsSearching = true;
            try
            {
                //Start with the Map's current center
                MapPoint searchCenter = MapViewModel.Center;

                //If Gps is active and has a valid position
                if (MainViewModel.GpsViewModel != null &&
                    MainViewModel.GpsViewModel.IsEnabled &&
                    MainViewModel.GpsViewModel.IsPositionValid)
                {
                    var gpsPosition = MainViewModel.GpsViewModel.Position;

                    //Use the GPS position as our search center only if it's within view
                    if (MapViewModel.ViewArea.Intersects(gpsPosition.Extent))
                    {
                        searchCenter = gpsPosition;
                    }
                }
                var locations =
                    await _locatorService.FindPlacesAsync(SearchText, searchCenter, MapViewModel.SpatialReference);

                SearchResults.Clear();

                foreach (var location in locations)
                {
                    SearchResults.Add(CreatePlaceSearchResult(location));
                }

                

                if (!MapViewModel.Layers.Contains(PlaceSearchLayer))
                    MapViewModel.Layers.Add(PlaceSearchLayer);

                PlaceSearchLayer.IsVisible = SearchResults.Any();

            }
            catch (Exception ex)
            {

            }
            finally
            {
                IsSearching = false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaClient\ViewModels\AssignmentsViewModel.cs
public override async Task<CourseContentViewModel> LoadDataAsync(string id)
        {
            List<CourseAssignment> assignments = await NoppaAPI.GetCourseAssignments(id);
            if (assignments != null)
            {
                foreach (var a in assignments)
                {
                    _assignments.Add(a);
                }
            }
            IsEmpty = assignments == null || assignments.Count == 0;

            return this;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaClient\ViewModels\EventsViewModel.cs
public override async Task<CourseContentViewModel> LoadDataAsync(string id)
        {
            List<CourseEvent> events = await NoppaAPI.GetCourseEvents(id);
            if (events != null)
            {
                Events = EventGroup.CreateEventGroups(events);
            }
            IsEmpty = events == null || events.Count == 0;

            return this;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaClient\ViewModels\CourseListViewModel.cs
private async void UpdateFilter()
        {
            IsLoading = true;
            await FilterCourses(_courseFilter, _courses);
            IsLoading = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaClient\ViewModels\CourseListViewModel.cs
private async Task FilterCourses(CourseFilter filter, IEnumerable<Course> unfilteredCourses)
        {
            Courses = new ObservableCollection<Course>();

            Courses = await Task<ObservableCollection<Course>>.Run(() =>
                {
                    IEnumerable<Course> filteredCourses = null;
                    switch (filter)
                    {
                        case CourseFilter.Code:
                            filteredCourses = unfilteredCourses.OrderBy(course => course.Id);
                            break;
                        case CourseFilter.Name:
                            filteredCourses = unfilteredCourses.OrderBy(course => course.Name);
                            break;
                        case CourseFilter.Department:
                            filteredCourses = unfilteredCourses.OrderBy(course => course.DepartmentId);
                            break;
                    }
                    return new ObservableCollection<Course>(filteredCourses);
                });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaClient\ViewModels\CourseListViewModel.cs
private async Task LoadSearchResultsAsync(string query, CancellationToken cancellationToken)
        {
            Title = String.Format(AppResources.SearchResultsPageTitle, query);

            IsLoading = true;
            IsSearchHintVisible = false;
            _courses.Clear();

            try
            {
                List<Course> courses = await NoppaAPI.GetCourses(query);

                if (courses != null)
                {
                    await FilterCourses(_courseFilter, courses);
                }
            }
            catch (TaskCanceledException)
            {
                Debug.WriteLine("Task cancelled.");
            }

            IsLoading = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaClient\ViewModels\CourseListViewModel.cs
public async Task LoadDepartmentAsync(string departmentId)
        {
            IsLoading = true;
            _courses.Clear();

            Department dept = await NoppaAPI.GetDepartment(departmentId);

            /* Department search should mostly fail due to connectivity, as
             * the ids that lead here are given by NoppaAPI. Caching leads
             * to a situation that user may get into courselistview without
             * having connectivity. */
            if (dept == null)
            {
                IsLoading = false;
                IsEmpty = true;
                return;
            }

            string deptName = "";
            switch (App.Settings.Language)
            {
                case Language.Finnish: deptName = dept.name_fi; break;
                case Language.English: deptName = dept.name_en; break;
                case Language.Swedish: deptName = dept.name_sv; break;
                default: break;
            }

            Title = departmentId.ToUpper();
            Subtitle = dept != null ? deptName : Title;

            try
            {
                List<Course> courses = await NoppaAPI.GetCourses("", "", departmentId);
                if (courses != null)
                {
                    await FilterCourses(_courseFilter, courses);
                }
            }
            catch (TaskCanceledException)
            {
                Debug.WriteLine("Task cancelled.");
            }

            IsLoading = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaClient\ViewModels\CourseListViewModel.cs
public async Task LoadMyCoursesAsync(PinnedCourses pinnedCourses)
        {
            IsLoading = true;

            Courses.Clear();
            var courses = await pinnedCourses.GetCodesAsync();

            var tasks = new List<Task<Course>>();

            foreach (string c in courses) {
                tasks.Add(Task.Run(async () => await NoppaAPI.GetCourse(c) ));
            }

            while (tasks.Count > 0)
            {
                var course = await Task.WhenAny(tasks);
                tasks.Remove(course);

                Courses.Add(await course);
            }
            IsLoading = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaClient\ViewModels\CourseViewModel.cs
private async void PinCourseAsync(bool toggle)
        {
            _isPinned = null;
            NotifyPropertyChanged("IsPinned");
            if (toggle)
            {
                await App.PinnedCourses.AddAsync(_code);
            }
            else
            {
                await App.PinnedCourses.RemoveAsync(_code);
            }
            _isPinned = toggle;
            NotifyPropertyChanged("IsPinned");
            NotifyPropertyChanged("IsPinnedText");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaClient\ViewModels\CourseViewModel.cs
private async void SetPinnedStateAsync()
        {
            _isPinned = await _pinnedCourses.ContainsAsync(_code);
            NotifyPropertyChanged("IsPinned");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaClient\ViewModels\CourseViewModel.cs
public async Task LoadContentAsync(INavigationController navigationController)
        {
            if (IsLoading)
            {
                return;
            }

            IsLoading = true;
            _course = await NoppaAPI.GetCourse(Code);
            _toggleSecondaryTileCommand.NotifyCanExecuteChanged();
            UpdateToggleCommandText();

            List<CourseContentViewModel> viewmodels = new List<CourseContentViewModel>()
            {
                new LecturesViewModel(),
                new ExercisesViewModel(),
                new ResultsViewModel(),
                new AssignmentsViewModel(),
                new EventsViewModel(navigationController)
            };

            List<Task<CourseContentViewModel>> tasks = new List<Task<CourseContentViewModel>>();


            await Task.WhenAll(
                /* Load Overview (already in the contents) */
                OverviewModel.LoadDataAsync(Code),
                /* Load News (already in the contents) */
                NewsModel.LoadDataAsync(Code)
            );


            foreach (var vm in viewmodels)
                tasks.Add(vm.LoadDataAsync(Code));

            /* Add items in the order they are finished. */
            while (tasks.Count > 0)
            {
                var task = await Task.WhenAny(tasks);
                tasks.Remove(task);
                var content = await task;

                if (!content.IsEmpty)
                {
                    int index = _contents.Count;

                    // Find the correct position
                    for (int i = 0; i < _contents.Count; i++)
                    {
                        if (_contents[i].Index > content.Index)
                        {
                            index = i;
                            break;
                        }
                    }
                    _contents.Insert(index, content);
                    NotifyPropertyChanged("Contents");
                }
            }

            if (OverviewModel.OodiUrl != null)
            {
                OodiPageUri = new Uri(OverviewModel.OodiUrl);
            }

            IsLoading = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaClient\ViewModels\EventViewModel.cs
private async void LoadCourseDataAsync(INavigationController controller)
        {
            Course = await NoppaAPI.GetCourse(CourseId);
            CourseName = Course.LongName;
            PageTitle = AppResources.ApplicationTitle.ToUpper() + " " + Course.Id.ToUpper();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaClient\ViewModels\ExercisesViewModel.cs
public override async Task<CourseContentViewModel> LoadDataAsync(string id)
        {
            Task<List<CourseExercise>> exercisesTask = NoppaAPI.GetCourseExercises(id);
            Task<List<CourseExerciseMaterial>> materialTask = NoppaAPI.GetCourseExerciseMaterial(id);

            await Task.WhenAll(exercisesTask, materialTask);

            var exercises = exercisesTask.Result;
            var exerciseMaterial = materialTask.Result;

            if (exercises != null)
            {
                foreach (var exercise in exercises)
                {
                    _exercises.Add(exercise);
                }
            }

            if (exerciseMaterial != null)
            {
                foreach (var material in exerciseMaterial)
                {
                    _exerciseMaterial.Add(material);
                }
            }

            HasExercises = exercises != null && exercises.Count > 0;
            HasExerciseMaterial = exerciseMaterial != null && exerciseMaterial.Count > 0;
            IsEmpty = !HasExercises && !HasExerciseMaterial;

            return this;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaClient\ViewModels\LecturesViewModel.cs
public override async Task<CourseContentViewModel> LoadDataAsync(string id)
        {
            List<CourseLecture> lectures = await NoppaAPI.GetCourseLectures(id);
            if (lectures != null)
            {
                foreach (var lecture in lectures)
                {
                    _lectures.Add(lecture);
                }
            }
            IsEmpty = lectures == null || lectures.Count == 0;

            return this;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaClient\ViewModels\MainViewModel.cs
public async Task LoadDataAsync(PinnedCourses pinnedCourses)
        {
            System.Diagnostics.Debug.WriteLine("Start loading");
            IsLoading = true;
            
            try
            {
                UpdateMyCoursesAsync(pinnedCourses);
                LoadDepartmentGroupsAsync();
                
                var courses = await pinnedCourses.GetCodesAsync();
                courses.CollectionChanged += (o, e) => UpdateMyCoursesAsync(pinnedCourses);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine("LoadDataAsync: Caught exception: {0}", ex.Message);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaClient\ViewModels\MainViewModel.cs
private async void LoadDepartmentGroupsAsync()
        {
            _isDepartmanentsLoading = true;

            System.Diagnostics.Debug.WriteLine("Start loading departments");
            try
            {
                List<Organization> orgs = await NoppaAPI.GetAllOrganizations();
                List<Department> depts = await NoppaAPI.GetDepartments();

                if (depts != null && orgs != null)
                {
                    var orgMap = new Dictionary<string, Organization>();
                    foreach (var org in orgs)
                    {
                        orgMap.Add(org.Id, org);
                    }

                    Departments = DepartmentGroup.CreateDepartmentGroups(orgMap, depts);
                    IsDepartmentListEmpty = Departments.Count == 0;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine("LoadDepartmentGroupsAsync: Caught exception: {0}", ex.Message);
            }
            System.Diagnostics.Debug.WriteLine("Stop loading departments");

            _isDepartmanentsLoading = false;
            if (!_isMyCoursesLoading)
                IsLoading = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaClient\ViewModels\MainViewModel.cs
private async void UpdateMyCoursesAsync(PinnedCourses pinnedCourses)
        {
            _isMyCoursesLoading = true;

            try
            {
                News = new NewsGroupCollection(DateTime.Today.AddMonths(-3));
                var courses = await pinnedCourses.GetCodesAsync();
                await MyCourses.LoadMyCoursesAsync(pinnedCourses);

                List<CourseEvent> events = new List<CourseEvent>();

                /* For each course task to get list of news/events */
                var newsTasks = new List<Task<List<CourseNewsViewModel>>>();
                var eventTasks = new List<Task<List<CourseEvent>>>();

                foreach (var courseId in courses)
                {
                    newsTasks.Add(Task.Run(async () =>
                        {
                            var courseTask = NoppaAPI.GetCourse(courseId);
                            var newsTask = NoppaAPI.GetCourseNews(courseId);
                            await Task.WhenAll(newsTask, courseTask);

                            var newsList = new List<CourseNewsViewModel>();
                            var result = newsTask.Result;
                            var course = courseTask.Result;
                            for (int i = 0; i < result.Count; i++)
                            {
                                newsList.Add(new CourseNewsViewModel { News = result[i], Course = course, Index = i });
                            }
                            return newsList;
                        }));

                    eventTasks.Add(NoppaAPI.GetCourseEvents(courseId));
                }

                while (newsTasks.Count > 0 || eventTasks.Count > 0)
                {
                    if (newsTasks.Count > 0)
                    {
                        var newsTask = await Task.WhenAny(newsTasks);
                        newsTasks.Remove(newsTask);
                        var newsItems = newsTask.Result;

                        if (newsItems != null)
                            /* Each add now also sorts the list and updates UI. If there are LOTS of
                             * news, this will hurt performance. However, at this point I favor immediate
                             * response so well see how this goes. */
                            News.AddNewItems(newsItems);
                    }

                    if (eventTasks.Count > 0)
                    {
                        var eventTask = await Task.WhenAny(eventTasks);
                        eventTasks.Remove(eventTask);
                        var eventItems = await eventTask;

                        if (eventItems != null)
                            events.AddRange(eventItems);
                    }
                }

                Events = EventGroup.CreateEventGroups(events);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine("LoadNewsAndEventsAsync: Caught exception: {0}", ex.Message);
            }

            _isMyCoursesLoading = false;
            if (!_isDepartmanentsLoading)
                IsLoading = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaClient\ViewModels\NewsViewModel.cs
public override async Task<CourseContentViewModel> LoadDataAsync(string id)
        {
            List<CourseNews> news = await NoppaAPI.GetCourseNews(id);
            if (news != null)
            {
                foreach (var n in news)
                {
                    _news.Add(n);
                }

                // In case the current index was set and read before the items were loaded
                if (_currentNewsIndex >= 0 && _currentNewsIndex < _news.Count)
                {
                    NotifyPropertyChanged("CurrentNewsIndex");
                }
            }

            return this;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaClient\ViewModels\OverviewViewModel.cs
public override async Task<CourseContentViewModel> LoadDataAsync(string id)
        {
            Course course = await NoppaAPI.GetCourse(id);
            CourseOverview overview = await NoppaAPI.GetCourseOverview(id);

            if (overview != null)
            {
                AddContent(AppResources.CourseNameTitle, course.LongName);
                AddContent(AppResources.CourseCreditsTitle, overview.Credits);
                AddContent(AppResources.CourseStatusTitle, overview.Status);
                AddContent(AppResources.CourseLevelTitle, overview.Level);
                AddContent(AppResources.CourseTeachingPeriodTitle, overview.TeachingPeriod);
                AddContent(AppResources.CourseWorkloadTitle, overview.Workload);
                AddContent(AppResources.CourseLearningOutcomesTitle, overview.LearningOutcomes);
                AddContent(AppResources.CourseContentTitle, overview.Content);
                AddContent(AppResources.CourseAssessmentTitle, overview.Assessment);
                AddContent(AppResources.CourseStudyMaterialTitle, overview.StudyMaterial);
                AddContent(AppResources.CourseSubstitutesTitle, overview.substitutes);
                AddContent(AppResources.CourseCEFRLevelTitle, overview.CefrLevel);
                AddContent(AppResources.CoursePrerequisitesTitle, overview.Prerequisites);
                AddContent(AppResources.CourseGradingScaleTitle, overview.GradingScale);
                AddContent(AppResources.CourseRegistrationTitle, overview.Registration);
                AddContent(AppResources.CourseInstructionLanguageTitle, overview.InstructionLanguage);
                AddContent(AppResources.CourseStaffTitle, overview.Staff);
                AddContent(AppResources.CourseOfficeHoursTitle, overview.OfficeHours);
                AddContent(AppResources.CourseDetailsTitle, overview.Details);

                OodiUrl = overview.OodiUrl;
            }

            return this;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaClient\ViewModels\ResultsViewModel.cs
public override async Task<CourseContentViewModel> LoadDataAsync(string id)
        {
            List<CourseResult> results = await NoppaAPI.GetCourseResults(id);
            if (results != null)
            {
                results.Sort((a, b) => b.Date.CompareTo(a.Date));
                Results = new ObservableCollection<CourseResult>(results);
            }
            IsEmpty = results == null || results.Count == 0;

            return this;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaClient\View\OpenBrowserCommand.cs
public async void Execute(object parameter)
        {
            Uri uri = null;

            if (parameter is string)
            {
                uri = new Uri((string)parameter);
            }
            else if (parameter is Uri)
            {
                uri = (Uri)parameter;
            }

            if (uri != null)
            {
                await Launcher.LaunchUriAsync(uri);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaLib\NoppaAPI.cs
public static async Task<List<Organization>> GetAllOrganizations()
        {
            return await NoppaImpl.GetInstance().GetObject<List<Organization>>(Cache.PolicyLevel.Long, "/organizations?key={0}", APIConfigHolder.Key);
           
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaLib\NoppaAPI.cs
public static async Task<Organization> GetOrganization(string organization_id)
        {
            return await NoppaImpl.GetInstance().GetObject<Organization>(Cache.PolicyLevel.Long, "/organizations/{0}?key={1}", organization_id, APIConfigHolder.Key);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaLib\NoppaAPI.cs
public static async Task<List<Department>> GetDepartments(string organization_id)
        {
            return await NoppaImpl.GetInstance().GetObject<List<Department>>(Cache.PolicyLevel.Long, "/departments?key={0}&org_id={1}", APIConfigHolder.Key, organization_id);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaLib\NoppaAPI.cs
public static async Task<List<Department>> GetDepartments()
        {
            return await NoppaImpl.GetInstance().GetObject<List<Department>>(Cache.PolicyLevel.Long, "/departments?key={0}", APIConfigHolder.Key);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaLib\NoppaAPI.cs
public static async Task<Department> GetDepartment(string department_id)
        {
            return await NoppaImpl.GetInstance().GetObject<Department>(Cache.PolicyLevel.Long, "/departments/{0}?key={1}", department_id, APIConfigHolder.Key);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaLib\NoppaAPI.cs
public static async Task<List<Course>> GetCourses(string search_pattern, string org_id = "", string dept_id = "", bool use_cached_results = true)
        {
            return await NoppaImpl.GetInstance().GetObject<List<Course>>(
                use_cached_results ? Cache.PolicyLevel.Short : Cache.PolicyLevel.Reload,
                "/courses?key={0}{1}{2}{3}", APIConfigHolder.Key,
                search_pattern != "" ? "&search=" + HttpUtility.UrlEncode(search_pattern) : "",
                org_id != "" ? "&org_id=" + org_id : "",
                dept_id != "" ? "&dept_id=" + dept_id : ""
                );
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaLib\NoppaAPI.cs
public static async Task<Course> GetCourse(string course_id)
        {
            return await NoppaImpl.GetInstance().GetObject<Course>(Cache.PolicyLevel.Long, "/courses/{0}?key={1}", course_id, APIConfigHolder.Key);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaLib\NoppaAPI.cs
public static async Task<CourseOverview> GetCourseOverview(string course_id)
        {
            return await NoppaImpl.GetInstance().GetObject<CourseOverview>(Cache.PolicyLevel.Short, "/courses/{0}/overview?key={1}", course_id, APIConfigHolder.Key);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaLib\NoppaAPI.cs
public static async Task<CourseAdditionalPage> GetCourseAdditionalPages(string course_id)
        {
            return await NoppaImpl.GetInstance().GetObject<CourseAdditionalPage>(Cache.PolicyLevel.Short, "/courses/{0}/pages?key={1}", course_id, APIConfigHolder.Key);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaLib\NoppaAPI.cs
public static async Task<List<CourseNews>> GetCourseNews(string course_id)
        {
            return await NoppaImpl.GetInstance().GetObject<List<CourseNews>>(Cache.PolicyLevel.BypassCache, "/courses/{0}/news?key={1}", course_id, APIConfigHolder.Key);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaLib\NoppaAPI.cs
public static async Task<List<CourseResult>> GetCourseResults(string course_id)
        {
            return await NoppaImpl.GetInstance().GetObject<List<CourseResult>>(Cache.PolicyLevel.Short, "/courses/{0}/results?key={1}", course_id, APIConfigHolder.Key);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaLib\NoppaAPI.cs
public static async Task<List<CourseLecture>> GetCourseLectures(string course_id)
        {
            return await NoppaImpl.GetInstance().GetObject<List<CourseLecture>>(Cache.PolicyLevel.Short, "/courses/{0}/lectures?key={1}", course_id, APIConfigHolder.Key);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaLib\NoppaAPI.cs
public static async Task<List<CourseExercise>> GetCourseExercises(string course_id)
        {
            return await NoppaImpl.GetInstance().GetObject<List<CourseExercise>>(Cache.PolicyLevel.Short, "/courses/{0}/exercises?key={1}", course_id, APIConfigHolder.Key);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaLib\NoppaAPI.cs
public static async Task<List<CourseAssignment>> GetCourseAssignments(string course_id)
        {
            return await NoppaImpl.GetInstance().GetObject<List<CourseAssignment>>(Cache.PolicyLevel.Short, "/courses/{0}/assignments?key={1}", course_id, APIConfigHolder.Key);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaLib\NoppaAPI.cs
public static async Task<List<CourseEvent>> GetCourseEvents(string course_id)
        {
            return await NoppaImpl.GetInstance().GetObject<List<CourseEvent>>(Cache.PolicyLevel.BypassCache, "/courses/{0}/events?key={1}", course_id, APIConfigHolder.Key);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaLib\NoppaAPI.cs
public static async Task<List<CourseMaterial>> GetCourseMaterial(string course_id)
        {
            return await NoppaImpl.GetInstance().GetObject<List<CourseMaterial>>(Cache.PolicyLevel.Short, "/courses/{0}/material?key={1}", course_id, APIConfigHolder.Key);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaLib\NoppaAPI.cs
public static async Task<List<CourseExerciseMaterial>> GetCourseExerciseMaterial(string course_id)
        {
            return await NoppaImpl.GetInstance().GetObject<List<CourseExerciseMaterial>>(Cache.PolicyLevel.Short, "/courses/{0}/exercise_material?key={1}", course_id, APIConfigHolder.Key);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaLib\NoppaAPI.cs
public static async Task<List<CourseText>> GetCourseAdditionalTexts(string course_id)
        {
            return await NoppaImpl.GetInstance().GetObject<List<CourseText>>(Cache.PolicyLevel.Short, "/courses/{0}/texts?key={1}", course_id, APIConfigHolder.Key);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaLib\NoppaImpl.cs
public async Task<T> GetObject<T>(Cache.PolicyLevel policy, string format, params object[] args) where T : class
        {
            HttpWebResponse response;

            string query = APIConfigHolder.Url + String.Format(format, args);

            // Check to see if the cache contains the requested query.
            if (Cache.Exists(query) && policy != Cache.PolicyLevel.Reload)
            {
                return JsonConvert.DeserializeObject<T>(Cache.Get(query));
            }

            var timeoutCancel = new CancellationTokenSource();

            try
            {
                Task<HttpWebResponse> responseTask = CallAPIAsync(query);

                /* Handle the timeout */
                var timeoutTask = Task.Delay(_timeout, timeoutCancel.Token);
                var completeTask = await Task.WhenAny(responseTask, timeoutTask);
                if (completeTask == responseTask)
                {
                    timeoutCancel.Cancel();
                    response = await responseTask.ConfigureAwait(false);
                }
                else
                {
                    /* Timeout */
                    await timeoutTask;
                    System.Diagnostics.Debug.WriteLine("NoppaApiClient: Timed out ({0} ms)", _timeout);
                    return null;
                }
            }
            catch (WebException webExc)
            {
                /* Caught exception */
                System.Diagnostics.Debug.WriteLine("NoppaApiClient: Caught exception: {0}", webExc.Message);
                timeoutCancel.Cancel();
                return null;
            }

            using (var sr = new StreamReader(response.GetResponseStream()))
            {
                string json = await sr.ReadToEndAsync();
                Cache.Add(query, json, policy);
                return JsonConvert.DeserializeObject<T>(json);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaLib\PinnedCourses.cs
public async Task AddAsync(string code)
        {
            var codes = await GetCodesAsync();
            if (!codes.Contains(code))
            {
                codes.Add(code);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaLib\PinnedCourses.cs
public async Task RemoveAsync(string code)
        {
            var codes = await GetCodesAsync();
            codes.Remove(code);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaLib\PinnedCourses.cs
public async Task<bool> ContainsAsync(string code)
        {
            var codes = await GetCodesAsync();
            return codes.Contains(code);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\banjoh+noppawp8\banjoh-noppawp8-6f9b64b\NoppaLib\PinnedCourses.cs
public async Task<ObservableCollection<string>> GetCodesAsync()
        {
            await _codesLock.WaitAsync();
            if (_codes == null)
            {
                _codes = new ObservableCollection<string>();
                await Task.Run(() =>
                    {
                        try
                        {
                            using (var fileStorage = IsolatedStorageFile.GetUserStoreForApplication())
                            {
                                if (fileStorage.FileExists(PinnedCourses.CourseFile))
                                {
                                    using (var stream = new IsolatedStorageFileStream(PinnedCourses.CourseFile, FileMode.Open, FileAccess.Read, fileStorage))
                                    {
                                        Deserialize(stream);
                                    }
                                }
                            }
                        }
                        catch (Exception e)
                        {
                            System.Diagnostics.Debug.WriteLine("GetCodesAsync: Error accessing the course list file in the IsolatedStorage.\n{0}", e.StackTrace);
                        }
                    });  
              /*
#if DEBUG
                if (_codes.Count == 0)
                {
                    // Add a few courses
                    _codes.Add("t-106.4300");
                    _codes.Add("t-110.5130");
                    _codes.Add("mat-1.2600");
                    _codes.Add("as-0.1103");
                    _codes.Add("t-106.5150");
                }
#endif*/
            }
            _codesLock.Release();
            return _codes;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\baseball\Baseball\Repositories\GameRepository.cs
public async Task<List<Game>> GetGames(DateTime? Date = null)
        {
            // ???? ??
            if (Date == null)
                Date = DateTime.Today;

            List<Game> Games = new List<Game>(); // ??? Game ???
            HttpClient Client = new HttpClient();

            // URI? ??? ??
            Uri SiteUri = new Uri(
                    ParseInformation.GameSite
                        .Replace("{year}", ((DateTime)Date).ToString("yyyy"))
                        .Replace("{month}", ((DateTime)Date).ToString("MM"))
                        .Replace("{day}", ((DateTime)Date).ToString("dd"))
            );

            // ???? ??? ????
            string RawData = await Client.GetStringAsync(SiteUri);

            // ?? ??? ?? ?? div?? ?? ?? ??
            foreach (Match GameMatch in ParseInformation.GameContainer.Matches(RawData))
            {
                // ?? ??? ?? ?? string
                string GameInfo = GameMatch.Value;

                // ? ?? ? ?? ??
                MatchCollection TeamNameMatches     = ParseInformation.GameTeam.Matches(GameInfo);
                MatchCollection TeamScoreMatches    = ParseInformation.GameTeamScore.Matches(GameInfo);

                // ?? ?? ?? ? ?? ??
                string GamePlaceTimeInfo = ParseInformation.GamePlaceTime.Match(GameInfo).Value;
                string StartTime = ParseInformation.Span.Match(GamePlaceTimeInfo).Value;
                string Stadium = GamePlaceTimeInfo.Split(' ')[0];

                // ?? ?? ??
                string Status = ParseInformation.GameStatus.Match(GameInfo).Value;

                // ??? ?? ??
                // 1?? ? : ????? pass
                // 2?? ? : ?? ??? ???
                // 3?? ? : ???? ??? ???
                string[] HomeTeamInningScore = new string[16];
                string[] AwayTeamInningScore = new string[16];

                // Row 3?? ????
                MatchCollection InningScoreRowMatches = ParseInformation.GameTeamInningScoreTableRow.Matches(GameInfo);

                // 2?? Row? ??? ? ??? ??????
                int Index = 0; // MatchCollection? IList ?? X -> IndexOf X
                foreach (Match InningScoreDataMatch in ParseInformation.GameTeamInningScoreTableData.Matches(InningScoreRowMatches[1].Value))
                {
                    AwayTeamInningScore[Index] = InningScoreDataMatch.Value;
                    Index++;
                }

                // 3?? Row? ??? ? ??? ??????
                Index = 0;
                foreach (Match InningScoreDataMatch in ParseInformation.GameTeamInningScoreTableData.Matches(InningScoreRowMatches[2].Value))
                {
                    HomeTeamInningScore[Index] = InningScoreDataMatch.Value;
                    Index++;
                }

                // ?? ?? ??
                string TeamWinPitcherInfo = ParseInformation.GameTeamWinPitcherContainer.Match(GameInfo).Value;
                bool? IsGameFinished = !String.IsNullOrEmpty(TeamWinPitcherInfo); // ??? ??? ? ??? ??(???? null? ???, ??? ???)

                string WinPitcher = "?? ??", LosePitcher = "?? ??", SavePitcher = "?? ??"; // ?, ?, ? ??
                string HomeTeamFirstPitcher = "?? ??", AwayTeamFirstPitcher = "?? ??"; // ? ? ????

                // ??? ???? (?/?/? ??? ???)
                // ???? ???? ? Div?? ???? Match?? ?? ?? ????? GameTeamWinPitcher Match ??? ?? ??
                if ((bool)IsGameFinished && ParseInformation.GameTeamWinPitcher.IsMatch(TeamWinPitcherInfo))
                {
                    MatchCollection PitcherMatches = ParseInformation.GameTeamWinPitcher.Matches(TeamWinPitcherInfo);

                    WinPitcher = PitcherMatches[0].Value;
                    LosePitcher = PitcherMatches[1].Value;

                    // ??? ??? ?? ?? ????
                    try
                    {
                        SavePitcher = PitcherMatches[2].Value;
                    }
                    catch
                    {
                    }
                }
                // ??? ?? ??? ???? ???? ??? ???
                else if (ParseInformation.GameTeamFirstPitcher.IsMatch(GameInfo))
                {
                    MatchCollection FirstPitcherInfo = ParseInformation.GameTeamFirstPitcher.Matches(GameInfo);

                    HomeTeamFirstPitcher = FirstPitcherInfo[1].Value;
                    AwayTeamFirstPitcher = FirstPitcherInfo[0].Value;
                }

                // ??? Games? ??
                Games.Add(new Game
                {
                    HomeTeam = TeamNameMatches[1].Value,
                    AwayTeam = TeamNameMatches[0].Value,
                    HomeTeamScore = TeamScoreMatches[1].Value.Put0IfEmpty(),
                    AwayTeamScore = TeamScoreMatches[0].Value.Put0IfEmpty(),
                    HomeTeamInningScore = HomeTeamInningScore,
                    AwayTeamInningScore = AwayTeamInningScore,
                    Status = Status,
                    IsFinished = IsGameFinished,
                    StartTime = StartTime,
                    Stadium = Stadium,
                    HomeTeamFirstPitcher = HomeTeamFirstPitcher,
                    AwayTeamFirstPitcher = AwayTeamFirstPitcher,
                    WinPitcher = WinPitcher,
                    LosePitcher = LosePitcher,
                    SavePitcher = SavePitcher
                });
            }

            return Games;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\brentedwards+Charmed\brentedwards-Charmed-25291e6\Charmed.WP8\..\Charmed.Win8\Storage.cs
public async Task<T> LoadAsync<T>(string fileName)
        {
            var file = await ApplicationData.Current.LocalFolder.CreateFileAsync(fileName, CreationCollisionOption.OpenIfExists);

            string serializedData = null;
            using (var stream = await file.OpenStreamForReadAsync())
            {
                using (var streamReader = new StreamReader(stream))
                {
                    serializedData = await streamReader.ReadToEndAsync();
                }
            }

            T data = default(T);
            if (!string.IsNullOrWhiteSpace(serializedData))
            {
                data = this.serializer.Deserialize<T>(serializedData);
            }

            return data;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\brentedwards+Charmed\brentedwards-Charmed-25291e6\Charmed.WP8\..\Charmed.Win8\Storage.cs
public async Task SaveAsync(string fileName, object data)
        {
            var file = await ApplicationData.Current.LocalFolder.CreateFileAsync(fileName, CreationCollisionOption.ReplaceExisting);

            var serializedData = this.serializer.Serialize(data);

            using (var stream = await file.OpenStreamForWriteAsync())
            {
                byte[] fileBytes = Encoding.UTF8.GetBytes(serializedData.ToCharArray());
                await stream.WriteAsync(fileBytes, 0, fileBytes.Length);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\brentedwards+Charmed\brentedwards-Charmed-25291e6\Charmed.Sample.WP8\..\Charmed.Sample.Win8\Services\RssFeedService.cs
public async Task<List<FeedData>> GetFeedsAsync()
        {
            List<string> feeds = null;
            string[] feedData;
            if (settings.TryGetValue<string[]>(Constants.FeedsKey, out feedData))
            {
                feeds = new List<string>(feedData);
            }
            else
            {
                throw new ArgumentException("There are no feeds");
            }

            var feedsData = new List<FeedData>();

            foreach (var feed in feeds)
            {
                var data = await GetFeedAsync(feed);
                if (data != null)
                {
                    feedsData.Add(data);
                }
            }

            return feedsData;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\brentedwards+Charmed\brentedwards-Charmed-25291e6\Charmed.Sample.WP8\..\Charmed.Sample.Win8\ViewModels\FeedItemViewModel.cs
protected async Task SavePinnedFeedItem()
        {
            var pinnedFeedItems = await this.storage.LoadAsync<List<FeedItem>>(Constants.PinnedFeedItemsKey);

            if (pinnedFeedItems == null)
            {
                pinnedFeedItems = new List<FeedItem>();
            }

            pinnedFeedItems.Add(feedItem);
            await this.storage.SaveAsync(Constants.PinnedFeedItemsKey, pinnedFeedItems);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\brentedwards+Charmed\brentedwards-Charmed-25291e6\Charmed.Sample.WP8\..\Charmed.Sample.Win8\ViewModels\FeedItemViewModel.cs
protected async Task RemovePinnedFeedItem()
        {
            var pinnedFeedItems = await this.storage.LoadAsync<List<FeedItem>>(Constants.PinnedFeedItemsKey);

            if (pinnedFeedItems != null)
            {
                var pinnedFeedItem = pinnedFeedItems.FirstOrDefault(fi => fi.Id == this.FeedItem.Id);
                if (pinnedFeedItem != null)
                {
                    pinnedFeedItems.Remove(pinnedFeedItem);
                }

                await this.storage.SaveAsync(Constants.PinnedFeedItemsKey, pinnedFeedItems);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\brentedwards+Charmed\brentedwards-Charmed-25291e6\Charmed.Sample.WP8\ViewModels\SplashViewModel.cs
public override async void LoadState(int? navigationParameter, Dictionary<string, object> pageState)
        {
            this.navigator.NavigateToViewModel<MainViewModel>();
            this.navigator.RemoveBackEntry();

            if (navigationParameter.HasValue)
            {
                List<FeedItem> pinnedFeedItems = await storage.LoadAsync<List<FeedItem>>(Constants.PinnedFeedItemsKey);
                if (pinnedFeedItems != null)
                {
                    var pinnedFeedItem = pinnedFeedItems.FirstOrDefault(fi => fi.Id == navigationParameter.Value);
                    if (pinnedFeedItem != null)
                    {
                        this.navigator.NavigateToViewModel<FeedItemViewModel>(pinnedFeedItem);
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\brentedwards+Charmed\brentedwards-Charmed-25291e6\Charmed.Sample.WP8\ViewModels\WP8FeedItemViewModel.cs
public async Task Pin()
        {
            // Pin the feed item, then save it locally to make sure it is still available
            // when they return.
            var tileInfo = new TileInfo(
                this.FormatTileIdUrl(),
                this.FeedItem.Title,
                Constants.AppName,
                new Uri("/Assets/ApplicationIcon.png", UriKind.Relative));

            this.IsFeedItemPinned = await this.secondaryPinner.Pin(tileInfo);

            if (this.IsFeedItemPinned)
            {
                await this.SavePinnedFeedItem();
            }

            UpdateAppBarButtons();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\brentedwards+Charmed\brentedwards-Charmed-25291e6\Charmed.Sample.WP8\ViewModels\WP8FeedItemViewModel.cs
public async Task Unpin()
        {
            // Unpin, then delete the feed item locally.
            var tileInfo = new TileInfo(this.FormatTileIdUrl());
            this.IsFeedItemPinned = !await this.secondaryPinner.Unpin(tileInfo);

            if (!this.IsFeedItemPinned)
            {
                await this.RemovePinnedFeedItem();
            }

            UpdateAppBarButtons();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\brentedwards+Charmed\brentedwards-Charmed-25291e6\Charmed.WP8\..\Charmed.Win8\Storage.cs
public async Task<T> LoadAsync<T>(string fileName)
        {
            var file = await ApplicationData.Current.LocalFolder.CreateFileAsync(fileName, CreationCollisionOption.OpenIfExists);

            string serializedData = null;
            using (var stream = await file.OpenStreamForReadAsync())
            {
                using (var streamReader = new StreamReader(stream))
                {
                    serializedData = await streamReader.ReadToEndAsync();
                }
            }

            T data = default(T);
            if (!string.IsNullOrWhiteSpace(serializedData))
            {
                data = this.serializer.Deserialize<T>(serializedData);
            }

            return data;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\brentedwards+Charmed\brentedwards-Charmed-25291e6\Charmed.WP8\..\Charmed.Win8\Storage.cs
public async Task SaveAsync(string fileName, object data)
        {
            var file = await ApplicationData.Current.LocalFolder.CreateFileAsync(fileName, CreationCollisionOption.ReplaceExisting);

            var serializedData = this.serializer.Serialize(data);

            using (var stream = await file.OpenStreamForWriteAsync())
            {
                byte[] fileBytes = Encoding.UTF8.GetBytes(serializedData.ToCharArray());
                await stream.WriteAsync(fileBytes, 0, fileBytes.Length);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\bugsense+BugSense-WP8\bugsense-BugSense-WP8-beabf83\BugSense-WP8\..\Shared\Internal\Browsers.cs
public async static void Goto(string URI)
        {
#if (WINDOWS_PHONE || NETFX_CORE)
            try
            {
                var success = await Launcher.LaunchUriAsync(new Uri(URI, UriKind.Absolute));
                if (success)
                {
                    Helpers.Log("Browser successfully launched");
                }
                else
                {
                    Helpers.Log("Browser launched failed");
                }
            }
            catch (Exception)
            {
                Helpers.Log("Browser launched failed");
            }
#else
            await Task.Run (() => {
                string sUrl = URI;
                try
                {
                    Process.Start(sUrl);
                }
                catch(Exception exc1)
                {
                    // System.ComponentModel.Win32Exception is a known exception that occurs
                    // when Firefox is default browser.  
                    // It actually opens the browser but STILL throws this exception so we can just ignore it.
                    // If not this exception, then attempt to open the URL in IE instead.
                    if (exc1.GetType().ToString() != "System.ComponentModel.Win32Exception") {
                        // sometimes throws exception so we have to just ignore
                        // this is a common .NET bug that no one online really has a great reason for
                        // so now we just need to try to open the URL using IE if we can.
                        try
                        {
                            ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo("IExplore.exe", sUrl);
                            Process.Start(startInfo);
                            startInfo = null;
                        }
                        catch (Exception)
                        {
                            // still nothing we can do so just show the error to the user here.
                        }
                    }
                }
            });
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\bugsense+BugSense-WP8\bugsense-BugSense-WP8-beabf83\BugSense-WP8\..\Shared\Internal\Files.cs
public async static Task<bool> Exists(string fpathname)
        {
#if WINDOWS_PHONE
            return await Task.Run(() =>
                {
                    using (var storage = IsolatedStorageFile.GetUserStoreForApplication())
                    {
                        try
                        {
                            if (!storage.FileExists(fpathname))
                                return false;
                            return true;
                        }
                        catch (Exception)
                        {
                            return false;
                        }
                    }
                });
#elif NETFX_CORE
            try
            {
                var file = await ApplicationData.Current.LocalFolder.GetFileAsync(fpathname);
                if (file != null)
                    return true;
            }
            catch (Exception)
            {
            }

            return false;
#else
            return await Task.Run (() => { return File.Exists(fpathname); });
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\bugsense+BugSense-WP8\bugsense-BugSense-WP8-beabf83\BugSense-WP8\..\Shared\Internal\Files.cs
public async static Task<List<string>> GetDirFilenames(string path, string prefix)
        {
#if WINDOWS_PHONE
            return await Task.Run(() =>
                {
                    List<string> result = new List<string>();

                    using (var storage = IsolatedStorageFile.GetUserStoreForApplication())
                    {
                        if (storage.DirectoryExists(path))
                        {
                            try
                            {
                                string[] files = storage.GetFileNames(path + "\\" + prefix + "*");
                                var filesList = new List<string>(files);
                                if (filesList != null)
                                {
                                    filesList.Sort(delegate(string a, string b)
                                    {
                                        int xdiff = a.CompareTo(b);
                                        return -xdiff;
                                    });
                                    foreach (var fname in filesList)
                                    {
                                        if (fname.StartsWith(prefix))
                                            result.Add(fname);
                                    }
                                }
                                return result;
                            }
                            catch (Exception)
                            {
                                return new List<string>();
                            }
                        }
                        return new List<string>();
                    }
                });
#elif NETFX_CORE
            List<string> result = new List<string>();

            try
            {
                StorageFolder folder = await ApplicationData.Current.LocalFolder.GetFolderAsync(path);
                // no exception means file exists
                var list = await folder.GetFilesAsync();
                if (list != null)
                {
                    var list2 = new List<StorageFile>(list);
                    list2.Sort(delegate(StorageFile a, StorageFile b)
                    {
                        int xdiff = a.Name.CompareTo(b.Name);
                        return -xdiff;
                    });
                    foreach (var fname in list2)
                    {
                        if (fname.Name.StartsWith(prefix))
                            result.Add(fname.Name);
                    }
                }

                return result;
            }
            catch (Exception)
            {
                // find out through exception 
            }

            return new List<string>();
#else
            return await Task.Run (() => {
                List<string> result = new List<string>();
                
                try
                {
                    string[] filePaths = Directory.GetFiles(path);
                    // no exception means file exists
                    if (filePaths != null)
                    {
                        var list2 = new List<string>(filePaths);
                        list2.Sort(delegate(string a, string b) {
                            int xdiff = a.CompareTo(b);
                            return -xdiff;
                        });
                        foreach (var fname in list2)
                        {
                            string tmp = Path.GetFileName(fname);
                            if (tmp.StartsWith(prefix))
                                result.Add(tmp);
                        }
                    }
                    
                    return result;
                }
                catch (Exception)
                {
                    // find out through exception 
                }
                
                return new List<string>();
            });
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\bugsense+BugSense-WP8\bugsense-BugSense-WP8-beabf83\BugSense-WP8\..\Shared\Internal\Files.cs
public async static Task<bool> CreatWriteTo(string path, string fname, string str)
        {
            var fpathname = Path.Combine(path, fname);

#if WINDOWS_PHONE
            return await Task.Run(() =>
                {
                    using (var storage = IsolatedStorageFile.GetUserStoreForApplication())
                    {
                        try
                        {
                            if (!storage.DirectoryExists(path))
                                storage.CreateDirectory(path);
                            if (storage.DirectoryExists(path))
                            {
                                using (var fileStream = storage.OpenFile(fpathname, FileMode.OpenOrCreate))
                                {
                                    using (StreamWriter sr = new StreamWriter(fileStream))
                                    {
                                        sr.Write(str);

                                        return true;
                                    }
                                }
                            }
                        }
                        catch (Exception)
                        {
                            return false;
                        }
                    }

                    return false;
                });
#elif NETFX_CORE
            bool result = false;
            StorageFile file = null;

            try
            {
                var folder = await ApplicationData.Current.LocalFolder.CreateFolderAsync(
                    path, CreationCollisionOption.OpenIfExists);
                file = await folder.CreateFileAsync(fname, CreationCollisionOption.ReplaceExisting);
            }
            catch (Exception)
            {
                return false;
            }

            using (var fs = await file.OpenAsync(FileAccessMode.ReadWrite))
            {
                using (var outStream = fs.GetOutputStreamAt(0))
                {
                    using (var writer = new DataWriter(outStream))
                    {
                        writer.WriteString(str);
                        await writer.StoreAsync();
                        writer.DetachStream();
                    }
                    result = await outStream.FlushAsync();
                }
            }

            return result;
#else
            return await Task.Run (() => {
                try
                {
                    if(!Directory.Exists(path))
                        Directory.CreateDirectory(path);
                    File.WriteAllText(fpathname, str);
                    return true;
                }
                catch (Exception)
                {
                    return false;
                }
            });
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\bugsense+BugSense-WP8\bugsense-BugSense-WP8-beabf83\BugSense-WP8\..\Shared\Internal\Files.cs
public async static Task<Tuple<string, bool>> ReadFrom(string fpathname)
        {
#if WINDOWS_PHONE
            return await Task.Run(() =>
                {
                    using (var storage = IsolatedStorageFile.GetUserStoreForApplication())
                    {
                        if (!storage.FileExists(fpathname))
                            return new Tuple<string, bool>("", false);
                        using (var fileStream = storage.OpenFile(fpathname, FileMode.Open))
                        {
                            using (StreamReader sr = new StreamReader(fileStream))
                            {
                                string data = sr.ReadToEnd();

                                return new Tuple<string, bool>(data, true);
                            }
                        }
                    }
                });
#elif NETFX_CORE
            Tuple<string, bool> result = new Tuple<string, bool>("", false);
            StorageFile file = null;

            try
            {
                file = await ApplicationData.Current.LocalFolder.GetFileAsync(fpathname);
                if (file == null)
                    return result;
            }
            catch (Exception)
            {
                return result;
            }

            using (var fs = await file.OpenAsync(FileAccessMode.Read))
            {
                using (var inStream = fs.GetInputStreamAt(0))
                {
                    using (var reader = new DataReader(inStream))
                    {
                        await reader.LoadAsync((uint)fs.Size);
                        string data = reader.ReadString((uint)fs.Size);
                        reader.DetachStream();

                        result = new Tuple<string, bool>(data, true);
                    }
                }
            }

            return result;
#else
            return await Task.Run (() => {
                try
                {
                    string str = File.ReadAllText(fpathname);
                    return new Tuple<string, bool>(str, true);
                }
                catch (Exception)
                {
                    return new Tuple<string, bool>("", false);
                }
            });
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\bugsense+BugSense-WP8\bugsense-BugSense-WP8-beabf83\BugSense-WP8\..\Shared\Internal\Files.cs
public async static Task<Tuple<string, bool>> ReadFrom(string path, string fname)
        {
            return await ReadFrom(Path.Combine(path, fname));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\bugsense+BugSense-WP8\bugsense-BugSense-WP8-beabf83\BugSense-WP8\..\Shared\Internal\Files.cs
public async static Task Delete(string fpathname)
        {
#if WINDOWS_PHONE
            await Task.Run(() =>
                {
                    using (var storage = IsolatedStorageFile.GetUserStoreForApplication())
                    {
                        try
                        {
                            if (storage.FileExists(fpathname))
                                storage.DeleteFile(fpathname);
                        }
                        catch (Exception)
                        {
                        }
                    }
                });
#elif NETFX_CORE
            var fileName = fpathname;
            try
            {
                var file = await ApplicationData.Current.LocalFolder.GetFileAsync(fileName);
                if (file != null)
                    await file.DeleteAsync();
            }
            catch (Exception)
            {
            }
#else
            await Task.Run (() => {
                try
                {
                    File.Delete(fpathname);
                }
                catch (Exception)
                {
                }
            });
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\bugsense+BugSense-WP8\bugsense-BugSense-WP8-beabf83\BugSense-WP8\..\Shared\Internal\Files.cs
public async static Task Delete(string path, string fname)
        {
            await Delete(Path.Combine(path, fname));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\bugsense+BugSense-WP8\bugsense-BugSense-WP8-beabf83\BugSense-WP8\..\Shared\Tasks\LogError.cs
public async Task<string> Execute()
        {
            if (_request == null)
                return string.Empty;
            string json = GetJson(_request);
            if (!string.IsNullOrEmpty(json))
            {
                string fileName = await SaveToFile(json);
                if (!string.IsNullOrEmpty(fileName))
                    return fileName;
            }
            return string.Empty;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\bugsense+BugSense-WP8\bugsense-BugSense-WP8-beabf83\BugSense-WP8\..\Shared\Tasks\LogError.cs
private async Task<string> SaveToFile(string postData)
        {
            Helpers.Log("LogError 2/2 :: Saving to file");
            string fname = _isFatal ? G.CrashFileName : G.LoggedExceptionFileName;
            string fileName = string.Format(fname, DateTime.UtcNow.ToString("yyyyMMddHHmmss"), Guid.NewGuid());
            bool result = await Files.CreatWriteTo(G.FolderName, fileName, postData);
            Helpers.Log("LogError 2/2 :: Done saving to file: " + result);
            if (result)
                return fileName;

            // Getting in here means the device is about to explode!
            return string.Empty;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\bugsense+BugSense-WP8\bugsense-BugSense-WP8-beabf83\BugSense-WP8\..\Shared\Tasks\LogEvent.cs
public async Task<string> Execute()
        {
            if (_line == null)
                return string.Empty;
            string flat = _line;
            if (!string.IsNullOrEmpty(flat))
            {
                string fileName = await SaveToFile(flat);
                if (!string.IsNullOrEmpty(fileName))
                    return fileName;
            }
            return string.Empty;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\bugsense+BugSense-WP8\bugsense-BugSense-WP8-beabf83\BugSense-WP8\..\Shared\Tasks\LogEvent.cs
private async Task<string> SaveToFile(string postData)
        {
            Helpers.Log("LogEvent :: Saving to file");
            string tmp = _reserved ? G.PingFileName : G.EventFileName;
            string fileName = string.Format(tmp, DateTime.UtcNow.ToString("yyyyMMddHHmmss"), Guid.NewGuid());
            bool result = await Files.CreatWriteTo(G.FolderName, fileName, postData);
            Helpers.Log("LogEvent :: Done saving to file: " + result);
            if (result)
                return fileName;

            // Getting in here means the device is about to explode!
            return string.Empty;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\bugsense+BugSense-WP8\bugsense-BugSense-WP8-beabf83\BugSense-WP8\..\Shared\Tasks\ProcessRequests.cs
public async Task<int> Execute()
        {
            int r = 0;

            try
            {
                var taskList = new List<SendRequest>();
                int counter = 0;

                List<string> list = await Files.GetDirFilenames(G.FolderName, G.CrashFileNamePrefix);
                List<string> list2 = await Files.GetDirFilenames(G.FolderName, G.LoggedExceptionFileNamePrefix);
                List<string> list3 = await Files.GetDirFilenames(G.FolderName, G.PingFileNamePrefix);
                List<string> list4 = await Files.GetDirFilenames(G.FolderName, G.EventFileNamePrefix);

                counter = await ProcessList(taskList, list, G.MaxCrashes, true, _uuid);
                Helpers.Log("ProcessRequests 1/5 :: gotExceptions: " + counter);
                counter = await ProcessList(taskList, list2, G.MaxLoggedExceptions, true, _uuid);
                Helpers.Log("ProcessRequests 2/5 :: gotLoggedExceptions: " + counter);
                counter = await ProcessList(taskList, list3, G.MaxPings, false, _uuid);
                Helpers.Log("ProcessRequests 3/5 :: gotPings: " + counter);
                counter = await ProcessList(taskList, list4, G.MaxEvents, false, _uuid);
                Helpers.Log("ProcessRequests 4/5 :: gotEvents: " + counter);

                Helpers.Log("ProcessRequests 5/5 :: sending: " + taskList.Count);
                if (taskList != null)
                {
                    foreach (SendRequest err in taskList)
                    {
                        //NOTE: r is equal to the _attempted_ executions
                        //  (we don't know if each web request was successful)
                        bool rr = await err.Execute();
                        if (rr)
                            r++;
                    }
                }
            }
            catch (Exception)
            { // Swallow like a fish - Not much that we can do here
            }

            return r;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\bugsense+BugSense-WP8\bugsense-BugSense-WP8-beabf83\BugSense-WP8\..\Shared\Tasks\ProcessRequests.cs
private async static Task<int> ProcessList(List<SendRequest> taskList, List<string> list, int max,
            bool isException, string uuid)
        {
            int counter = 0;

            if (list != null)
            {
                foreach (var fileName in list)
                {
                    if (string.IsNullOrEmpty(fileName))
                        continue;
                    // If there are more messages in the pool we just delete them
                    if (counter < max)
                    {
                        if (isException)
                            taskList.Add(new SendRequest(fileName));
                        else
                            taskList.Add(new SendRequest(WebRequests.GetEventURL(uuid), fileName, false));
                    }
                    else
                        await Files.Delete(G.FolderName, fileName);
                    counter++;
                    //
                }
            }

            return counter;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\bugsense+BugSense-WP8\bugsense-BugSense-WP8-beabf83\BugSense-WP8\..\Shared\Tasks\SendRequest.cs
public async Task<bool> Execute()
        {
            string fname = _fileName;

            if (string.IsNullOrEmpty(fname))
                return false;

            fname = Path.Combine(G.FolderName, _fileName);

            Helpers.Log("SendRequest 1/2 :: Reading File " + _fileName);
            Tuple<string, bool> res = await Files.ReadFrom(fname);
            if (!res.Item2)
            {
                Helpers.Log("SendRequest 1/2 :: Error reading File " + _fileName);
                return false;
            }
            Helpers.Log("SendRequest 1/2 :: Done reading File " + _fileName);

            return ExecuteRequest(_URL, res.Item1, fname);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\bugsense+BugSense-WP8\bugsense-BugSense-WP8-beabf83\BugSense-WP8\..\Shared\Tasks\UUIDFactory.cs
public async static Task<string> Get()
        {
            string uuid = "";

            _lock.WaitOne();
            Tuple<string, bool> res = await Files.ReadFrom(Path.Combine(G.FolderName, G.UUIDFileName));
            _lock.Release();
            if (res.Item2)
            {
                Helpers.Log("UUIDFactory :: UUID file read");
                uuid = res.Item1;
            } else
                Helpers.Log("UUIDFactory :: UUID file not found");
            if (uuid.Length != G.UuidLen)
            {
                Helpers.Log("UUIDFactory :: generating UUID");
                uuid = EntropyUUID.UUID.GetNew();
                bool wrote = await Files.CreatWriteTo(G.FolderName, G.UUIDFileName, uuid);
                Helpers.Log("UUIDFactory :: trying to write UUID to file: " + wrote);
            }
            _lock2.WaitOne();
            G.UUID = uuid;
            _lock2.Release();
            Helpers.Log("UUIDFactory :: UUID is " + uuid);

            return uuid;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\Services\Cache\CachingRestClient.cs
public async Task<T> RequestAsync<T>(IRestRequest request) where T : class, new()
        {
            var key = BuildKey(_restClient, request);

            if (request.Method == Method.GET)
            {
                // Prefer fresh data
                if (_network.IsAvailable)
                    return await RequestAndCache<T>(request, key);
                
                return Cached<T>(key);
            }
            
            return await _requestClient.RequestAsync<T>(request);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\Services\Cache\CachingRestClient.cs
private async Task<T> RequestAndCache<T>(IRestRequest request, string key) where T : class, new()
        {
            var data = await _requestClient.RequestAsync<T>(request);
            if (data != null)
            {
                _cache.Set(key, new Strilanc.Value.May<T>(data));
                {
                    return data;
                }
            }
            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\Services\Cache\CachingRestClient.cs
private async Task<IEnumerable<T>> RequestAndCacheList<T>(IRestRequest request, string key)
        {
            var data = await _requestClient.RequestListAsync<T>(request);
            if (data != null)
            {
                _cache.Set(key, new Strilanc.Value.May<IEnumerable<T>>(data));
                {
                    return data;
                }
            }
            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\Services\Cache\CachingRestClient.cs
public async Task<IEnumerable<T>> RequestListAsync<T>(IRestRequest request)
        {
            var key = BuildKey(_restClient, request);

            if (request.Method == Method.GET)
            {
                // Prefer fresh data
                if (_network.IsAvailable)
                    return await RequestAndCacheList<T>(request, key);

                return Cached<IEnumerable<T>>(key);
            }

            return await _requestClient.RequestListAsync<T>(request);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\Services\Cache\ErrorHandlingRestClient.cs
public async Task<IRestResponse> RequestAsync(IRestRequest request)
        {
            try
            {
                return await _client.RequestAsync(request);
            }
            catch (TrelloException ex)
            {
                return TrelloError(new RestResponse(), ex);
            }
            catch (Exception ex)
            {
                BugSenseHandler.Instance.LogException(ex, BuildKvp(request), "api");
                return NoResults(new RestResponse());
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\Services\Cache\ErrorHandlingRestClient.cs
public async Task<T> RequestAsync<T>(IRestRequest request) where T : class, new()
        {
            try
            {
                return await _client.RequestAsync<T>(request);
            }
            catch (TrelloException ex)
            {
                BugSenseHandler.Instance.LogException(ex, BuildKvp(request), "api");
                return TrelloError(default(T), ex);
            }
            catch (Exception ex)
            {
                BugSenseHandler.Instance.LogException(ex, BuildKvp(request), "api");
                return default(T);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\Services\Cache\ErrorHandlingRestClient.cs
public async Task<IEnumerable<T>> RequestListAsync<T>(IRestRequest request)
        {
            try
            {
                var value = await _client.RequestListAsync<T>(request);
                return value ?? NoResults(Enumerable.Empty<T>());
            }
            catch (TrelloException ex)
            {
                BugSenseHandler.Instance.LogException(ex, BuildKvp(request), "api");
                return TrelloError(Enumerable.Empty<T>(), ex);
            }
            catch (Exception ex)
            {
                BugSenseHandler.Instance.LogException(ex, BuildKvp(request), "api");
                return NoResults(Enumerable.Empty<T>());
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\Services\Cache\ErrorHandlingRestClient.cs
public async Task<Uri> GetAuthorizationUri(string applicationName, Scope scope, Expiration expiration, Uri callbackUri = null)
        {
            try
            {
                return await _client.GetAuthorizationUri(applicationName, scope, expiration, callbackUri);
            }
            catch (Exception ex)
            {
                BugSenseHandler.Instance.LogException(ex, "resource", "auth-uri", "api");
                return ApiError<Uri>();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\Services\Cache\ErrorHandlingRestClient.cs
public async Task<OAuthToken> Verify(string verifier)
        {
            try
            {
                return await _client.Verify(verifier);
            }
            catch (Exception ex)
            {
                BugSenseHandler.Instance.LogException(ex, "resource", "verify", "api");
                return ApiError<OAuthToken>();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\Services\Cache\ProgressAwareRestClient.cs
public async Task<IRestResponse> RequestAsync(IRestRequest request)
        {
            using (new ProgressScope(_progress, GetMessageFor(request)))
            {
                return await _client.RequestAsync(request);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\Services\Cache\ProgressAwareRestClient.cs
public async Task<T> RequestAsync<T>(IRestRequest request) where T : class, new()
        {
            using (new ProgressScope(_progress, GetMessageFor(request)))
            {
                return await _client.RequestAsync<T>(request);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\Services\Cache\ProgressAwareRestClient.cs
public async Task<IEnumerable<T>> RequestListAsync<T>(IRestRequest request)
        {
            using (new ProgressScope(_progress, GetMessageFor(request)))
                return await _client.RequestListAsync<T>(request);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\Services\Handlers\AbstractHandler.cs
protected virtual async void Handle(Func<ITrello, Task> handler)
        {
            using (new ProgressScope(Progress, "Updating..."))
            {
                try
                {
                    await handler(Api);
                }
                catch (TrelloUnauthorizedException)
                {
                    MessageBox.Show("You are unauthorized to complete that operation.");
                }
                catch (TrelloException)
                {
                    MessageBox.Show("There was an error in trying to complete that operation.");
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\Services\JsonFileRestClient.cs
public async Task<T> RequestAsync<T>(IRestRequest request) where T : class, new()
        {
            var filename = ParseFilename(request);
            if (filename != null)
                return await ReadFromFile<T>(filename);
            return default(T);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\Services\JsonFileRestClient.cs
public async Task<IEnumerable<T>> RequestListAsync<T>(IRestRequest request)
        {
            var filename = ParseFilename(request);
            if (filename != null)
                return await ReadListFromFile<T>(filename);
            return Enumerable.Empty<T>();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\Services\JsonFileRestClient.cs
private static async Task<T> ReadFromFile<T>(string filename)
        {
            if (!File.Exists(filename))
                return default(T);

            using (var stream = File.OpenText(filename))
            {
                var content = await stream.ReadToEndAsync();
                return Deserialize<T>(content);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\Services\JsonFileRestClient.cs
private static async Task<IEnumerable<T>> ReadListFromFile<T>(string filename)
        {
            if (!File.Exists(filename))
                return Enumerable.Empty<T>();

            using (var stream = File.OpenText(filename))
            {
                var content = await stream.ReadToEndAsync();
                return Deserialize<List<T>>(content);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\Services\Stages\CacheStage.cs
public override async Task<ResponseContext<T>> Handle<T>(ResponseContext<T> context)
        {
            var key = context.Client.BuildUri(context.Request).PathAndQuery;

            // Only GET requests are cached
            if (context.Request.Method == Method.GET)
            {
                if (_network.IsAvailable)
                {
                    // When connected, always prefer to pull fresh data
                    context = await ContinueIfPossible(context);

                    // Update the cache as well
                    _cache.Set(key, context.Data);
                }
                else
                {
                    // When disconnected, only pull from the cache when available
                    context.Data = _cache.Get<T>(key);

                    // Then continue through the pipeline with the cached data set
                    context = await ContinueIfPossible(context);
                }
            }
            else
            {
                context = await ContinueIfPossible(context);
            }

            return context;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\Services\Stages\CacheStage.cs
public override async Task<RequestContext<T>> Handle<T>(RequestContext<T> context)
        {
            if (context.Method == Method.GET)
            {
                if (_network.IsAvailable)
                {
                    context = await ContinueIfPossible(context);
                    //_cache.Set(context.Resource, context.Data);
                }
                else
                {
                    context.Data = _cache.Get<T>(context.Resource);
                    context = await ContinueIfPossible(context);
                }
            }
            else
            {
                context = await ContinueIfPossible(context);
            }

            return context;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\Services\Stages\ProgressIndicatorStage.cs
public override async Task<ResponseContext<T>> Handle<T>(ResponseContext<T> context)
        {
            _progressService.Show();

            context = await ContinueIfPossible(context);

            _progressService.Hide();

            return context;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\Services\Stages\ProgressIndicatorStage.cs
public override async Task<RequestContext<T>> Handle<T>(RequestContext<T> context)
        {
            _progressService.Show();

            context = await ContinueIfPossible(context);

            _progressService.Hide();

            return context;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\ViewModels\AttachmentViewModel.cs
[UsedImplicitly]
        public async void Launch()
        {
            var success = await Launcher.LaunchUriAsync(Uri);
            if (!success)
                MessageBox.Show(
                    "The attachment could not be opened.  Make sure you're still connected to the internet.",
                    "Connection Problem", MessageBoxButton.OK);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\ViewModels\Boards\BoardListViewModel.cs
private async void RefreshLists()
        {
            var cards = await _api.Cards.ForList(new ListId(Id));
            var vms = cards.Select(card =>
            {
                var vm = _cardFactory()
                    .InitializeWith(card)
                    .EnableInteractions(_interactionManager);
                return vm;
            });

            Cards.Clear();
            Cards.AddRange(vms);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\ViewModels\CardDetailMembersViewModel.cs
protected override async void OnInitialize()
        {
            try
            {
                _progress.Show("Loading board members...");

                var boardMembers = await _api.Members.ForBoard(new BoardId(BoardId));
                var others = boardMembers.Where(mem => _members.All(m => m.Id != mem.Id));
                var otherVms = others.Select(mem => new CardMemberViewModel(mem, false));

                _otherMembers.Clear();
                _otherMembers.AddRange(otherVms);
                AllMembersCount = _members.Count + _otherMembers.Count;
            }
            catch (TrelloException)
            {
                MessageBox.Show("Could not load the members for this board.  Please " +
                                "ensure that you have an active internet connection.");
            }
            finally
            {
                _progress.Hide();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\ViewModels\CardDetailOverviewViewModel.cs
protected override async void OnInitialize()
        {
            var types = new[] {ActionType.CommentCard};
            var actions = await _api.Actions.ForCard(new CardId(Id), types, paging: new Paging(25, 0));

            var vms = actions.Select(ActivityViewModel.InitializeWith).ToList();

            Comments.Clear();
            Comments.AddRange(vms);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\ViewModels\CardDetailPivotViewModel.cs
protected override async void OnInitialize()
        {
            var card = await _api.Cards.WithId(Id);
            if (card == null)
            {
                MessageBox.Show("The card could not be found.  Usually this means that someone else has removed it " +
                                "while you were browsing.");
                _navigation.GoBack();
                return;
            }

            Name = card.Name;

            Items.Add(_overview().Initialize(card));
            Items.Add(_checklists().Initialize(card));
            Items.Add(_attachments().Initialize(card));
            Items.Add(_members().Initialize(card));

            ActivateItem(Items[0]);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\ViewModels\MyNotificationsViewModel.cs
private async void RefreshNotifications()
        {
            var types = new List<NotificationType>
            {
                NotificationType.AddedToBoard,
                NotificationType.AddedToCard,
                NotificationType.ChangeCard,
                NotificationType.CloseBoard,
                NotificationType.CommentCard,
                NotificationType.MentionedOnCard
            };
            var notifications = (await _api.Notifications.ForMe(types, ReadFilter.Unread, new Paging(15, 0))).ToList();
            var vms = notifications.Select(NotificationViewModel.Create).WhereHasValue();

            Notifications.Clear();
            Notifications.AddRange(vms);

            UpdateLiveTile(notifications);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\ViewModels\MyBoardsViewModel.cs
[UsedImplicitly]
        private async void RefreshBoards()
        {
            var boards = (await _api.Boards.ForMe(BoardFilter.Open));

            Boards.Clear();
            Boards.AddRange(boards.Select(b => new BoardViewModel().Initialize(b)));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\ViewModels\Boards\BoardViewModel.cs
protected override async void OnInitialize()
        {
            var board = await _api.Boards.WithId(Id);
            if (board == null)
                return;

            var lists = await _api.Lists.ForBoard(board);

            InitializeBoard(board);
            InitializeLists(lists.ToList());

            var selectedItem = FindSelectedItem(Items, SelectedListId);

            ActivateItem(selectedItem);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\ViewModels\MyCardsViewModel.cs
private async void RefreshCards()
        {
            var cards = (await _api.Cards.ForMe()).ToList();
            if (cards.Count == 0)
            {
                Cards.Clear();
                return;
            }

            var boards = (await _api.Boards.ForMe()).ToList();
            var vms = cards
                .Select(card =>
                {
                    var vm = _cardFactory().InitializeWith(card);

                    var board = boards.FirstOrDefault(x => x.Id == card.IdBoard);
                    if (board != null)
                        vm.BoardName = board.Name;

                    return vm;
                })
                .GroupBy(card => card.BoardName);

            Cards.Clear();
            Cards.AddRange(vms);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\ViewModels\ChangeCardLabelsViewModel.cs
protected override async void OnInitialize()
        {
            _progress.Show("Loading names...");
            try
            {
                var board = await _api.Boards.ForCard(new CardId(CardId));
                foreach (var lbl in Labels)
                {
                    string name;
                    if (board.LabelNames.TryGetValue(lbl.Color, out name))
                        lbl.Name = name;
                }
            }
            catch (Exception)
            {
                MessageBox.Show("The label names were unable to be loaded.  Please " +
                                "ensure that you have an active internet connection.");
            }
            finally
            {
                _progress.Hide();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\ViewModels\ProfileViewModel.cs
protected override async void OnInitialize()
        {
            BugSenseHandler.LeaveBreadcrumb("Viewing profile");

            var profile = await _api.Members.Me();
            InitializeWith(profile);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\ViewModels\SplashViewModel.cs
protected override async void OnViewLoaded(object view)
        {
            Status = "Loading...";

            Status = "Populating Cache...";
            var success = await _cache.Initialize();
            if (!success)
                Status = "Invalidating the cache...";

#if DISCONNECTED
            _settings.AccessToken = new OAuthToken("publicKey", "privateKey");
#endif

            var validated = await _api.AccessTokenIsFresh(_settings.AccessToken);
            if (validated)
            {
                Status = "Signed in";
                AccessGranted(_settings.AccessToken);
            }
            else
            {
                Status = "Signing in...";
                AccessDenied();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\ViewModels\SplashViewModel.cs
private async void AccessGranted(OAuthToken token)
        {
            _settings.AccessToken = token;

            var profile = await _api.Members.Me();
            if (profile != null)
            {
                _settings.MemberId = profile.Id;
                _settings.Username = profile.Username;
                _settings.Fullname = profile.FullName;
                _settings.AvatarHash = profile.AvatarHash;
            }

            UsingView(view => view.Browser.Visibility = Visibility.Collapsed);
            _navigationService.UriFor<ShellViewModel>().Navigate();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trello\ViewModels\SplashViewModel.cs
private async void AccessDenied()
        {
            var uri = await _api.GetAuthorizationUri("Trellow", Scope.ReadWriteAccount, Expiration.Never);
            if (uri != null)
            {
                LoadLogin(uri);
            }
            else
            {
                Status = "Could not sign you in.\n\nPlease ensure you have an active internet connection.";
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trellow.api\Data\Services\TrelloCoordinator.cs
public async Task<May<T>> Execute<T>(Func<Task<T>> func, string resource = null, RestSharp.Method method = RestSharp.Method.GET)
        {
            var context = new RequestContext<T>
            {
                Resource = resource,
                Method = method,
                Execute = func
            };

            var pipeline = _pipelineFactory.Build();
            context = await pipeline.Handle(context);
            return context.Data;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trellow.api\Data\IRequestPipelineStage.cs
protected async Task<ResponseContext<T>> ContinueIfPossible<T>(ResponseContext<T> context)
        {
            if (_nextHandler != null)
                return await _nextHandler.Handle(context);
            return context;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trellow.api\Data\IRequestPipelineStage.cs
protected async Task<RequestContext<T>> ContinueIfPossible<T>(RequestContext<T> context)
        {
            if (_nextHandler != null)
                return await _nextHandler.Handle(context);

            return context;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trellow.api\Internal\OAuthRestClient.cs
public async Task<Uri> GetAuthorizationUri(string applicationName, Scope scope, Expiration expiration, Uri callbackUri = null)
        {
            callbackUri = callbackUri ?? new Uri("http://localhost/oauthcallback", UriKind.Absolute);

            Authenticator = OAuth1Authenticator.ForRequestToken(_publicKey, _privateKey, callbackUri.AbsoluteUri);

            var result = await RequestAsync(new RestRequest("OAuthGetRequestToken"));

            var query = result.Content.ParseQueryString();
            _requestToken = BuildOAuthToken(query);
            if (_requestToken == null)
                return null;

            return BuildUri(new RestRequest("OAuthAuthorizeToken")
                                .AddParameter("oauth_token", _requestToken.Key)
                                .AddParameter("name", applicationName)
                                .AddParameter("scope", scope.ToScopeString())
                                .AddParameter("expiration", expiration.ToExpirationString()));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trellow.api\Internal\OAuthRestClient.cs
public async Task<OAuthToken> Verify(string verifier)
        {
            Authenticator = OAuth1Authenticator.ForAccessToken(_publicKey, _privateKey, _requestToken.Key,
                                                               _requestToken.Secret, verifier);

            var response = await RequestAsync(new RestRequest("OAuthGetAccessToken"));

            var query = response.Content.ParseQueryString();
            _accessToken = BuildOAuthToken(query);
            if (_accessToken != null)
                Authorize(_accessToken);

            return _accessToken;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Bunk+trellow\Bunk-trellow-6363163\trellow.api\Trello.cs
public async Task<bool> AccessTokenIsFresh(OAuthToken accessToken)
        {
            try
            {
                if (!_networkService.IsAvailable || accessToken == null)
                    return false;

                var token = await Tokens.WithToken(accessToken.Key);
                return token != null;
            }
            catch (TrelloUnauthorizedException)
            {
                return false;
            }
            catch (TrelloException)
            {
                return false;
            }
            catch (Exception)
            {
                return false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\catalogoportavel\Trunk\Catalogo.Portable.Specific.WindowsPhone\..\Catalogo.Portable.Specific.Windows8\DataSources\SpecificCatalogoDataSource.cs
protected override async Task<List<Categoria>> InternalObterTodasCategoriasAsync()
        {
            var mobileService = new MobileServiceClient(APPLICATION_URL, APPLICATION_KEY);
            var tabelaCategorias = mobileService.GetTable<Categoria>();
            return await tabelaCategorias.ToListAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\catalogoportavel\Trunk\Catalogo.Portable.Specific.WindowsPhone\..\Catalogo.Portable.Specific.Windows8\DataSources\SpecificCatalogoDataSource.cs
protected override async Task<List<Item>> InternalObterTodosItensAsync()
        {
            var mobileService = new MobileServiceClient(APPLICATION_URL, APPLICATION_KEY);
            var tabelaItens = mobileService.GetTable<Item>();
            return await tabelaItens.ToListAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\catalogoportavel\Trunk\Catalogo.Portable.Specific.WindowsPhone\..\Catalogo.Portable.Specific.Windows8\DataSources\SpecificCatalogoDataSource.cs
protected override async Task<Empresa> InternalObterEmpresaAsync()
        {
            var mobileService = new MobileServiceClient(APPLICATION_URL, APPLICATION_KEY);
            var tabelaEmpresas = mobileService.GetTable<Empresa>();
            return (await tabelaEmpresas.ToListAsync()).FirstOrDefault();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\catalogoportavel\Trunk\Catalogo.Portable.Specific.WindowsPhone\..\Catalogo.Portable.Specific.Windows8\DataSources\SpecificCatalogoDataSource.cs
protected override async Task InternalInserirCategoriaAsync(Categoria categoria)
        {
            var mobileService = new MobileServiceClient(APPLICATION_URL, APPLICATION_KEY);
            var tabelaEmpresas = mobileService.GetTable<Categoria>();
            await tabelaEmpresas.InsertAsync(categoria);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\catalogoportavel\Trunk\Catalogo.Portable.Specific.WindowsPhone\..\Catalogo.Portable.Specific.Windows8\DataSources\SpecificCatalogoDataSource.cs
protected override async Task InternalInserirItemAsync(Item item)
        {
            var mobileService = new MobileServiceClient(APPLICATION_URL, APPLICATION_KEY);
            var tabelaEmpresas = mobileService.GetTable<Item>();
            await tabelaEmpresas.InsertAsync(item);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\catalogoportavel\Trunk\Catalogo.Portable.Specific.WindowsPhone\..\Catalogo.Portable.Specific.Windows8\DataSources\SpecificCatalogoDataSource.cs
protected override async Task InternalInserirEmpresaAsync(Empresa empresa)
        {
            var mobileService = new MobileServiceClient(APPLICATION_URL, APPLICATION_KEY);
            var tabelaEmpresas = mobileService.GetTable<Empresa>();
            await tabelaEmpresas.InsertAsync(empresa);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Catrobat+CatrobatForWindows\Catrobat-CatrobatForWindows-a1850dc\Source\Master\Catrobat\IDEWindowsPhone\Misc\PaintLauncher.cs
public async static Task<bool> LaunchPaint(string pathToImage)
    {
      try
      {
        var splitPath = pathToImage.Split('/');
        _imageFileName = splitPath[splitPath.Length - 1];
        _imageFolderPath = "";

        for(int i = 0; i < splitPath.Length - 1; i++)
        {
          if (_imageFolderPath != "")
            _imageFolderPath += "/";

          _imageFolderPath += splitPath[i];
        }

        using (IStorage storage = StorageSystem.GetStorage())
        {
          storage.DeleteDirectory(CatrobatContext.TempPaintImagePath);
          storage.CopyFile(pathToImage, CatrobatContext.TempPaintImagePath + "/" + _imageFileName + DummyFileExtension);
        }

        var localFolder = Windows.Storage.ApplicationData.Current.LocalFolder;
        var tempFolder = await localFolder.CreateFolderAsync(CatrobatContext.TempPaintImagePath.Split('/')[0], CreationCollisionOption.OpenIfExists);
        var tempImageFolder = await localFolder.CreateFolderAsync(CatrobatContext.TempPaintImagePath.Split('/')[1], CreationCollisionOption.ReplaceExisting);
        var imageFile = await tempImageFolder.CreateFileAsync(_imageFileName + DummyFileExtension, CreationCollisionOption.ReplaceExisting);
        await Windows.System.Launcher.LaunchFileAsync(imageFile);

        return true;
      }
      catch (Exception)
      {
        return false;
      }
    }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Catrobat+CatrobatForWindows\Catrobat-CatrobatForWindows-a1850dc\Source\Master\Catrobat\IDEWindowsPhone\Misc\PlayerLauncher.cs
public async static Task<bool> LaunchPlayer(String projectName)
    {
      try
      {
        var projectFolder = CatrobatContext.ProjectsPath + "/" + projectName;

        using (IStorage storage = StorageSystem.GetStorage())
        {
          var stream = storage.OpenFile(CatrobatContext.PlayerActiveProjectZipPath, StorageFileMode.Create, StorageFileAccess.Write);
          CatrobatZip.ZipCatrobatPackage(stream, projectFolder);
        }

        StorageFolder localFolder = Windows.Storage.ApplicationData.Current.LocalFolder;
        var folder = await localFolder.GetFolderAsync(CatrobatContext.PlayerActiveProjectZipPath.Split('/')[0]);

        StorageFile catrobatZipFile = await folder.GetFileAsync(CatrobatContext.PlayerActiveProjectZipPath.Split('/')[1]);
        await Windows.System.Launcher.LaunchFileAsync(catrobatZipFile);
        await Windows.System.Launcher.LaunchFileAsync(catrobatZipFile);

        return true;
      }
      catch (Exception)
      {
        return false;
      }

    }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Catrobat+CatrobatForWindows\Catrobat-CatrobatForWindows-a1850dc\Source\Master\Catrobat\IDEWindowsPhone\Misc\ProjectImporter.cs
public async Task<ProjectHeader> ImportProjects(String fileToken)
    {
      try
      {
        using (IStorage storage = StorageSystem.GetStorage())
        {
          storage.DeleteDirectory(CatrobatContext.TempProjectImportPath);
          storage.DeleteDirectory(CatrobatContext.TempProjectImportZipPath);
        }

        const string tempProjectZipName = "temp_project.catrobat";

        var localFolder = Windows.Storage.ApplicationData.Current.LocalFolder;
        var tempFolder =
          await localFolder.CreateFolderAsync(CatrobatContext.TempProjectImportPath.Split('/')[0],
                                        CreationCollisionOption.OpenIfExists);
        var projectTempFolder =
          await tempFolder.CreateFolderAsync(CatrobatContext.TempProjectImportPath.Split('/')[1],
                                       CreationCollisionOption.OpenIfExists);
        var projectTempZipFolder =
          await tempFolder.CreateFolderAsync(CatrobatContext.TempProjectImportZipPath.Split('/')[1],
                                       CreationCollisionOption.OpenIfExists);

        await SharedStorageAccessManager.CopySharedFileAsync(projectTempZipFolder, tempProjectZipName,
                                                             NameCollisionOption.ReplaceExisting, fileToken);

        var projectZipFile = await projectTempZipFolder.GetFileAsync(tempProjectZipName);
        var projectZipStream = await projectZipFile.OpenStreamForReadAsync();

        CatrobatZip.UnzipCatrobatPackageIntoIsolatedStorage(projectZipStream, CatrobatContext.TempProjectImportPath);

        object projectScreenshot = null;
        string projectCode = null;

        using (IStorage storage = StorageSystem.GetStorage())
        {
          projectScreenshot = storage.LoadImage(CatrobatContext.TempProjectImportPath + "/" + Project.ScreenshotPath);
          projectCode = storage.ReadTextFile(CatrobatContext.TempProjectImportPath + "/" + Project.ProjectCodePath);
        }

        _project = new Project(projectCode);

        _tempProjectHeader = new ProjectHeader
          {
            Screenshot = projectScreenshot,
            ProjectName = _project.ProjectName
          };
      }
      catch (Exception)
      {
        using (IStorage storage = StorageSystem.GetStorage())
        {
          if (storage.FileExists(CatrobatContext.TempProjectImportZipPath))
            storage.DeleteDirectory(CatrobatContext.TempProjectImportZipPath);
        }

        return null;
      }
      finally
      {
        using (IStorage storage = StorageSystem.GetStorage())
        {
          if (storage.FileExists(CatrobatContext.TempProjectImportZipPath))
            storage.DeleteDirectory(CatrobatContext.TempProjectImportZipPath);
        }
      }

      return _tempProjectHeader;
    }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Catrobat+CatrobatForWindows\Catrobat-CatrobatForWindows-a1850dc\Source\Master\Catrobat\IDEWindowsPhone\ViewModel\Main\ProjectImportViewModel.cs
private async void OnLoadAction(NavigationContext navigationContext)
        {
            _isWorking = true;
            var fileToken = string.Empty;
            if (navigationContext.QueryString.TryGetValue("fileToken", out fileToken))
            {
                _importer = new ProjectImporter();
                var projectHeader = await _importer.ImportProjects(fileToken);

                if (projectHeader != null)
                {
                    ProjectName = projectHeader.ProjectName;

                    ScreenshotImageSource = projectHeader.Screenshot as BitmapImage;
                    ContentPanelVisibility = true;
                    LoadingPanelVisibility = false;
                    ProgressBarLoadingIsIndeterminate = false;
                }
                else
                {
                    ShowErrorMessage();
                }
            }
            _isWorking = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Catrobat+CatrobatForWindows\Catrobat-CatrobatForWindows-a1850dc\Source\Master\Catrobat\IDEWindowsPhone\ViewModel\Editor\EditorViewModel.cs
private async void StartPlayerAction()
        {
            await PlayerLauncher.LaunchPlayer(CurrentProject.ProjectName);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\cetdevelop\V1\Cet.Develop.WP.IO.Test\Cet.Develop.WP.IO.Test\BoardLayoutPage.xaml.cs
private async void QueryCoils()
        {
            await TaskEx.Run(() =>
            {
                //compose the Modbus command to be submitted
                var command = new ModbusCommand(ModbusCommand.FuncForceMultipleCoils);
                command.Offset = 0;
                command.Count = CoilCount;
                command.Data = new ushort[CoilCount];

                for (int i = 0; i < CoilCount; i++)
                {
                    var output = this._outputs[i];
                    command.Data[output.Offset] = (ushort)(output.Value ? 1 : 0);
                }

                //execute the command synchronously
                CommResponse result = App.Modbus
                    .ExecuteGeneric(App.Client, command);

                if (result.Status == CommResponse.Ack)
                {
                    //command successfully

                }
                else
                {
                    //some error

                }

                this._status = MachineState.AnalogRequest;
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\cetdevelop\V1\Cet.Develop.WP.IO.Test\Cet.Develop.WP.IO.Test\MainPage.xaml.cs
private async Task<bool> ConnectAsync(string host, int port)
        {
            return await TaskEx.Run(() => App.Client.Connect(host, port));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\cetdevelop\V2\Cet\IO\Cet.IO.DemoModbus\Cet.IO.DemoModbusNetduino_WP7\BoardLayoutPage.xaml.cs
private async void QueryCoils()
        {
            await TaskEx.Run(() =>
            {
                //compose the Modbus command to be submitted
                var command = new ModbusCommand(ModbusCommand.FuncForceMultipleCoils);
                command.Offset = 0;
                command.Count = CoilCount;
                command.Data = new ushort[CoilCount];

                for (int i = 0; i < CoilCount; i++)
                {
                    var output = this._outputs[i];
                    command.Data[output.Offset] = (ushort)(output.Value ? 1 : 0);
                }

                //execute the command synchronously
                CommResponse result = App.Modbus
                    .ExecuteGeneric(App.Client, command);

                if (result.Status == CommResponse.Ack)
                {
                    //command successfully

                }
                else
                {
                    //some error

                }

                this._status = MachineState.AnalogRequest;
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\cetdevelop\V2\Cet\IO\Cet.IO.DemoModbus\Cet.IO.DemoModbusNetduino_WP7\MainPage.xaml.cs
private async Task<bool> ConnectAsync(string host, int port)
        {
            return await TaskEx.Run(() => App.Client.Connect(host, port));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\cetdevelop\V2\Cet\IO\Cet.IO.DemoModbus\Cet.IO.DemoModbusNetduino_WP8\BoardLayoutPage.xaml.cs
private async void QueryCoils()
        {
            await Task.Run(() =>
            {
                //compose the Modbus command to be submitted
                var command = new ModbusCommand(ModbusCommand.FuncForceMultipleCoils);
                command.Offset = 0;
                command.Count = CoilCount;
                command.Data = new ushort[CoilCount];

                for (int i = 0; i < CoilCount; i++)
                {
                    var output = this._outputs[i];
                    command.Data[output.Offset] = (ushort)(output.Value ? 1 : 0);
                }

                //execute the command synchronously
                CommResponse result = App.Modbus
                    .ExecuteGeneric(App.Client, command);

                if (result.Status == CommResponse.Ack)
                {
                    //command successfully

                }
                else
                {
                    //some error

                }

                this._status = MachineState.AnalogRequest;
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\cetdevelop\V2\Cet\IO\Cet.IO.DemoModbus\Cet.IO.DemoModbusNetduino_WP8\MainPage.xaml.cs
private async Task<bool> ConnectAsync(string host, int port)
        {
            return await Task.Run(() => App.Client.Connect(host, port));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\CH3COOH+Softbuild.Data\CH3COOH-Softbuild.Data-2e59e15\Softbuild.Data.WinPhone80\..\Source\StorageExtensions.cs
public static async Task<StorageFile> SaveToPicturesLibraryAsync(string fileName, IRandomAccessStream stream)
        {
            var library = KnownFolders.PicturesLibrary;
            return await SaveFileAsync(library, fileName, stream);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\CH3COOH+Softbuild.Data\CH3COOH-Softbuild.Data-2e59e15\Softbuild.Data.WinPhone80\..\Source\StorageExtensions.cs
[Obsolete("use SaveFileAsync method.")]
        public static async Task<StorageFile> SaveToFolderAsync(this IStorageFolder folder, string fileName, IRandomAccessStream stream)
        {
            return await SaveFileAsync(folder, fileName, stream);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\CH3COOH+Softbuild.Data\CH3COOH-Softbuild.Data-2e59e15\Softbuild.Data.WinPhone80\..\Source\StorageExtensions.cs
public static async Task<StorageFile> SaveFileAsync(this IStorageFolder folder, string fileName, IRandomAccessStream stream)
        {
            var file = await folder.CreateFileAsync(fileName, CreationCollisionOption.ReplaceExisting);
            using (var outputStrm = await file.OpenAsync(FileAccessMode.ReadWrite))
            {
                // ??????????????????
                var imageBuffer = new byte[stream.Size];
                var ibuffer = imageBuffer.AsBuffer();
                stream.Seek(0);
                await stream.ReadAsync(ibuffer, (uint)stream.Size, InputStreamOptions.None);

                // ?????????????
                await outputStrm.WriteAsync(ibuffer);
            }
            return file;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\CH3COOH+Softbuild.Data\CH3COOH-Softbuild.Data-2e59e15\Softbuild.Data.WinPhone80\..\Source\StorageExtensions.cs
public static async Task<StorageFile> SaveAsync(this StorageFile file, IRandomAccessStream stream)
        {
            using (var outputStrm = await file.OpenAsync(FileAccessMode.ReadWrite))
            {
                // ??????????????????
                var imageBuffer = new byte[stream.Size];
                var ibuffer = imageBuffer.AsBuffer();
                stream.Seek(0);
                await stream.ReadAsync(ibuffer, (uint)stream.Size, InputStreamOptions.None);

                // ?????????????
                await outputStrm.WriteAsync(ibuffer);
            }
            return file;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\CH3COOH+Softbuild.Data\CH3COOH-Softbuild.Data-2e59e15\Softbuild.Data.WinPhone80\..\Source\StorageExtensions.cs
public static async Task<IRandomAccessStream> LoadFileAsync(this IStorageFolder folder, string fileName)
        {
            var file = await folder.GetFileAsync(fileName);
            return await file.OpenReadAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\CH3COOH+Softbuild.Data\CH3COOH-Softbuild.Data-2e59e15\Softbuild.Data.WinPhone80\..\Source\StorageExtensions.cs
public static async Task<bool> ExistFileAsync(this StorageFolder folder, string fileName)
        {
            var retExist = default(bool);
            try
            {
                var file = await folder.GetFileAsync(fileName);
                retExist = true;
            }
            catch
            {
                retExist = false;
            }
            return retExist;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\CH3COOH+Softbuild.Data\CH3COOH-Softbuild.Data-2e59e15\Softbuild.Data.WinPhone80\..\Source\StorageExtensions.cs
public static async Task<bool> ExistFolderAsync(this StorageFolder folder, string folderName)
        {
            var retExist = default(bool);
            try
            {
                var file = await folder.GetFolderAsync(folderName);
                retExist = true;
            }
            catch
            {
                retExist = false;
            }
            return retExist;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\charming\InTheHand.ApplicationModel.DataTransfer\SharePage.xaml.cs
public async override void Show(DataPackageView data)
        {
            if (data.Contains(StandardDataFormats.Uri))
            {
                InTheHand.Phone.Tasks.ShareNfcLinkTask shareTask = new Phone.Tasks.ShareNfcLinkTask();
                shareTask.LinkUri = await data.GetUriAsync();
                shareTask.Show();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\chenkai+dribbble-for-windows-phone-8\chenkai-dribbble-for-windows-phone-8-e63b55e\MoCommon\Component\DirectLocationHelper.cs
public async void GetCurrentLocationInfo()
      {
          Geolocator geolocator = new Geolocator();
          geolocator.DesiredAccuracyInMeters = 50;
          LocationInfo locationInfo = null;
          try
          {
              Geoposition position = await geolocator.GetGeopositionAsync(
                  maximumAge: TimeSpan.FromMinutes(5),
                  timeout: TimeSpan.FromSeconds(30)
                  );

              if (locationInfo == null)
                  locationInfo = new LocationInfo() { Latitude = position.Coordinate.Latitude, Longitude = position.Coordinate.Longitude };

              if (GetLocationComplated != null)
                  GetLocationComplated(locationInfo, null);

          }
          catch (Exception se)
          {
              if (GetLocationComplated != null)
                  GetLocationComplated(null, se);
          }
      }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\chenkai+dribbble-for-windows-phone-8\chenkai-dribbble-for-windows-phone-8-e63b55e\MoCommon\Component\LockScreenHelper.cs
public async void AsyncUpdateLockScreenImage(string imageUrlPath, bool isAppResource)
        {
            try
            {
                var isProvider = Windows.Phone.System.UserProfile.LockScreenManager.IsProvidedByCurrentApplication;
                //tip out messagebox choose 
                /*if (!isProvider)
                {
                    var validatePrompt = await Windows.Phone.System.UserProfile.LockScreenManager.RequestAccessAsync();
                    isProvider = validatePrompt == Windows.Phone.System.UserProfile.LockScreenRequestResult.Granted;
                }*/

                if (isProvider)
                {
                    var schema = isAppResource ? "ms-appx:///" : "ms-appdata:///Local/";
                    var uri = new Uri(schema + imageUrlPath, UriKind.Absolute);
                    Windows.Phone.System.UserProfile.LockScreen.SetImageUri(uri);
                }
            }
            catch (Exception se)
            {
                if (SetLockScreenExceptionChanged != null)
                    SetLockScreenExceptionChanged(se, null);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8\Services\DefaultDataService.cs
public async Task<List<Data.Reference.Haltestelle>> GetHaltestellenAsync()
        {
            var ctx = new ReferenceDataContext();
            var hst = await ctx.GetHaltestellenAsync();

            return hst;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8\Services\DefaultDataService.cs
public async Task<List<Haltestelle>> GetHaltestellenContainingAsync(string s)
        {
            try
            {
                var ctx = new ReferenceDataContext();
                var result = await ctx.GetHaltestellenContainingAsync(s);

                var startingWithString = result
                    .Where(h => h.Bezeichnung.StartsWith(s, StringComparison.CurrentCultureIgnoreCase))
                    .OrderBy(h => h.Bezeichnung)
                    .ToList();

                foreach (var h in startingWithString)
                {
                    h.HighlightBlock = h.Bezeichnung.Substring(0, s.Length);
                    h.PostHighlightBlock = h.Bezeichnung.Substring(s.Length);
                }

                var containingString = result
                    .Except(startingWithString)
                    .OrderBy(h => h.Bezeichnung)
                    .ToList();

                foreach (var h in containingString)
                {
                    string bezeichnung = h.Bezeichnung; // reduce number of property accesses
                    int pos = bezeichnung.IndexOf(s, StringComparison.CurrentCultureIgnoreCase);

                    h.PreHighlightBlock = bezeichnung.Substring(0, pos);
                    h.HighlightBlock = bezeichnung.Substring(pos, s.Length);
                    h.PostHighlightBlock = bezeichnung.Substring(pos + s.Length);
                }

                startingWithString.AddRange(containingString);
                return startingWithString;
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.ToString());
            }

            return new List<Haltestelle>();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8\Services\DefaultDataService.cs
public async Task<List<Haltestelle>> GetNearestHaltestellenAsync(Wgs84Location center, double radius = 500.0)
        {
            try
            {
                double mult = 1; // mult = 1.1; is more reliable

                var p1 = NearestLocationHelpers.CalculateDerivedPosition(center, mult * radius, 0);
                var p2 = NearestLocationHelpers.CalculateDerivedPosition(center, mult * radius, 90);
                var p3 = NearestLocationHelpers.CalculateDerivedPosition(center, mult * radius, 180);
                var p4 = NearestLocationHelpers.CalculateDerivedPosition(center, mult * radius, 270);

                var db = new ReferenceDataContext();
                var haltestellen = await db.GetNearestHaltestellenAsync(p3.Latitude, p1.Latitude, p2.Longitude, p4.Longitude);

                foreach (var h in haltestellen)
                {
                    h.Distanz = NearestLocationHelpers.GetDistanceBetweenTwoPoints(center, h.Longitude, h.Latitude);
                }

                return haltestellen;
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.ToString());
            }

            return new List<Haltestelle>();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8\Services\DefaultDataService.cs
public async Task<Haltestelle> GetHaltestelleAsync(int id)
        {
            var db = new ReferenceDataContext();
            var h = await db.GetHaltestelleAsync(id);
            return h;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8\Services\DefaultDataService.cs
public async Task<List<Haltestelle>> GetHaltestellenAsync(List<int> ids)
        {
            var db = new ReferenceDataContext();
            var h = await db.GetHaltestellenAsync(ids);
            return h;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8\Services\DefaultDataService.cs
public async Task<List<Favorite>> GetFavoritesAsync()
        {
            var db = new RuntimeDataContext();
            var favs = await db.GetFavorites();

            return favs;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8\Services\DefaultDataService.cs
public async Task InsertFavoriteIfNotExistsAsync(Favorite fav)
        {
            var db = new RuntimeDataContext();

            bool exists = await db.DoesFavoriteExist(fav.HaltestellenId);
            
            if (!exists)
            {
                await db.InsertFavorite(fav);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8\Services\DefaultDataService.cs
public async Task DeleteFavoriteAsync(Favorite fav)
        {
            var db = new RuntimeDataContext();
            await db.DeleteFavorite(fav);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8\Services\QandoEchtzeitdatenService.cs
public async Task<List<MonitorLine>> RetrieveMonitorInformation(Haltestelle haltestelle)
        {
            var schnittstelle = new WienerLinien.Api.Qando.EchtzeitdatenSchnittstelle();

            var response = await schnittstelle.GetMonitorInformation(
                haltestelle.Id,
                new WP8WebRequestProcessor());

            return response.Succeeded ? response.Lines : null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8\Common\WP8WebRequestProcessor.cs
public async Task<string> PostXml(string url, string postdata)
        {
            try
            {
                var request = (HttpWebRequest)WebRequest.Create(url);

                request.Method = HttpMethod.Post;
                byte[] byteArray = Encoding.UTF8.GetBytes(postdata);
                request.ContentType = "text/xml";
                request.ContentLength = byteArray.Length;

                using (Stream dataStream = await request.GetRequestStreamAsync())
                {
                    dataStream.Write(byteArray, 0, byteArray.Length);
                    dataStream.Close();
                }

                HttpWebResponse response = await request.GetResponseAsync();
                using (var sr = new StreamReader(response.GetResponseStream()))
                {
                    var result = sr.ReadToEnd();
                    return result;
                }
            }
            catch (Exception)
            {
            }

            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8\Common\WP8WebRequestProcessor.cs
public async Task<string> Get(string url)
        {
            try
            {
                var request = (HttpWebRequest)WebRequest.Create(url);
                request.Method = HttpMethod.Get;

                HttpWebResponse response = await request.GetResponseAsync();
                using (var sr = new StreamReader(response.GetResponseStream()))
                {
                    return sr.ReadToEnd();
                }
            }
            catch (Exception)
            {
            }

            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8\ViewModels\FavoritesViewModel.cs
public async Task LoadFavoritesAsync()
        {
            var favorites = await _dataService.GetFavoritesAsync();

            Favorites = new BindableCollection<Favorite>(favorites);
            NotifyOfPropertyChange(() => Favorites);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8\ViewModels\FavoritesViewModel.cs
private async void PerformRemovalAsync(Favorite item)
        {
            await _dataService.DeleteFavoriteAsync(item);
            await LoadFavoritesAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8\ViewModels\StationInfo\StationInfoPivotPageViewModel.cs
protected async void LoadStationAsync()
        {
            _haltestelle = await _dataService.GetHaltestelleAsync(NavigationStationId);
            departureViewModel.Haltestelle = _haltestelle;

#if !DEBUG
            // In Release (Ship) Mode, auto-get the departure information
            departureViewModel.RefreshDepartureInformationAsync();
#endif

            StationName = _haltestelle.Bezeichnung;
            NotifyOfPropertyChange(() => StationName);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8\ViewModels\Stations\MapNearbyStationsPageViewModel.cs
private async void PopulateMapAsync()
        {
            var idsAsString = NavigationNearbyStationIdList.Split(new char[] { ',' });
            var ids = idsAsString.Select(Int32.Parse).ToList();

            var hst = await _dataService.GetHaltestellenAsync(ids);

            var mapPins = hst.Select(h => new MapHaltestelleModel()
                                {
                                    Id = h.Id,
                                    Bezeichnung = h.Bezeichnung,
                                    GeoCoordinate = new GeoCoordinate(h.Latitude, h.Longitude)
                                });

            NearbyStations = new BindableCollection<MapHaltestelleModel>(mapPins);
            NotifyOfPropertyChange(() => NearbyStations);

            _eventAggregator.Publish(new ZoomMapToPinsMessage());
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8\ViewModels\Stations\NearbyStationsViewModel.cs
protected async void ContinueNearestSearchOnUiThread()
        {
            Haltestellen = null;
            NotifyOfPropertyChange(() => Haltestellen);

            var posResult = await _locationService.GetCurrentPosition();

            if (posResult.Succeeded)
            {
                var pos = posResult.Position;
                InfoMessage = String.Format("Your position: {0:F2} {1:F2}", pos.Coordinate.Longitude, pos.Coordinate.Latitude);

                MyLocation = new Wgs84Location(pos.Coordinate);

                var haltestellen = await _dataService.GetNearestHaltestellenAsync(MyLocation);

                if (!haltestellen.Any())
                {
                    InfoMessage = String.Format("No stops found near: {0:F2} {1:F2}", 
                        pos.Coordinate.Longitude, pos.Coordinate.Latitude);
                }
                else
                {
                    Haltestellen = new BindableCollection<Haltestelle>(haltestellen.OrderBy(h => h.Distanz));
                    NotifyOfPropertyChange(() => Haltestellen);
                }
            }
            else
            {
                InfoMessage = posResult.ErrorMessage;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8\ViewModels\Stations\StationsListViewModel.cs
protected async void LoadHaltestellenAsync()
        {
            var hst = await _dataService.GetHaltestellenAsync();

            // http://msdn.microsoft.com/en-us/library/windowsphone/develop/jj244365%28v=vs.105%29.aspx
            List<AlphaKeyGroup<Haltestelle>> grouped = AlphaKeyGroup<Haltestelle>
                .CreateGroups(hst, Thread.CurrentThread.CurrentUICulture, h => h.Bezeichnung, true);

            Haltestellen = grouped;
            NotifyOfPropertyChange(() => Haltestellen);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8\ViewModels\Stations\StationsSearchViewModel.cs
public async void SearchForMatchesAsync(string searchString)
        {
            if (!CanStartSearch(searchString))
                return;

            Haltestellen = null;
            NotifyOfPropertyChange(() => Haltestellen);

            var result = await _dataService.GetHaltestellenContainingAsync(searchString);

            Haltestellen = new BindableCollection<Haltestelle>(result);
            NotifyOfPropertyChange(() => Haltestellen);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8.Data\Reference\ReferenceDataContext.cs
public async Task<List<Haltestelle>> GetHaltestellenContainingAsync(string s)
        {
            var query = _connection
                                .Table<Haltestelle>()
                                .Where(h => h.Bezeichnung.Contains(s));

            var matched = await query.ToListAsync();
            return matched;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8.Data\Reference\ReferenceDataContext.cs
public async Task<List<Haltestelle>> GetHaltestellenAsync()
        {
            var query = _connection.Table<Haltestelle>();

            var matched = await query.ToListAsync();
            return matched;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8.Data\Reference\ReferenceDataContext.cs
public async Task<List<Haltestelle>> GetHaltestellenAsync(List<int> ids)
        {
            var query = _connection.Table<Haltestelle>().Where(h => ids.Contains(h.Id));

            var matched = await query.ToListAsync();
            return matched;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8.Data\Reference\ReferenceDataContext.cs
public async Task<Haltestelle> GetHaltestelleAsync(int id)
        {
            var query = _connection.Table<Haltestelle>().Where(h => h.Id == id);

            var matched = await query.ToListAsync();
            return matched.FirstOrDefault();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8.Data\Reference\ReferenceDataContext.cs
public async Task<List<Haltestelle>> GetNearestHaltestellenAsync(double latP3, double latP1, double lonP2, double lonP4)
        {
            var query = _connection.Table<Haltestelle>().Where(h =>
                                                               h.Latitude > latP3 && h.Latitude < latP1 &&
                                                               h.Longitude < lonP2 && h.Longitude > lonP4);

            var matched = await query.ToListAsync();
            return matched;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8.Data\Runtime\RuntimeDataContext.cs
public static async Task InitializeDatabaseAsync()
        {
            var db = CreateConnection();

            CreateTablesResult favCreateResult = await db.CreateTableAsync<Favorite>();
            // CreateTablesResult histCreateResult = await db.CreateTableAsync<StationHistory>();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8.Data\Runtime\RuntimeDataContext.cs
public async Task<List<Favorite>> GetFavorites()
        {
            var query = _connection
                .Table<Favorite>()
                .OrderBy(f => f.Bezeichnung);

            var matched = await query.ToListAsync();
            return matched;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8.Data\Runtime\RuntimeDataContext.cs
public async Task<bool> DoesFavoriteExist(int haltenStellenId)
        {
            var query = _connection
                .Table<Favorite>()
                .Where(f => f.HaltestellenId == haltenStellenId);

            var matched = await query.ToListAsync();
            return matched.Any();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8.Data\Runtime\RuntimeDataContext.cs
public async Task InsertFavorite(Favorite fav)
        {
            int result = await _connection.InsertAsync(fav);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8.Data\Runtime\RuntimeDataContext.cs
public async Task DeleteFavorite(Favorite fav)
        {
            int result = await _connection.DeleteAsync(fav);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\christophwille+viennarealtime\christophwille-viennarealtime-82bca59\Source\MundlTransit.WP8.Data\Reference\ReferenceDataContext.WP8.cs
public static async Task CopyDatabase()
        {
            bool isDatabaseExisting = false;

            try
            {
                StorageFile storageFile = await ApplicationData.Current.LocalFolder.GetFileAsync(DatabaseName);
                isDatabaseExisting = true;
            }
            catch
            {
                isDatabaseExisting = false;
            }

            if (!isDatabaseExisting)
            {
                StorageFile databaseFile = await Package.Current.InstalledLocation.GetFileAsync(DatabaseName);
                await databaseFile.CopyAsync(ApplicationData.Current.LocalFolder);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit (WP8)\..\Cimbalino.Phone.Toolkit (WP71)\Services\LauncherService.cs
public async Task LaunchFileAsync(string file)
        {
            var storageFile = await ApplicationData.Current.LocalFolder.GetFileAsync(file);

            await Launcher.LaunchFileAsync(storageFile);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Location (WP8)\Services\LocationService.cs
public async void GetPosition(LocationServiceAccuracy desiredAccuracy, Action<LocationServicePosition, Exception> locationResult)
        {
            try
            {
                var position = await GetPositionAsync(desiredAccuracy);

                locationResult(position, null);
            }
            catch (Exception ex)
            {
                locationResult(null, ex);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Location (WP8)\Services\LocationService.cs
public async void GetPosition(LocationServiceAccuracy desiredAccuracy, TimeSpan maximumAge, TimeSpan timeout, Action<LocationServicePosition, Exception> locationResult)
        {
            try
            {
                var position = await GetPositionAsync(desiredAccuracy, maximumAge, timeout);

                locationResult(position, null);
            }
            catch (Exception ex)
            {
                locationResult(null, ex);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Location (WP8)\Services\LocationService.cs
public async Task<LocationServicePosition> GetPositionAsync(LocationServiceAccuracy desiredAccuracy)
        {
            _geolocator.DesiredAccuracy = desiredAccuracy.ToPositionAccuracy();

            var position = await _geolocator.GetGeopositionAsync();

            return position.Coordinate.ToLocationServicePosition();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Location (WP8)\Services\LocationService.cs
public async Task<LocationServicePosition> GetPositionAsync(LocationServiceAccuracy desiredAccuracy, TimeSpan maximumAge, TimeSpan timeout)
        {
            _geolocator.DesiredAccuracy = desiredAccuracy.ToPositionAccuracy();

            var position = await _geolocator.GetGeopositionAsync(maximumAge, timeout);

            return position.Coordinate.ToLocationServicePosition();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\..\Cimbalino.Phone.Toolkit.Background (WP71)\Extensions\StreamWriterExtensions.cs
public async static Task WriteAllLinesAsync(this StreamWriter streamWriter, IEnumerable<string> lines)
        {
            foreach (var line in lines)
            {
                await streamWriter.WriteLineAsync(line);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\..\Cimbalino.Phone.Toolkit.Background (WP71)\Extensions\IsolatedStorageFileExtensions.cs
public async static Task<byte[]> ReadAllBytesAsync(this IsolatedStorageFile store, string path)
        {
            using (var fileStream = store.OpenFile(path, FileMode.Open))
            {
                var buffer = new byte[fileStream.Length];

                await fileStream.ReadAsync(buffer, 0, buffer.Length);

                return buffer;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\..\Cimbalino.Phone.Toolkit.Background (WP71)\Extensions\IsolatedStorageFileExtensions.cs
private async static Task InternalWriteAllLinesAsync(IsolatedStorageFileStream fileStream, IEnumerable<string> contents, Encoding encoding)
        {
            using (var streamWriter = new StreamWriter(fileStream, encoding))
            {
                foreach (var str in contents)
                {
                    await streamWriter.WriteLineAsync(str);
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\..\Cimbalino.Phone.Toolkit.Background (WP71)\Extensions\StreamExtensions.cs
public static async Task<byte[]> ToArrayAsync(this Stream input)
        {
            var memoryStream = input as MemoryStream;

            if (memoryStream != null)
            {
                return memoryStream.ToArray();
            }

            using (memoryStream = new MemoryStream())
            {
                await input.CopyToAsync(memoryStream);

                return memoryStream.ToArray();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task CopyFileAsync(string sourceFileName, string destinationFileName)
        {
            await CopyFileAsync(sourceFileName, destinationFileName, false);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task CopyFileAsync(string sourceFileName, string destinationFileName, bool overwrite)
        {
            var file = await Storage.GetFileAsync(sourceFileName);

            var destinationFolderName = Path.GetDirectoryName(destinationFileName);
            var destinationFolder = await Storage.GetFolderAsync(destinationFolderName);

            destinationFileName = Path.GetFileName(destinationFileName);

            var nameCollisionOption = overwrite ? NameCollisionOption.ReplaceExisting : NameCollisionOption.FailIfExists;

            await file.CopyAsync(destinationFolder, destinationFileName, nameCollisionOption);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task CreateDirectoryAsync(string dir)
        {
            await Storage.CreateFolderAsync(dir);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task<Stream> CreateFileAsync(string path)
        {
            return await Storage.OpenStreamForWriteAsync(path, CreationCollisionOption.ReplaceExisting);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task DeleteDirectoryAsync(string dir)
        {
            var folder = await Storage.GetFolderAsync(dir);

            await folder.DeleteAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task DeleteFileAsync(string path)
        {
            var file = await Storage.GetFileAsync(path);

            await file.DeleteAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task<bool> DirectoryExistsAsync(string dir)
        {
            try
            {
                var folder = await Storage.GetFolderAsync(dir);

                return folder != null;
            }
            catch
            {
                return false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task<bool> FileExistsAsync(string path)
        {
            try
            {
                var file = await Storage.GetFileAsync(path);

                return file != null;
            }
            catch (FileNotFoundException)
            {
                return false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task<string[]> GetDirectoryNamesAsync()
        {
            var folders = await Storage.GetFoldersAsync();

            return folders
                .Select(x => x.Name)
                .ToArray();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task<string[]> GetDirectoryNamesAsync(string searchPattern)
        {
            var folderName = Path.GetDirectoryName(searchPattern);
            var folder = await Storage.GetFolderAsync(folderName);

            var folders = await folder.GetFoldersAsync();

            searchPattern = Path.GetFileName(searchPattern);

            if (string.IsNullOrEmpty(searchPattern))
            {
                return folders
                    .Select(x => x.Name)
                    .ToArray();
            }

            var regexPattern = FilePatternToRegex(searchPattern);

            return folders
                .Where(x => regexPattern.IsMatch(x.Name))
                .Select(x => x.Name)
                .ToArray();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task<string[]> GetFileNamesAsync()
        {
            var files = await Storage.GetFilesAsync();

            return files
                .Select(x => x.Name)
                .ToArray();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task<string[]> GetFileNamesAsync(string searchPattern)
        {
            var folderName = Path.GetDirectoryName(searchPattern);
            var folder = await Storage.GetFolderAsync(folderName);

            var files = await folder.GetFilesAsync();

            searchPattern = Path.GetFileName(searchPattern);

            if (string.IsNullOrEmpty(searchPattern))
            {
                return files
                    .Select(x => x.Name)
                    .ToArray();
            }

            var regexPattern = FilePatternToRegex(searchPattern);

            return files
                .Where(x => regexPattern.IsMatch(x.Name))
                .Select(x => x.Name)
                .ToArray();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task<Stream> OpenFileForReadAsync(string path)
        {
            return await Storage.OpenStreamForReadAsync(path);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task<string> ReadAllTextAsync(string path)
        {
            using (var fileStream = await OpenFileForReadAsync(path))
            {
                using (var streamReader = new StreamReader(fileStream))
                {
                    return await streamReader.ReadToEndAsync();
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task<string> ReadAllTextAsync(string path, Encoding encoding)
        {
            using (var fileStream = await OpenFileForReadAsync(path))
            {
                using (var streamReader = new StreamReader(fileStream, encoding))
                {
                    return await streamReader.ReadToEndAsync();
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task<string[]> ReadAllLinesAsync(string path)
        {
            using (var fileStream = await OpenFileForReadAsync(path))
            {
                var lines = new List<string>();

                using (var streamReader = new StreamReader(fileStream))
                {
                    while (!streamReader.EndOfStream)
                    {
                        lines.Add(await streamReader.ReadLineAsync());
                    }
                }

                return lines.ToArray();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task<string[]> ReadAllLinesAsync(string path, Encoding encoding)
        {
            using (var fileStream = await OpenFileForReadAsync(path))
            {
                var lines = new List<string>();

                using (var streamReader = new StreamReader(fileStream, encoding))
                {
                    while (!streamReader.EndOfStream)
                    {
                        lines.Add(await streamReader.ReadLineAsync());
                    }
                }

                return lines.ToArray();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task<byte[]> ReadAllBytesAsync(string path)
        {
            using (var fileStream = await OpenFileForReadAsync(path))
            {
                return await fileStream.ToArrayAsync();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task WriteAllTextAsync(string path, string contents)
        {
            using (var fileStream = await CreateFileAsync(path))
            {
                using (var streamWriter = new StreamWriter(fileStream))
                {
                    await streamWriter.WriteAsync(contents);
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task WriteAllTextAsync(string path, string contents, Encoding encoding)
        {
            using (var fileStream = await CreateFileAsync(path))
            {
                using (var streamWriter = new StreamWriter(fileStream, encoding))
                {
                    await streamWriter.WriteAsync(contents);
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task WriteAllLinesAsync(string path, IEnumerable<string> contents)
        {
            using (var fileStream = await CreateFileAsync(path))
            {
                using (var streamWriter = new StreamWriter(fileStream))
                {
                    foreach (var line in contents)
                    {
                        await streamWriter.WriteAsync(line);
                        await streamWriter.WriteAsync(Environment.NewLine);
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task WriteAllLinesAsync(string path, IEnumerable<string> contents, Encoding encoding)
        {
            using (var fileStream = await CreateFileAsync(path))
            {
                using (var streamWriter = new StreamWriter(fileStream, encoding))
                {
                    foreach (var line in contents)
                    {
                        await streamWriter.WriteAsync(line);
                        await streamWriter.WriteAsync(Environment.NewLine);
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task WriteAllBytesAsync(string path, byte[] bytes)
        {
            using (var fileStream = await CreateFileAsync(path))
            {
                await fileStream.WriteAsync(bytes, 0, bytes.Length);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task AppendAllText(string path, string contents)
        {
            using (var fileStream = await Storage.OpenStreamForWriteAsync(path, CreationCollisionOption.OpenIfExists))
            {
                using (var streamWriter = new StreamWriter(fileStream))
                {
                    await streamWriter.WriteAsync(contents);
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task AppendAllText(string path, string contents, Encoding encoding)
        {
            using (var fileStream = await Storage.OpenStreamForWriteAsync(path, CreationCollisionOption.OpenIfExists))
            {
                using (var streamWriter = new StreamWriter(fileStream, encoding))
                {
                    await streamWriter.WriteAsync(contents);
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task AppendAllLines(string path, IEnumerable<string> contents)
        {
            using (var fileStream = await Storage.OpenStreamForWriteAsync(path, CreationCollisionOption.OpenIfExists))
            {
                using (var streamWriter = new StreamWriter(fileStream))
                {
                    foreach (var line in contents)
                    {
                        await streamWriter.WriteAsync(line);
                        await streamWriter.WriteAsync(Environment.NewLine);
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\AsyncStorageService.cs
public async Task AppendAllLines(string path, IEnumerable<string> contents, Encoding encoding)
        {
            using (var fileStream = await Storage.OpenStreamForWriteAsync(path, CreationCollisionOption.OpenIfExists))
            {
                using (var streamWriter = new StreamWriter(fileStream, encoding))
                {
                    foreach (var line in contents)
                    {
                        await streamWriter.WriteAsync(line);
                        await streamWriter.WriteAsync(Environment.NewLine);
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Cimbalino+Cimbalino-Phone-Toolkit\Cimbalino-Cimbalino-Phone-Toolkit-749fc5b\src\Cimbalino.Phone.Toolkit.Background (WP8)\Services\LockScreenService.cs
public async Task<LockScreenServiceRequestResult> RequestAccessAsync()
        {
            var result = await LockScreenManager.RequestAccessAsync();

            switch (result)
            {
                case LockScreenRequestResult.Denied:
                    return LockScreenServiceRequestResult.Denied;

                case LockScreenRequestResult.Granted:
                    return LockScreenServiceRequestResult.Granted;

                default:
                    throw new ArgumentOutOfRangeException();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\codenauts+HockeySDK-WindowsPhone\codenauts-HockeySDK-WindowsPhone-43bcc8f\HockeySDK\UpdateManager.cs
internal async void DoUpdate(AppVersion availableUpdate)
        {
            var aetxUri = new Uri(Constants.ApiBase + "apps/" + this.identifier + ".aetx", UriKind.Absolute);
            var downloadUri = new Uri(Constants.ApiBase + "apps/" + this.identifier + "/app_versions/" + availableUpdate.id + ".xap", UriKind.Absolute);

            //it won't get the result anyway because htis app-instance will get killed during the update
            await InstallationManager.AddPackageAsync(availableUpdate.title, downloadUri);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\coding4fun\Experimental\FileExplorer\FileExplorerExperimental\FileExplorerExperimental\Control\FileExplorer.xaml.cs
async void GetTreeForInternalFolder(StorageFolder folder)
        {

            if (!_internalFolderTree.Contains(folder))
                _internalFolderTree.Push(folder);

            ProcessSelectedItems();

            CurrentItems.Clear();

            var folderList = await folder.GetFoldersAsync();

            foreach (StorageFolder _folder in folderList)
            {
                FileExplorerItem item = (from c in _selectedItems where c.Path == _folder.Path select c).FirstOrDefault();

                FileExplorerItem _addItem = new FileExplorerItem()
                {
                    IsFolder = true,
                    Name = _folder.Name,
                    Path = _folder.Path,
                    Selected = item != null ? true : false
                };

                CurrentItems.Add(_addItem);
            }

            var fileList = await folder.GetFilesAsync();
            if (fileList != null)
            {
                foreach (StorageFile _file in fileList)
                {
                    FileExplorerItem item = GetItemFromPath(_file.Path);

                    if (((ExtensionRestrictions & (Interop.ExtensionRestrictions.Custom | Interop.ExtensionRestrictions.InheritManifest)) != 0) && (Extensions.Count != 0))
                    {
                        string extension = Path.GetExtension(_file.Name);
                        if (Extensions.FindIndex(x => x.Equals(extension, StringComparison.OrdinalIgnoreCase)) != -1)
                        {
                            CurrentItems.Add(new FileExplorerItem()
                            {
                                IsFolder = false,
                                Name = _file.Name,
                                Path = _file.Path,
                                Selected = item != null ? true : false
                            });
                        }
                    }
                    else
                    {
                        CurrentItems.Add(new FileExplorerItem()
                        {
                            IsFolder = false,
                            Name = _file.Name,
                            Path = _file.Path,
                            Selected = item != null ? true : false
                        });
                    }
                }
            }

            CurrentPath = _internalFolderTree.First().Path;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\cpmcgrath+Bankr\cpmcgrath-Bankr-119f564\Bankr.Logic\Logic\Queries\CommBankQuery.cs
public async Task<string> Start(HttpClient client)
        {
            if (!CanRun())
                return null;

            Status.SetAction(Action);

            try
            {
                var response = await client.PostAsync(RequestUri, GetContent());
                var content  = await response.Content.ReadAsStringAsync();
                ProcessResult(client, content);
                return SessionId;
            }
            catch (WebException)
            {
                Status.SetAction("Cannot find the server", true);
                return null;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\cpmcgrath+Bankr\cpmcgrath-Bankr-119f564\Bankr.Logic\Logic\DataRetriever.cs
async Task<Uri> GetUri()
        {
            if (m_uri != null)
                return m_uri;

            var findResult = await new HttpClient().GetAsync(Url);
            m_uri = new Uri("https://" + findResult.RequestMessage.RequestUri.Host);
            return m_uri;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\cpmcgrath+Bankr\cpmcgrath-Bankr-119f564\Bankr.Logic\Logic\DataRetriever.cs
public async Task<HttpClient> Login()
        {
            var uri    = await GetUri();
            var client = new HttpClient { BaseAddress = uri };

            m_sessionId = await RunQuery<LogonQuery>(client);
            return client;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\cpmcgrath+Bankr\cpmcgrath-Bankr-119f564\Bankr.Logic\Logic\DataRetriever.cs
public async void LoadData()
        {
            var client = await Login();
            if (m_sessionId != null)
            {
                await RunQuery<GetUpcomingTransactionsQuery>(client);
                await RunQuery<GetTransactionsQuery>(client);
            }
            Callback();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\cpmcgrath+Bankr\cpmcgrath-Bankr-119f564\Bankr.Logic\Logic\DataRetriever.cs
public async void LoadTransferAccounts()
        {
            var client = await Login();
            if (m_sessionId != null)
            {
                await RunQuery<GetTransferAccountsQuery>(client);
            }
            Callback();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\cpmcgrath+Bankr\cpmcgrath-Bankr-119f564\Bankr.Logic\Logic\DataRetriever.cs
async Task<string> RunQuery<T>(HttpClient client) where T : CommBankQuery, new()
        {
            return await new T
            {
                Status    = Status,
                SessionId = m_sessionId
            }.Start(client);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\cpmcgrath+Bankr\cpmcgrath-Bankr-119f564\Bankr.Logic\Logic\DataRetriever.cs
public async Task<string> TransferMoney(int fromAccount, int toAccount, string description, decimal amount)
        {
            var client = await Login();
            if (m_sessionId == null)
                return null;

            await RunQuery<GetTransferAccountsQuery>(client);

            using (var store = new DataStoreContext())
            {
                var fromData     = store.Accounts.First(x => x.Id == fromAccount);
                var fromSendData = store.TransferToAccounts.First(x => x.Id == fromAccount && x.AccountName == fromData.AccountName);
                fromAccount      = fromSendData.SenderId ?? -1;
            }

            var query = new TransferMoneyQuery
            {
                Status        = Status,
                SessionId     = m_sessionId,
                FromAccountId = fromAccount,
                ToAccountId   = toAccount,
                Description   = description,
                Amount        = amount,
                IsValidate    = true
            };
            await query.Start(client);

            query.IsValidate = false;
            await query.Start(client);
            return query.ReceiptNo;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\crystalbyte+asphalt\crystalbyte-asphalt-6745b58\src\Crystalbyte.Asphalt\Contexts\Driver.cs
private async void DeleteCurrentImageAsync() {
            await LocalStorage.DeleteImageAsync(ImagePath);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\crystalbyte+asphalt\crystalbyte-asphalt-6745b58\src\Crystalbyte.Asphalt\Contexts\LocationTracker.cs
private async void OnCivicAddressesResolved(object sender, EventArgs e) {
            var tour = (Tour)sender;
            tour.CivicAddressesResolved -= OnCivicAddressesResolved;
            await Channels.Database.Enqueue(() =>
                                            LocalStorage.DataContext.SubmitChanges(ConflictMode.FailOnFirstConflict));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\crystalbyte+asphalt\crystalbyte-asphalt-6745b58\src\Crystalbyte.Asphalt\Contexts\Vehicle.cs
private async void DeleteCurrentImageAsync() {
            await LocalStorage.DeleteImageAsync(ImagePath);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\crystalbyte+asphalt\crystalbyte-asphalt-6745b58\src\Crystalbyte.Asphalt\Pages\DriverCompositionPage.xaml.cs
private async void HandleChosenPhoto(string name, Stream data) {
            if (string.IsNullOrWhiteSpace(name)) {
                return;
            }

            _chosenPhotoName = Guid.NewGuid().ToString();
            await LocalStorage.StoreImageAsync(_chosenPhotoName, data);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\crystalbyte+asphalt\crystalbyte-asphalt-6745b58\src\Crystalbyte.Asphalt\Pages\VehicleCompositionPage.xaml.cs
private async void HandleChosenPhoto(string name, Stream data) {
            if (string.IsNullOrWhiteSpace(name)) {
                return;
            }

            _chosenPhotoName = Guid.NewGuid().ToString();
            await LocalStorage.StoreImageAsync(_chosenPhotoName, data);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\crystalbyte+asphalt\crystalbyte-asphalt-6745b58\src\Crystalbyte.Asphalt\Contexts\Tour.cs
public async Task LoadData() {
            var id = Id;

            var positions = await Channels.Database.Enqueue(
                () => LocalStorage.DataContext.Positions
                          .Where(x => x.TourId == id)
                          .Select(x => x)
                          .OrderBy(x => x.TimeStamp)
                          .ToArray());

            Positions.Clear();
            Positions.AddRange(positions);
            OnPositionsRestored(EventArgs.Empty);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\crystalbyte+asphalt\crystalbyte-asphalt-6745b58\src\Crystalbyte.Asphalt\Contexts\AppContext.cs
private async void OnDriverSaved(object sender, EventArgs e) {
            await LoadDriversAsync();
            RefreshSelections();
            NotifyIsReadyChanged();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\crystalbyte+asphalt\crystalbyte-asphalt-6745b58\src\Crystalbyte.Asphalt\Contexts\AppContext.cs
private async void OnVehicleSaved(object sender, EventArgs e) {
            await LoadVehiclesAsync();
            RefreshSelections();
            NotifyIsReadyChanged();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\crystalbyte+asphalt\crystalbyte-asphalt-6745b58\src\Crystalbyte.Asphalt\Contexts\AppContext.cs
private async void OnDriversDeletionCompleted(object sender, EventArgs e) {
            await LoadDriversAsync();
            RefreshSelections();
            NotifyIsReadyChanged();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\crystalbyte+asphalt\crystalbyte-asphalt-6745b58\src\Crystalbyte.Asphalt\Contexts\AppContext.cs
private async void OnVehicleDeletionCompleted(object sender, EventArgs e) {
            await LoadVehiclesAsync();
            RefreshSelections();
            NotifyIsReadyChanged();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\crystalbyte+asphalt\crystalbyte-asphalt-6745b58\src\Crystalbyte.Asphalt\Contexts\AppContext.cs
private async void OnTourStored(object sender, EventArgs e) {
            await LoadToursAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\crystalbyte+asphalt\crystalbyte-asphalt-6745b58\src\Crystalbyte.Asphalt\Contexts\AppContext.cs
private async void OnTourDeletionCompleted(object sender, EventArgs e) {
            await LoadToursAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\crystalbyte+asphalt\crystalbyte-asphalt-6745b58\src\Crystalbyte.Asphalt\Contexts\AppContext.cs
public async void LoadData() {
            await LoadToursAsync();
            await LoadVehiclesAsync();
            await LoadDriversAsync();

            RefreshSelections();
            NotifyIsReadyChanged();
            IsDataLoaded = true;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\crystalbyte+asphalt\crystalbyte-asphalt-6745b58\src\Crystalbyte.Asphalt\Contexts\AppContext.cs
private async Task LoadDriversAsync() {
            Drivers.Clear();
            var drivers = await Channels.Database.Enqueue(
                () => LocalStorage.DataContext.Drivers
                          .Select(x => x)
                          .ToArray());

            Drivers.AddRange(drivers);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\crystalbyte+asphalt\crystalbyte-asphalt-6745b58\src\Crystalbyte.Asphalt\Contexts\AppContext.cs
public async Task LoadToursAsync() {
            Tours.Clear();
            var tours = await Channels.Database.Enqueue(
                () => LocalStorage.DataContext.Tours
                          .Select(x => x)
                          .OrderByDescending(x => x.StartTime)
                          .ToArray());

            Tours.AddRange(tours);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\crystalbyte+asphalt\crystalbyte-asphalt-6745b58\src\Crystalbyte.Asphalt\Contexts\AppContext.cs
public async Task LoadVehiclesAsync() {
            Vehicles.Clear();
            var vehicles = await Channels.Database.Enqueue(
                () => LocalStorage.DataContext.Vehicles
                          .Select(x => x)
                          .ToArray());

            Vehicles.AddRange(vehicles);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Dartasien+WindowsPhoneEreaderProject\Dartasien-WindowsPhoneEreaderProject-b95c728\WPEreader\WPEreader\App.xaml.cs
private async void Application_Activated(object sender, ActivatedEventArgs e)
        {
            // Ensure that application state is restored appropriately
            if (!App.ViewModel.IsDataLoaded)
            {
                await App.ViewModel.LoadData();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Dartasien+WindowsPhoneEreaderProject\Dartasien-WindowsPhoneEreaderProject-b95c728\WPEreader\WPEreader\IORecipes.cs
public static async Task<StorageFile> CreateFileInFolder(StorageFolder storageFolder, string fileName)
        {
            StorageFile newFile;
            try
            {
                newFile = await storageFolder.CreateFileAsync(fileName, CreationCollisionOption.ReplaceExisting);
            }
            catch (Exception ex)
            {
                newFile = null;
            }
            return newFile;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Dartasien+WindowsPhoneEreaderProject\Dartasien-WindowsPhoneEreaderProject-b95c728\WPEreader\WPEreader\IORecipes.cs
public static async Task<bool> DeleteFileInFolder(StorageFolder storageFolder, string fileName)
        {
            bool deleteSuccessful = true;

            try
            {
                StorageFile fileToDelete = await storageFolder.GetFileAsync(fileName);
                await fileToDelete.DeleteAsync();
            }
            catch (Exception ex)
            {
                deleteSuccessful = false;
            }
            return deleteSuccessful;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Dartasien+WindowsPhoneEreaderProject\Dartasien-WindowsPhoneEreaderProject-b95c728\WPEreader\WPEreader\IORecipes.cs
public static async Task<StorageFolder> CreateOrGetFolder(string folderName)
        {
            StorageFolder newFolder;
            try
            {
                StorageFolder storageFolder = ApplicationData.Current.LocalFolder;

                if (folderName == "\\")
                    return storageFolder;

                try
                {
                    newFolder = await storageFolder.GetFolderAsync(folderName);
                }
                catch (Exception ex)
                {
                    newFolder = null;
                }

                if (newFolder == null)
                    newFolder = await storageFolder.CreateFolderAsync(folderName);
            }
            catch (Exception ex)
            {
                newFolder = null;
            }
            return newFolder;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Dartasien+WindowsPhoneEreaderProject\Dartasien-WindowsPhoneEreaderProject-b95c728\WPEreader\WPEreader\IORecipes.cs
public static async Task<StorageFile> GetFileInFolder(StorageFolder storageFolder, string fileName)
        {
            StorageFile newFile;
            try
            {
                newFile = await storageFolder.GetFileAsync(fileName);
            }
            catch (Exception ex)
            {
                newFile = null;
            }
            return newFile;

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Dartasien+WindowsPhoneEreaderProject\Dartasien-WindowsPhoneEreaderProject-b95c728\WPEreader\WPEreader\IORecipes.cs
public static async Task<List<string>> GetDocumentFiles()
        {
            List<string> results = new List<string>();

            try
            {
                StorageFolder storageFolder = ApplicationData.Current.LocalFolder;
                StorageFileQueryResult queryResult = storageFolder.CreateFileQuery();
                var files = await queryResult.GetFilesAsync();
                foreach (StorageFile file in files)
                {
                    results.Add(file.Name);
                }
            }
            catch (Exception ex)
            {
                results = null;
            }
            return results;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Dartasien+WindowsPhoneEreaderProject\Dartasien-WindowsPhoneEreaderProject-b95c728\WPEreader\WPEreader\IORecipes.cs
public static async Task<IReadOnlyList<StorageFile>> GetFilesInFolder(StorageFolder storageFolder)
        {
            IReadOnlyList<StorageFile> results = null;

            try
            {
                results = await storageFolder.GetFilesAsync();
            }
            catch (Exception ex)
            {
            }
            return results;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Dartasien+WindowsPhoneEreaderProject\Dartasien-WindowsPhoneEreaderProject-b95c728\WPEreader\WPEreader\IORecipes.cs
public static async Task<bool> WriteStringToFile(StorageFile f, string data)
        {
            bool result = true;

            try
            {
                using(var stream = await f.OpenAsync(FileAccessMode.ReadWrite))
                {
                    using (DataWriter dataWriter = new DataWriter(stream))
                    {
                        dataWriter.WriteString(data);
                        await dataWriter.StoreAsync();
                        await dataWriter.FlushAsync();
                    }
                }
            }
            catch(Exception ex)
            {
                result = false;
            }
            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Dartasien+WindowsPhoneEreaderProject\Dartasien-WindowsPhoneEreaderProject-b95c728\WPEreader\WPEreader\IORecipes.cs
public static async Task<string> ReadStringFromFile(StorageFile f)
        {
            string result = null;

            try
            {
                using (var stream = await f.OpenAsync(FileAccessMode.Read))
                {
                    using (DataReader dataReader = new DataReader(stream))
                    {
                        uint numBytesLoaded = await dataReader.LoadAsync((uint)stream.Size);
                        result = dataReader.ReadString(numBytesLoaded);
                    }
                }
            }
            catch (Exception ex)
            {
                result = null;
            }

            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Dartasien+WindowsPhoneEreaderProject\Dartasien-WindowsPhoneEreaderProject-b95c728\WPEreader\WPEreader\IORecipes.cs
public static async Task<List<string>> GetDocumentFilesOfTypeFromFolder(StorageFolder storageFolder, string extension)
        {
            List<string> results = new List<string>();

            try
            {
                StorageFileQueryResult queryResult = storageFolder.CreateFileQuery();
                var files = await queryResult.GetFilesAsync();
                foreach (StorageFile file in files)
                {
                    if (file.Name.ToLower().EndsWith(extension.ToLower()))
                        results.Add(file.Name);
                }
            }
            catch (Exception ex)
            {
                results = null;
            }
            return results;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Dartasien+WindowsPhoneEreaderProject\Dartasien-WindowsPhoneEreaderProject-b95c728\WPEreader\WPEreader\IORecipes.cs
public static async Task<XDocument> LoadXmlDocumentAsync(StorageFolder storageFolder, string filename)
        {

            StorageFile storageFile = await storageFolder.GetFileAsync(filename);

            try
            {
                IRandomAccessStream readStream = await storageFile.OpenAsync(FileAccessMode.Read);

                IInputStream inputStream = readStream.GetInputStreamAt(0);

                DataReader dataReader = new DataReader(inputStream);

                uint numBytesLoaded = await dataReader.LoadAsync((uint)readStream.Size);



                string s = dataReader.ReadString(numBytesLoaded);

                StringReader stringReader = new StringReader(s);

                return XDocument.Load(stringReader);
            }
            catch
            {
                return default(XDocument);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Dartasien+WindowsPhoneEreaderProject\Dartasien-WindowsPhoneEreaderProject-b95c728\WPEreader\WPEreader\IORecipes.cs
public static async Task SaveXmlDocumentAsync(XDocument xmlDoc, StorageFolder storageFolder, string filename)
        {

            StringBuilder sb = new StringBuilder();

            XmlWriterSettings xws = new XmlWriterSettings();

            xws.Indent = true;

            try
            {
                using (XmlWriter xw = XmlWriter.Create(sb, xws))
                {

                    xmlDoc.Save(xw);

                }



                var storageFileResult = await storageFolder.CreateFileAsync(filename, CreationCollisionOption.ReplaceExisting);
                var streamResult = await storageFileResult.OpenAsync(FileAccessMode.ReadWrite);
                var outStream = streamResult.GetOutputStreamAt(0);

                DataWriter dataWriter = new DataWriter(outStream);

                dataWriter.WriteString(sb.ToString());

                await dataWriter.StoreAsync();

                await outStream.FlushAsync();
            }
            catch
            {
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Dartasien+WindowsPhoneEreaderProject\Dartasien-WindowsPhoneEreaderProject-b95c728\WPEreader\WPEreader\MainPage.xaml.cs
protected async override void OnNavigatedTo(NavigationEventArgs e)
        {
            if (!App.ViewModel.IsDataLoaded)
            {
                await App.ViewModel.LoadData();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Dartasien+WindowsPhoneEreaderProject\Dartasien-WindowsPhoneEreaderProject-b95c728\WPEreader\WPEreader\MainPage.xaml.cs
private async void DeletePart2()
        {
            App.ViewModel.RemoveBook(lastSelectedBook);
            await App.ViewModel.UpdateBooks();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Dartasien+WindowsPhoneEreaderProject\Dartasien-WindowsPhoneEreaderProject-b95c728\WPEreader\WPEreader\ViewModels\BooksModel.cs
public async Task UpdateBooks()
        {
            StorageFolder appStorageFolder = IORecipes.GetAppStorageFolder();
            await IORecipes.DeleteFileInFolder(appStorageFolder, "ebooks.xml");
            string itemsAsXML = IORecipes.SerializeToString(this.Items);
            StorageFile dataFile = await IORecipes.CreateFileInFolder(appStorageFolder, "ebooks.xml");
            await IORecipes.WriteStringToFile(dataFile, itemsAsXML);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Dartasien+WindowsPhoneEreaderProject\Dartasien-WindowsPhoneEreaderProject-b95c728\WPEreader\WPEreader\ViewModels\BooksModel.cs
public async Task LoadData()
        {
            StorageFolder appStorageFolder = IORecipes.GetAppStorageFolder();
            StorageFile dataFile = await IORecipes.GetFileInFolder(appStorageFolder, "ebooks.xml");
            if (dataFile != null)
            {
                if (!IsDataLoaded)
                {
                    string itemsAsXML = await IORecipes.ReadStringFromFile(dataFile);
                    this.Items = IORecipes.SerializeFromString<ObservableCollection<BookModel>>(itemsAsXML);
                }
            }
            else
            {
                if (!IsDataLoaded)
                {
                    this.Items = new ObservableCollection<BookModel>();
                    this.Items.Add(new BookModel() { BookID = "A Memory of Light - Robert Jordan_6997", BookName = " Memory of Light", AuthorID = " robert jordan", AddedDate = DateTime.Now.ToString(), CoverPic = null });
                }
            }
            NotifyPropertyChanged("Items");
            this.IsDataLoaded = true;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Dartasien+WindowsPhoneEreaderProject\Dartasien-WindowsPhoneEreaderProject-b95c728\WPEreader\WPEreader\ViewModels\BooksModel.cs
public async void PutFileInIsoStore()
        {
            StorageFolder appStorageFolder = IORecipes.GetAppStorageFolder();
            await IORecipes.CreateFileInFolder(appStorageFolder, "chapter1.xhtml");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\DeaDiana+WindowsPhone\DeaDiana-WindowsPhone-cb6b104\Joker2\Joker2\MainPage.xaml.cs
async void InitializeVoiceCommands()
        {
            if (VoiceCommandService.InstalledCommandSets.Any(s => s.Key == "Joker"))
                return;

            try
            {
                await VoiceCommandService.InstallCommandSetsFromFileAsync(new Uri(string.Format("ms-appx:///{0}", VoiceCommandFile)));
            }
            catch (Exception ex)
            {
                return;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dend+beem\dend-beem-38befb2\Beem\Azure\MobileServicesClientHelper.cs
public static async Task<List<Station>> GetAllStations()
        {
            IMobileServiceTable<Station> itemsTable = App.AzureClient.GetTable<Station>();

            List<Station> itemsList =
                await itemsTable.Take(100).ToListAsync();

            if (itemsList.Count != 0)
            {
                return itemsList;
            }
            else
            {
                return null;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dend+beem\dend-beem-38befb2\Beem.Core\TrackListDownloader.cs
public async Task<List<Track>> GetTracksForStation(string stationId)
        {
            WebClient client = new WebClient();
            string data = await client.DownloadStringTaskAsync("http://api.v2.audioaddict.com/v1/di/track_history/channel/" + stationId + ".json?callback=_API_TrackHistory_getChannel");
            var list = GetTrackList(data);

            return list;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Depechie+GF13\Depechie-GF13-51409e3\AppCreativity.GentseFeesten.WP8\AppCreativity.GentseFeesten.WP8\ViewModel\MainViewModel.cs
private async Task InitializeCategories()
        {
            if (ReferenceEquals(Categories, null) || Categories.Count == 0)
            {
                string path = string.Format(@"{0}\resources\GFCategories.json", _installFolder);
                StorageFile storageFile = await StorageFile.GetFileFromPathAsync(path);
                Stream stream = await storageFile.OpenStreamForReadAsync();
                string jsonContent;
                using (StreamReader streamReader = new StreamReader(stream))
                {
                    jsonContent = streamReader.ReadToEnd();
                }

                List<GFCategory> gfCategories = GFService.GetInstance().ParseCategories(jsonContent);

                int itemCount = 0;
                foreach (GFCategory gfCategory in gfCategories)
                {
                    ++itemCount;
                    if (itemCount == 1)
                    {
                        this.Categories.Add(new CategoryListItem(gfCategory, "0,0,0,1", "12,6,12,0"));
                        continue;
                    }

                    if (itemCount == gfCategories.Count)
                    {
                        this.Categories.Add(new CategoryListItem(gfCategory, "0,0,0,0", "12,0,12,6"));
                        continue;
                    }

                    this.Categories.Add(new CategoryListItem(gfCategory, "0,0,0,1", "12,0,12,0"));
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Depechie+GF13\Depechie-GF13-51409e3\AppCreativity.GentseFeesten.WP8\AppCreativity.GentseFeesten.WP8\ViewModel\MainViewModel.cs
private async Task InitializeEvents()
        {
            if (ReferenceEquals(_allGFEvents, null) || _allGFEvents.Count == 0)
            {
                string path = string.Format(@"{0}\resources\GFEvents.json", _installFolder);
                StorageFile storageFile = await StorageFile.GetFileFromPathAsync(path);
                Stream stream = await storageFile.OpenStreamForReadAsync();
                string jsonContent;
                using (StreamReader streamReader = new StreamReader(stream))
                {
                    jsonContent = streamReader.ReadToEnd();
                }

                _allGFEvents = GFService.GetInstance().ParseEvents(jsonContent);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Depechie+GF13\Depechie-GF13-51409e3\AppCreativity.GentseFeesten.WP8\AppCreativity.GentseFeesten.WP8\ViewModel\MainViewModel.cs
private async Task InitializeDays()
        {
            if (ReferenceEquals(Days, null) || Days.Count == 0)
            {
                string path = string.Format(@"{0}\resources\GFDates.json", _installFolder);
                StorageFile storageFile = await StorageFile.GetFileFromPathAsync(path);
                Stream stream = await storageFile.OpenStreamForReadAsync();
                string jsonContent;
                using (StreamReader streamReader = new StreamReader(stream))
                {
                    jsonContent = streamReader.ReadToEnd();
                }

                List<GFDay> gfDays = GFService.GetInstance().ParseDays(jsonContent);

                int itemCount = 0;
                foreach (GFDay gfDay in gfDays)
                {
                    ++itemCount;
                    if (itemCount == 1)
                    {
                        this.Days.Add(new DayListItem(gfDay, "0,0,0,1", "12,6,12,0"));
                        continue;
                    }

                    if (itemCount == gfDays.Count)
                    {
                        this.Days.Add(new DayListItem(gfDay, "0,0,0,0", "12,0,12,6"));
                        continue;
                    }

                    this.Days.Add(new DayListItem(gfDay, "0,0,0,1", "12,0,12,0"));
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Digillect+mvvm-wp\Digillect-mvvm-wp-e2bd8c3\src\Digillect.Mvvm.WindowsPhone\Services\AuthenticationService.cs
private async Task StartAuthentication( string initialViewName, XParameters parameters, Action performWhenAuthenticated )
        {
            if( _authenticationServiceContext != null )
            {
                var authenticated = await _authenticationServiceContext.IsAuthenticated();

                if( !authenticated )
                {
                    Action<object> guard = NavigationGuard;

                    if( performWhenAuthenticated != null )
                    {
                        guard = async o =>
                        {
                            NavigationGuard( o );

                            if( await _authenticationServiceContext.IsAuthenticated() )
                            {
                                performWhenAuthenticated();
                            }
                        };
                    }

                    _targetContext = null;
                    _snapshotId = _navigationService.CreateSnapshot( guard );

                    if( string.IsNullOrEmpty( initialViewName ) )
                    {
                        initialViewName = _authenticationServiceContext.AuthenticationViewName;
                        parameters = _authenticationServiceContext.AuthenticationViewParameters;
                    }

                    _navigationService.Navigate( initialViewName, parameters );
                }
                else
                {
                    if( performWhenAuthenticated != null )
                    {
                        performWhenAuthenticated();
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Digillect+mvvm-wp\Digillect-mvvm-wp-e2bd8c3\src\Digillect.Mvvm.WindowsPhone\Services\AuthenticationService.cs
public async Task<bool> HandleNavigation( NavigationContext context )
        {
            ViewDescriptor descriptor;
            var result = false;

            if( _authenticationServiceContext == null || !_views.TryGetValue( context.ViewName, out descriptor ) )
            {
                return false;
            }

            if( AuthenticationInProgress )
            {
                if( !descriptor.PartOfAuthentication )
                {
                    context.Cancel = true;
                    CancelAuthenticationAndRollbackHistory();

                    result = true;
                }
            }
            else
            {
                if( descriptor.RequiresAuthentication )
                {
                    var authenticated = await _authenticationServiceContext.IsAuthenticated();

                    if( !authenticated )
                    {
                        _targetContext = new NavigationContext { ViewName = context.ViewName, Parameters = context.Parameters };
                        _snapshotId = _navigationService.CreateSnapshot( NavigationGuard );

                        context.ViewName = _authenticationServiceContext.AuthenticationViewName;
                        context.Parameters = _authenticationServiceContext.AuthenticationViewParameters;

                        result = true;
                    }
                }
            }

            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Digillect+mvvm-wp\Digillect-mvvm-wp-e2bd8c3\src\Digillect.Mvvm.WindowsPhone\Services\NetworkAvailabilityService.cs
private async void NetworkChange_NetworkAddressChanged( object sender, EventArgs e )
        {
            bool oldNetworkAvailable = NetworkAvailable;

            NetworkAvailable = await TaskEx.Run( (Func<bool>) InspectNetwork );

            if( NetworkAvailable != oldNetworkAvailable && NetworkAvailabilityChanged != null )
            {
                NetworkAvailabilityChanged( this, EventArgs.Empty );
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Digillect+mvvm-wp\Digillect-mvvm-wp-e2bd8c3\src\Digillect.Mvvm.WindowsPhone\UI\ViewModelPage.cs
private async void InternalLoadData( DataLoadReason reason )
        {
            if( reason != DataLoadReason.Awakening || !_dataIsLoaded )
            {
                var session = _session = CreateDataSession( reason );

                if( session == null )
                {
                    session = _session = await CreateDataSessionAsync( reason );
                }

                if( session != null )
                {
                    try
                    {
                        await _viewModel.Load( session );

                        OnDataLoadComplete( session );

                        DataIsLoaded = true;
                    }
                    catch( Exception ex )
                    {
                        OnDataLoadFailed( session, ex );
                    }
                    finally
                    {
                        _session = null;
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Digillect+mvvm-wp\Digillect-mvvm-wp-e2bd8c3\src\Digillect.Mvvm.WindowsPhone\Services\AuthenticationService.cs
private async Task StartAuthentication( string initialViewName, XParameters parameters, Action performWhenAuthenticated )
        {
            if( _authenticationServiceContext != null )
            {
                var authenticated = await _authenticationServiceContext.IsAuthenticated();

                if( !authenticated )
                {
                    Action<object> guard = NavigationGuard;

                    if( performWhenAuthenticated != null )
                    {
                        guard = async o =>
                        {
                            NavigationGuard( o );

                            if( await _authenticationServiceContext.IsAuthenticated() )
                            {
                                performWhenAuthenticated();
                            }
                        };
                    }

                    _targetContext = null;
                    _snapshotId = _navigationService.CreateSnapshot( guard );

                    if( string.IsNullOrEmpty( initialViewName ) )
                    {
                        initialViewName = _authenticationServiceContext.AuthenticationViewName;
                        parameters = _authenticationServiceContext.AuthenticationViewParameters;
                    }

                    _navigationService.Navigate( initialViewName, parameters );
                }
                else
                {
                    if( performWhenAuthenticated != null )
                    {
                        performWhenAuthenticated();
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Digillect+mvvm-wp\Digillect-mvvm-wp-e2bd8c3\src\Digillect.Mvvm.WindowsPhone\Services\AuthenticationService.cs
public async Task<bool> HandleNavigation( NavigationContext context )
        {
            ViewDescriptor descriptor;
            var result = false;

            if( _authenticationServiceContext == null || !_views.TryGetValue( context.ViewName, out descriptor ) )
            {
                return false;
            }

            if( AuthenticationInProgress )
            {
                if( !descriptor.PartOfAuthentication )
                {
                    context.Cancel = true;
                    CancelAuthenticationAndRollbackHistory();

                    result = true;
                }
            }
            else
            {
                if( descriptor.RequiresAuthentication )
                {
                    var authenticated = await _authenticationServiceContext.IsAuthenticated();

                    if( !authenticated )
                    {
                        _targetContext = new NavigationContext { ViewName = context.ViewName, Parameters = context.Parameters };
                        _snapshotId = _navigationService.CreateSnapshot( NavigationGuard );

                        context.ViewName = _authenticationServiceContext.AuthenticationViewName;
                        context.Parameters = _authenticationServiceContext.AuthenticationViewParameters;

                        result = true;
                    }
                }
            }

            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Digillect+mvvm-wp\Digillect-mvvm-wp-e2bd8c3\src\Digillect.Mvvm.WindowsPhone\UI\ViewModelPage.cs
private async void InternalLoadData( DataLoadReason reason )
        {
            if( reason != DataLoadReason.Awakening || !_dataIsLoaded )
            {
                var session = _session = CreateDataSession( reason );

                if( session == null )
                {
                    session = _session = await CreateDataSessionAsync( reason );
                }

                if( session != null )
                {
                    try
                    {
                        await _viewModel.Load( session );

                        OnDataLoadComplete( session );

                        DataIsLoaded = true;
                    }
                    catch( Exception ex )
                    {
                        OnDataLoadFailed( session, ex );
                    }
                    finally
                    {
                        _session = null;
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepraCore\ConnectionAgent.cs
public async Task<LoginPageModel> GetLoginPage()
        {
            var response = await _client.GetAsync("http://leprosorium.ru/login/");
            if (!response.IsSuccessStatusCode)
                return null;

            var loginPageHtmlData = await response.Content.ReadAsStringAsync();
            return HtmlParser.ParseLoginPage(loginPageHtmlData);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepraCore\ConnectionAgent.cs
public async Task<MainPageModel> GetMainPage()
        {
            var response = await PerformAuthenticatedGetRequest("http://leprosorium.ru/");
            if (response == null)
                return null;
            var responseContent = await response.Content.ReadAsStringAsync();
            return HtmlParser.ParseMainPage(responseContent);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepraCore\ConnectionAgent.cs
public async Task<LeproPanelModel> GetLeproPanel()
        {
            var response = await PerformAuthenticatedGetRequest("http://leprosorium.ru/api/lepropanel");
            if (response == null)
                return null;
            var responseContent = await response.Content.ReadAsStringAsync();

            var leproPanelModel = JsonParser.ParseLeproPanel(responseContent);
            return leproPanelModel;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepraCore\ConnectionAgent.cs
public async Task<List<SubLepraModel>> GetUnderground(int? page = null)
        {
            var response = await PerformAuthenticatedGetRequest("http://leprosorium.ru/underground/subscribers/" + page.GetValueOrDefault(1));
            if (response == null)
                return null;
            var responseContent = await response.Content.ReadAsStringAsync();

            var underground = HtmlParser.ParseUnderground(responseContent);
            return underground;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepraCore\ConnectionAgent.cs
public async Task<DemocracyPageModel> GetDemocracyPage()
        {
            var response = await PerformAuthenticatedGetRequest("http://leprosorium.ru/democracy/");
            if (response == null)
                return null;
            var responseContent = await response.Content.ReadAsStringAsync();

            var model = HtmlParser.ParseDemocracyPage(responseContent);
            return model;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepraCore\ConnectionAgent.cs
public async Task<List<PostModel>> GetLatestPosts(int? page = null)
        {
            var message = new HttpRequestMessage(HttpMethod.Post, new Uri("http://leprosorium.ru/idxctl/"));
            message.Content = new FormUrlEncodedContent(new List<KeyValuePair<string, string>>
                                                            {
                                                                new KeyValuePair<string, string>("from", page.GetValueOrDefault(0).ToString())
                                                            });

            var response = await PerformAuthenticatedPostRequest(message);
            if (response == null)
                return null;
            var responseContent = await response.Content.ReadAsStringAsync();
            var posts = JsonParser.ParsePosts(responseContent);

            return posts;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepraCore\ConnectionAgent.cs
public async Task<List<PostModel>> GetMyStuff()
        {
            var response = await PerformAuthenticatedGetRequest("http://leprosorium.ru/my/");
            if (response == null)
                return null;
            var responseContent = await response.Content.ReadAsStringAsync();

            var posts = HtmlParser.ParsePosts(responseContent);
            return posts;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepraCore\ConnectionAgent.cs
public async Task<List<PostModel>> GetFavourites()
        {
            var response = await PerformAuthenticatedGetRequest("http://leprosorium.ru/my/favourites/");
            if (response == null)
                return null;
            var responseContent = await response.Content.ReadAsStringAsync();

            var posts = HtmlParser.ParsePosts(responseContent);
            return posts;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepraCore\ConnectionAgent.cs
public async Task<List<PostModel>> GetInbox()
        {
            var response = await PerformAuthenticatedGetRequest("http://leprosorium.ru/my/inbox/");
            if (response == null)
                return null;
            var responseContent = await response.Content.ReadAsStringAsync();

            var posts = HtmlParser.ParsePosts(responseContent);
            return posts;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepraCore\ConnectionAgent.cs
public async Task<List<CommentModel>> GetComments(PostModel post)
        {
            var url = String.Empty;

            if (post.Type == "inbox")
                url = "http://leprosorium.ru/my/inbox/" + post.Id;
            else
            {
                var server = "leprosorium.ru";
                url = String.Format("http://{0}/comments/{1}", server, post.Id);
            }

            var response = await PerformAuthenticatedGetRequest(url);
            if (response == null)
                return null;
            var responseContent = await response.Content.ReadAsStringAsync();

            post.AddCommentCode = HtmlParser.ParseAddCommentCode(responseContent);
            var comments = HtmlParser.ParseComments(responseContent);
            return comments;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepraCore\ConnectionAgent.cs
public async Task<UserModel> GetUser(string username)
        {
            var response = await PerformAuthenticatedGetRequest(String.Format("http://leprosorium.ru/users/{0}", username));
            if (response == null)
                return null;
            var responseContent = await response.Content.ReadAsStringAsync();

            var user = HtmlParser.ParseUserProfile(responseContent);
            return user;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepraCore\ConnectionAgent.cs
public async Task<bool> VotePost(PostModel post, string voteValue, string votingCode)
        {
            var url = "http://";
            if (!String.IsNullOrEmpty(post.Url))
                url += post.Url;
            else
                url += "leprosorium.ru";

            url += "/rate/";

            var message = new HttpRequestMessage(HttpMethod.Post, new Uri(url));
            message.Content = new FormUrlEncodedContent(new List<KeyValuePair<string, string>>
                                                            {
                                                                new KeyValuePair<string, string>("type", "1"),
                                                                new KeyValuePair<string, string>("id", post.Id),
                                                                new KeyValuePair<string, string>("wtf", votingCode),
                                                                new KeyValuePair<string, string>("value", voteValue),
                                                            });

            var response = await PerformAuthenticatedPostRequest(message);

            return response != null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepraCore\ConnectionAgent.cs
public async Task<bool> VoteComment(PostModel post, CommentModel comment, string voteValue, string votingCode)
        {
            var url = "http://";
            if (!String.IsNullOrEmpty(post.Url))
                url += post.Url;
            else
                url += "leprosorium.ru";

            url += "/rate/";

            var message = new HttpRequestMessage(HttpMethod.Post, new Uri(url));
            message.Content = new FormUrlEncodedContent(new List<KeyValuePair<string, string>>
                                                            {
                                                                new KeyValuePair<string, string>("type", "0"),
                                                                new KeyValuePair<string, string>("post_id", post.Id),
                                                                new KeyValuePair<string, string>("wtf", votingCode),
                                                                new KeyValuePair<string, string>("value", voteValue),
                                                                new KeyValuePair<string, string>("id", comment.Id),
                                                            });

            var response = await PerformAuthenticatedPostRequest(message);

            return response != null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepraCore\ConnectionAgent.cs
public async Task<Stream> GetImageStream(String path)
        {
            var response = await _client.GetAsync(path);
            if (!response.IsSuccessStatusCode)
                return null;

            var imageStream = await response.Content.ReadAsStreamAsync();
            return imageStream;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepraCore\ConnectionAgent.cs
public async Task<String> Login(String username, String password, String captcha, String loginCode)
        {
            var postString = String.Format("user={0}&pass={1}&captcha={2}&logincode={3}&save=1", username, password, captcha, loginCode);
            var byteArray = Encoding.UTF8.GetBytes(postString);

            var httpWebRequest = (HttpWebRequest) WebRequest.Create("http://leprosorium.ru/login/");
            httpWebRequest.AllowAutoRedirect = false;
            httpWebRequest.AllowReadStreamBuffering = true;
            httpWebRequest.Method = HttpMethod.Post.Method;
            httpWebRequest.ContentType = "application/x-www-form-urlencoded";
            httpWebRequest.ContentLength = byteArray.Length;

            var requestStream = await httpWebRequest.GetRequestStreamAsync();
            requestStream.Write(byteArray, 0, byteArray.Length);
            requestStream.Close();

            var response = await httpWebRequest.GetResponseAsync();
            var setCookie = response.Headers["Set-Cookie"];

            var success = SetAuthCookies(setCookie);
            if (!success)
            {
                using (var responseContentStream = response.GetResponseStream())
                {
                    var reader = new StreamReader(responseContentStream);
                    var responseContent = await reader.ReadToEndAsync();
                    return HtmlParser.ExtractLoginError(responseContent);
                }
            }

            IsAuthenticated = true;
            return String.Empty;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepraCore\ConnectionAgent.cs
private async Task<HttpResponseMessage> PerformAuthenticatedGetRequest(String url, bool isValidateStatusCode = true)
        {
            if (!IsAuthenticated)
                return null;

            var cookieContainer = GetAuthCookiesContainer();

            var handler = new HttpClientHandler {CookieContainer = cookieContainer};
            if (handler.SupportsAutomaticDecompression)
                handler.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;
            _client = new HttpClient(handler);

            var response = await _client.GetAsync(url);

            if (isValidateStatusCode)
                return !response.IsSuccessStatusCode ? null : response;
            else
                return response;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepraCore\ConnectionAgent.cs
private async Task<HttpResponseMessage> PerformAuthenticatedPostRequest(HttpRequestMessage message)
        {
            if (!IsAuthenticated)
                return null;

            var cookieContainer = GetAuthCookiesContainer();

            var handler = new HttpClientHandler {CookieContainer = cookieContainer};
            if (handler.SupportsAutomaticDecompression)
                handler.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;
            _client = new HttpClient(handler);

            var response = await _client.SendAsync(message);
            return !response.IsSuccessStatusCode ? null : response;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\Lab\MainPage.xaml.cs
private async void TestLogin()
        {
            if (ConnectionAgent.Current.IsAuthenticated)
            {
                var htmlPageModel = await ConnectionAgent.Current.GetMainPage();
                DisplayMainPage(htmlPageModel);
            }
            else
            {
                var loginPageModel = await ConnectionAgent.Current.GetLoginPage();

                var error = await ConnectionAgent.Current.Login("dobroe-z", "aaaa", "aaaa", "aaaa");
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepra.App\ViewModel\LoginViewModel.cs
private async void OnLogin()
        {
            IsProgressMessageVisible = true;
            ErrorMessage = String.Empty;
            _isLoginProcessRunning = true;
            OkCommand.RaiseCanExecuteChanged();

            var error = await ConnectionAgent.Current.Login(Username, Password, CaptchaText, LoginCode);

            if (!String.IsNullOrEmpty(error))
            {
                ErrorMessage = error;
                IsProgressMessageVisible = false;
                _isLoginProcessRunning = false;
                OkCommand.RaiseCanExecuteChanged();
                return;
            }

            App.MainPageModel = await ConnectionAgent.Current.GetMainPage();

            _navigationService.NavigateTo(ViewModelLocator.MainPageUri);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepra.App\ViewModel\MainViewModel.cs
private async Task LoadGeneralPosts()
        {
            var latestPosts = await ConnectionAgent.Current.GetLatestPosts();

            var latestPostsViewModel = latestPosts.Select(x => new PostViewModel(x)).ToList();
            if (latestPostsViewModel.Count == 0)
            {
                GeneralPosts = new ObservableCollection<PostViewModel>();
                return;
            }

            if (GeneralPosts != null)
                GeneralPosts.Clear();

            foreach (var postViewModel in latestPostsViewModel)
            {
                await postViewModel.DownloadHeaderImage();

                if (GeneralPosts == null)
                    GeneralPosts = new ObservableCollection<PostViewModel>();

                GeneralPosts.Add(postViewModel);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepra.App\ViewModel\MainViewModel.cs
private async Task LoadMyStuffPosts()
        {
            var myStuff = await ConnectionAgent.Current.GetMyStuff();

            var latestPostsViewModel = myStuff.Select(x => new PostViewModel(x)).ToList();
            if (latestPostsViewModel.Count == 0)
            {
                MyStuffPosts = new ObservableCollection<PostViewModel>();
                return;
            }

            if (MyStuffPosts != null)
                MyStuffPosts.Clear();

            foreach (var postViewModel in latestPostsViewModel)
            {
                await postViewModel.DownloadHeaderImage();

                if (MyStuffPosts == null)
                    MyStuffPosts = new ObservableCollection<PostViewModel>();
                MyStuffPosts.Add(postViewModel);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dobroezlo+MetroLepra\dobroezlo-MetroLepra-d33a0ef\MetroLepra\MetroLepra.App\ViewModel\MainViewModel.cs
private async Task LoadInboxPosts()
        {
            var inbox = await ConnectionAgent.Current.GetInbox();

            var inboxPostsViewModel = inbox.Select(x => new PostViewModel(x)).ToList();
            if (inboxPostsViewModel.Count == 0)
            {
                InboxPosts = new ObservableCollection<PostViewModel>();
                return;
            }

            if (InboxPosts != null)
                InboxPosts.Clear();

            foreach (var postViewModel in inboxPostsViewModel)
            {
                await postViewModel.DownloadHeaderImage();

                if (InboxPosts == null)
                    InboxPosts = new ObservableCollection<PostViewModel>();
                InboxPosts.Add(postViewModel);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dotMorten+SharpGIS.HttpClient.WP\dotMorten-SharpGIS.HttpClient.WP-6552715\src\SharpGIS.HttpClient.WP\Http\HttpClient.cs
public async Task<string> GetStringAsync(Uri requestUri)
        {
            //TODO: There's a lot of context switch here that could be avoided
            var response = await GetAsync(requestUri);
            return await response.Content.ReadAsStringAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dotMorten+SharpGIS.HttpClient.WP\dotMorten-SharpGIS.HttpClient.WP-6552715\src\SharpGIS.HttpClient.WP\Http\HttpContent.cs
public async Task<byte[]> ReadAsByteArrayAsync()
        {
            Stream stream = await ReadAsStreamAsync();
            if (!stream.CanSeek)
            {
                MemoryStream ms = new MemoryStream();
                int count = 0;
                byte[] buffer = new byte[1024];
                while ((count = await stream.ReadAsync(buffer, 0, 1024)) > 0)
                {
                    ms.Write(buffer, 0, count);
                }
                return ms.ToArray();
            }
            else
            {
                byte[] buffer = new byte[stream.Length];
                await stream.ReadAsync(buffer, 0, buffer.Length);
                return buffer;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dotMorten+SharpGIS.HttpClient.WP\dotMorten-SharpGIS.HttpClient.WP-6552715\src\SharpGIS.HttpClient.WP\Http\HttpContent.cs
public async Task<string> ReadAsStringAsync()
        {
            var bytes = await ReadAsByteArrayAsync();
            return UTF8Encoding.UTF8.GetString(bytes, 0, bytes.Length);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dotMorten+SharpGIS.HttpClient.WP\dotMorten-SharpGIS.HttpClient.WP-6552715\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dotMorten+SharpGIS.HttpClient.WP\dotMorten-SharpGIS.HttpClient.WP-6552715\src\UnitTests\WP8\HttpClientTests.cs
[TestMethod]
        public async Task GetAsyncTest1()
        {
            HttpClient client = new HttpClient();
            var response = await client.GetAsync("http://www.microsoft.com");
            Assert.IsTrue(response.IsSuccessStatusCode);
            Assert.AreEqual(response.StatusCode, System.Net.HttpStatusCode.OK);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dotMorten+SharpGIS.HttpClient.WP\dotMorten-SharpGIS.HttpClient.WP-6552715\src\UnitTests\WP8\HttpClientTests.cs
[TestMethod]
        public async Task GetAsyncTest_Compressed()
        {
            HttpClient client = new HttpClient(new HttpClientHandler() { AutomaticDecompression = System.Net.DecompressionMethods.GZip });
            var response = await client.GetAsync("http://www.microsoft.com");
            Assert.IsTrue(response.IsSuccessStatusCode);
            Assert.AreEqual(response.StatusCode, System.Net.HttpStatusCode.OK);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dotMorten+SharpGIS.HttpClient.WP\dotMorten-SharpGIS.HttpClient.WP-6552715\src\UnitTests\WP8\HttpClientTests.cs
[TestMethod]
        public async Task GetAsyncTest_POST()
        {
            byte[] bytes = Encoding.UTF8.GetBytes("Foo");
            System.IO.MemoryStream ms = new System.IO.MemoryStream(bytes);
            StreamContent streamContent = new StreamContent(ms);
            HttpClient client = new HttpClient();
            var response = await client.PostAsync("http://www.microsoft.com", streamContent);
            Assert.IsFalse(response.IsSuccessStatusCode);
            Assert.AreEqual(response.StatusCode, System.Net.HttpStatusCode.MethodNotAllowed);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dotMorten+SharpGIS.HttpClient.WP\dotMorten-SharpGIS.HttpClient.WP-6552715\src\UnitTests\WP8\HttpClientTests.cs
[TestMethod]
        public async Task GetAsyncTest_POST2()
        {
            byte[] bytes = Encoding.UTF8.GetBytes("Where=1%3D1");
            System.IO.MemoryStream ms = new System.IO.MemoryStream(bytes);
            StreamContent streamContent = new StreamContent(ms);
            HttpClient client = new HttpClient();
            var response = await client.PostAsync("http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Fire/Sheep/FeatureServer/0/query?f=pjson", streamContent);
            string result = await response.Content.ReadAsStringAsync();
            Assert.IsFalse(response.IsSuccessStatusCode);
            Assert.AreEqual(response.StatusCode, System.Net.HttpStatusCode.OK);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dotMorten+SharpGIS.HttpClient.WP\dotMorten-SharpGIS.HttpClient.WP-6552715\src\SharpGIS.HttpClient.WP\Http\HttpClient.cs
public async Task<string> GetStringAsync(Uri requestUri)
        {
            //TODO: There's a lot of context switch here that could be avoided
            var response = await GetAsync(requestUri);
            return await response.Content.ReadAsStringAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dotMorten+SharpGIS.HttpClient.WP\dotMorten-SharpGIS.HttpClient.WP-6552715\src\SharpGIS.HttpClient.WP\Http\HttpContent.cs
public async Task<byte[]> ReadAsByteArrayAsync()
        {
            Stream stream = await ReadAsStreamAsync();
            if (!stream.CanSeek)
            {
                MemoryStream ms = new MemoryStream();
                int count = 0;
                byte[] buffer = new byte[1024];
                while ((count = await stream.ReadAsync(buffer, 0, 1024)) > 0)
                {
                    ms.Write(buffer, 0, count);
                }
                return ms.ToArray();
            }
            else
            {
                byte[] buffer = new byte[stream.Length];
                await stream.ReadAsync(buffer, 0, buffer.Length);
                return buffer;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dotMorten+SharpGIS.HttpClient.WP\dotMorten-SharpGIS.HttpClient.WP-6552715\src\SharpGIS.HttpClient.WP\Http\HttpContent.cs
public async Task<string> ReadAsStringAsync()
        {
            var bytes = await ReadAsByteArrayAsync();
            return UTF8Encoding.UTF8.GetString(bytes, 0, bytes.Length);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dotMorten+SharpGIS.HttpClient.WP\dotMorten-SharpGIS.HttpClient.WP-6552715\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dotnetautor+WP8Kochbuch\dotnetautor-WP8Kochbuch-5444511\Buch.Beispiele\Kapitel 02\FeedReader\FeedReader\MainPage.xaml.cs
private async Task<IEnumerable<FeedItem>> UpdateFeed(string url) {

      string result = "";
      var request = WebRequest.CreateHttp(url);
      request.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";

      var response = await request.GetResponseAsync();

      using (var stream = response.GetResponseStream()) {
        using (var reader = new StreamReader(stream)) {
          result = await reader.ReadToEndAsync();
        }
      }

      var feed = XElement.Parse(result);

      var articles = from item in feed.Descendants("item")
                     select new FeedItem() {
                       Title = item.Element("title").Value,
                       DatePublished = item.Element("pubDate").Value,
                       Description = item.Element("description").Value,
                       ArticleURL = item.Element("guid").Value
                     };

      return articles;
    }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dotnetautor+WP8Kochbuch\dotnetautor-WP8Kochbuch-5444511\Buch.Beispiele\Kapitel 06\02 PlattformAdapter\FeedReaderWP8\Utilities\PhonePlatformAdapter.cs
public override async Task<string> ReadResponseStream(HttpWebResponse response) {

      string result = "";
      Stream stream = (string.Equals(response.Headers[HttpRequestHeader.ContentEncoding], "gzip", StringComparison.OrdinalIgnoreCase)) 
                        ? await Task.Run(() => (response.GetResponseStream().Decompress()) ) 
                        : response.GetResponseStream();
      
      using (var reader = new StreamReader(stream)) {
        result = await reader.ReadToEndAsync();
      }

      return result;
    }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dotnetautor+WP8Kochbuch\dotnetautor-WP8Kochbuch-5444511\Buch.Beispiele\Kapitel 08\01 PhotoCamera\03 PhotoCaptureDeviceDemo\MainPage.xaml.cs
private async void Button_Click_2(object sender, RoutedEventArgs e) {
      CameraCaptureSequence cameraCaptureSequence = _cam.CreateCaptureSequence(1);

      var stream = new MemoryStream();
      cameraCaptureSequence.Frames[0].CaptureStream = stream.AsOutputStream();

      await _cam.PrepareCaptureSequenceAsync(cameraCaptureSequence);
      await cameraCaptureSequence.StartCaptureAsync();

      stream.Seek(0, SeekOrigin.Begin);

      var library = new MediaLibrary();
      library.SavePictureToCameraRoll("pic1.jpg", stream);

    }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dotnetautor+WP8Kochbuch\dotnetautor-WP8Kochbuch-5444511\Buch.Beispiele\Kapitel 08\01 PhotoCamera\04 SimpleLense\LensPage.xaml.cs
private async void Button_Click_2(object sender, RoutedEventArgs e) {
      CameraCaptureSequence cameraCaptureSequence = cam.CreateCaptureSequence(1);

      MemoryStream stream = new MemoryStream();
      cameraCaptureSequence.Frames[0].CaptureStream = stream.AsOutputStream();

      await cam.PrepareCaptureSequenceAsync(cameraCaptureSequence);
      await cameraCaptureSequence.StartCaptureAsync();

      stream.Seek(0, SeekOrigin.Begin);

      MediaLibrary library = new MediaLibrary();
      library.SavePictureToCameraRoll("pic1.jpg", stream);


    }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dotnetautor+WP8Kochbuch\dotnetautor-WP8Kochbuch-5444511\Buch.Beispiele\Kapitel 08\01 PhotoCamera\04 SimpleLense\MainPage.xaml.cs
private async void Button_Click_2(object sender, RoutedEventArgs e) {
      CameraCaptureSequence cameraCaptureSequence = _cam.CreateCaptureSequence(1);

      MemoryStream stream = new MemoryStream();
      cameraCaptureSequence.Frames[0].CaptureStream = stream.AsOutputStream();

      await _cam.PrepareCaptureSequenceAsync(cameraCaptureSequence);
      await cameraCaptureSequence.StartCaptureAsync();

      stream.Seek(0, SeekOrigin.Begin);

      var library = new MediaLibrary();
      library.SavePictureToCameraRoll("pic1.jpg", stream);


    }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dotnetautor+WP8Kochbuch\dotnetautor-WP8Kochbuch-5444511\Buch.Beispiele\Kapitel 08\01 PhotoCamera\05 LiveEffect\Code\Nokia\NokiaImagingSDKEffects.cs
public async Task<Stream> ApplyEffect(Stream stream) {
        if (captureDevice == null) {
          return null;
        }

        stream.Seek(0, SeekOrigin.Begin);

        using (var session =  await EditingSessionFactory.CreateEditingSessionAsync(stream)) {
          switch (effectIndex) {
            case 0:
              session.AddFilter(FilterFactory.CreateLomoFilter(0.5, 0.5, LomoVignetting.High, LomoStyle.Yellow));
              break;
            case 1:
              session.AddFilter(FilterFactory.CreateMagicPenFilter());
              break;
            case 2:
              session.AddFilter(FilterFactory.CreateGrayscaleFilter());
              break;
            case 3:
              session.AddFilter(FilterFactory.CreateAntiqueFilter());
              break;
            case 4:
              session.AddFilter(FilterFactory.CreateStampFilter(5, 100));
              break;
            case 5:
              session.AddFilter(FilterFactory.CreateCartoonFilter(false));
              break;
          }

          return (await session.RenderToJpegAsync()).AsStream();
        }
      }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dotnetautor+WP8Kochbuch\dotnetautor-WP8Kochbuch-5444511\Buch.Beispiele\Kapitel 08\01 PhotoCamera\05 LiveEffect\Pages\LensePage.xaml.cs
private async void AutoFocus()
    {
        if (!_capturing && PhotoCaptureDevice.IsFocusSupported(_camera.SensorLocation)){
            
            await _camera.FocusAsync();

            _capturing = false;
        }
    }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\dotnetautor+WP8Kochbuch\dotnetautor-WP8Kochbuch-5444511\Buch.Beispiele\Kapitel 08\01 PhotoCamera\05 LiveEffect\Pages\LensePage.xaml.cs
private async void TakePicture() {
      if (!_capturing) {
        _capturing = true;
        CameraCaptureSequence cameraCaptureSequence = _camera.CreateCaptureSequence(1);

        var stream = new MemoryStream();
        cameraCaptureSequence.Frames[0].CaptureStream = stream.AsOutputStream();

        await _camera.PrepareCaptureSequenceAsync(cameraCaptureSequence);
        await cameraCaptureSequence.StartCaptureAsync();

        var effect = await _cameraEffect.ApplyEffect(stream);
        // store the processed image

        var library = new MediaLibrary();
        library.SavePictureToCameraRoll(String.Format("WP8_{0:yyyyMMdd_hhmmss}.jpg", DateTime.Now), effect);

        //// store the original
        //stream.Seek(0, SeekOrigin.Begin);
        //var library = new MediaLibrary();
        //library.SavePictureToCameraRoll("pic1.jpg", stream);
        _capturing = false;
      }
    }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\EgorBo+MvvmNavigationToolkit\EgorBo-MvvmNavigationToolkit-adf2827\src\MvvmNavigationToolkit.WindowsPhone.Sample\ViewModels\NotesViewModel.cs
public override async void OnNavigatedTo()
        {
            base.OnNavigatedTo();
            if (!_isLoaded)
            {
                _isLoaded = true;
                IsBusy = true;
                await Task.Delay(150);
                for (int i = 0; i < 10; i++)
                {
                    Notes.Add(new NoteViewModel("note " + i, "note description " + i));
                    await Task.Delay(20);
                }
                IsBusy = false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\EtaSDK\v3\EtaAPI.dealer.cs
async public Task<EtaResponse<List<Dealer>>> GetDealers(EtaApiQueryStringParameterOptions options)
        {

            EtaApi api = new EtaApi();
            var eta = await api.ApiRawAsync("/api/v1/dealer/list/", options);
            if (eta.HasErrors)
            {
                //return new EtaResponse<List<Catalog>>(eta.Uri, eta.Error);
            }
            var jsonstr = eta.Result;
            var result = await TaskEx.Run<EtaResponse<List<Dealer>>>(() =>
            {
                if (!string.IsNullOrWhiteSpace(jsonstr))
                {
                    List<Dealer> dealers = new List<Dealer>();
                    var json = JsonValue.Parse(jsonstr);
                    foreach (var item in json["data"] as JsonArray)
                    {
                        var dealer = Dealer.FromJson(item);
                        dealers.Add(dealer);
                    }
                    return new EtaResponse<List<Dealer>>(eta.Uri, dealers);
                }
                return new EtaResponse<List<Dealer>>(eta.Uri, new Exception("json response is null or empty"));
            });
            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\EtaSDK\v3\EtaAPI.raw.cs
async public Task<EtaResponse<string>> ApiRawAsync(string resourceUri, EtaApiQueryStringParameterOptions options)
        {
            var requestUri = new Uri(
                    new Uri(Resources.Eta_BaseUri),
                    resourceUri + options.AsQueryString());
            try
            {
                PreConditionValidation(resourceUri, options);

                
                var httpClient = HttpWebRequest.CreateHttp(requestUri);
                // http://msdn.microsoft.com/en-us/library/system.net.httpwebrequest.allowreadstreambuffering(v=vs.95).aspx
                httpClient.AllowReadStreamBuffering = false; 
                httpClient.Method = options.webMethod;
                httpClient.Accept = options.responseType;

                var response = await httpClient.GetResponseAsync();
                var result = await TaskEx.Run<EtaResponse<string>>(() =>
                {
                    if (response != null)
                    {
                        var stream = response.GetResponseStream();
                        if (stream != null)
                        {
                            string json = null;
                            using (var reader = new StreamReader(stream))
                            {
                                json = reader.ReadToEnd();
                            }
                            if (json.StartsWith("<textarea>"))
                            {
                                json = json.Remove(0, 10);
                                json = json.Remove(json.Length - 11, 11);
                            }
                            var header = Header.FromJson(json);
                            return new EtaResponse<string>(requestUri, json) { Header = header };
                        }
                        else
                        {
                            return new EtaResponse<string>(requestUri, new Exception("ApiRawAsync: GetResponseStream is null"));
                        }
                    }
                    return new EtaResponse<string>(requestUri, new Exception("ApiRawAsync: response is null"));

                });
                return result;
            }
            catch (Exception ex)
            {
                return new EtaResponse<string>(requestUri,ex);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\EtaSDK\v3\EtaAPI.catalog.cs
async public Task<EtaResponse<List<CatalogHotspot>>> GetCatalogHotspotAsync(EtaApiQueryStringParameterOptions options)
        {
            if (options == null)
            {
                options = new EtaApiQueryStringParameterOptions();
                options.AddParm(EtaApiConstants.EtaApi_Latitude, "55.77012");
                options.AddParm(EtaApiConstants.EtaApi_Longitude, "12.46320");
                options.AddParm(EtaApiConstants.EtaApi_LocationDetermined, UNIXTime.GetTimestamp(DateTime.Now));
                options.AddParm(EtaApiConstants.EtaApi_Geocoded, "0");
                options.AddParm(EtaApiConstants.EtaApi_Accuracy, "0");
                options.AddParm(EtaApiConstants.EtaApi_Ditance, "10000");
            }

            var eta = await ApiRawAsync("/api/v1/catalog/hotspot/list/", options);
            if (eta.HasErrors)
            {
                return new EtaResponse<List<CatalogHotspot>>(eta.Uri, eta.Error);
            }
            var jsonstr = eta.Result;

            var result = await TaskEx.Run<EtaResponse<List<CatalogHotspot>>>(() =>
            {
                if (!string.IsNullOrWhiteSpace(jsonstr))
                {
                    List<CatalogHotspot> cataloghotSpots = new List<CatalogHotspot>();
                    var json = JsonValue.Parse(jsonstr);
                    cataloghotSpots.Add(CatalogHotspot.FromJson(json["data"] as JsonValue));
                    return new EtaResponse<List<CatalogHotspot>>(eta.Uri, cataloghotSpots);
                }
                return new EtaResponse<List<CatalogHotspot>>(eta.Uri, new Exception("json response is null or empty"));
            });
            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\EtaSDK\v3\EtaAPI.catalog.cs
async public Task<EtaResponse<List<Catalog>>> GetCatalogListAsync(EtaApiQueryStringParameterOptions options)
        {
            if (options == null)
            {
                options = new EtaApiQueryStringParameterOptions();
                options.AddParm(EtaApiConstants.EtaApi_Latitude, "55.77012");
                options.AddParm(EtaApiConstants.EtaApi_Longitude, "12.46320");
                options.AddParm(EtaApiConstants.EtaApi_LocationDetermined, UNIXTime.GetTimestamp(DateTime.Now));
                options.AddParm(EtaApiConstants.EtaApi_Geocoded, "0");
                options.AddParm(EtaApiConstants.EtaApi_Accuracy, "0");
                options.AddParm(EtaApiConstants.EtaApi_Ditance, "10000");
            }

            var eta = await ApiRawAsync("/api/v1/catalog/list/", options);
            if (eta.HasErrors)
            {
                return new EtaResponse<List<Catalog>>(eta.Uri, eta.Error);
            }
            var jsonstr = eta.Result;

            var result = await TaskEx.Run<EtaResponse<List<Catalog>>>(() =>
            {
                if (!string.IsNullOrWhiteSpace(jsonstr))
                {
                    List<Catalog> catalogs = new List<Catalog>();
                    var json = JsonValue.Parse(jsonstr);
                    foreach (var item in json["data"] as JsonArray)
                    {
                        var catalog = Catalog.FromJson(item);
                        catalogs.Add(catalog);
                    }
                    return new EtaResponse<List<Catalog>>(eta.Uri, catalogs);
                }
                return new EtaResponse<List<Catalog>>(eta.Uri, new Exception("json response is null or empty"));
            });
            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\EtaSDK\v3\EtaAPI.catalog.cs
async public Task<EtaResponse<Catalog>> GetCatalogInfoAsync(string catalogId, string publicKey)
        {
            var options = new EtaApiQueryStringParameterOptions();
            options.AddParm("catalog", catalogId);

            var eta = await ApiRawAsync("/api/v1/catalog/info/", options);
            if (eta.HasErrors)
            {
                return new EtaResponse<Catalog>(eta.Uri,eta.Error);
            }

            var jsonstr = eta.Result;

            var result = await TaskEx.Run<Catalog>(() =>
            {
                Catalog catalog = null;
                if (!string.IsNullOrWhiteSpace(jsonstr))
                {
                    var json = JsonValue.Parse(jsonstr);
                    catalog = Catalog.FromJson(json);
                }
                return catalog;
            });
            return new EtaResponse<Catalog>(eta.Uri, result);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\EtaSDK\v3\EtaAPI.offer.cs
async public Task<EtaResponse<JsonValue>> GetOfferInfoAsync(EtaApiQueryStringParameterOptions options)
        {
            if (options == null)
            {
                options = new EtaApiQueryStringParameterOptions();
                options.AddParm("type", "all");
            }

            var eta = await ApiRawAsync("/api/v1/offer/info/", options);
            if (eta.HasErrors)
            {
                return new EtaResponse<JsonValue>(eta.Uri, eta.Error);
            }

            var jsonstr = eta.Result;

            var result = await TaskEx.Run<EtaResponse<JsonValue>>(() =>
            {
                if (!string.IsNullOrWhiteSpace(jsonstr))
                {
                    var json = JsonValue.Parse(jsonstr);
                    return new EtaResponse<JsonValue>(eta.Uri,json);
                }
                return new EtaResponse<JsonValue>(eta.Uri, new Exception("Jsonstr value is null or empty"));
            });
            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\EtaSDK\v3\EtaAPI.offer.cs
async public Task<EtaResponse<List<Offer>>> GetOfferListAsync(EtaApiQueryStringParameterOptions options)
        {
            if (options == null)
            {
                options = new EtaApiQueryStringParameterOptions();
                options.AddParm("from", EtaSDK.Utils.UNIXTime.GetTimestamp(DateTime.Now));
                options.AddParm("to", EtaSDK.Utils.UNIXTime.GetTimestamp(DateTime.Now.AddDays(14)));

                options.AddParm(EtaApiConstants.EtaApi_Latitude, "55.77012");
                options.AddParm(EtaApiConstants.EtaApi_Longitude, "12.46320");
                options.AddParm(EtaApiConstants.EtaApi_LocationDetermined, UNIXTime.GetTimestamp(DateTime.Now));
                options.AddParm(EtaApiConstants.EtaApi_Geocoded, "0");
                options.AddParm(EtaApiConstants.EtaApi_Accuracy, "0");
                options.AddParm(EtaApiConstants.EtaApi_Ditance, "10000");

                //options.AddParm(EtaApiConstants.EtaApi_OfferId, "");
                options.AddParm("store", "5d6dBY"); // 5d6dBY
                options.AddParm("type", "suggested");
            }

            var eta = await ApiRawAsync("/api/v1/offer/list/", options);
            if (eta.HasErrors)
            {
                return new EtaResponse<List<Offer>>(eta.Uri, eta.Error);
            }

            var jsonstr = eta.Result;

            var result = await TaskEx.Run<EtaResponse<List<Offer>>>(() =>
            {
                return ParseOffers(eta.Uri, jsonstr);
            });
            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\EtaSDK\v3\EtaAPI.offer.cs
async public Task<EtaResponse<List<Offer>>> GetOfferSearchAsync(EtaApiQueryStringParameterOptions options, string query)
        {
            if (options == null)
            {
                options = new EtaApiQueryStringParameterOptions();

                options.AddParm(EtaApiConstants.EtaApi_Latitude, "55.77012");
                options.AddParm(EtaApiConstants.EtaApi_Longitude, "12.46320");
                options.AddParm(EtaApiConstants.EtaApi_LocationDetermined, UNIXTime.GetTimestamp(DateTime.Now));
                options.AddParm(EtaApiConstants.EtaApi_Geocoded, "0");
                options.AddParm(EtaApiConstants.EtaApi_Accuracy, "0");
                options.AddParm(EtaApiConstants.EtaApi_Ditance, "10000");
            }

            options.AddParm("q", query);

            var eta = await ApiRawAsync("/api/v1/offer/search/", options);
            if (eta.HasErrors)
            {
                return new EtaResponse<List<Offer>>(eta.Uri, eta.Error);
            }
            var jsonstr = eta.Result;

            var result = await TaskEx.Run <EtaResponse<List<Offer>>>(() =>
            {
                return ParseOffers(eta.Uri, jsonstr);
            });
            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\EtaSDK\v3\EtaAPI.store.cs
async public Task<EtaResponse<Store>> GetStoreInfoAsync(EtaApiQueryStringParameterOptions options)
        {
            if (options == null)
            {
                options = new EtaApiQueryStringParameterOptions();
                options.AddParm("store", "0a63T");
            }

            var eta = await ApiRawAsync("/api/v1/store/info/", options);
            if (eta.HasErrors)
            {
                return new EtaResponse<Store>(eta.Uri, eta.Error);
            }
            var jsonstr = eta.Result;
            var result = await TaskEx.Run<EtaResponse<Store>>(() =>
            {
                if (!string.IsNullOrWhiteSpace(jsonstr))
                {
                    var json = JsonValue.Parse(jsonstr);
                    var store = Store.FromJson(json["data"], isRoot: true);
                    return new EtaResponse<Store>(eta.Uri, store);
                }
                return new EtaResponse<Store>(eta.Uri, new Exception("response is null or empty"));
            });
            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\EtaSDK\v3\EtaAPI.store.cs
async public Task<EtaResponse<List<Store>>> GetStoreListAsync(EtaApiQueryStringParameterOptions options)
        {
            // Offer Id el. Catalog id med som key
            if (options == null)
            {
                options = new EtaApiQueryStringParameterOptions();
                options.AddParm(EtaApiConstants.EtaApi_Latitude, "55.77012");
                options.AddParm(EtaApiConstants.EtaApi_Longitude, "12.46320");
                options.AddParm(EtaApiConstants.EtaApi_LocationDetermined, UNIXTime.GetTimestamp(DateTime.Now));
                options.AddParm(EtaApiConstants.EtaApi_Geocoded, "0");
                options.AddParm(EtaApiConstants.EtaApi_Accuracy, "0");
                options.AddParm(EtaApiConstants.EtaApi_Ditance, "10000");
                //options.AddParm(EtaApiConstants.EtaApi_OfferId, "");
                //options.AddParm(EtaApiConstants.EtaApi_CatalogId, "");
                options.AddParm("type", "suggested");
            }

            var eta = await ApiRawAsync("/api/v1/store/list/", options);
            if (eta.HasErrors)
            {
                return new EtaResponse<List<Store>>(eta.Uri, eta.Error);
            }
            var jsonstr = eta.Result;

            var result = await TaskEx.Run<EtaResponse<List<Store>>>(() =>
            {
                if (!string.IsNullOrWhiteSpace(jsonstr))
                {
                    List<Store> stores = new List<Store>();
                    var json = JsonValue.Parse(jsonstr);
                    foreach (var item in json["data"] as JsonArray)
                    {
                        var store = Store.FromJson(item, isRoot: true);
                        stores.Add(store);
                    }
                    return new EtaResponse<List<Store>>(eta.Uri, stores);
                }
                return new EtaResponse<List<Store>>(eta.Uri, new Exception("JsonValue is null or empty"));
            });
            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\EtaSampleApp\ViewModels\MainViewModel.cs
async public Task LoadUserViewModel()
        {
            if (IsUserViewModelLoading)
            {
                return;
            }
            IsUserViewModelLoading = true;

            var result = await UserViewModel.LoadModelAsync();
            //Deployment.Current.Dispatcher.BeginInvoke(() =>
            //{
                UserViewModel = result;
                IsUserViewModelLoaded = UserViewModel != null && UserViewModel.Location != null;
                IsUserViewModelLoading = false;
            //});
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\EtaSampleApp\ViewModels\UserViewModel.cs
public static async Task<UserViewModel> LoadModelAsync()
        {
            var userModel = await GetUserViewModelFromISOAsync();
          
            var tcs = new TaskCompletionSource<UserViewModel>();
            tcs.SetResult(userModel);

            return await tcs.Task;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\EtaSampleApp\ViewModels\UserViewModel.cs
public static async Task<UserViewModel> GetUserViewModelFromISOAsync()
        {
            var tcs = new TaskCompletionSource<UserViewModel>();
            var settings = new AppSettingsHelper();
            var model = settings.GetValueOrNew<UserViewModel>(SettingsKeyName);
            tcs.SetResult(model);
            return await tcs.Task;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\EtaSampleApp\Views\MainPage.xaml.cs
async private Task WaitForNetwork()
        {
            if (IsNetworkAvailable)
            {
                return;
            }
            else
            {
                await TaskEx.Run(() =>
                {
                    while (!IsNetworkAvailable)
                    {
                        Thread.Sleep(250);
                    }
                });
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\EtaSDK.Test\Tests\EtaSDKv3Tests\EtaCatalogTests.cs
[TestMethod, Asynchronous]
        async public Task GetCatalogList_test()
        {
            var api = new EtaSDK.v3.EtaApi();

            var response = await api.GetCatalogListAsync(null);

            if (response.HasErrors)
            {
                TestCompleteWithErrorsUISafe("Catalogs error: " + response.Error.Message);
            }
            var catalogs = response.Result;
            if (catalogs == null || !catalogs.Any())
            {
                TestCompleteWithErrorsUISafe("Catalogs == null or empty");
            }
            foreach (var catalog in catalogs)
            {
                if (catalog == null || catalog.Id == null)
                {
                    TestCompleteWithErrorsUISafe("Catalog == null");
                }

                if (catalog.Store == null || catalog.Store.Id == null)
                {
                    TestCompleteWithErrorsUISafe("Catalog.Store == null");
                }

                if (catalog.Store.Country == null || catalog.Store.Country.Alpha2 == null)
                {
                    TestCompleteWithErrorsUISafe("Catalog.Store.Country == null");
                }

                if (catalog.Store.Dealer == null || catalog.Store.Dealer.Id == null)
                {
                    TestCompleteWithErrorsUISafe("Catalog.Store.Dealer == null");
                }

                if (catalog.Store.Dealer.Branding == null || catalog.Store.Dealer.Branding.Color == null)
                {
                    TestCompleteWithErrorsUISafe("Catalog.Store.Dealer.Branding == null");
                }
            }
            TestCompleteUISafe();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\EtaSDK.Test\Tests\EtaSDKv3Tests\EtaCatalogTests.cs
[Ignore]
        [TestMethod, Asynchronous]
        async public Task GetCatalogInfo_test()
        {
            string id = "1a94vO"; // Irma catalog id ?!
            string publicKey = "1a94vO"; // Irma publickey ?!
            var api = new EtaSDK.v3.EtaApi();

            var response = await api.GetCatalogInfoAsync(id, publicKey);
            if (response.HasErrors)
            {
                TestCompleteWithErrorsUISafe("Catalog info error: " + response.Error.Message);
            }
            var catalog = response.Result;

            if (catalog == null || string.IsNullOrWhiteSpace(catalog.Id))
            {
                TestCompleteWithErrorsUISafe("catalog is null or empty");
            }
            else
            {
                TestCompleteUISafe();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\EtaSDK.Test\Tests\EtaSDKv3Tests\EtaOfferTests.cs
[TestMethod, Asynchronous]
        async public Task GetOfferList_test()
        {
            var api = new EtaSDK.v3.EtaApi();
            var response = await api.GetOfferListAsync(null);
            if (response.HasErrors)
            {
                TestCompleteWithErrorsUISafe("offer list error: " + response.Error.Message);
            }
            else
            {
                var catalogs = response.Result;

                if (catalogs.Any())
                {
                    TestCompleteUISafe();

                }
                else
                {
                    TestCompleteWithErrorsUISafe("Offers is null or Empty");
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\EtaSDK.Test\Tests\EtaSDKv3Tests\EtaOfferTests.cs
[TestMethod, Asynchronous]
        async public Task GetOfferSearch_test()
        {
            var api = new EtaSDK.v3.EtaApi();
            var response = await api.GetOfferSearchAsync(null, "kaffe");
            if (response.HasErrors)
            {
                TestCompleteWithErrorsUISafe("offer search error: " + response.Error.Message);
            }
            else
            {
                var offers = response.Result;

                if (offers.Any())
                {
                    TestCompleteUISafe();
                }
                else
                {
                    TestCompleteWithErrorsUISafe("Offer Search result is null or Empty");
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\EtaSDK.Test\Tests\EtaSDKv3Tests\EtaOfferTests.cs
[TestMethod, Asynchronous]
        async public Task GetOfferListSuggested_test()
        {
            var options = new EtaApiQueryStringParameterOptions();
            
            options.AddParm(EtaApiConstants.EtaApi_Latitude, "55.77012");
            options.AddParm(EtaApiConstants.EtaApi_Longitude, "12.46320");
            options.AddParm(EtaApiConstants.EtaApi_LocationDetermined, UNIXTime.GetTimestamp(DateTime.Now));
            options.AddParm(EtaApiConstants.EtaApi_Geocoded, "0");
            options.AddParm(EtaApiConstants.EtaApi_Accuracy, "50");
            options.AddParm(EtaApiConstants.EtaApi_Ditance, "10000");

            //options.AddParm(EtaApiConstants.EtaApi_OfferId, "");
            options.AddParm("type", "suggested");
            //options.AddParm("api_limit", "100");
            options.AddParm("from", UNIXTime.GetTimestamp(DateTime.Now));
            options.AddParm("to", UNIXTime.GetTimestamp(DateTime.Now.AddDays(14)));

            var api = new EtaSDK.v3.EtaApi();

            var response = await api.GetOfferListAsync(options);
            if (response.HasErrors)
            {
                TestCompleteWithErrorsUISafe("suggeted offers search error: " + response.Error.Message);
            }
            else
            {
                var offers = response.Result;

                if (offers.Any())
                {
                    TestCompleteUISafe();
                }
                else
                {
                    TestCompleteWithErrorsUISafe("Suggested Offers Search result is null or Empty");
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\EtaSDK.Test\Tests\EtaSDKv3Tests\EtaStoreTests.cs
[TestMethod, Asynchronous]
        async public Task GetStoreList_test()
        {
            var api = new EtaSDK.v3.EtaApi();
            var response = await api.GetStoreListAsync(null);
            if (response.HasErrors)
            {
                TestCompleteWithErrorsUISafe("Store info error: " + response.Error.Message);
            }
            else
            {
                var stores = response.Result;

                if (stores == null || !stores.Any())
                {
                    TestCompleteWithErrorsUISafe("Stores is null or Empty");
                }
                TestCompleteUISafe();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\EtaSDK.Test\Tests\EtaSDKv3Tests\EtaStoreTests.cs
[TestMethod, Asynchronous]
        async public Task GetStoreInfo_test()
        {
            var api = new EtaSDK.v3.EtaApi();
            var response = await api.GetStoreInfoAsync(null);

            if (response.HasErrors)
            {
                TestCompleteWithErrorsUISafe("Store info error: " + response.Error.Message);
            }
            else
            {
                var store = response.Result;

                if (store == null || string.IsNullOrWhiteSpace(store.Id))
                {
                    TestCompleteWithErrorsUISafe("Store is null or Empty");
                }
                else
                {
                    TestCompleteUISafe();
                }
            }

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\EtaSDK.Test\Tests\Utils\DurationHelperTests.cs
[TestMethod, Asynchronous]
        async public Task GetDuratioinTest_1()
        {
            var api = new EtaSDK.v3.EtaApi();
            var response = await api.GetCatalogListAsync(null);
            if (response.HasErrors)
            {
                TestCompleteWithErrorsUISafe("Catalog error: " + response.Error.Message);
            }
            else
            {
                var catalogs = response.Result;
                if (catalogs == null || !catalogs.Any())
                {
                    TestCompleteWithErrorsUISafe("Catalog null or Empty");
                }
                else
                {
                    var catalog = catalogs.First();
                    var durationLabel = DurationHelper.GetDurationLabel(catalog.RunFrom, catalog.RunTill);
                    if (string.IsNullOrWhiteSpace(durationLabel))
                    {
                        TestCompleteWithErrorsUISafe("durationLabel null or Empty");
                    }
                    TestCompleteUISafe();
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\Esmann.WP.Common\ZipCodes\Denmark.cs
public async Task<GeoLocationCity> PostalCodeToLocationAsync(string postalCode)
        {
            int postal = int.Parse(postalCode);
            return await PostalCodeToLocationAsync(postal);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\Esmann.WP.Common\ZipCodes\Denmark.cs
public async Task<GeoLocationCity> PostalCodeToLocationAsync(int postalCode)
        {
            var tcs = new TaskCompletionSource<GeoLocationCity>();
            var result = await TaskEx.Run<GeoLocationCity>(() =>
            {
                var query = PostalCodes.Where(item => item.PostalCode == postalCode).FirstOrDefault();
                if (query == null)
                {
                    return GeoLocationCity.UnkownCity();
                }
                return query;
            });
            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\Esmann.WP.Common\ZipCodes\Denmark.cs
public async Task<GeoLocationCity> LocationToPostalCodeAsync(double lat, double lon)
        {
            return await LocationToPostalCodeAsync(new GeoCoordinate(lat,lon));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\Esmann.WP.Common\ZipCodes\Denmark.cs
public async Task<GeoLocationCity> LocationToPostalCodeAsync(GeoCoordinate location)
        {
            var tcs = new TaskCompletionSource<GeoLocationCity>();
            var result = await TaskEx.Run<GeoLocationCity>(() =>
            {
                var query = PostalCodes
                    .OrderBy(item => item.Location.GetDistanceTo(location))
                    .FirstOrDefault();
                if (query == null)
                {
                    return GeoLocationCity.UnkownCity();
                }
                return query;
            });
            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\BingServices\LocationsAPIHelper.cs
public async Task<GeocodeLocation> ZipCodeToGeoCoordinateAsync(string zipCode, string country = "Denmark")
        {
            var tcs = new TaskCompletionSource<GeocodeLocation>();

            string address = string.Format("{0}, {1}", zipCode, country);
            GeocodeRequest request = new GeocodeRequest();
            request.Credentials = new Credentials();
            request.Credentials.ApplicationId = Settings.BingmapsAPIKey;
            request.Query = address;

            var filters = new ObservableCollection<FilterBase>();
            filters.Add(new ConfidenceFilter() { MinimumConfidence = Confidence.Medium });
            GeocodeOptions options = new GeocodeOptions();
            options.Filters = filters;
            request.Options = options;


            GeocodeServiceClient geocodeService = new GeocodeServiceClient("BasicHttpBinding_IGeocodeService");
            
            geocodeService.GeocodeCompleted += (object sender, GeocodeCompletedEventArgs e) => {
                if (e.Cancelled)
                {
                    tcs.SetCanceled();
                    return;
                }

                if (e.Error != null)
                {
                    tcs.SetException(e.Error);
                    return;
                }
                if (e.Result == null || !e.Result.Results.Any())
                {
                    tcs.SetResult(null);
                    return;
                }
                var geoCodeResult = e.Result.Results.FirstOrDefault();
                if (geoCodeResult == null)
                {
                    tcs.TrySetResult(null);
                    return;
                }

                if(geoCodeResult.Locations == null || !geoCodeResult.Locations.Any()){
                     tcs.TrySetResult(null);
                     return;
                }
                var location = geoCodeResult.Locations.FirstOrDefault();
                if (location == null)
                {
                    tcs.SetResult(null);
                    return;
                }
                tcs.SetResult(location);
            };
            geocodeService.GeocodeAsync(request);
            return await tcs.Task;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\BingServices\LocationsAPIHelper.cs
public async Task<string> GeoCoordinateToZipCodeAsync(double lat, double lon)
        {
            var tcs = new TaskCompletionSource<string>();
            WebClient client = new WebClient();
            string uri = string.Format("http://dev.virtualearth.net/REST/v1/Locations/{0},{1}?o=json&key={2}", lat.ToString().Replace(',', '.'), lon.ToString().Replace(',', '.'), Settings.BingmapsAPIKey);
            var result = await client.DownloadStringTaskAsync(new Uri(uri));

            if (!string.IsNullOrWhiteSpace(result))
            {
                var json = JsonValue.Parse(result);
                if (json != null)
                {
                    try
                    {
                        string postal = json["resourceSets"][0]["resources"][0]["address"]["postalCode"];
                        tcs.SetResult(postal);
                        
                    }
                    catch (Exception ex)
                    {
                        tcs.TrySetException(ex);
                    }
                }
            }
            return await tcs.Task;


            //bool taskCompleted = false;

            //string point = "/51.504360719046616,-0.12600176611298197";// string.Format("userLocation={0}, {1}", lat, lon);
            //GeocodeRequest request = new GeocodeRequest();
            //request.Credentials = new Credentials();
            //request.Credentials.ApplicationId = Settings.BingmapsAPIKey;
            //request.Query = point;

            //var filters = new ObservableCollection<FilterBase>();
            //filters.Add(new ConfidenceFilter() { MinimumConfidence = Confidence.Medium });
            //GeocodeOptions options = new GeocodeOptions();
            //options.Filters = filters;
            //request.Options = options;


            //GeocodeServiceClient geocodeService = new GeocodeServiceClient("BasicHttpBinding_IGeocodeService");

            //geocodeService.GeocodeCompleted += (object sender, GeocodeCompletedEventArgs e) =>
            //{
            //    if (taskCompleted)
            //    {
            //        return;
            //    }
            //    if (e.Cancelled)
            //    {
            //        tcs.SetCanceled();
            //        taskCompleted = true;
            //        return;
            //    }
            //    if (e.Error != null)
            //    {
            //        tcs.SetException(e.Error);
            //        taskCompleted = true;
            //        return;
            //    }
            //    if (e.Result == null || e.Result.Results.Count == 0)
            //    {
            //        tcs.SetResult(null);
            //        taskCompleted = true;
            //        return;
            //    }
            //    var geoCodeResult = e.Result.Results.FirstOrDefault();
            //    if (geoCodeResult == null)
            //    {
            //        tcs.SetResult(null);
            //        taskCompleted = true;
            //        return;
            //    }
            //    if (geoCodeResult.Address == null)
            //    {
            //        tcs.SetResult(null);
            //        taskCompleted = true;
            //        return;
            //    }
                
            //    tcs.SetResult(geoCodeResult.Address);
            //    taskCompleted = true;
            //};
            //geocodeService.GeocodeAsync(request);
            //return await tcs.Task;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\OIORestServices\Geoservicen\PostnummerServiceHelper.cs
public async Task<string> GeoToPostalCode(double lat, double lon)
        {
            var tcs = new TaskCompletionSource<string>();
            WebClient client = new WebClient();
            string uri = string.Format("http://geo.oiorest.dk/postnumre/{0},{1}.json", lat.ToString().Replace(',', '.'), lon.ToString().Replace(',', '.'));
            var result = await client.DownloadStringTaskAsync(new Uri(uri));

            if (!string.IsNullOrWhiteSpace(result))
            {
                var json = JsonValue.Parse(result);
                if (json != null)
                {
                    try
                    {
                        string postal = json["fra"];
                        tcs.SetResult(postal);

                    }
                    catch (Exception ex)
                    {
                        tcs.TrySetException(ex);
                    }
                }
            }
            return await tcs.Task;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\eTilbudsavis+native-windows-phone-sdk\eTilbudsavis-native-windows-phone-sdk-231feb7\OIORestServices\Geoservicen\PostnummerServiceHelper.cs
public async Task<string> PostalCodeToGeo(string postalCode)
        {
            double lat =0, lon =0;
            var tcs = new TaskCompletionSource<string>();
            WebClient client = new WebClient();
            string uri = string.Format("http://geo.oiorest.dk/postnumre/{0},{1}.json", lat.ToString().Replace(',', '.'), lon.ToString().Replace(',', '.'));
            var result = await client.DownloadStringTaskAsync(new Uri(uri));

            if (!string.IsNullOrWhiteSpace(result))
            {
                var json = JsonValue.Parse(result);
                if (json != null)
                {
                    try
                    {
                        string postal = json["fra"];
                        tcs.SetResult(postal);

                    }
                    catch (Exception ex)
                    {
                        tcs.TrySetException(ex);
                    }
                }
            }
            return await tcs.Task;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\facebook-csharp-sdk+facebook-winclient-sdk\facebook-csharp-sdk-facebook-winclient-sdk-61e6f73\Source\Facebook.Client-WP7\..\Facebook.Client\FacebookSessionClient.cs
public async Task<FacebookSession> LoginAsync()
        {
            return await LoginAsync(null, false);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\facebook-csharp-sdk+facebook-winclient-sdk\facebook-csharp-sdk-facebook-winclient-sdk-61e6f73\Source\Facebook.Client-WP7\..\Facebook.Client\FacebookSessionClient.cs
public async Task<FacebookSession> LoginAsync(string permissions)
        {
            return await LoginAsync(permissions, false);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\facebook-csharp-sdk+facebook-winclient-sdk\facebook-csharp-sdk-facebook-winclient-sdk-61e6f73\Source\Facebook.Client-WP7\..\Facebook.Client\FacebookSessionClient.cs
internal async Task<FacebookSession> LoginAsync(string permissions, bool force)
        {
            if (this.LoginInProgress)
            {
                throw new InvalidOperationException("Login in progress.");
            }

            this.LoginInProgress = true;
            try
            {
                var session = FacebookSessionCacheProvider.Current.GetSessionData();
                if (session == null)
                {
                    // Authenticate
                    var authResult = await PromptOAuthDialog(permissions, WebAuthenticationOptions.None);

                    FacebookClient client = new FacebookClient(authResult.AccessToken);
                    var parameters = new Dictionary<string, object>();
                    parameters["fields"] = "id";

                    var result = await client.GetTaskAsync("me", parameters);
                    var dict = (IDictionary<string, object>)result;

                    session = new FacebookSession
                    {
                        AccessToken = authResult.AccessToken,
                        Expires = authResult.Expires,
                        FacebookId = (string)dict["id"],
                    };
                  
                }
                else
                {
                    // Check if we are requesting new permissions
                    bool newPermissions = false;
                    if (!string.IsNullOrEmpty(permissions))
                    {
                        var p = permissions.Split(',');
                        newPermissions = session.CurrentPermissions.Join(p, s1 => s1, s2 => s2, (s1, s2) => s1).Count() != p.Length;
                    }

                    // Prompt OAuth dialog if force renew is true or
                    // if new permissions are requested or 
                    // if the access token is expired.
                    if (force || newPermissions || session.Expires <= DateTime.UtcNow)
                    {
                        var authResult = await PromptOAuthDialog(permissions, WebAuthenticationOptions.None);
                        if (authResult != null)
                        {
                            session.AccessToken = authResult.AccessToken;
                            session.Expires = authResult.Expires;
                        }
                    }
                }

                // Set the current known permissions
                if (!string.IsNullOrEmpty(permissions))
                {
                    var p = permissions.Split(',');
                    session.CurrentPermissions = session.CurrentPermissions.Union(p).ToList();
                }

                // Save session data
                FacebookSessionCacheProvider.Current.SaveSessionData(session);
                this.CurrentSession = session;
            }
            finally
            {
                this.LoginInProgress = false;
            }

            return this.CurrentSession;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\facebook-csharp-sdk+facebook-winclient-sdk\facebook-csharp-sdk-facebook-winclient-sdk-61e6f73\Source\Facebook.Client-WP7\..\Facebook.Client\FacebookSessionClient.cs
private async Task<FacebookOAuthResult> PromptOAuthDialog(string permissions, WebAuthenticationOptions options)
        {
            // Use WebAuthenticationBroker to launch server side OAuth flow

            Uri startUri = this.GetLoginUrl(permissions);
            Uri endUri = new Uri("https://www.facebook.com/connect/login_success.html");

            var result = await WebAuthenticationBroker.AuthenticateAsync(options, startUri, endUri);


            if (result.ResponseStatus == WebAuthenticationStatus.ErrorHttp)
            {
                throw new InvalidOperationException();
            }
            else if (result.ResponseStatus == WebAuthenticationStatus.UserCancel)
            {
                throw new InvalidOperationException();
            }

            var client = new FacebookClient();
            var authResult = client.ParseOAuthCallbackUrl(new Uri(result.ResponseData));
            return authResult;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\facebook-csharp-sdk+facebook-winclient-sdk\facebook-csharp-sdk-facebook-winclient-sdk-61e6f73\Source\Facebook.Client-WP8\..\Facebook.Client\Controls\LoginButton\LoginButton.cs
public async Task RequestNewPermissions(string permissions)
        {
            await this.LogIn(permissions);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\facebook-csharp-sdk+facebook-winclient-sdk\facebook-csharp-sdk-facebook-winclient-sdk-61e6f73\Source\Facebook.Client-WP8\..\Facebook.Client\Controls\LoginButton\LoginButton.cs
private async void OnLoginButtonClicked(object sender, RoutedEventArgs e)
        {
            if (this.CurrentSession == null)
            {
                await this.LogIn();
            }
            else
            {
                this.LogOut();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\facebook-csharp-sdk+facebook-winclient-sdk\facebook-csharp-sdk-facebook-winclient-sdk-61e6f73\Source\Facebook.Client-WP8\..\Facebook.Client\Controls\LoginButton\LoginButton.cs
private async Task LogIn(string permissions = null)
        {
            try
            {
                this.SessionStateChanged.RaiseEvent(this, new SessionStateChangedEventArgs(FacebookSessionState.Opening));

                // TODO: using Permissions for the time being until we decide how 
                // to handle separate ReadPermissions and PublishPermissions
                var session = await this.facebookSessionClient.LoginAsync(permissions ?? this.Permissions);

                // initialize current session
                this.CurrentSession = session;
                this.SessionStateChanged.RaiseEvent(this, new SessionStateChangedEventArgs(FacebookSessionState.Opened));

                // retrieve information about the current user
                if (this.FetchUserInfo)
                {
                    FacebookClient client = new FacebookClient(session.AccessToken);

                    dynamic result = await client.GetTaskAsync("me");
                    this.CurrentUser = new GraphUser(result);
                    var userInfo = new UserInfoChangedEventArgs(this.CurrentUser);
                    this.UserInfoChanged.RaiseEvent(this, userInfo);
                }
            }
            catch (ArgumentNullException error)
            {
                // TODO: remove when bug in SDK is fixed (the bug happens when you cancel the facebook login dialog)
                var authenticationErrorEventArgs =
                    new AuthenticationErrorEventArgs("Login failure.", error.Message);

                this.AuthenticationError.RaiseEvent(this, authenticationErrorEventArgs);
            }
            catch (InvalidOperationException error)
            {
                // TODO: need to obtain richer information than a generic InvalidOperationException
                var authenticationErrorEventArgs =
                    new AuthenticationErrorEventArgs("Login failure.", error.Message);

                this.AuthenticationError.RaiseEvent(this, authenticationErrorEventArgs);
            }
            catch (FacebookOAuthException error)
            {
                var authenticationErrorEventArgs =
                    new AuthenticationErrorEventArgs("Login failure.", error.Message);

                this.AuthenticationError.RaiseEvent(this, authenticationErrorEventArgs);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\facebook-csharp-sdk+facebook-winclient-sdk\facebook-csharp-sdk-facebook-winclient-sdk-61e6f73\Source\Facebook.Client-WP8\..\Facebook.Client\Controls\PlacePicker\PlacePicker.cs
protected override async Task LoadData()
        {
            if (!string.IsNullOrEmpty(this.AccessToken))
            {
                var currentLocation = this.TrackLocation ? await this.GetCurrentLocation() : new LocationCoordinate(this.Latitude, this.Longitude);
                FacebookClient facebookClient = new FacebookClient(this.AccessToken);

                dynamic parameters = new ExpandoObject();
                parameters.type = "place";
                parameters.center = currentLocation.ToString();
                parameters.distance = this.RadiusInMeters;
                parameters.fields = this.DisplayFields;
                if (!string.IsNullOrWhiteSpace(this.SearchText))
                {
                    parameters.q = this.SearchText;
                }

                dynamic placesTaskResult = await facebookClient.GetTaskAsync("/search", parameters);
                var data = (IEnumerable<dynamic>)placesTaskResult.data;
                foreach (var item in data)
                {
                    var place = new GraphPlace(item);
                    if (this.OnDataItemRetrieved(new DataItemRetrievedEventArgs<GraphPlace>(place), e => e.Exclude))
                    {
                        this.Items.Add(place);
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\facebook-csharp-sdk+facebook-winclient-sdk\facebook-csharp-sdk-facebook-winclient-sdk-61e6f73\Source\Facebook.Client-WP8\..\Facebook.Client\Controls\PlacePicker\PlacePicker.cs
private async Task<LocationCoordinate> GetCurrentLocation()
        {
            try
            {
                if ((this.cancelGeopositionOperation != null) && (!this.cancelGeopositionOperation.IsCancellationRequested))
                {
                    this.cancelGeopositionOperation.Cancel();
                }

                this.cancelGeopositionOperation = new CancellationTokenSource(3000);
                var position = await this.geoLocator.GetGeopositionAsync(new TimeSpan(0, 1, 0), new TimeSpan(0, 0, 0, 10)).AsTask(this.cancelGeopositionOperation.Token);
                return new LocationCoordinate(position.Coordinate.Latitude, position.Coordinate.Longitude);
            }
            catch (System.UnauthorizedAccessException)
            {
                this.OnLoadFailed(new LoadFailedEventArgs("Error retrieving current location.", "Location is disabled."));
            }
            catch (TaskCanceledException)
            {
                this.OnLoadFailed(new LoadFailedEventArgs("Error retrieving current location.", "Task was cancelled."));
            }
            catch (Exception ex)
            {
                this.OnLoadFailed(new LoadFailedEventArgs("Error retrieving current location.", ex.Message));
            }
            finally
            {
                this.cancelGeopositionOperation = null;
            }

            // default location
            return new LocationCoordinate(DefaultLatitude, DefaultLongitude);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\facebook-csharp-sdk+facebook-winclient-sdk\facebook-csharp-sdk-facebook-winclient-sdk-61e6f73\Source\Facebook.Client-WP8\..\Facebook.Client\FacebookSessionClient.cs
public async Task<FacebookSession> LoginAsync()
        {
            return await LoginAsync(null, false);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\facebook-csharp-sdk+facebook-winclient-sdk\facebook-csharp-sdk-facebook-winclient-sdk-61e6f73\Source\Facebook.Client-WP8\..\Facebook.Client\FacebookSessionClient.cs
public async Task<FacebookSession> LoginAsync(string permissions)
        {
            return await LoginAsync(permissions, false);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\facebook-csharp-sdk+facebook-winclient-sdk\facebook-csharp-sdk-facebook-winclient-sdk-61e6f73\Source\Facebook.Client-WP8\..\Facebook.Client\FacebookSessionClient.cs
internal async Task<FacebookSession> LoginAsync(string permissions, bool force)
        {
            if (this.LoginInProgress)
            {
                throw new InvalidOperationException("Login in progress.");
            }

            this.LoginInProgress = true;
            try
            {
                var session = FacebookSessionCacheProvider.Current.GetSessionData();
                if (session == null)
                {
                    // Authenticate
                    var authResult = await PromptOAuthDialog(permissions, WebAuthenticationOptions.None);

                    FacebookClient client = new FacebookClient(authResult.AccessToken);
                    var parameters = new Dictionary<string, object>();
                    parameters["fields"] = "id";

                    var result = await client.GetTaskAsync("me", parameters);
                    var dict = (IDictionary<string, object>)result;

                    session = new FacebookSession
                    {
                        AccessToken = authResult.AccessToken,
                        Expires = authResult.Expires,
                        FacebookId = (string)dict["id"],
                    };
                  
                }
                else
                {
                    // Check if we are requesting new permissions
                    bool newPermissions = false;
                    if (!string.IsNullOrEmpty(permissions))
                    {
                        var p = permissions.Split(',');
                        newPermissions = session.CurrentPermissions.Join(p, s1 => s1, s2 => s2, (s1, s2) => s1).Count() != p.Length;
                    }

                    // Prompt OAuth dialog if force renew is true or
                    // if new permissions are requested or 
                    // if the access token is expired.
                    if (force || newPermissions || session.Expires <= DateTime.UtcNow)
                    {
                        var authResult = await PromptOAuthDialog(permissions, WebAuthenticationOptions.None);
                        if (authResult != null)
                        {
                            session.AccessToken = authResult.AccessToken;
                            session.Expires = authResult.Expires;
                        }
                    }
                }

                // Set the current known permissions
                if (!string.IsNullOrEmpty(permissions))
                {
                    var p = permissions.Split(',');
                    session.CurrentPermissions = session.CurrentPermissions.Union(p).ToList();
                }

                // Save session data
                FacebookSessionCacheProvider.Current.SaveSessionData(session);
                this.CurrentSession = session;
            }
            finally
            {
                this.LoginInProgress = false;
            }

            return this.CurrentSession;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\facebook-csharp-sdk+facebook-winclient-sdk\facebook-csharp-sdk-facebook-winclient-sdk-61e6f73\Source\Facebook.Client-WP8\..\Facebook.Client\FacebookSessionClient.cs
private async Task<FacebookOAuthResult> PromptOAuthDialog(string permissions, WebAuthenticationOptions options)
        {
            // Use WebAuthenticationBroker to launch server side OAuth flow

            Uri startUri = this.GetLoginUrl(permissions);
            Uri endUri = new Uri("https://www.facebook.com/connect/login_success.html");

            var result = await WebAuthenticationBroker.AuthenticateAsync(options, startUri, endUri);


            if (result.ResponseStatus == WebAuthenticationStatus.ErrorHttp)
            {
                throw new InvalidOperationException();
            }
            else if (result.ResponseStatus == WebAuthenticationStatus.UserCancel)
            {
                throw new InvalidOperationException();
            }

            var client = new FacebookClient();
            var authResult = client.ParseOAuthCallbackUrl(new Uri(result.ResponseData));
            return authResult;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\facebook-csharp-sdk+facebook-winclient-sdk\facebook-csharp-sdk-facebook-winclient-sdk-61e6f73\Source\Facebook.Client-WP8\Controls\FriendPicker\FriendPicker.cs
protected override async Task LoadData()
        {
            if (!string.IsNullOrEmpty(this.AccessToken))
            {
                FacebookClient facebookClient = new FacebookClient(this.AccessToken);

                string graphUrl = string.Format(
                                        CultureInfo.InvariantCulture,
                                        "/{0}/friends?fields={1}",
                                        this.ProfileId,
                                        this.DisplayFields);
                dynamic friendsTaskResult = await facebookClient.GetTaskAsync(graphUrl);
                var result = (IDictionary<string, object>)friendsTaskResult;
                var data = (IEnumerable<object>)result["data"];

                foreach (dynamic friend in data)
                {
                    var user = new GraphUser(friend);
                    if (this.OnDataItemRetrieved(new DataItemRetrievedEventArgs<GraphUser>(user), e => e.Exclude))
                    {
                        this.Items.Add(user);
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\fastestways\WazePocWP8\Server\WazeEngine.cs
public async Task<bool> GetRoute()
        {
            _routeWazeResponse = await GetRouteFor(_startuplocation.Longitude, _startuplocation.Latitude, Parameters.Coordinate.Longitude, Parameters.Coordinate.Latitude, Parameters.CurrentCountry);
            return true;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\fastestways\WazePocWP8\ViewModel\MainViewModel.cs
private async void GetNearbyInstructions(Geocoordinate coord)
        {
            var nearbyItems = _wazeEngine.GetNearbyItems(coord);
            if (nearbyItems.Any())
            {
                var result = nearbyItems.First();
                _wazeEngine.SetWasReadOnInstruction(result, true);

                if (result.instruction != null)
                {
                    await ReadInstruction(result);
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\fastestways\WazePocWP8\ViewModel\MainViewModel.cs
private async Task ReadInstruction(Result result)
        {
            string parsedString;
            if (result.instruction.arg != 0)
            {
                object[] args = new[] { new[] { result.instruction.arg } };
                parsedString = VoiceInstructions.GetParsedInstructionFromDictionary(result.instruction.opcode, args);
            }
            else
            {
                parsedString = VoiceInstructions.GetParsedInstructionFromDictionary(result.instruction.opcode);
            }

            if (!string.IsNullOrEmpty(parsedString))
            {
                SpeechSynthesizer synth = new SpeechSynthesizer();
                await synth.SpeakTextAsync(parsedString);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\fastestways\WazePocWP8\ViewModel\MainViewModel.cs
private async Task<Geocoordinate> GetCurrentGeocoordinates()
        {
            Geolocator myGeolocator = new Geolocator();
            Geoposition myGeoposition = await myGeolocator.GetGeopositionAsync();
            Geocoordinate myGeocoordinate = myGeoposition.Coordinate;
            return myGeocoordinate;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\fdrapp\FreedomainRadio\FreedomainRadio\SetupGuide.cs
public static async Task RunAsync()
        {
      
            bool hasConfiguration = await ConfigurationManager.CheckHasConfigurationAsync();
            if (hasConfiguration && !ConfigurationManager.IsLoaded)
            {
                await ConfigurationManager.LoadAsync();
            }

            Configuration config = ConfigurationManager.Configuration;

            if (!config.IsAppSetup)
            {
                await ThemeSetup();
                await LiveTileSetup();

                config.IsAppSetup = true;

                await ConfigurationManager.SaveAsync();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\fdrapp\FreedomainRadio\FreedomainRadio\SetupGuide.cs
public static async Task<bool> CheckIsSetUpAsync()
        {
            bool hasConfiguration = await ConfigurationManager.CheckHasConfigurationAsync();
            if (hasConfiguration && !ConfigurationManager.IsLoaded)
            {
                await ConfigurationManager.LoadAsync();
            }

            Configuration config = ConfigurationManager.Configuration;
            return config.IsAppSetup;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\fdrapp\FreedomainRadio\FreedomainRadio\TileUpdater.cs
public static async Task InitializeAsync()
        {
            bool hasConfiguration = await ConfigurationManager.CheckHasConfigurationAsync();
            if (hasConfiguration && !ConfigurationManager.IsLoaded)
            {
                await ConfigurationManager.LoadAsync();
            }

            var configuration = ConfigurationManager.Configuration;

            if (configuration.IsLiveTileEnabled)
            {
                Schedule();
            }
            else
            {
                Unschedule();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\fdrapp\FreedomainRadio\FreedomainRadio\Views\MainPage.xaml.cs
protected override async void OnNavigatedTo(NavigationEventArgs e)
        {
            if (!IsLoaded)
            {
                if (!(await SetupGuide.CheckIsSetUpAsync()))
                {
                    await SetupGuide.RunAsync();
                }
                else
                {
                    await TileUpdater.InitializeAsync();
                }
                IsLoaded = true;
            }

            ViewModel.PropertyChanged += ViewModel_PropertyChanged;

            await ViewModel.InitializeAsync();

            InitializeRefreshTimer();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\fdrapp\FreedomainRadio\FreedomainRadio\Views\SettingsPage.xaml.cs
protected async override void OnNavigatedTo(NavigationEventArgs e)
        {
            await SettingsViewModel.InitializeAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\fdrapp\FreedomainRadio\FreedomainRadio\Views\SettingsPage.xaml.cs
private async void DonateBitcoinsButton(object sender, RoutedEventArgs e)
        {
            await Launcher.LaunchUriAsync(new System.Uri("bitcoin:" + AboutViewModel.BitcoinAddress));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\fdrapp\FreedomainRadio\FreedomainRadio.TaskScheduler\DataSource.cs
public static async Task<Post> GetLatestPostAsync()
        {
            var client = SimpleIoc.Default.Resolve<IClient>();
            return (await client.GetPostsAsync()).First();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\fdrapp\FreedomainRadio\FreedomainRadio.TaskScheduler\DataSource.cs
public static async Task<Video> GetLatestVideoAsync()
        {
            var client = SimpleIoc.Default.Resolve<IClient>();
            return (await client.GetVideosAsync()).First();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\fdrapp\FreedomainRadio\FreedomainRadio.TaskScheduler\ShellContent.cs
public static async Task<Uri> DownloadImageAsync(Uri uri)
        {
            string dir = "Shared/ShellContent/";

            var client = new HttpClient();

            using (var isoStore = IsolatedStorageFile.GetUserStoreForApplication())
            {
                string filename = CreateFileName(uri);

                string targetName = dir + filename;

                if (!isoStore.FileExists(targetName))
                {
                    DeleteAndRecreateShellContent(isoStore);

                    using (var isoStoreFile = isoStore.OpenFile(
                        targetName,
                        FileMode.Create,
                        FileAccess.ReadWrite))
                    {
                        using (var response = await client.GetStreamAsync(uri))
                        {
                            var dataBuffer = new byte[1024];
                            while (response.Read(dataBuffer, 0, dataBuffer.Length) > 0)
                            {
                                isoStoreFile.Write(dataBuffer, 0, dataBuffer.Length);
                            }
                        }
                    }
                }

                return new Uri("isostore:" + targetName);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\follwit\DepSoft.Mobile.WP8.FollwIt\ViewModel\MainViewModel.cs
private async Task ViewLoaded()
        {
            var t = await FollwItService.GetInstance().GetFriendsAsync("Depechie");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\gart\GeoARToolkit\Lib\WP8\GART\..\..\WP7\GART\Controls\ARDisplay.cs
private async Task StartLocation()
        #endif
        {
            // If the Location object is null, initialize it and add a CurrentValueChanged
            // event handler.
            if (locationService == null)
            {
                #if WINDOWS_PHONE

                locationService = new GeoCoordinateWatcher(GeoPositionAccuracy.High);
                locationService.MovementThreshold = MovementThreshold;
                locationService.PositionChanged += location_PositionChanged;

                // Try to start the Motion API.
                try
                {
                    // Start the service
                    locationService.Start();

                    // Force a grab of location once
                    Location = locationService.Position.Location;
                }
                catch (Exception ex)
                {
                    serviceErrors.Add(new ServiceErrorData(ARService.Location, ex));
                }
                #endif

                #if WIN_RT
                locationService = new Geolocator();
                locationService.MovementThreshold = MovementThreshold;
                locationService.PositionChanged += location_PositionChanged;

                // Grab location once?
                try
                {
                    var loc = (await locationService.GetGeopositionAsync()).Coordinate;
                    this.Location = new Location(loc.Latitude, loc.Longitude);
                    this.TravelHeading = loc.Heading ?? 0; // Force to 0 degrees if unknown.
                }
                catch (Exception ex)
                {
                    serviceErrors.Add(new ServiceErrorData(ARService.Location, ex));
                }
#endif
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\ExtensionMethods.cs
public static async Task SetRequestStringAsync(this WebRequest request, string requestString) {
            using (Stream stream = await request.GetRequestStreamAsync()) {
                byte[] encodedRequestString = Encoding.UTF8.GetBytes(requestString);
                await stream.WriteAsync(encodedRequestString, 0, encodedRequestString.Length);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\ExtensionMethods.cs
public static async Task<string> GetResponseStringAsync(this WebRequest request) {
            WebResponse response = await request.GetResponseAsync();
            return await response.GetResponseStringAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\ExtensionMethods.cs
public static async Task<string> GetResponseStringAsync(this WebResponse response) {
            Stream responseStream = response.GetResponseStream();
            string strContent = "";
            using (var sr = new StreamReader(responseStream)) {
                strContent = await sr.ReadToEndAsync();
            }

            return strContent;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\Login\LoginControl.xaml.cs
private async void OnLoginPressed(object sender, RoutedEventArgs args) {
            await ViewModel.LogInAsync();
            RefreshPasswordHintVisibility();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\MainPage\MainPage.xaml.cs
private async void OnLoaded(object sender, RoutedEventArgs e) {
            await ViewModel.InitializeAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\MainPage\NestViewModel.cs
public async Task InitializeAsync() {
            if (_sessionProvider.IsSessionExpired) {
                State = NestViewModelState.LoggingIn;
                return;
            }

            await OnLoggedIn();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\MainPage\NestViewModel.cs
public async Task LogInAsync() {
            State = NestViewModelState.Loading;

            ResetCurrentError();
            string userName = UserName;
            string password = Password;
            ClearLoginFields();

            if (_sessionProvider.IsSessionExpired) {
                var loginResult = await _nestWebService.LoginAsync(userName, password);
                if (IsErrorHandled(loginResult.Error, loginResult.Exception))
                    return;
            }

            await OnLoggedIn();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\MainPage\NestViewModel.cs
private async Task OnLoggedIn() {
            State = NestViewModelState.Loading;

            var result = await _nestWebService.UpdateTransportUrlAsync();
            if (IsErrorHandled(result.Error, result.Exception))
                return;

            _getStatusResult = await _nestWebService.GetFullStatusAsync();
            if (IsErrorHandled(_getStatusResult.Error, _getStatusResult.Exception))
                return;

            State = NestViewModelState.LoggedIn;

            UpdateViewModelFromGetStatusResult(_getStatusResult);

            _statusUpdater.CurrentStructure = _getStatusResult.Structures.ElementAt(0);
            _statusUpdater.Start();
            _statusProvider.Start();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\MainPage\NestViewModel.cs
public async Task RaiseLowTemperatureAsync() {
            await RaiseTemperatureAsync(TemperatureMode.RangeLow);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\MainPage\NestViewModel.cs
public async Task RaiseHighTemperatureAsync() {
            await RaiseTemperatureAsync(TemperatureMode.RangeHigh);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\MainPage\NestViewModel.cs
public async Task LowerLowTemperatureAsync() {
            await LowerTemperatureAsync(TemperatureMode.RangeLow);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\MainPage\NestViewModel.cs
public async Task LowerHighTemperatureAsync() {
            await LowerTemperatureAsync(TemperatureMode.RangeHigh);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\MainPage\NestViewModel.cs
public async Task RaiseTemperatureAsync() {
            await RaiseTemperatureAsync(TemperatureMode.Target);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\MainPage\NestViewModel.cs
private async Task RaiseTemperatureAsync(TemperatureMode temperatureMode) {
            double temperature = GetTemperatureValue(temperatureMode);
            if (temperature >= MaxTemperature)
                return;

            await PauseStatusProviderWhile(async () => {
                var thermostat = GetFirstThermostat();

                double desiredTemperature = temperature + 1.0d;
                SetTemperatureValue(temperatureMode, desiredTemperature);
                SetThermostatTemperatureValue(temperatureMode, thermostat, desiredTemperature);

                var result = await _nestWebService.ChangeTemperatureAsync(thermostat, desiredTemperature, temperatureMode);
                if (IsErrorHandled(result.Error, result.Exception))
                    return;

                await _statusUpdater.UpdateStatusAsync();
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\MainPage\NestViewModel.cs
public async Task LowerTemperatureAsync() {
            await LowerTemperatureAsync(TemperatureMode.Target);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\MainPage\NestViewModel.cs
public async Task LowerTemperatureAsync(TemperatureMode temperatureMode) {
            double temperature = GetTemperatureValue(temperatureMode);
            if (temperature <= MinTemperature)
                return;

            await PauseStatusProviderWhile(async () => {
                var thermostat = GetFirstThermostat();
                double desiredTemperature = temperature - 1.0d;
                SetTemperatureValue(temperatureMode, desiredTemperature);
                SetThermostatTemperatureValue(temperatureMode, thermostat, desiredTemperature);

                var result = await _nestWebService.ChangeTemperatureAsync(thermostat, desiredTemperature, temperatureMode);
                if (IsErrorHandled(result.Error, result.Exception))
                    return;

                await _statusUpdater.UpdateStatusAsync();
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\MainPage\NestViewModel.cs
private async void SetAwayModeAsync(bool isAway) {
            Structure structure = GetFirstStructure();
            if (structure.IsAway == isAway) {
                return;
            }

            await PauseStatusProviderWhile(async () => {
                structure.IsAway = isAway;
                await _nestWebService.SetAwayMode(structure, isAway);
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\MainPage\NestViewModel.cs
private async void SetFanModeAsync(FanMode fanMode) {
            var thermostat = GetFirstThermostat();
            if (thermostat.FanMode == fanMode)
                return;

            await PauseStatusProviderWhile(async () => {
                thermostat.FanMode = fanMode;
                var result = await _nestWebService.SetFanModeAsync(thermostat, fanMode);
                if (IsErrorHandled(result.Error, result.Exception))
                    return;

                await _statusUpdater.UpdateStatusAsync();
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\MainPage\NestViewModel.cs
private async void SetHvacModeAsync(HvacMode hvacMode) {
            var thermostat = GetFirstThermostat();
            if (thermostat.HvacMode == hvacMode)
                return;

            await PauseStatusProviderWhile(async () => {
                thermostat.HvacMode = hvacMode;
                var result = await _nestWebService.SetHvacModeAsync(thermostat, hvacMode);
                if (IsErrorHandled(result.Error, result.Exception))
                    return;

                await _statusUpdater.UpdateStatusAsync();
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\MainPage\NestViewModel.cs
public async void RetryAfterErrorAsync() {
            await OnLoggedIn();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\MainPage\NestViewModel.cs
private async Task PauseStatusProviderWhile(Func<Task> action) {
            try {
                _statusProvider.Stop();
                await action();
            }
            finally {
                _statusProvider.Start();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\Services\NestWebServiceDeserializer.cs
public async Task<WebServiceError> ParseWebServiceErrorAsync(Exception exception) {
            var error = WebServiceError.Unknown;

            if (await IsInvalidCredentialsErrorAsync(exception))
                error = WebServiceError.InvalidCredentials;
            else if (IsSessionTokenExpiredError(exception))
                error = WebServiceError.SessionTokenExpired;
            else if (IsNotFoundError(exception))
                error = WebServiceError.ServerNotFound;
            else if(IsCancelledError(exception))
                error = WebServiceError.Cancelled;

            return error;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\Services\NestWebServiceDeserializer.cs
private static async Task<bool> IsInvalidCredentialsErrorAsync(Exception exception) {
            bool isInvalidCredentials = false;
            var webException = exception as WebException;
            if (webException != null && webException.Response != null) {
                string responseString = await webException.Response.GetResponseStringAsync();
                var values = ParseAsJsonOrNull(responseString);
                if (values != null) {
                    var errorJson = values["error"];
                    if (errorJson != null) {
                        var errorMessage = errorJson.Value<string>();
                        isInvalidCredentials = errorMessage.Equals("access_denied");
                    }
                }
            }

            return isInvalidCredentials;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\Services\NestWebService.cs
public async Task<GetStatusResult> GetStructureAndDeviceStatusAsync(Structure structure) {
            var structureResult = await GetStructureStatusAsync(structure);
            if (structureResult.Exception != null)
                return structureResult;

            foreach (var thermostat in structure.Thermostats) {
                GetThermostatStatusResult sharedResult = await GetSharedThermostatPropertiesAsync(thermostat);
                if (sharedResult.Exception != null)
                    return new GetStatusResult(sharedResult.Error, sharedResult.Exception);
                GetThermostatStatusResult thermostatResult = await GetDeviceThermostatPropertiesAsync(thermostat, sharedResult);
                if (thermostatResult.Exception != null)
                    return new GetStatusResult(thermostatResult.Error, thermostatResult.Exception);

                structureResult.Structures.ElementAt(0).Thermostats.Add(sharedResult.Thermostat);
            }
            return structureResult;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\Services\NestWebService.cs
private async Task<GetStatusResult> GetStructureStatusAsync(Structure structure) {
            string url = string.Format("{0}/v2/subscribe", _sessionProvider.TransportUrl);
            var request = GetPostJsonRequest(url);

            SetAuthorizationHeaderOnRequest(request, _sessionProvider.AccessToken);
            SetNestHeadersOnRequest(request, _sessionProvider.UserId);

            string requestString = string.Format("{{\"keys\":[{{\"key\":\"structure.{0}\"}}]}}", structure.ID);
            await request.SetRequestStringAsync(requestString);
            Exception exception;

            try {
                IWebResponse response = await request.GetResponseAsync();
                string responseString = await response.GetResponseStringAsync();
                Structure parsedStructure = _deserializer.ParseStructureFromGetStructureStatusResult(responseString, structure.ID);
                return new GetStatusResult(new[] {parsedStructure});
            }
            catch (Exception ex) {
                exception = ex;
            }

            var error = await _deserializer.ParseWebServiceErrorAsync(exception);
            return new GetStatusResult(error, exception);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\Services\NestWebService.cs
public async Task<WebServiceResult> LoginAsync(string userName, string password) {
            IWebRequest request = GetPostFormRequest("https://home.nest.com/user/login");
            string requestString = string.Format("username={0}&password={1}", UrlEncode(userName), UrlEncode(password));
            await request.SetRequestStringAsync(requestString);
            Exception exception;

            try {
                IWebResponse response = await request.GetResponseAsync();
                string responseString = await response.GetResponseStringAsync();
                CacheSession(responseString);
                return new WebServiceResult();
            }
            catch (Exception ex) {
                exception = ex;
            }

            var error = await _deserializer.ParseWebServiceErrorAsync(exception);
            return new WebServiceResult(error, exception);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\Services\NestWebService.cs
public async Task<GetStatusResult> GetFullStatusAsync() {
            if (_sessionProvider.IsSessionExpired)
                return new GetStatusResult(WebServiceError.SessionTokenExpired, new SessionExpiredException());

            string url = string.Format("{0}/v2/mobile/user.{1}", _sessionProvider.TransportUrl, _sessionProvider.UserId);
            var request = GetGetRequest(url);
            SetAuthorizationHeaderOnRequest(request, _sessionProvider.AccessToken);
            Exception exception = null;

            try {
                IWebResponse response = await request.GetResponseAsync();
                string responseString = await response.GetResponseStringAsync();
                var structures = _deserializer.ParseStructuresFromGetStatusResult(responseString, _sessionProvider.UserId);
                _analyticsService.LogEvent("Structures: {0}, Devices: {1}", structures.Count(), structures.Sum(s => s.Thermostats.Count()));
                return new GetStatusResult(structures);
            }
            catch (Exception ex) {
                exception = ex;
            }

            var error = await _deserializer.ParseWebServiceErrorAsync(exception);
            return new GetStatusResult(error, exception);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\Services\NestWebService.cs
private async Task<WebServiceResult> SendPutRequestAsync(string url, string requestJson) {
            if (_sessionProvider.IsSessionExpired)
                return new GetStatusResult(WebServiceError.SessionTokenExpired, new SessionExpiredException());

            IWebRequest request = GetPostJsonRequest(url);
            SetAuthorizationHeaderOnRequest(request, _sessionProvider.AccessToken);
            SetNestHeadersOnRequest(request, _sessionProvider.UserId);

            await request.SetRequestStringAsync(requestJson);
            Exception exception = null;

            try {
                await request.GetResponseAsync();
                return new WebServiceResult();
            }
            catch (Exception ex) {
                exception = ex;
            }

            var error = await _deserializer.ParseWebServiceErrorAsync(exception);
            return new WebServiceResult(error, exception);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\Services\NestWebService.cs
public async Task<WebServiceResult> SetFanModeAsync(Thermostat thermostat, FanMode fanMode) {
            string url = string.Format(@"{0}/v2/put/device.{1}", _sessionProvider.TransportUrl, thermostat.ID);
            string fanModeString = GetFanModeString(fanMode);
            string requestString = string.Format("{{\"fan_mode\":\"{0}\"}}", fanModeString);
            return await SendPutRequestAsync(url, requestString);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\Services\NestWebService.cs
public async Task<WebServiceResult> SetHvacModeAsync(Thermostat thermostat, HvacMode hvacMode) {
            string url = string.Format(@"{0}/v2/put/shared.{1}", _sessionProvider.TransportUrl, thermostat.ID);
            string hvacModeString = _deserializer.GetHvacModeString(hvacMode);
            string requestString = string.Format("{{\"target_temperature_type\":\"{0}\"}}", hvacModeString);
            return await SendPutRequestAsync(url, requestString);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\Services\NestWebService.cs
public async Task<WebServiceResult> SetAwayMode(Structure structure, bool isAway) {
            string url = string.Format(@"{0}/v2/put/structure.{1}", _sessionProvider.TransportUrl, structure.ID);
            string requestString = string.Format("{{\"away_timestamp\":{0},\"away\":{1},\"away_setter\":0}}", 
                _timestampProvider.GetTimestamp(), isAway.ToString().ToLower());
            return await SendPutRequestAsync(url, requestString);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\Services\NestWebService.cs
public async Task<WebServiceResult> UpdateTransportUrlAsync() {
            IWebRequest request = GetPostJsonRequest("https://home.nest.com/user/service_urls");
            SetAuthorizationHeaderOnRequest(request, _sessionProvider.AccessToken);

            Exception exception = null;
            try {
                IWebResponse response = await request.GetResponseAsync();
                string strContent = await response.GetResponseStringAsync();
                var transportUrl = _deserializer.ParseTransportUrlFromResult(strContent);
                _sessionProvider.UpdateTransportUrl(transportUrl);
                return new WebServiceResult();
            }
            catch (Exception ex) {
                exception = ex;
            }

            var error = await _deserializer.ParseWebServiceErrorAsync(exception);
            return new WebServiceResult(error, exception);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\Services\NestWebService.cs
public async Task<WebServiceResult> ChangeTemperatureAsync(Thermostat thermostat, double desiredTemperature, TemperatureMode temperatureMode) {
            string temperatureProperty = GetTemperaturePropertyString(thermostat, desiredTemperature, temperatureMode);

            string url = string.Format(@"{0}/v2/put/shared.{1}", _sessionProvider.TransportUrl, thermostat.ID);
            string requestString = string.Format("{{\"target_change_pending\":true,{0}}}", temperatureProperty);
            return await SendPutRequestAsync(url, requestString);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\Services\NestWebService.cs
public async Task<GetThermostatStatusResult> GetThermostatStatusAsync(Thermostat thermostat) {
            if (_sessionProvider.IsSessionExpired)
                return new GetThermostatStatusResult(WebServiceError.SessionTokenExpired, new SessionExpiredException());

            GetThermostatStatusResult result = await GetSharedThermostatPropertiesAsync(thermostat);
            if (result.Exception == null) {
                result = await GetDeviceThermostatPropertiesAsync(thermostat, result);
            }

            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\Services\NestWebService.cs
private async Task<GetThermostatStatusResult> GetDeviceThermostatPropertiesAsync(Thermostat thermostat, GetThermostatStatusResult result) {
            string url = string.Format("{0}/v2/subscribe", _sessionProvider.TransportUrl);
            IWebRequest request = GetPostJsonRequest(url);
            SetAuthorizationHeaderOnRequest(request, _sessionProvider.AccessToken);
            SetNestHeadersOnRequest(request, _sessionProvider.UserId);
            string requestString = string.Format("{{\"keys\":[{{\"key\":\"device.{0}\"}}]}}", thermostat.ID);
            await request.SetRequestStringAsync(requestString);

            Exception exception;
            try {
                IWebResponse response = await request.GetResponseAsync();
                string strContent = await response.GetResponseStringAsync();
                result.Thermostat.FanMode = _deserializer.ParseFanModeFromDeviceSubscribeResult(strContent);
                result.Thermostat.IsLeafOn = _deserializer.ParseLeafFromDeviceSubscribeResult(strContent);
                return result;
            }
            catch (Exception ex) {
                exception = ex;
            }

            var error = await _deserializer.ParseWebServiceErrorAsync(exception);
            return new GetThermostatStatusResult(error, exception);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\Services\NestWebService.cs
private async Task<GetThermostatStatusResult> GetSharedThermostatPropertiesAsync(Thermostat thermostat) {
            string url = string.Format("{0}/v2/subscribe", _sessionProvider.TransportUrl);
            IWebRequest request = GetPostJsonRequest(url);
            SetAuthorizationHeaderOnRequest(request, _sessionProvider.AccessToken);
            SetNestHeadersOnRequest(request, _sessionProvider.UserId);
            string requestString = string.Format("{{\"keys\":[{{\"key\":\"shared.{0}\"}}]}}", thermostat.ID);
            await request.SetRequestStringAsync(requestString);

            Exception exception;
            try {
                IWebResponse response = await request.GetResponseAsync();
                string strContent = await response.GetResponseStringAsync();
                var updatedThermostat = new Thermostat(thermostat.ID);
                _deserializer.UpdateThermostatStatusFromSharedStatusResult(strContent, updatedThermostat);
                return new GetThermostatStatusResult(updatedThermostat);
            }
            catch (Exception ex) {
                exception = ex;
            }

            var error = await _deserializer.ParseWebServiceErrorAsync(exception);
            return new GetThermostatStatusResult(error, exception);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\Services\StatusUpdaterService.cs
public async Task UpdateStatusAsync() {
            await UpdateStatusAsync(CurrentStructure);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\Services\StatusUpdaterService.cs
private async Task UpdateStatusAsync(Structure structure) {
            GetStatusResult result = await _nestWebService.GetStructureAndDeviceStatusAsync(structure);
            if (result.Exception != null)
                Stop();

            _delayedStatusProvider.CacheStatus(result);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\Services\StatusUpdaterService.cs
private async void OnTimerTick(object state) {
            await UpdateStatusAsync(CurrentStructure);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\MainPage\ThermostatControl.xaml.cs
private async void OnUpClick(object sender, RoutedEventArgs e) {
            await ViewModel.RaiseTemperatureAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\MainPage\ThermostatControl.xaml.cs
private async void OnDownClick(object sender, RoutedEventArgs e) {
            await ViewModel.LowerTemperatureAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\MainPage\ThermostatControl.xaml.cs
private async void OnLowTemperatureUpButtonClick(object sender, RoutedEventArgs e) {
            await ViewModel.RaiseLowTemperatureAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\MainPage\ThermostatControl.xaml.cs
private async void OnLowTemperatureDownButtonClick(object sender, RoutedEventArgs e) {
            await ViewModel.LowerLowTemperatureAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\MainPage\ThermostatControl.xaml.cs
private async void OnHighTemperatureUpButtonClick(object sender, RoutedEventArgs e) {
            await ViewModel.RaiseHighTemperatureAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\MainPage\ThermostatControl.xaml.cs
private async void OnHighTemperatureDownButtonClick(object sender, RoutedEventArgs e) {
            await ViewModel.LowerHighTemperatureAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\Web\WebRequestWrapper.cs
public async Task<Stream> GetRequestStreamAsync() {
            return await _request.GetRequestStreamAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\Web\WebRequestWrapper.cs
public async Task<IWebResponse> GetResponseAsync() {
            WebResponse response = await _request.GetResponseAsync();
            return new WebResponseWrapper(response);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\Web\WebRequestWrapper.cs
public async Task SetRequestStringAsync(string requestString) {
            await _request.SetRequestStringAsync(requestString);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest\Web\WebResponseWrapper.cs
public async Task<string> GetResponseStringAsync() {
            return await _response.GetResponseStringAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\ExtensionMethods.cs
public static async Task SetRequestStringAsync(this WebRequest request, string requestString) {
            using (Stream stream = await request.GetRequestStreamAsync()) {
                byte[] encodedRequestString = Encoding.UTF8.GetBytes(requestString);
                await stream.WriteAsync(encodedRequestString, 0, encodedRequestString.Length);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\ExtensionMethods.cs
public static async Task<string> GetResponseStringAsync(this WebRequest request) {
            WebResponse response = await request.GetResponseAsync();
            return await response.GetResponseStringAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\ExtensionMethods.cs
public static async Task<string> GetResponseStringAsync(this WebResponse response) {
            Stream responseStream = response.GetResponseStream();
            string strContent = "";
            using (var sr = new StreamReader(responseStream)) {
                strContent = await sr.ReadToEndAsync();
            }

            return strContent;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\Login\LoginControl.xaml.cs
private async void OnLoginPressed(object sender, RoutedEventArgs args) {
            await ViewModel.LogInAsync();
            RefreshPasswordHintVisibility();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\MainPage\MainPage.xaml.cs
private async void OnLoaded(object sender, RoutedEventArgs e) {
            await ViewModel.InitializeAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\MainPage\NestViewModel.cs
public async Task InitializeAsync() {
            if (_sessionProvider.IsSessionExpired) {
                State = NestViewModelState.LoggingIn;
                return;
            }

            await OnLoggedIn();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\MainPage\NestViewModel.cs
public async Task LogInAsync() {
            State = NestViewModelState.Loading;

            ResetCurrentError();
            string userName = UserName;
            string password = Password;
            ClearLoginFields();

            if (_sessionProvider.IsSessionExpired) {
                var loginResult = await _nestWebService.LoginAsync(userName, password);
                if (IsErrorHandled(loginResult.Error, loginResult.Exception))
                    return;
            }

            await OnLoggedIn();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\MainPage\NestViewModel.cs
private async Task OnLoggedIn() {
            State = NestViewModelState.Loading;

            var result = await _nestWebService.UpdateTransportUrlAsync();
            if (IsErrorHandled(result.Error, result.Exception))
                return;

            _getStatusResult = await _nestWebService.GetFullStatusAsync();
            if (IsErrorHandled(_getStatusResult.Error, _getStatusResult.Exception))
                return;

            State = NestViewModelState.LoggedIn;

            UpdateViewModelFromGetStatusResult(_getStatusResult);

            _statusUpdater.CurrentStructure = _getStatusResult.Structures.ElementAt(0);
            _statusUpdater.Start();
            _statusProvider.Start();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\MainPage\NestViewModel.cs
public async Task RaiseLowTemperatureAsync() {
            await RaiseTemperatureAsync(TemperatureMode.RangeLow);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\MainPage\NestViewModel.cs
public async Task RaiseHighTemperatureAsync() {
            await RaiseTemperatureAsync(TemperatureMode.RangeHigh);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\MainPage\NestViewModel.cs
public async Task LowerLowTemperatureAsync() {
            await LowerTemperatureAsync(TemperatureMode.RangeLow);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\MainPage\NestViewModel.cs
public async Task LowerHighTemperatureAsync() {
            await LowerTemperatureAsync(TemperatureMode.RangeHigh);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\MainPage\NestViewModel.cs
public async Task RaiseTemperatureAsync() {
            await RaiseTemperatureAsync(TemperatureMode.Target);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\MainPage\NestViewModel.cs
private async Task RaiseTemperatureAsync(TemperatureMode temperatureMode) {
            double temperature = GetTemperatureValue(temperatureMode);
            if (temperature >= MaxTemperature)
                return;

            await PauseStatusProviderWhile(async () => {
                var thermostat = GetFirstThermostat();

                double desiredTemperature = temperature + 1.0d;
                SetTemperatureValue(temperatureMode, desiredTemperature);
                SetThermostatTemperatureValue(temperatureMode, thermostat, desiredTemperature);

                var result = await _nestWebService.ChangeTemperatureAsync(thermostat, desiredTemperature, temperatureMode);
                if (IsErrorHandled(result.Error, result.Exception))
                    return;

                await _statusUpdater.UpdateStatusAsync();
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\MainPage\NestViewModel.cs
public async Task LowerTemperatureAsync() {
            await LowerTemperatureAsync(TemperatureMode.Target);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\MainPage\NestViewModel.cs
public async Task LowerTemperatureAsync(TemperatureMode temperatureMode) {
            double temperature = GetTemperatureValue(temperatureMode);
            if (temperature <= MinTemperature)
                return;

            await PauseStatusProviderWhile(async () => {
                var thermostat = GetFirstThermostat();
                double desiredTemperature = temperature - 1.0d;
                SetTemperatureValue(temperatureMode, desiredTemperature);
                SetThermostatTemperatureValue(temperatureMode, thermostat, desiredTemperature);

                var result = await _nestWebService.ChangeTemperatureAsync(thermostat, desiredTemperature, temperatureMode);
                if (IsErrorHandled(result.Error, result.Exception))
                    return;

                await _statusUpdater.UpdateStatusAsync();
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\MainPage\NestViewModel.cs
private async void SetAwayModeAsync(bool isAway) {
            Structure structure = GetFirstStructure();
            if (structure.IsAway == isAway) {
                return;
            }

            await PauseStatusProviderWhile(async () => {
                structure.IsAway = isAway;
                await _nestWebService.SetAwayMode(structure, isAway);
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\MainPage\NestViewModel.cs
private async void SetFanModeAsync(FanMode fanMode) {
            var thermostat = GetFirstThermostat();
            if (thermostat.FanMode == fanMode)
                return;

            await PauseStatusProviderWhile(async () => {
                thermostat.FanMode = fanMode;
                var result = await _nestWebService.SetFanModeAsync(thermostat, fanMode);
                if (IsErrorHandled(result.Error, result.Exception))
                    return;

                await _statusUpdater.UpdateStatusAsync();
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\MainPage\NestViewModel.cs
private async void SetHvacModeAsync(HvacMode hvacMode) {
            var thermostat = GetFirstThermostat();
            if (thermostat.HvacMode == hvacMode)
                return;

            await PauseStatusProviderWhile(async () => {
                thermostat.HvacMode = hvacMode;
                var result = await _nestWebService.SetHvacModeAsync(thermostat, hvacMode);
                if (IsErrorHandled(result.Error, result.Exception))
                    return;

                await _statusUpdater.UpdateStatusAsync();
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\MainPage\NestViewModel.cs
public async void RetryAfterErrorAsync() {
            await OnLoggedIn();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\MainPage\NestViewModel.cs
private async Task PauseStatusProviderWhile(Func<Task> action) {
            try {
                _statusProvider.Stop();
                await action();
            }
            finally {
                _statusProvider.Start();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\MainPage\ThermostatControl.xaml.cs
private async void OnUpClick(object sender, RoutedEventArgs e) {
            await ViewModel.RaiseTemperatureAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\MainPage\ThermostatControl.xaml.cs
private async void OnDownClick(object sender, RoutedEventArgs e) {
            await ViewModel.LowerTemperatureAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\MainPage\ThermostatControl.xaml.cs
private async void OnLowTemperatureUpButtonClick(object sender, RoutedEventArgs e) {
            await ViewModel.RaiseLowTemperatureAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\MainPage\ThermostatControl.xaml.cs
private async void OnLowTemperatureDownButtonClick(object sender, RoutedEventArgs e) {
            await ViewModel.LowerLowTemperatureAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\MainPage\ThermostatControl.xaml.cs
private async void OnHighTemperatureUpButtonClick(object sender, RoutedEventArgs e) {
            await ViewModel.RaiseHighTemperatureAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\MainPage\ThermostatControl.xaml.cs
private async void OnHighTemperatureDownButtonClick(object sender, RoutedEventArgs e) {
            await ViewModel.LowerHighTemperatureAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\Services\NestWebService.cs
public async Task<GetStatusResult> GetStructureAndDeviceStatusAsync(Structure structure) {
            var structureResult = await GetStructureStatusAsync(structure);
            if (structureResult.Exception != null)
                return structureResult;

            foreach (var thermostat in structure.Thermostats) {
                GetThermostatStatusResult sharedResult = await GetSharedThermostatPropertiesAsync(thermostat);
                if (sharedResult.Exception != null)
                    return new GetStatusResult(sharedResult.Error, sharedResult.Exception);
                GetThermostatStatusResult thermostatResult = await GetDeviceThermostatPropertiesAsync(thermostat, sharedResult);
                if (thermostatResult.Exception != null)
                    return new GetStatusResult(thermostatResult.Error, thermostatResult.Exception);

                structureResult.Structures.ElementAt(0).Thermostats.Add(sharedResult.Thermostat);
            }
            return structureResult;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\Services\NestWebService.cs
private async Task<GetStatusResult> GetStructureStatusAsync(Structure structure) {
            string url = string.Format("{0}/v2/subscribe", _sessionProvider.TransportUrl);
            var request = GetPostJsonRequest(url);

            SetAuthorizationHeaderOnRequest(request, _sessionProvider.AccessToken);
            SetNestHeadersOnRequest(request, _sessionProvider.UserId);

            string requestString = string.Format("{{\"keys\":[{{\"key\":\"structure.{0}\"}}]}}", structure.ID);
            await request.SetRequestStringAsync(requestString);
            Exception exception;

            try {
                IWebResponse response = await request.GetResponseAsync();
                string responseString = await response.GetResponseStringAsync();
                Structure parsedStructure = _deserializer.ParseStructureFromGetStructureStatusResult(responseString, structure.ID);
                return new GetStatusResult(new[] {parsedStructure});
            }
            catch (Exception ex) {
                exception = ex;
            }

            var error = await _deserializer.ParseWebServiceErrorAsync(exception);
            return new GetStatusResult(error, exception);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\Services\NestWebService.cs
public async Task<WebServiceResult> LoginAsync(string userName, string password) {
            IWebRequest request = GetPostFormRequest("https://home.nest.com/user/login");
            string requestString = string.Format("username={0}&password={1}", UrlEncode(userName), UrlEncode(password));
            await request.SetRequestStringAsync(requestString);
            Exception exception;

            try {
                IWebResponse response = await request.GetResponseAsync();
                string responseString = await response.GetResponseStringAsync();
                CacheSession(responseString);
                return new WebServiceResult();
            }
            catch (Exception ex) {
                exception = ex;
            }

            var error = await _deserializer.ParseWebServiceErrorAsync(exception);
            return new WebServiceResult(error, exception);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\Services\NestWebService.cs
public async Task<GetStatusResult> GetFullStatusAsync() {
            if (_sessionProvider.IsSessionExpired)
                return new GetStatusResult(WebServiceError.SessionTokenExpired, new SessionExpiredException());

            string url = string.Format("{0}/v2/mobile/user.{1}", _sessionProvider.TransportUrl, _sessionProvider.UserId);
            var request = GetGetRequest(url);
            SetAuthorizationHeaderOnRequest(request, _sessionProvider.AccessToken);
            Exception exception = null;

            try {
                IWebResponse response = await request.GetResponseAsync();
                string responseString = await response.GetResponseStringAsync();
                var structures = _deserializer.ParseStructuresFromGetStatusResult(responseString, _sessionProvider.UserId);
                _analyticsService.LogEvent("Structures: {0}, Devices: {1}", structures.Count(), structures.Sum(s => s.Thermostats.Count()));
                return new GetStatusResult(structures);
            }
            catch (Exception ex) {
                exception = ex;
            }

            var error = await _deserializer.ParseWebServiceErrorAsync(exception);
            return new GetStatusResult(error, exception);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\Services\NestWebService.cs
private async Task<WebServiceResult> SendPutRequestAsync(string url, string requestJson) {
            if (_sessionProvider.IsSessionExpired)
                return new GetStatusResult(WebServiceError.SessionTokenExpired, new SessionExpiredException());

            IWebRequest request = GetPostJsonRequest(url);
            SetAuthorizationHeaderOnRequest(request, _sessionProvider.AccessToken);
            SetNestHeadersOnRequest(request, _sessionProvider.UserId);

            await request.SetRequestStringAsync(requestJson);
            Exception exception = null;

            try {
                await request.GetResponseAsync();
                return new WebServiceResult();
            }
            catch (Exception ex) {
                exception = ex;
            }

            var error = await _deserializer.ParseWebServiceErrorAsync(exception);
            return new WebServiceResult(error, exception);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\Services\NestWebService.cs
public async Task<WebServiceResult> SetFanModeAsync(Thermostat thermostat, FanMode fanMode) {
            string url = string.Format(@"{0}/v2/put/device.{1}", _sessionProvider.TransportUrl, thermostat.ID);
            string fanModeString = GetFanModeString(fanMode);
            string requestString = string.Format("{{\"fan_mode\":\"{0}\"}}", fanModeString);
            return await SendPutRequestAsync(url, requestString);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\Services\NestWebService.cs
public async Task<WebServiceResult> SetHvacModeAsync(Thermostat thermostat, HvacMode hvacMode) {
            string url = string.Format(@"{0}/v2/put/shared.{1}", _sessionProvider.TransportUrl, thermostat.ID);
            string hvacModeString = _deserializer.GetHvacModeString(hvacMode);
            string requestString = string.Format("{{\"target_temperature_type\":\"{0}\"}}", hvacModeString);
            return await SendPutRequestAsync(url, requestString);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\Services\NestWebService.cs
public async Task<WebServiceResult> SetAwayMode(Structure structure, bool isAway) {
            string url = string.Format(@"{0}/v2/put/structure.{1}", _sessionProvider.TransportUrl, structure.ID);
            string requestString = string.Format("{{\"away_timestamp\":{0},\"away\":{1},\"away_setter\":0}}", 
                _timestampProvider.GetTimestamp(), isAway.ToString().ToLower());
            return await SendPutRequestAsync(url, requestString);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\Services\NestWebService.cs
public async Task<WebServiceResult> UpdateTransportUrlAsync() {
            IWebRequest request = GetPostJsonRequest("https://home.nest.com/user/service_urls");
            SetAuthorizationHeaderOnRequest(request, _sessionProvider.AccessToken);

            Exception exception = null;
            try {
                IWebResponse response = await request.GetResponseAsync();
                string strContent = await response.GetResponseStringAsync();
                var transportUrl = _deserializer.ParseTransportUrlFromResult(strContent);
                _sessionProvider.UpdateTransportUrl(transportUrl);
                return new WebServiceResult();
            }
            catch (Exception ex) {
                exception = ex;
            }

            var error = await _deserializer.ParseWebServiceErrorAsync(exception);
            return new WebServiceResult(error, exception);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\Services\NestWebService.cs
public async Task<WebServiceResult> ChangeTemperatureAsync(Thermostat thermostat, double desiredTemperature, TemperatureMode temperatureMode) {
            string temperatureProperty = GetTemperaturePropertyString(thermostat, desiredTemperature, temperatureMode);

            string url = string.Format(@"{0}/v2/put/shared.{1}", _sessionProvider.TransportUrl, thermostat.ID);
            string requestString = string.Format("{{\"target_change_pending\":true,{0}}}", temperatureProperty);
            return await SendPutRequestAsync(url, requestString);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\Services\NestWebService.cs
public async Task<GetThermostatStatusResult> GetThermostatStatusAsync(Thermostat thermostat) {
            if (_sessionProvider.IsSessionExpired)
                return new GetThermostatStatusResult(WebServiceError.SessionTokenExpired, new SessionExpiredException());

            GetThermostatStatusResult result = await GetSharedThermostatPropertiesAsync(thermostat);
            if (result.Exception == null) {
                result = await GetDeviceThermostatPropertiesAsync(thermostat, result);
            }

            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\Services\NestWebService.cs
private async Task<GetThermostatStatusResult> GetDeviceThermostatPropertiesAsync(Thermostat thermostat, GetThermostatStatusResult result) {
            string url = string.Format("{0}/v2/subscribe", _sessionProvider.TransportUrl);
            IWebRequest request = GetPostJsonRequest(url);
            SetAuthorizationHeaderOnRequest(request, _sessionProvider.AccessToken);
            SetNestHeadersOnRequest(request, _sessionProvider.UserId);
            string requestString = string.Format("{{\"keys\":[{{\"key\":\"device.{0}\"}}]}}", thermostat.ID);
            await request.SetRequestStringAsync(requestString);

            Exception exception;
            try {
                IWebResponse response = await request.GetResponseAsync();
                string strContent = await response.GetResponseStringAsync();
                result.Thermostat.FanMode = _deserializer.ParseFanModeFromDeviceSubscribeResult(strContent);
                result.Thermostat.IsLeafOn = _deserializer.ParseLeafFromDeviceSubscribeResult(strContent);
                return result;
            }
            catch (Exception ex) {
                exception = ex;
            }

            var error = await _deserializer.ParseWebServiceErrorAsync(exception);
            return new GetThermostatStatusResult(error, exception);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\Services\NestWebService.cs
private async Task<GetThermostatStatusResult> GetSharedThermostatPropertiesAsync(Thermostat thermostat) {
            string url = string.Format("{0}/v2/subscribe", _sessionProvider.TransportUrl);
            IWebRequest request = GetPostJsonRequest(url);
            SetAuthorizationHeaderOnRequest(request, _sessionProvider.AccessToken);
            SetNestHeadersOnRequest(request, _sessionProvider.UserId);
            string requestString = string.Format("{{\"keys\":[{{\"key\":\"shared.{0}\"}}]}}", thermostat.ID);
            await request.SetRequestStringAsync(requestString);

            Exception exception;
            try {
                IWebResponse response = await request.GetResponseAsync();
                string strContent = await response.GetResponseStringAsync();
                var updatedThermostat = new Thermostat(thermostat.ID);
                _deserializer.UpdateThermostatStatusFromSharedStatusResult(strContent, updatedThermostat);
                return new GetThermostatStatusResult(updatedThermostat);
            }
            catch (Exception ex) {
                exception = ex;
            }

            var error = await _deserializer.ParseWebServiceErrorAsync(exception);
            return new GetThermostatStatusResult(error, exception);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\Services\NestWebServiceDeserializer.cs
public async Task<WebServiceError> ParseWebServiceErrorAsync(Exception exception) {
            var error = WebServiceError.Unknown;

            if (await IsInvalidCredentialsErrorAsync(exception))
                error = WebServiceError.InvalidCredentials;
            else if (IsSessionTokenExpiredError(exception))
                error = WebServiceError.SessionTokenExpired;
            else if (IsNotFoundError(exception))
                error = WebServiceError.ServerNotFound;
            else if(IsCancelledError(exception))
                error = WebServiceError.Cancelled;

            return error;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\Services\NestWebServiceDeserializer.cs
private static async Task<bool> IsInvalidCredentialsErrorAsync(Exception exception) {
            bool isInvalidCredentials = false;
            var webException = exception as WebException;
            if (webException != null && webException.Response != null) {
                string responseString = await webException.Response.GetResponseStringAsync();
                var values = ParseAsJsonOrNull(responseString);
                if (values != null) {
                    var errorJson = values["error"];
                    if (errorJson != null) {
                        var errorMessage = errorJson.Value<string>();
                        isInvalidCredentials = errorMessage.Equals("access_denied");
                    }
                }
            }

            return isInvalidCredentials;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\Services\StatusUpdaterService.cs
public async Task UpdateStatusAsync() {
            await UpdateStatusAsync(CurrentStructure);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\Services\StatusUpdaterService.cs
private async Task UpdateStatusAsync(Structure structure) {
            GetStatusResult result = await _nestWebService.GetStructureAndDeviceStatusAsync(structure);
            if (result.Exception != null)
                Stop();

            _delayedStatusProvider.CacheStatus(result);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\Services\StatusUpdaterService.cs
private async void OnTimerTick(object state) {
            await UpdateStatusAsync(CurrentStructure);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\Web\WebRequestWrapper.cs
public async Task<Stream> GetRequestStreamAsync() {
            return await _request.GetRequestStreamAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\Web\WebRequestWrapper.cs
public async Task<IWebResponse> GetResponseAsync() {
            WebResponse response = await _request.GetResponseAsync();
            return new WebResponseWrapper(response);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\Web\WebRequestWrapper.cs
public async Task SetRequestStringAsync(string requestString) {
            await _request.SetRequestStringAsync(requestString);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\..\WPNest\Web\WebResponseWrapper.cs
public async Task<string> GetResponseStringAsync() {
            return await _response.GetResponseStringAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\IntegrationTests\NestWebServiceIntegrationTest.cs
[TestMethod]
        [Ignore]
        public async Task ShouldGetStructureAndDeviceStatus() {
            await _webService.LoginAsync("[username]", "[password]");
            var t = await _webService.GetFullStatusAsync();
            await _webService.GetStructureAndDeviceStatusAsync(t.Structures.ElementAt(0));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldResetCurrentError() {
                _viewModel.CurrentError = WebServiceError.InvalidCredentials;

                await _viewModel.LogInAsync();

                Assert.AreEqual(WebServiceError.None, _viewModel.CurrentError);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldClearPasswordField() {
                _viewModel.UserName = "Bob";
                _viewModel.Password = "Bob's Password";

                await _viewModel.LogInAsync();

                Assert.AreEqual(string.Empty, _viewModel.Password);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldNotClearUserNameField() {
                _viewModel.UserName = "Bob";
                _viewModel.Password = "Bob's Password";

                await _viewModel.LogInAsync();

                Assert.AreEqual("Bob", _viewModel.UserName);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldLoginWithCredentialsIfSessionExpired() {
                string expectedUserName = "Bob";
                string expectedPassword = "Bob's Password";
                _sessionProvider.SetupGet(s => s.IsSessionExpired).Returns(true);
                _viewModel.UserName = expectedUserName;
                _viewModel.Password = expectedPassword;

                await _viewModel.LogInAsync();

                _nestWebService.Verify(n => n.LoginAsync(expectedUserName, expectedPassword));
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldNotBeLoggingIn() {
                await _viewModel.LogInAsync();

                Assert.AreNotEqual(_viewModel.State, NestViewModelState.LoggingIn);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldUpdateTransportUrls() {
                await _viewModel.LogInAsync();

                _nestWebService.Verify(n => n.UpdateTransportUrlAsync());
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldGetStatus() {
                await _viewModel.LogInAsync();

                _nestWebService.Verify(n => n.GetFullStatusAsync());
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldBeLoggedIn() {
                await _viewModel.LogInAsync();

                Assert.AreEqual(_viewModel.State, NestViewModelState.LoggedIn);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldSetTargetTemperatureToFirstThermostatTargetTemperature() {
                double expectedTargetTemperature = 12.3d;
                _firstThermostat.TargetTemperature = expectedTargetTemperature;

                await _viewModel.LogInAsync();

                Assert.AreEqual(expectedTargetTemperature, _viewModel.TargetTemperature);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldSetCurrentTemperatureToFirstThermostatCurrentTemperature() {
                double expectedCurrentTemperature = 12.3d;
                _firstThermostat.CurrentTemperature = expectedCurrentTemperature;

                await _viewModel.LogInAsync();

                Assert.AreEqual(expectedCurrentTemperature, _viewModel.CurrentTemperature);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldSetIsHeatingToFirstThermostatIsHeating() {
                bool expectedIsHeating = true;
                _firstThermostat.IsHeating = expectedIsHeating;

                await _viewModel.LogInAsync();

                Assert.AreEqual(expectedIsHeating, _viewModel.IsHeating);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldSetIsCoolingToFirstThermostatIsCooling() {
                bool expectedIsCooling = true;
                _firstThermostat.IsCooling = expectedIsCooling;

                await _viewModel.LogInAsync();

                Assert.AreEqual(expectedIsCooling, _viewModel.IsCooling);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldSetFanModeToFirstThermostatFanMode() {
                var expectedFanMode = FanMode.Auto;
                _firstThermostat.FanMode = expectedFanMode;

                await _viewModel.LogInAsync();

                Assert.AreEqual(expectedFanMode, _viewModel.FanMode);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldSetIsAwayToStructureIsAway() {
                _structure.IsAway = true;

                await _viewModel.LogInAsync();

                Assert.AreEqual(_structure.IsAway, _viewModel.IsAway);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldSetStatusUpdaterCurrentStructureToStructure() {
                await _viewModel.LogInAsync();

                _statusUpdaterService.VerifySet(s => s.CurrentStructure = _structure);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldStartStatusUpdater() {
                await _viewModel.LogInAsync();

                _statusUpdaterService.Verify(s => s.Start());
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldStartStatusProvider() {
                await _viewModel.LogInAsync();

                _statusProvider.Verify(s => s.Start());
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldStartStatusUpdater() {
                await _viewModel.LogInAsync();

                _statusUpdaterService.Verify(s => s.Start());
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldStopAndStartStatusProvider() {
                await _viewModel.LogInAsync();
                await _viewModel.RaiseTemperatureAsync();

                _statusProvider.Verify(s => s.Stop());
                _statusProvider.Verify(s => s.Start());
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldIncrementTargetTemperature() {
                await _viewModel.LogInAsync();
                _viewModel.TargetTemperature = 31.0d;
                double expectedTemperature = _viewModel.TargetTemperature + 1;
                await _viewModel.RaiseTemperatureAsync();

                Assert.AreEqual(expectedTemperature, _viewModel.TargetTemperature);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldChangedTemperatureOnFirstThermostatToIncrementedTemp() {
                await _viewModel.LogInAsync();
                _viewModel.TargetTemperature = 31.0d;
                double expectedTemperature = _viewModel.TargetTemperature + 1;
                await _viewModel.RaiseTemperatureAsync();

                _nestWebService.Verify(n => n.ChangeTemperatureAsync(_firstThermostat, expectedTemperature, TemperatureMode.Target));
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldNotChangeTemperatureIfTargetTemperatureIsAtMaxiumum() {
                await _viewModel.LogInAsync();
                _viewModel.TargetTemperature = NestViewModel.MaxTemperature;
                await _viewModel.RaiseTemperatureAsync();

                _nestWebService.Verify(n => n.ChangeTemperatureAsync(It.IsAny<Thermostat>(), It.IsAny<double>(), It.IsAny<TemperatureMode>()),
                    Times.Never(), "Expected ChangeTemperature to not be called.");
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldUpdateStatus() {
                await _viewModel.LogInAsync();
                await _viewModel.RaiseTemperatureAsync();

                _statusUpdaterService.Verify(s => s.UpdateStatusAsync());
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldNotUpdateStatusIfChangeTemperatureFails() {
                var result = new WebServiceResult(WebServiceError.Unknown, new Exception());
                _nestWebService.Setup(n => n.ChangeTemperatureAsync(It.IsAny<Thermostat>(), It.IsAny<double>(), It.IsAny<TemperatureMode>()))
                    .Returns(Task.FromResult(result));
                await _viewModel.LogInAsync();

                await _viewModel.RaiseTemperatureAsync();

                _statusUpdaterService.Verify(s => s.UpdateStatusAsync(), Times.Never());
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldStopAndStartStatusProvider() {
                await _viewModel.LogInAsync();
                _viewModel.TargetTemperature = NestViewModel.MaxTemperature;
                await _viewModel.LowerTemperatureAsync();

                _statusProvider.Verify(s => s.Stop());
                _statusProvider.Verify(s => s.Start());
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldDecrementTargetTemperature() {
                await _viewModel.LogInAsync();
                _viewModel.TargetTemperature = NestViewModel.MaxTemperature;
                double expectedTemperature = _viewModel.TargetTemperature - 1;
                await _viewModel.LowerTemperatureAsync();

                Assert.AreEqual(expectedTemperature, _viewModel.TargetTemperature);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldChangeTemperatureOnFirstThermostatToDecrementedTemp() {
                await _viewModel.LogInAsync();
                _viewModel.TargetTemperature = NestViewModel.MaxTemperature;
                double expectedTemperature = _viewModel.TargetTemperature - 1;
                await _viewModel.LowerTemperatureAsync();

                _nestWebService.Verify(n => n.ChangeTemperatureAsync(_firstThermostat, expectedTemperature, TemperatureMode.Target));
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldNotChangeTemperatureIfTargetTemperatureIsAtMinimum() {
                await _viewModel.LogInAsync();
                _viewModel.TargetTemperature = NestViewModel.MinTemperature;
                await _viewModel.LowerTemperatureAsync();

                _nestWebService.Verify(n => n.ChangeTemperatureAsync(It.IsAny<Thermostat>(), It.IsAny<double>(), It.IsAny<TemperatureMode>()),
                    Times.Never(), "Expected ChangeTemperature to not be called.");
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldUpdateStatus() {
                await _viewModel.LogInAsync();
                _viewModel.TargetTemperature = NestViewModel.MaxTemperature;
                await _viewModel.LowerTemperatureAsync();

                _statusUpdaterService.Verify(s => s.UpdateStatusAsync());
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldNotUpdateStatusIfChangeTemperatureFails() {
                var result = new WebServiceResult(WebServiceError.Unknown, new Exception());
                _nestWebService.Setup(n => n.ChangeTemperatureAsync(It.IsAny<Thermostat>(), It.IsAny<double>(), It.IsAny<TemperatureMode>()))
                    .Returns(Task.FromResult(result));
                await _viewModel.LogInAsync();
                _viewModel.TargetTemperature = NestViewModel.MaxTemperature;

                await _viewModel.LowerTemperatureAsync();

                _statusUpdaterService.Verify(s => s.UpdateStatusAsync(), Times.Never());
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldStopAndStartStatusProvider() {
                await _viewModel.LogInAsync();

                _viewModel.FanMode = FanMode.Auto;

                _statusProvider.Verify(s => s.Stop());
                _statusProvider.Verify(s => s.Start());
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldSetFanModeOnFirstThermostat() {
                await _viewModel.LogInAsync();

                var expectedFanMode = FanMode.Auto;
                _viewModel.FanMode = expectedFanMode;

                Assert.AreEqual(expectedFanMode, _firstThermostat.FanMode);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldSetFanModeOnWebService() {
                await _viewModel.LogInAsync();

                _viewModel.FanMode = FanMode.Auto;

                _nestWebService.Verify(n=>n.SetFanModeAsync(It.IsAny<Thermostat>(), It.IsAny<FanMode>()));
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldUpdateStatus() {
                await _viewModel.LogInAsync();

                _viewModel.FanMode = FanMode.Auto;

                _statusUpdaterService.Verify(s=>s.UpdateStatusAsync());
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldNotUpdateStatusIfSetFanModeFails() {
                var errorResult = new WebServiceResult(WebServiceError.Unknown, new Exception());
                _nestWebService.Setup(n => n.SetFanModeAsync(It.IsAny<Thermostat>(), It.IsAny<FanMode>())).Returns(Task.FromResult(errorResult));
                await _viewModel.LogInAsync();

                _viewModel.FanMode = FanMode.Auto;

                _statusUpdaterService.Verify(s => s.UpdateStatusAsync(), Times.Never());
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldNotSetFanModeIfFanModeDidNotChange() {
                await _viewModel.LogInAsync();

                _viewModel.FanMode = _viewModel.FanMode;

                _nestWebService.Verify(n => n.SetFanModeAsync(It.IsAny<Thermostat>(), It.IsAny<FanMode>()), 
                    Times.Never());
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldStopAndStartStatusProvider() {
                await _viewModel.LogInAsync();

                _viewModel.HvacMode = HvacMode.HeatAndCool;

                _statusProvider.Verify(s => s.Stop());
                _statusProvider.Verify(s => s.Start());
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldStopAndStartStatusProvider() {
                await _viewModel.LogInAsync();

                _viewModel.IsAway = true;

                _statusProvider.Verify(s => s.Stop());
                _statusProvider.Verify(s => s.Start());
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldCallWebServiceSetAwayMode() {
                await _viewModel.LogInAsync();

                _viewModel.IsAway = true;

                _nestWebService.Verify(w=>w.SetAwayMode(It.IsAny<Structure>(), true));
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldProvideStructureToWebService() {
                await _viewModel.LogInAsync();

                _viewModel.IsAway = true;

                _nestWebService.Verify(w=>w.SetAwayMode(_structure, It.IsAny<bool>()));
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestViewModelTest.cs
[TestMethod]
            public async Task ShouldNotSetIsAwayIfSameAsStructure() {
                await _viewModel.LogInAsync();

                _viewModel.IsAway = _structure.IsAway;

                _nestWebService.Verify(n => n.SetAwayMode(It.IsAny<Structure>(), It.IsAny<bool>()), 
                    Times.Never());
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceDeserializerTest.cs
[TestMethod]
        public async Task ShouldParseCancelledError() {
            var exception = new WebException("Test", WebExceptionStatus.RequestCanceled);

            WebServiceError error = await _deserializer.ParseWebServiceErrorAsync(exception);

            Assert.AreEqual(WebServiceError.Cancelled, error);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldUseCorrectUrl() {
                var structure = new Structure("id");
                await _webService.GetStructureAndDeviceStatusAsync(structure);
                var expectedUri = new Uri(BaseUrl + "/v2/subscribe");

                _requestProvider.Verify(r => r.CreateRequest(expectedUri));
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldAddKeyForStructure() {
                var structureId = "id";
                var structure = new Structure(structureId);
                await _webService.GetStructureAndDeviceStatusAsync(structure);

                _webRequest.Verify(w => w.SetRequestStringAsync(It.Is<string>(s => s.Contains("\"key\":\"structure.id\""))));
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldSendResponseStringToDeserializer() {
                _webResponse.Setup(w => w.GetResponseStringAsync()).Returns(Task.FromResult(FakeJsonMessages.GetStructureStatusResult));

                await _webService.GetStructureAndDeviceStatusAsync(new Structure("structureId"));

                _webServiceDeserializer.Verify(d => d.ParseStructureFromGetStructureStatusResult(FakeJsonMessages.GetStructureStatusResult, "structureId"));
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldReturnStructureFromDeserializer() {
                var expectedStructure = new Structure("structureId");
                _webServiceDeserializer.Setup(d => d.ParseStructureFromGetStructureStatusResult(It.IsAny<string>(), It.IsAny<string>())).Returns(expectedStructure);

                GetStatusResult result = await _webService.GetStructureAndDeviceStatusAsync(new Structure(""));

                Assert.AreEqual(expectedStructure, result.Structures.ElementAt(0));
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldReturnExceptionWhenGetResponseFails() {
                var expectedException = new Exception("Failed!");
                _webRequest.Setup(r => r.GetResponseAsync()).Throws(expectedException);

                GetStatusResult result = await _webService.GetStructureAndDeviceStatusAsync(new Structure(""));

                Assert.AreEqual(expectedException, result.Exception);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldReturnErrorWhenGetResponseFails() {
                _webRequest.Setup(r => r.GetResponseAsync()).Throws(new Exception());
                _webServiceDeserializer.Setup(d => d.ParseWebServiceErrorAsync(It.IsAny<Exception>())).Returns(Task.FromResult(WebServiceError.SessionTokenExpired));

                GetStatusResult result = await _webService.GetStructureAndDeviceStatusAsync(new Structure(""));

                Assert.AreEqual(WebServiceError.SessionTokenExpired, result.Error);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldAddDeviceKeyForThermostats() {
                string thermostatId = "12345";
                var structure = new Structure("id");
                structure.Thermostats.Add(new Thermostat(thermostatId));
                await _webService.GetStructureAndDeviceStatusAsync(structure);

                string expectedKey = string.Format("\"key\":\"device.{0}\"", thermostatId);
                _webRequest.Verify(w => w.SetRequestStringAsync(It.Is<string>(s => s.Contains(expectedKey))));
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldGetFanModeFromDeserializer() {
                _webResponse.SetupSequence(w => w.GetResponseStringAsync())
                            .Returns(Task.FromResult(FakeJsonMessages.GetStructureStatusResult))
                            .Returns(Task.FromResult(FakeJsonMessages.GetSharedStatusResult))
                            .Returns(Task.FromResult(FakeJsonMessages.GetDeviceStatusResult));

                var structure = new Structure("");
                structure.Thermostats.Add(new Thermostat(""));
                await _webService.GetStructureAndDeviceStatusAsync(structure);

                _webServiceDeserializer.Verify(d => d.ParseFanModeFromDeviceSubscribeResult(FakeJsonMessages.GetDeviceStatusResult));
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldGetLeafFromDeserializer() {
                _webResponse.SetupSequence(w => w.GetResponseStringAsync())
                            .Returns(Task.FromResult(FakeJsonMessages.GetStructureStatusResult))
                            .Returns(Task.FromResult(FakeJsonMessages.GetSharedStatusResult))
                            .Returns(Task.FromResult(FakeJsonMessages.GetDeviceStatusResult));

                var structure = new Structure("");
                structure.Thermostats.Add(new Thermostat(""));
                await _webService.GetStructureAndDeviceStatusAsync(structure);

                _webServiceDeserializer.Verify(d => d.ParseLeafFromDeviceSubscribeResult(FakeJsonMessages.GetDeviceStatusResult));
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldAddThermostatsToResult() {
                var expectedFanMode = FanMode.On;
                _webServiceDeserializer.Setup(d => d.ParseFanModeFromDeviceSubscribeResult(It.IsAny<string>()))
                                       .Returns(expectedFanMode);
                _webResponse.SetupSequence(w => w.GetResponseStringAsync())
                            .Returns(Task.FromResult(FakeJsonMessages.GetStructureStatusResult))
                            .Returns(Task.FromResult(FakeJsonMessages.GetDeviceStatusResult));

                var structure = new Structure("");
                structure.Thermostats.Add(new Thermostat(""));
                structure.Thermostats.Add(new Thermostat(""));

                GetStatusResult result = await _webService.GetStructureAndDeviceStatusAsync(structure);

                Assert.AreEqual(2, result.Structures.ElementAt(0).Thermostats.Count);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldUseFanModeFromDeserializer() {
                var expectedFanMode = FanMode.On;
                _webServiceDeserializer.Setup(d => d.ParseFanModeFromDeviceSubscribeResult(It.IsAny<string>()))
                                       .Returns(expectedFanMode);
                _webResponse.SetupSequence(w => w.GetResponseStringAsync())
                            .Returns(Task.FromResult(FakeJsonMessages.GetStructureStatusResult))
                            .Returns(Task.FromResult(FakeJsonMessages.GetDeviceStatusResult));

                var structure = new Structure("");
                structure.Thermostats.Add(new Thermostat(""));
                GetStatusResult result = await _webService.GetStructureAndDeviceStatusAsync(structure);
                Assert.AreEqual(expectedFanMode, result.Structures.ElementAt(0).Thermostats[0].FanMode);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldNotAddDeviceKeyForThermostatsWhenGetStructureStatusFails() {
                _webRequest.Setup(r => r.GetResponseAsync()).Throws(new Exception());
                _webServiceDeserializer.Setup(d => d.ParseWebServiceErrorAsync(It.IsAny<Exception>())).Returns(Task.FromResult(WebServiceError.SessionTokenExpired));

                string thermostatId = "12345";
                var structure = new Structure("id");
                structure.Thermostats.Add(new Thermostat(thermostatId));
                await _webService.GetStructureAndDeviceStatusAsync(structure);

                string expectedKey = string.Format("\"key\":\"device.{0}\"", thermostatId);
                _webRequest.Verify(w => w.SetRequestStringAsync(It.Is<string>(s => s.Contains(expectedKey))), Times.Never());
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldStopGettingDeviceStatusIfOneFails() {
                _webRequest.SetupSequence(r => r.GetResponseAsync())
                           .Returns(Task.FromResult(_webResponse.Object))
                           .Throws(new Exception());
                _webServiceDeserializer.Setup(d => d.ParseWebServiceErrorAsync(It.IsAny<Exception>())).Returns(Task.FromResult(WebServiceError.SessionTokenExpired));

                string secondThermostatId = "12345";
                var structure = new Structure("id");
                structure.Thermostats.Add(new Thermostat("id"));
                structure.Thermostats.Add(new Thermostat(secondThermostatId));
                await _webService.GetStructureAndDeviceStatusAsync(structure);

                string expectedKey = string.Format("\"key\":\"device.{0}\"", secondThermostatId);
                _webRequest.Verify(w => w.SetRequestStringAsync(It.Is<string>(s => s.Contains(expectedKey))), Times.Never());
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldAddSharedKeysForThermostats() {
                string thermostatId1 = "12345";
                string thermostatId2 = "54321";
                var structure = new Structure("id");
                structure.Thermostats.Add(new Thermostat(thermostatId1));
                structure.Thermostats.Add(new Thermostat(thermostatId2));
                await _webService.GetStructureAndDeviceStatusAsync(structure);

                string expectedKey1 = string.Format("\"key\":\"shared.{0}\"", thermostatId1);
                string expectedKey2 = string.Format("\"key\":\"shared.{0}\"", thermostatId2);
                _webRequest.Verify(w => w.SetRequestStringAsync(It.Is<string>(s => s.Contains(expectedKey1))), Times.Once());
                _webRequest.Verify(w => w.SetRequestStringAsync(It.Is<string>(s => s.Contains(expectedKey2))), Times.Once());
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldStopGettingDeviceStatusIfSharedStatusFails() {
                _webRequest.SetupSequence(r => r.GetResponseAsync())
                           .Returns(Task.FromResult(_webResponse.Object))
                           .Throws(new Exception());
                _webServiceDeserializer.Setup(d => d.ParseWebServiceErrorAsync(It.IsAny<Exception>())).Returns(Task.FromResult(WebServiceError.SessionTokenExpired));

                string firstThermostatId = "12345";
                var structure = new Structure("id");
                structure.Thermostats.Add(new Thermostat(firstThermostatId));
                structure.Thermostats.Add(new Thermostat("id"));
                await _webService.GetStructureAndDeviceStatusAsync(structure);

                string expectedKey = string.Format("\"key\":\"device.{0}\"", firstThermostatId);
                _webRequest.Verify(w => w.SetRequestStringAsync(It.Is<string>(s => s.Contains(expectedKey))), Times.Never());
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldSetAuthorizationHeaderOnRequest() {
                string accessToken = "token";
                _sessionProvider.SetupGet(s => s.AccessToken).Returns(accessToken);
                await _webService.GetStructureAndDeviceStatusAsync(new Structure(""));

                _webHeaderCollection.VerifySet(w => w["Authorization"] = "Basic " + accessToken);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldSetMethodToPost() {
                await _webService.GetStructureAndDeviceStatusAsync(new Structure(""));

                _webRequest.VerifySet(w => w.Method = "POST");
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldSetContentTypeToJson() {
                await _webService.GetStructureAndDeviceStatusAsync(new Structure(""));

                _webRequest.VerifySet(w => w.ContentType = ContentType.Json);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldSetNestHeadersOnRequest() {
                string userId = "userId";
                _sessionProvider.SetupGet(s => s.UserId).Returns(userId);
                await _webService.GetStructureAndDeviceStatusAsync(new Structure(""));

                _webHeaderCollection.VerifySet(w => w["X-nl-protocol-version"] = "1");
                _webHeaderCollection.VerifySet(w => w["X-nl-user-id"] = userId);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldUseCorrectUrl() {
                var structure = new Structure("id123");
                await _webService.SetAwayMode(structure, true);

                var expectedUri = new Uri(BaseUrl + "/v2/put/structure.id123");
                _requestProvider.Verify(r => r.CreateRequest(expectedUri));
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldSetAwayModeInRequestString() {
                await _webService.SetAwayMode(new Structure(""), true);

                string expectedString = "\"away\":true";
                _webRequest.Verify(r=>r.SetRequestStringAsync(It.Is<string>(s => s.Contains(expectedString))));
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldSetAwaySetterInRequestString() {
                await _webService.SetAwayMode(new Structure(""), true);

                string expectedString = "\"away_setter\":0";
                _webRequest.Verify(r=>r.SetRequestStringAsync(It.Is<string>(s => s.Contains(expectedString))));
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldSetAwayTimestampInRequestString() {
                double timestamp = 1234567890d;
                _timestampProvider.Setup(t => t.GetTimestamp()).Returns(timestamp);

                await _webService.SetAwayMode(new Structure(""), true);

                string expectedString = "\"away_timestamp\":" + timestamp;
                _webRequest.Verify(r=>r.SetRequestStringAsync(It.Is<string>(s => s.Contains(expectedString))));
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldSetAuthorizationHeaderOnRequest() {
                string accessToken = "token";
                _sessionProvider.SetupGet(s => s.AccessToken).Returns(accessToken);
                await _webService.SetAwayMode(new Structure(""), true);

                _webHeaderCollection.VerifySet(w => w["Authorization"] = "Basic " + accessToken);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldSetMethodToPost() {
                await _webService.SetAwayMode(new Structure(""), true);

                _webRequest.VerifySet(w => w.Method = "POST");
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldSetContentTypeToJson() {
                await _webService.SetAwayMode(new Structure(""), true);

                _webRequest.VerifySet(w => w.ContentType = ContentType.Json);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldSetNestHeadersOnRequest() {
                string userId = "userId";
                _sessionProvider.SetupGet(s => s.UserId).Returns(userId);
                await _webService.SetAwayMode(new Structure(""), true);

                _webHeaderCollection.VerifySet(w => w["X-nl-protocol-version"] = "1");
                _webHeaderCollection.VerifySet(w => w["X-nl-user-id"] = userId);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldUseCorrectUrl() {
                var thermostat = new Thermostat("id123");
                await _webService.SetHvacModeAsync(thermostat, HvacMode.Off);

                var expectedUri = new Uri(BaseUrl + "/v2/put/shared.id123");
                _requestProvider.Verify(r => r.CreateRequest(expectedUri));
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldSetHvacModeInRequestString() {
                _webServiceDeserializer.Setup(d => d.GetHvacModeString(It.IsAny<HvacMode>())).Returns("testing");

                var thermostat = new Thermostat("id123");
                await _webService.SetHvacModeAsync(thermostat, HvacMode.Off);

                string expectedString = "\"target_temperature_type\":\"testing\"";
                _webRequest.Verify(r=>r.SetRequestStringAsync(It.Is<string>(s => s.Contains(expectedString))));
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldSetAuthorizationHeaderOnRequest() {
                string accessToken = "token";
                _sessionProvider.SetupGet(s => s.AccessToken).Returns(accessToken);
                var thermostat = new Thermostat("id123");
                await _webService.SetHvacModeAsync(thermostat, HvacMode.Off);

                _webHeaderCollection.VerifySet(w => w["Authorization"] = "Basic " + accessToken);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldSetMethodToPost() {
                var thermostat = new Thermostat("id123");
                await _webService.SetHvacModeAsync(thermostat, HvacMode.Off);

                _webRequest.VerifySet(w => w.Method = "POST");
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldSetContentTypeToJson() {
                var thermostat = new Thermostat("id123");
                await _webService.SetHvacModeAsync(thermostat, HvacMode.Off);

                _webRequest.VerifySet(w => w.ContentType = ContentType.Json);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.Test\UnitTests\NestWebServiceTest.cs
[TestMethod]
            public async Task ShouldSetNestHeadersOnRequest() {
                string userId = "userId";
                _sessionProvider.SetupGet(s => s.UserId).Returns(userId);
                var thermostat = new Thermostat("id123");
                await _webService.SetHvacModeAsync(thermostat, HvacMode.Off);

                _webHeaderCollection.VerifySet(w => w["X-nl-protocol-version"] = "1");
                _webHeaderCollection.VerifySet(w => w["X-nl-user-id"] = userId);
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\ExtensionMethods.cs
public static async Task SetRequestStringAsync(this WebRequest request, string requestString) {
            using (Stream stream = await request.GetRequestStreamAsync()) {
                byte[] encodedRequestString = Encoding.UTF8.GetBytes(requestString);
                await stream.WriteAsync(encodedRequestString, 0, encodedRequestString.Length);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\ExtensionMethods.cs
public static async Task<string> GetResponseStringAsync(this WebRequest request) {
            WebResponse response = await request.GetResponseAsync();
            return await response.GetResponseStringAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\ExtensionMethods.cs
public static async Task<string> GetResponseStringAsync(this WebResponse response) {
            Stream responseStream = response.GetResponseStream();
            string strContent = "";
            using (var sr = new StreamReader(responseStream)) {
                strContent = await sr.ReadToEndAsync();
            }

            return strContent;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\Login\LoginControl.xaml.cs
private async void OnLoginPressed(object sender, RoutedEventArgs args) {
            await ViewModel.LogInAsync();
            RefreshPasswordHintVisibility();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\MainPage\MainPage.xaml.cs
private async void OnLoaded(object sender, RoutedEventArgs e) {
            await ViewModel.InitializeAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\MainPage\NestViewModel.cs
public async Task InitializeAsync() {
            if (_sessionProvider.IsSessionExpired) {
                State = NestViewModelState.LoggingIn;
                return;
            }

            await OnLoggedIn();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\MainPage\NestViewModel.cs
public async Task LogInAsync() {
            State = NestViewModelState.Loading;

            ResetCurrentError();
            string userName = UserName;
            string password = Password;
            ClearLoginFields();

            if (_sessionProvider.IsSessionExpired) {
                var loginResult = await _nestWebService.LoginAsync(userName, password);
                if (IsErrorHandled(loginResult.Error, loginResult.Exception))
                    return;
            }

            await OnLoggedIn();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\MainPage\NestViewModel.cs
private async Task OnLoggedIn() {
            State = NestViewModelState.Loading;

            var result = await _nestWebService.UpdateTransportUrlAsync();
            if (IsErrorHandled(result.Error, result.Exception))
                return;

            _getStatusResult = await _nestWebService.GetFullStatusAsync();
            if (IsErrorHandled(_getStatusResult.Error, _getStatusResult.Exception))
                return;

            State = NestViewModelState.LoggedIn;

            UpdateViewModelFromGetStatusResult(_getStatusResult);

            _statusUpdater.CurrentStructure = _getStatusResult.Structures.ElementAt(0);
            _statusUpdater.Start();
            _statusProvider.Start();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\MainPage\NestViewModel.cs
public async Task RaiseLowTemperatureAsync() {
            await RaiseTemperatureAsync(TemperatureMode.RangeLow);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\MainPage\NestViewModel.cs
public async Task RaiseHighTemperatureAsync() {
            await RaiseTemperatureAsync(TemperatureMode.RangeHigh);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\MainPage\NestViewModel.cs
public async Task LowerLowTemperatureAsync() {
            await LowerTemperatureAsync(TemperatureMode.RangeLow);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\MainPage\NestViewModel.cs
public async Task LowerHighTemperatureAsync() {
            await LowerTemperatureAsync(TemperatureMode.RangeHigh);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\MainPage\NestViewModel.cs
public async Task RaiseTemperatureAsync() {
            await RaiseTemperatureAsync(TemperatureMode.Target);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\MainPage\NestViewModel.cs
private async Task RaiseTemperatureAsync(TemperatureMode temperatureMode) {
            double temperature = GetTemperatureValue(temperatureMode);
            if (temperature >= MaxTemperature)
                return;

            await PauseStatusProviderWhile(async () => {
                var thermostat = GetFirstThermostat();

                double desiredTemperature = temperature + 1.0d;
                SetTemperatureValue(temperatureMode, desiredTemperature);
                SetThermostatTemperatureValue(temperatureMode, thermostat, desiredTemperature);

                var result = await _nestWebService.ChangeTemperatureAsync(thermostat, desiredTemperature, temperatureMode);
                if (IsErrorHandled(result.Error, result.Exception))
                    return;

                await _statusUpdater.UpdateStatusAsync();
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\MainPage\NestViewModel.cs
public async Task LowerTemperatureAsync() {
            await LowerTemperatureAsync(TemperatureMode.Target);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\MainPage\NestViewModel.cs
public async Task LowerTemperatureAsync(TemperatureMode temperatureMode) {
            double temperature = GetTemperatureValue(temperatureMode);
            if (temperature <= MinTemperature)
                return;

            await PauseStatusProviderWhile(async () => {
                var thermostat = GetFirstThermostat();
                double desiredTemperature = temperature - 1.0d;
                SetTemperatureValue(temperatureMode, desiredTemperature);
                SetThermostatTemperatureValue(temperatureMode, thermostat, desiredTemperature);

                var result = await _nestWebService.ChangeTemperatureAsync(thermostat, desiredTemperature, temperatureMode);
                if (IsErrorHandled(result.Error, result.Exception))
                    return;

                await _statusUpdater.UpdateStatusAsync();
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\MainPage\NestViewModel.cs
private async void SetAwayModeAsync(bool isAway) {
            Structure structure = GetFirstStructure();
            if (structure.IsAway == isAway) {
                return;
            }

            await PauseStatusProviderWhile(async () => {
                structure.IsAway = isAway;
                await _nestWebService.SetAwayMode(structure, isAway);
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\MainPage\NestViewModel.cs
private async void SetFanModeAsync(FanMode fanMode) {
            var thermostat = GetFirstThermostat();
            if (thermostat.FanMode == fanMode)
                return;

            await PauseStatusProviderWhile(async () => {
                thermostat.FanMode = fanMode;
                var result = await _nestWebService.SetFanModeAsync(thermostat, fanMode);
                if (IsErrorHandled(result.Error, result.Exception))
                    return;

                await _statusUpdater.UpdateStatusAsync();
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\MainPage\NestViewModel.cs
private async void SetHvacModeAsync(HvacMode hvacMode) {
            var thermostat = GetFirstThermostat();
            if (thermostat.HvacMode == hvacMode)
                return;

            await PauseStatusProviderWhile(async () => {
                thermostat.HvacMode = hvacMode;
                var result = await _nestWebService.SetHvacModeAsync(thermostat, hvacMode);
                if (IsErrorHandled(result.Error, result.Exception))
                    return;

                await _statusUpdater.UpdateStatusAsync();
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\MainPage\NestViewModel.cs
public async void RetryAfterErrorAsync() {
            await OnLoggedIn();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\MainPage\NestViewModel.cs
private async Task PauseStatusProviderWhile(Func<Task> action) {
            try {
                _statusProvider.Stop();
                await action();
            }
            finally {
                _statusProvider.Start();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\MainPage\ThermostatControl.xaml.cs
private async void OnUpClick(object sender, RoutedEventArgs e) {
            await ViewModel.RaiseTemperatureAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\MainPage\ThermostatControl.xaml.cs
private async void OnDownClick(object sender, RoutedEventArgs e) {
            await ViewModel.LowerTemperatureAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\MainPage\ThermostatControl.xaml.cs
private async void OnLowTemperatureUpButtonClick(object sender, RoutedEventArgs e) {
            await ViewModel.RaiseLowTemperatureAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\MainPage\ThermostatControl.xaml.cs
private async void OnLowTemperatureDownButtonClick(object sender, RoutedEventArgs e) {
            await ViewModel.LowerLowTemperatureAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\MainPage\ThermostatControl.xaml.cs
private async void OnHighTemperatureUpButtonClick(object sender, RoutedEventArgs e) {
            await ViewModel.RaiseHighTemperatureAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\MainPage\ThermostatControl.xaml.cs
private async void OnHighTemperatureDownButtonClick(object sender, RoutedEventArgs e) {
            await ViewModel.LowerHighTemperatureAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\Services\NestWebService.cs
public async Task<GetStatusResult> GetStructureAndDeviceStatusAsync(Structure structure) {
            var structureResult = await GetStructureStatusAsync(structure);
            if (structureResult.Exception != null)
                return structureResult;

            foreach (var thermostat in structure.Thermostats) {
                GetThermostatStatusResult sharedResult = await GetSharedThermostatPropertiesAsync(thermostat);
                if (sharedResult.Exception != null)
                    return new GetStatusResult(sharedResult.Error, sharedResult.Exception);
                GetThermostatStatusResult thermostatResult = await GetDeviceThermostatPropertiesAsync(thermostat, sharedResult);
                if (thermostatResult.Exception != null)
                    return new GetStatusResult(thermostatResult.Error, thermostatResult.Exception);

                structureResult.Structures.ElementAt(0).Thermostats.Add(sharedResult.Thermostat);
            }
            return structureResult;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\Services\NestWebService.cs
private async Task<GetStatusResult> GetStructureStatusAsync(Structure structure) {
            string url = string.Format("{0}/v2/subscribe", _sessionProvider.TransportUrl);
            var request = GetPostJsonRequest(url);

            SetAuthorizationHeaderOnRequest(request, _sessionProvider.AccessToken);
            SetNestHeadersOnRequest(request, _sessionProvider.UserId);

            string requestString = string.Format("{{\"keys\":[{{\"key\":\"structure.{0}\"}}]}}", structure.ID);
            await request.SetRequestStringAsync(requestString);
            Exception exception;

            try {
                IWebResponse response = await request.GetResponseAsync();
                string responseString = await response.GetResponseStringAsync();
                Structure parsedStructure = _deserializer.ParseStructureFromGetStructureStatusResult(responseString, structure.ID);
                return new GetStatusResult(new[] {parsedStructure});
            }
            catch (Exception ex) {
                exception = ex;
            }

            var error = await _deserializer.ParseWebServiceErrorAsync(exception);
            return new GetStatusResult(error, exception);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\Services\NestWebService.cs
public async Task<WebServiceResult> LoginAsync(string userName, string password) {
            IWebRequest request = GetPostFormRequest("https://home.nest.com/user/login");
            string requestString = string.Format("username={0}&password={1}", UrlEncode(userName), UrlEncode(password));
            await request.SetRequestStringAsync(requestString);
            Exception exception;

            try {
                IWebResponse response = await request.GetResponseAsync();
                string responseString = await response.GetResponseStringAsync();
                CacheSession(responseString);
                return new WebServiceResult();
            }
            catch (Exception ex) {
                exception = ex;
            }

            var error = await _deserializer.ParseWebServiceErrorAsync(exception);
            return new WebServiceResult(error, exception);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\Services\NestWebService.cs
public async Task<GetStatusResult> GetFullStatusAsync() {
            if (_sessionProvider.IsSessionExpired)
                return new GetStatusResult(WebServiceError.SessionTokenExpired, new SessionExpiredException());

            string url = string.Format("{0}/v2/mobile/user.{1}", _sessionProvider.TransportUrl, _sessionProvider.UserId);
            var request = GetGetRequest(url);
            SetAuthorizationHeaderOnRequest(request, _sessionProvider.AccessToken);
            Exception exception = null;

            try {
                IWebResponse response = await request.GetResponseAsync();
                string responseString = await response.GetResponseStringAsync();
                var structures = _deserializer.ParseStructuresFromGetStatusResult(responseString, _sessionProvider.UserId);
                _analyticsService.LogEvent("Structures: {0}, Devices: {1}", structures.Count(), structures.Sum(s => s.Thermostats.Count()));
                return new GetStatusResult(structures);
            }
            catch (Exception ex) {
                exception = ex;
            }

            var error = await _deserializer.ParseWebServiceErrorAsync(exception);
            return new GetStatusResult(error, exception);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\Services\NestWebService.cs
private async Task<WebServiceResult> SendPutRequestAsync(string url, string requestJson) {
            if (_sessionProvider.IsSessionExpired)
                return new GetStatusResult(WebServiceError.SessionTokenExpired, new SessionExpiredException());

            IWebRequest request = GetPostJsonRequest(url);
            SetAuthorizationHeaderOnRequest(request, _sessionProvider.AccessToken);
            SetNestHeadersOnRequest(request, _sessionProvider.UserId);

            await request.SetRequestStringAsync(requestJson);
            Exception exception = null;

            try {
                await request.GetResponseAsync();
                return new WebServiceResult();
            }
            catch (Exception ex) {
                exception = ex;
            }

            var error = await _deserializer.ParseWebServiceErrorAsync(exception);
            return new WebServiceResult(error, exception);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\Services\NestWebService.cs
public async Task<WebServiceResult> SetFanModeAsync(Thermostat thermostat, FanMode fanMode) {
            string url = string.Format(@"{0}/v2/put/device.{1}", _sessionProvider.TransportUrl, thermostat.ID);
            string fanModeString = GetFanModeString(fanMode);
            string requestString = string.Format("{{\"fan_mode\":\"{0}\"}}", fanModeString);
            return await SendPutRequestAsync(url, requestString);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\Services\NestWebService.cs
public async Task<WebServiceResult> SetHvacModeAsync(Thermostat thermostat, HvacMode hvacMode) {
            string url = string.Format(@"{0}/v2/put/shared.{1}", _sessionProvider.TransportUrl, thermostat.ID);
            string hvacModeString = _deserializer.GetHvacModeString(hvacMode);
            string requestString = string.Format("{{\"target_temperature_type\":\"{0}\"}}", hvacModeString);
            return await SendPutRequestAsync(url, requestString);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\Services\NestWebService.cs
public async Task<WebServiceResult> SetAwayMode(Structure structure, bool isAway) {
            string url = string.Format(@"{0}/v2/put/structure.{1}", _sessionProvider.TransportUrl, structure.ID);
            string requestString = string.Format("{{\"away_timestamp\":{0},\"away\":{1},\"away_setter\":0}}", 
                _timestampProvider.GetTimestamp(), isAway.ToString().ToLower());
            return await SendPutRequestAsync(url, requestString);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\Services\NestWebService.cs
public async Task<WebServiceResult> UpdateTransportUrlAsync() {
            IWebRequest request = GetPostJsonRequest("https://home.nest.com/user/service_urls");
            SetAuthorizationHeaderOnRequest(request, _sessionProvider.AccessToken);

            Exception exception = null;
            try {
                IWebResponse response = await request.GetResponseAsync();
                string strContent = await response.GetResponseStringAsync();
                var transportUrl = _deserializer.ParseTransportUrlFromResult(strContent);
                _sessionProvider.UpdateTransportUrl(transportUrl);
                return new WebServiceResult();
            }
            catch (Exception ex) {
                exception = ex;
            }

            var error = await _deserializer.ParseWebServiceErrorAsync(exception);
            return new WebServiceResult(error, exception);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\Services\NestWebService.cs
public async Task<WebServiceResult> ChangeTemperatureAsync(Thermostat thermostat, double desiredTemperature, TemperatureMode temperatureMode) {
            string temperatureProperty = GetTemperaturePropertyString(thermostat, desiredTemperature, temperatureMode);

            string url = string.Format(@"{0}/v2/put/shared.{1}", _sessionProvider.TransportUrl, thermostat.ID);
            string requestString = string.Format("{{\"target_change_pending\":true,{0}}}", temperatureProperty);
            return await SendPutRequestAsync(url, requestString);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\Services\NestWebService.cs
public async Task<GetThermostatStatusResult> GetThermostatStatusAsync(Thermostat thermostat) {
            if (_sessionProvider.IsSessionExpired)
                return new GetThermostatStatusResult(WebServiceError.SessionTokenExpired, new SessionExpiredException());

            GetThermostatStatusResult result = await GetSharedThermostatPropertiesAsync(thermostat);
            if (result.Exception == null) {
                result = await GetDeviceThermostatPropertiesAsync(thermostat, result);
            }

            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\Services\NestWebService.cs
private async Task<GetThermostatStatusResult> GetDeviceThermostatPropertiesAsync(Thermostat thermostat, GetThermostatStatusResult result) {
            string url = string.Format("{0}/v2/subscribe", _sessionProvider.TransportUrl);
            IWebRequest request = GetPostJsonRequest(url);
            SetAuthorizationHeaderOnRequest(request, _sessionProvider.AccessToken);
            SetNestHeadersOnRequest(request, _sessionProvider.UserId);
            string requestString = string.Format("{{\"keys\":[{{\"key\":\"device.{0}\"}}]}}", thermostat.ID);
            await request.SetRequestStringAsync(requestString);

            Exception exception;
            try {
                IWebResponse response = await request.GetResponseAsync();
                string strContent = await response.GetResponseStringAsync();
                result.Thermostat.FanMode = _deserializer.ParseFanModeFromDeviceSubscribeResult(strContent);
                result.Thermostat.IsLeafOn = _deserializer.ParseLeafFromDeviceSubscribeResult(strContent);
                return result;
            }
            catch (Exception ex) {
                exception = ex;
            }

            var error = await _deserializer.ParseWebServiceErrorAsync(exception);
            return new GetThermostatStatusResult(error, exception);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\Services\NestWebService.cs
private async Task<GetThermostatStatusResult> GetSharedThermostatPropertiesAsync(Thermostat thermostat) {
            string url = string.Format("{0}/v2/subscribe", _sessionProvider.TransportUrl);
            IWebRequest request = GetPostJsonRequest(url);
            SetAuthorizationHeaderOnRequest(request, _sessionProvider.AccessToken);
            SetNestHeadersOnRequest(request, _sessionProvider.UserId);
            string requestString = string.Format("{{\"keys\":[{{\"key\":\"shared.{0}\"}}]}}", thermostat.ID);
            await request.SetRequestStringAsync(requestString);

            Exception exception;
            try {
                IWebResponse response = await request.GetResponseAsync();
                string strContent = await response.GetResponseStringAsync();
                var updatedThermostat = new Thermostat(thermostat.ID);
                _deserializer.UpdateThermostatStatusFromSharedStatusResult(strContent, updatedThermostat);
                return new GetThermostatStatusResult(updatedThermostat);
            }
            catch (Exception ex) {
                exception = ex;
            }

            var error = await _deserializer.ParseWebServiceErrorAsync(exception);
            return new GetThermostatStatusResult(error, exception);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\Services\NestWebServiceDeserializer.cs
public async Task<WebServiceError> ParseWebServiceErrorAsync(Exception exception) {
            var error = WebServiceError.Unknown;

            if (await IsInvalidCredentialsErrorAsync(exception))
                error = WebServiceError.InvalidCredentials;
            else if (IsSessionTokenExpiredError(exception))
                error = WebServiceError.SessionTokenExpired;
            else if (IsNotFoundError(exception))
                error = WebServiceError.ServerNotFound;
            else if(IsCancelledError(exception))
                error = WebServiceError.Cancelled;

            return error;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\Services\NestWebServiceDeserializer.cs
private static async Task<bool> IsInvalidCredentialsErrorAsync(Exception exception) {
            bool isInvalidCredentials = false;
            var webException = exception as WebException;
            if (webException != null && webException.Response != null) {
                string responseString = await webException.Response.GetResponseStringAsync();
                var values = ParseAsJsonOrNull(responseString);
                if (values != null) {
                    var errorJson = values["error"];
                    if (errorJson != null) {
                        var errorMessage = errorJson.Value<string>();
                        isInvalidCredentials = errorMessage.Equals("access_denied");
                    }
                }
            }

            return isInvalidCredentials;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\Services\StatusUpdaterService.cs
public async Task UpdateStatusAsync() {
            await UpdateStatusAsync(CurrentStructure);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\Services\StatusUpdaterService.cs
private async Task UpdateStatusAsync(Structure structure) {
            GetStatusResult result = await _nestWebService.GetStructureAndDeviceStatusAsync(structure);
            if (result.Exception != null)
                Stop();

            _delayedStatusProvider.CacheStatus(result);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\Services\StatusUpdaterService.cs
private async void OnTimerTick(object state) {
            await UpdateStatusAsync(CurrentStructure);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\Web\WebRequestWrapper.cs
public async Task<Stream> GetRequestStreamAsync() {
            return await _request.GetRequestStreamAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\Web\WebRequestWrapper.cs
public async Task<IWebResponse> GetResponseAsync() {
            WebResponse response = await _request.GetResponseAsync();
            return new WebResponseWrapper(response);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\Web\WebRequestWrapper.cs
public async Task SetRequestStringAsync(string requestString) {
            await _request.SetRequestStringAsync(requestString);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\GaryJohnson+wpnest\GaryJohnson-wpnest-df25a46\WPNest\WPNest.WP8\..\WPNest\Web\WebResponseWrapper.cs
public async Task<string> GetResponseStringAsync() {
            return await _response.GetResponseStringAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\gep13+VBForums-Viewer\gep13-VBForums-Viewer-1b11a7a\Gep13.WindowsPhone.VBForumsMetro.Client\ViewModels\AddAccountViewModel.cs
private async void AuthenticateUserResponse()
        {
            var viewModelWorker = (VBForumsMetroViewModelWorker)this.VMWorker;
            var result =
                await
                viewModelWorker.VBForumsWebService.IsValidLoginCredential(
                    new LoginCredentialModel() { UserName = this.UserName, Password = this.Password });

            viewModelWorker.ProgressService.Hide();

            if (result)
            {
                this.StatusLabel = "user authenticated successfully";
                this.IsUserAuthenticated = true;
            }
            else
            {
                this.StatusLabel = "unable to authenticate user, please check username and password";
                this.IsUserAuthenticated = false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\gep13+VBForums-Viewer\gep13-VBForums-Viewer-1b11a7a\Gep13.WindowsPhone.VBForumsMetro.Client\ViewModels\ProfileViewModel.cs
private async void GetProfile()
        {
            var viewModelWorker = (VBForumsMetroViewModelWorker)this.VMWorker;

            var id = await this.GetMemberId();

            var profile =
                await
                viewModelWorker.VBForumsWebService.GetProfileForUser(
                    id, new LoginCredentialModel() { UserName = "gep31", Password = "qwerty" });
            this.MemberId = profile.MemberId;
            this.UserName = profile.UserName;
            this.JoinDate = profile.JoinDate;
            this.Posts = profile.Posts;
            this.PostsPerDay = profile.PostsPerDay;
            this.ProfilePictureUrl = profile.ProfilePictureUrl;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\gep13+VBForums-Viewer\gep13-VBForums-Viewer-1b11a7a\Gep13.WindowsPhone.VBForumsMetro.Client\ViewModels\ProfileViewModel.cs
private async Task<int> GetMemberId()
        {
         var viewModelWorker = (VBForumsMetroViewModelWorker)this.VMWorker;
            var id =
                await
                viewModelWorker.VBForumsWebService.GetMemberIdForUser(
                    new LoginCredentialModel() { UserName = "gep31", Password = "qwerty" });

            return id;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\gep13+VBForums-Viewer\gep13-VBForums-Viewer-1b11a7a\Gep13.WindowsPhone.VBForumsMetro.Core\Web\VBForumsWebService.cs
public async Task<bool> IsValidLoginCredential(LoginCredentialModel loginCredential)
        {
            var uri = new Uri("http://www.vbforums.com/login.php?do=login");

            var postString =
                string.Format(
                    "do=login&url=%2Fusercp.php&vb_login_md5password=&vb_login_md5password_utf=&s=&securitytoken=guest&vb_login_username={0}&vb_login_password={1}",
                    loginCredential.UserName,
                    loginCredential.Password);

            var request = WebRequest.CreateHttp(uri);
            request.Method = "POST";
            request.ContentType = "application/x-www-form-urlencoded";

            var requestSteam = await request.GetRequestStreamAsync();

            using (var writer = new StreamWriter(requestSteam))
            {
                writer.Write(postString);
            }

            var response = (HttpWebResponse)await request.GetResponseAsync();
            var statusCode = response.StatusCode;

            if ((int)statusCode >= 400)
            {
                return false;
            }

            string responseString;
            using (var responseStream = new StreamReader(response.GetResponseStream()))
            {
                responseString = await responseStream.ReadToEndAsync();
            }

            return !responseString.Contains("<!-- main error message -->");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\gep13+VBForums-Viewer\gep13-VBForums-Viewer-1b11a7a\Gep13.WindowsPhone.VBForumsMetro.Core\Web\VBForumsWebService.cs
public async Task<IEnumerable<ReputationModel>> GetReputationEntriesForUser(LoginCredentialModel loginCredential)
        {
            var uri = new Uri("http://www.vbforums.com/usercp.php");

            var request = WebRequest.CreateHttp(uri);
            request.Method = "GET";
            request.Credentials = new NetworkCredential(loginCredential.UserName, loginCredential.Password);

            var response = (HttpWebResponse)await request.GetResponseAsync();
            var statusCode = response.StatusCode;

            if ((int)statusCode >= 400)
            {
                return null;
            }

            string responseString;
            using (var responseStream = new StreamReader(response.GetResponseStream()))
            {
                responseString = await responseStream.ReadToEndAsync();
            }

            if (!responseString.Contains("id=\"collapseobj_usercp_reputation\""))
            {
                return null;
            }

            var repTable =
                responseString.Substring(
                    responseString.IndexOf(
                        "<tbody id=\"collapseobj_usercp_reputation\"", StringComparison.Ordinal));

            repTable = repTable.Substring(repTable.IndexOf("<tr>", StringComparison.Ordinal));
            repTable = repTable.Substring(0, repTable.IndexOf("</tbody>", StringComparison.Ordinal) - 1);
            repTable = repTable.Replace("\n", " ").Replace("\r", " ").Replace("\t", " ");
            while (repTable.IndexOf("  ", StringComparison.Ordinal) > 0)
            {
                repTable = repTable.Replace("  ", " ");
            }

            repTable = repTable.Replace("> <", "><").Trim();

            var reputations = new List<ReputationModel>()
                {
                    new ReputationModel()
                        {
                            AuthorName = "gep13",
                            AuthorUri = new Uri("http://www.gep13.co.uk/blog"),
                            Comment = "test comment",
                            CreationDate = DateTime.Now,
                            ThreadName = "Test Thread",
                            ThreadUri = new Uri("http://www.vbforums.com")
                        }
                };

            return reputations;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\gep13+VBForums-Viewer\gep13-VBForums-Viewer-1b11a7a\Gep13.WindowsPhone.VBForumsMetro.Core\Web\VBForumsWebService.cs
public async Task<ProfileModel> GetProfileForUser(int memberId, LoginCredentialModel loginCredential)
        {
            var uri = new Uri("http://www.vbforums.com/login.php?do=login");

            var postString =
                string.Format(
                    "do=login&url=%2Fusercp.php&vb_login_md5password=&vb_login_md5password_utf=&s=&securitytoken=guest&vb_login_username={0}&vb_login_password={1}",
                    loginCredential.UserName,
                    loginCredential.Password);

            var cookieContainer = new CookieContainer();
            var request = WebRequest.CreateHttp(uri);
            request.Method = "POST";
            request.ContentType = "application/x-www-form-urlencoded";
            request.CookieContainer = cookieContainer;

            var requestSteam = await request.GetRequestStreamAsync();

            using (var writer = new StreamWriter(requestSteam))
            {
                writer.Write(postString);
            }

            var loginResponse = await request.GetResponseAsync();
            loginResponse.Close();

            uri = new Uri(string.Format("http://www.vbforums.com/member.php?u={0}", memberId));

            request = WebRequest.CreateHttp(uri);
            request.Method = "GET";
            request.CookieContainer = cookieContainer;

            var response = (HttpWebResponse)await request.GetResponseAsync();
            var statusCode = response.StatusCode;

            if ((int)statusCode >= 400)
            {
                return null;
            }     

            string responseString;
            using (var responseStream = new StreamReader(response.GetResponseStream()))
            {
                responseString = await responseStream.ReadToEndAsync();
            }

            var profile = new ProfileModel();

            // Example HTML that is being parsed at this point
            // <li><span class="shade">Join Date:</span> Nov 16th, 2004</li>
            var rx = new Regex("<li><span class=\"shade\">Join Date:</span> (.* [0-9]{1,2}).*, ([0-9]{2,4})</li>", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            var matches = rx.Matches(responseString);
            
            var joinDate = DateTime.MinValue;

            if (matches.Count != 1)
            {
                joinDate = DateTime.MaxValue;
            }
            else
            {
                var dateTimeString = string.Format(
                    "{0}, {1}", matches[0].Groups[1], matches[0].Groups[2]);

                if (!DateTime.TryParseExact(dateTimeString, "MMM d, yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out joinDate))
                {
                    joinDate = DateTime.MaxValue;
                }
            }

            profile.JoinDate = joinDate;

            // Example HTML that is being parsed at this point
            // <li><span class="shade">Posts Per Day:</span> 7.61</li>
            rx = new Regex("<li><span class=\"shade\">Posts Per Day:</span> (.*)</li>", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            matches = rx.Matches(responseString);
            var postsPerDay = 0d;

            if (matches.Count != 1)
            {
                postsPerDay = -1d;
            }
            else
            {
                if (!double.TryParse(matches[0].Groups[1].ToString(), out postsPerDay))
                {
                    postsPerDay = -1d;
                }
            }

            profile.PostsPerDay = postsPerDay;

            // Example HTML that is being parsed at this point
            // <li><span class="shade">Total Posts:</span> 21,358</li>
            rx = new Regex("<li><span class=\"shade\">Total Posts:</span> (.*)</li>", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            matches = rx.Matches(responseString);
            var posts = 0;

            if (matches.Count != 1)
            {
                posts = -1;
            }
            else
            {
                if (!int.TryParse(matches[0].Groups[1].ToString(), out posts))
                {
                    posts = -1;
                }
            }

            profile.Posts = posts;

            // Example HTML that is being parsed at this point
            // <td id="profilepic_cell" class="tborder alt2"><img src="image.php?u=53106&amp;dateline=1277553514&amp;type=profile"  width="64" height="64"  alt="gep13's Profile Picture" /></td>
            rx = new Regex("<td id=\"profilepic_cell\" class=\"tborder alt2\"><img src=\"(.*)\"", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            matches = rx.Matches(responseString);

            profile.ProfilePictureUrl = matches.Count != 1 ? null : new Uri(matches[0].ToString());

            // Example HTML that is being parsed at this point
            // <strong>Welcome, <a href="member.php?u=53106">gep13</a>.</strong><br />
            var pattern = string.Format("<strong>Welcome, <a href=\"member.php{0}u=.*\">(.*)</a>", Regex.Escape("?"));

            rx = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
            matches = rx.Matches(responseString);

            profile.UserName = matches.Count != 1 ? string.Empty : matches[0].Groups[1].ToString();

            return profile;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\gep13+VBForums-Viewer\gep13-VBForums-Viewer-1b11a7a\Gep13.WindowsPhone.VBForumsMetro.Core\Web\VBForumsWebService.cs
public async Task<int> GetMemberIdForUser(LoginCredentialModel loginCredential)
        {
            var uri = new Uri("http://www.vbforums.com/login.php?do=login");

            var postString =
                string.Format(
                    "do=login&url=%2Fusercp.php&vb_login_md5password=&vb_login_md5password_utf=&s=&securitytoken=guest&vb_login_username={0}&vb_login_password={1}",
                    loginCredential.UserName,
                    loginCredential.Password);

            var cookieContainer = new CookieContainer();
            var request = WebRequest.CreateHttp(uri);
            request.Method = "POST";
            request.ContentType = "application/x-www-form-urlencoded";
            request.CookieContainer = cookieContainer;

            var requestSteam = await request.GetRequestStreamAsync();

            using (var writer = new StreamWriter(requestSteam))
            {
                writer.Write(postString);
            }

            var loginResponse = await request.GetResponseAsync();
            loginResponse.Close();

            uri = new Uri("http://www.vbforums.com/usercp.php");

            request = WebRequest.CreateHttp(uri);
            request.Method = "GET";
            request.CookieContainer = cookieContainer;

            var response = (HttpWebResponse)await request.GetResponseAsync();
            var statusCode = response.StatusCode;

            if ((int)statusCode >= 400)
            {
                return 0;
            }

            string responseString;
            using (var responseStream = new StreamReader(response.GetResponseStream()))
            {
                responseString = await responseStream.ReadToEndAsync();
            }

            // Example HTML that is being parsed at this point
            // <strong>Welcome, <a href="member.php?u=53106">gep13</a>.</strong><br />
            var pattern = string.Format("<strong>Welcome, <a href=\"member.php{0}u=(.*)\"", Regex.Escape("?"));

            var rx = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
            var matches = rx.Matches(responseString);
            var memberId = 0;

            if (matches.Count != 1)
            {
                memberId = -1;
            }
            else
            {
                if (!int.TryParse(matches[0].Groups[1].ToString(), out memberId))
                {
                    memberId = -1;
                }
            }
            
            return memberId;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\getadrotator\AdRotator\Clients\WinPhone7\..\..\Utilities\FileHelpers.cs
public override async Task<Stream> OpenStreamAsync(string name)
        {
#if WINRT
            var package = Windows.ApplicationModel.Package.Current;

            try
            {
                var storageFile = await package.InstalledLocation.GetFileAsync(name);
                var randomAccessStream = await storageFile.OpenReadAsync();
                return randomAccessStream.AsStreamForRead();
            }
            catch (IOException)
            {
                // The file must not exist... return a null stream.
                return null;
            }
#else
            await TaskEx.Run(() => { });
            throw new NotImplementedException();
#endif

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\getadrotator\AdRotator\Clients\WinPhone8\..\..\Utilities\FileHelpers.cs
public override async Task<Stream> OpenStreamAsync(string name)
        {
#if WINRT
            var package = Windows.ApplicationModel.Package.Current;

            try
            {
                var storageFile = await package.InstalledLocation.GetFileAsync(name);
                var randomAccessStream = await storageFile.OpenReadAsync();
                return randomAccessStream.AsStreamForRead();
            }
            catch (IOException)
            {
                // The file must not exist... return a null stream.
                return null;
            }
#else
            await TaskEx.Run(() => { });
            throw new NotImplementedException();
#endif

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\giggio+multassociais-windowsapps\giggio-multassociais-windowsapps-65a420f\src\MultasSociais\MultasSociais.WinPhone8App\Infra\ObjectStorageHelper.cs
public async Task SaveAsync(T obj)
        {
            var fileName = GetFileName();
            var serializedObj = JsonConvert.SerializeObject(obj);
            using (var storage = IsolatedStorageFile.GetUserStoreForApplication())
            {
                if (storage.FileExists(fileName))
                    storage.DeleteFile(fileName);
                using (var stream = new IsolatedStorageFileStream(fileName, FileMode.CreateNew, storage))
                {
                    using (var writer = new StreamWriter(stream))
                    {
                        await writer.WriteAsync(serializedObj);
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\giggio+multassociais-windowsapps\giggio-multassociais-windowsapps-65a420f\src\MultasSociais\MultasSociais.WinPhone8App\Infra\ObjectStorageHelper.cs
public async Task<T> LoadAsync()
        {
            var fileName = GetFileName();
            T obj;
            using (var storage = IsolatedStorageFile.GetUserStoreForApplication())
            {
                if (!storage.FileExists(fileName))
                {
                    return default(T);
                }
                using (var stream = new IsolatedStorageFileStream(fileName, FileMode.Open, storage))
                {
                    using (var reader = new StreamReader(stream))
                    {
                        var serializedObj = await reader.ReadToEndAsync();
                        obj = JsonConvert.DeserializeObject<T>(serializedObj);
                    }
                }
            }
            return obj;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\giggio+multassociais-windowsapps\giggio-multassociais-windowsapps-65a420f\src\MultasSociais\MultasSociais.WinPhone8App\ViewModels\DetailsViewModel.cs
public async Task Multar()
        {
            try
            {
                multando = true;
                NotifyOfPropertyChange("CanMultar");
                try
                {
                    multadoAgora = await talao.MarcarMultaAsync(Id);
                }
                catch (WebException)
                {
                    MessageBox.Show("Desconectado da internet. Tente novamente mais tarde.");
                }
                if (multadoAgora)
                {
                    NumeroDeMultas++;
                    await GuardarQueFoiMultado();
                }
            }
            finally
            {
                multando = false;
            }
            NotifyOfPropertyChange("CanMultar");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\giggio+multassociais-windowsapps\giggio-multassociais-windowsapps-65a420f\src\MultasSociais\MultasSociais.WinPhone8App\ViewModels\DetailsViewModel.cs
private async Task GuardarQueFoiMultado()
        {
            await multasRealizadas.Adicionar(new MultaRealizada { Id = Id });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\giggio+multassociais-windowsapps\giggio-multassociais-windowsapps-65a420f\src\MultasSociais\MultasSociais.WinPhone8App\Models\MultasRealizadas.cs
public async Task Adicionar(MultaRealizada multaRealizada)
        {
            multasRealizadas.Add(multaRealizada);
            await objectStorageHelper.SaveAsync(multasRealizadas);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\giggio+multassociais-windowsapps\giggio-multassociais-windowsapps-65a420f\src\MultasSociais\MultasSociais.WinPhone8App\ViewModels\PhotoShareViewModel.cs
public async Task Share()
        {
            Sharing = true;
            var multa = new CriarMultaNova
            {
                Descricao = dadosDaMulta.Descricao,
                Placa = dadosDaMulta.Placa,
                VideoUrl = dadosDaMulta.VideoUrl
            };
            multa.SetaDataOcorrencia(dadosDaMulta.DataOcorrencia);
            try
            {
                MultadoComSucesso = await talao.MultarAsync(multa, fileInfo);
                if (MultadoComSucesso)
                {
                    Sharing = false;
                    //todo:remover messageboxes pq 顯 lugar errado (viewmodel)
                    MessageBox.Show("Multado com sucesso!");
                    navigationService.UriFor<MainViewModel>().Navigate();
                }
                else
                {
                    MessageBox.Show("N䯠foi possl multar, favor tentar mais tarde.");
                }
            }
            catch (WebException)
            {
                Sharing = false; 
                MessageBox.Show("Desconectado da internet. Tente novamente mais tarde.");
            }
            catch (Exception ex)
            {
                Sharing = false;
                MessageBox.Show("N䯠foi possl multar, ocorreu um erro, favor tentar mais tarde.\nErro:" + ex.Message);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\giggio+multassociais-windowsapps\giggio-multassociais-windowsapps-65a420f\src\MultasSociais\MultasSociais.WinPhone8App\ViewModels\MainViewModel.cs
protected async override void OnInitialize()
        {
            try
            {
                var maisNovos = await talao.ObterMaisNovos();
                var maisMultados = await talao.ObterMaisMultados();
                var grupos = new BindableCollection<GrupoDeMultas> { maisNovos, maisMultados };
                ConfigurarNumeroDeItensAExibir(grupos);
                Grupos = grupos;
                await talao.PegarMaisMultas(maisNovos, 10, 50);
                await talao.PegarMaisMultas(maisMultados, 10, 50);
                IsLoading = false;
            }
            catch (WebException)
            {
                //todo: remover messagebox
                //todo: colocar bot䯠de reload
                MessageBox.Show("Vocꡥstᡤesconectado. Tente novamente mais tarde.");
            }
            base.OnInitialize();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\giggio+multassociais-windowsapps\giggio-multassociais-windowsapps-65a420f\src\MultasSociais\MultasSociais.WinPhone8App\ViewModels\MainViewModel.cs
public async Task CarregarMultas(GrupoDeMultas grupoDeMultas)
        {
            IsLoading = true;
            await talao.PegarMaisMultas(grupoDeMultas, grupoDeMultas.Itens.Count, 50);
            IsLoading = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\gjulianm+Ocell\gjulianm-Ocell-ab77924\Ocell.UI\Ocell.Phone8\..\Ocell.Phone7\Pages\Elements\NotificationsModel.cs
[Conditional("WP8")]
        private async void SpeakNotifications()
        {
            SpeechSynthesizer synth = new SpeechSynthesizer();
            StringBuilder sb = new StringBuilder();

            if (Tweets.Count == 0)
            {
                await synth.SpeakTextAsync(Resources.NoNewNotifications);
                return;
            }

            foreach (var tweet in Tweets)
                sb.AppendLine(TweetToText(tweet));

            await synth.SpeakTextAsync(sb.ToString());
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\gjulianm+Ocell\gjulianm-Ocell-ab77924\Ocell.UI\Ocell.Phone8\App.xaml.cs
private async void Application_Launching(object sender, LaunchingEventArgs e)
        {
            await VoiceCommandService.InstallCommandSetsFromFileAsync(new Uri("ms-appx:///VoiceReco/VoiceCommandDefinition.xml"));
            TrialInformation.ReloadTrialInfo();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\gjulianm+Ocell\gjulianm-Ocell-ab77924\Ocell.UI\Ocell.Phone8\..\Ocell.Phone7\Pages\Elements\NotificationsModel.cs
[Conditional("WP8")]
        private async void SpeakNotifications()
        {
            SpeechSynthesizer synth = new SpeechSynthesizer();
            StringBuilder sb = new StringBuilder();

            if (Tweets.Count == 0)
            {
                await synth.SpeakTextAsync(Resources.NoNewNotifications);
                return;
            }

            foreach (var tweet in Tweets)
                sb.AppendLine(TweetToText(tweet));

            await synth.SpeakTextAsync(sb.ToString());
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\gjulianm+Ocell\gjulianm-Ocell-ab77924\Ocell.UI\Ocell.Phone8\App.xaml.cs
private async void Application_Launching(object sender, LaunchingEventArgs e)
        {
            await VoiceCommandService.InstallCommandSetsFromFileAsync(new Uri("ms-appx:///VoiceReco/VoiceCommandDefinition.xml"));
            TrialInformation.ReloadTrialInfo();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\gjulianm+Ocell\gjulianm-Ocell-ab77924\Ocell.UI\Ocell.Phone8\VoiceReco\VoiceRecognizer.cs
public async Task<TextDictationResult> GetDictatedText()
        {
            var retval = new TextDictationResult();

            var recognizer = new SpeechRecognizerUI();

            var result = await recognizer.RecognizeWithUIAsync();

            if (result.ResultStatus == SpeechRecognitionUIStatus.Succeeded)
            {
                retval.SuccesfulRecognition = true;
                retval.Text = result.RecognitionResult.Text;

                var userConfirms = await AskSendRepeatCancelQuestion();

                if (userConfirms == SendRepeatCancel.Send)
                    retval.UserCancelled = false;
                else if (userConfirms == SendRepeatCancel.Repeat)
                    return await GetDictatedText();
                else if (userConfirms == SendRepeatCancel.Cancel)
                    retval.UserCancelled = true;
            }
            else
            {
                retval.SuccesfulRecognition = false;
                retval.UserCancelled = false;
                retval.Text = String.Empty;
            }

            return retval;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\gjulianm+Ocell\gjulianm-Ocell-ab77924\Ocell.UI\Ocell.Phone8\VoiceReco\VoiceRecognizer.cs
private async Task<SendRepeatCancel> AskSendRepeatCancelQuestion()
        {
            var recognizer = new SpeechRecognizerUI();
            string[] options = { Resources.Send, Resources.Repeat, Resources.Cancel };
            string exampleText =  String.Format("{0}, {1}, {2}", options[0], options[1], options[2]);
            recognizer.Recognizer.Grammars.AddGrammarFromList("SendRepeatCancel", options);
            recognizer.Settings.ExampleText = exampleText;


            SpeechSynthesizer synth = new SpeechSynthesizer();
            await synth.SpeakTextAsync(exampleText);

            var result = await recognizer.RecognizeWithUIAsync();

            if (result.ResultStatus == SpeechRecognitionUIStatus.Succeeded)
            {
                if (result.RecognitionResult.Text == Resources.Send)
                    return SendRepeatCancel.Send;
                else if (result.RecognitionResult.Text == Resources.Repeat)
                    return SendRepeatCancel.Repeat;
            }

            return SendRepeatCancel.Cancel; // In every other case.
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\gnp\Model\FeedData.cs
public async Task<string> getFeedString(string url)
        {
            var webClient = new WebClient();
            string feed = await DownloadStringTask(webClient, new Uri(url));
            return feed;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\gnp\Model\FeedData.cs
public async void GetFeedAsync(FeedDataService service)
        {
            try
            {
                string url = Link;
                string color = null;
                string sfeed = await getFeedString(url);
                StringReader stringReader = new StringReader(sfeed);
                XmlReader xmlReader = XmlReader.Create(stringReader);
                SyndicationFeed feed = SyndicationFeed.Load(xmlReader);

                // Process the feed and copy the data you want into the FeedData and FeedItem classes.

                this.Color = color;
                int index = 0;
                /*if (feed.Title != null && feed.Title.Text != null)
                {
                    this.Title = feed.Title;
                       
                }*/
                if (feed.Description != null && feed.Description.Text != null)
                {
                    this.Description = feed.Description.Text;
                }
                if (feed.Items.Any())
                {
                    // Use the date of the latest post as the last updated date.
                    this.PubDate = feed.Items.ElementAt(0).PublishDate.DateTime;

                    foreach (SyndicationItem item in feed.Items)
                    {
                        FeedItem feedItem = new FeedItem();
                        if (item.Title != null && item.Title.Text != null)
                        {
                            feedItem.Title = item.Title.Text;
                        }
                        if (item.PublishDate != null)
                        {
                            feedItem.PubDate = item.PublishDate.DateTime;
                        }
                        if (item.Authors != null && item.Authors.Count > 0)
                        {
                            feedItem.Author = item.Authors[0].Name;
                        }

                        if (item.Summary != null && item.Summary.Text != null)
                        {
                            string fixedString = Regex.Replace(item.Summary.Text, "<[^>]+>", string.Empty);
                            feedItem.Content = HttpUtility.HtmlDecode(fixedString);
                        }

                        //retrieve links or image
                        if (item.Links != null && item.Links.Count > 0)
                        {
                            feedItem.Link = item.Links.First().Uri;
                            if (item.Links.Count > 1)
                                feedItem.ImageLink = item.Links.Last().Uri.ToString();
                            else
                                feedItem.ImageLink = "Assets/Default.jpg";
                        }

                        feedItem.Group = this;
                        feedItem.Index = index;
                        index++;
                        this.Items.Add(feedItem);
                    }
                }
                service.NumFeed--;
            }
            catch (Exception)
            {
                service.NumFeed--;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\gnp\Model\FeedData.cs
public async Task<string> DownloadStringTask(WebClient webClient, Uri uri)
        {
            var tcs = new TaskCompletionSource<string>();
            webClient.DownloadStringCompleted += (s, e) =>
            {
                if (e.Error != null)
                {
                    tcs.SetException(e.Error);
                }
                else
                {
                    tcs.SetResult(e.Result);
                }
            };
            webClient.DownloadStringAsync(uri);


            string result = await tcs.Task;
            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\googleanalyticssdk\GoogleAnalytics.WP7\..\GoogleAnalytics.Common\GAServiceManager.cs
async void timer_Tick(object sender)
        {
            await Dispatch();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\googleanalyticssdk\GoogleAnalytics.WP7\..\GoogleAnalytics.Common\GAServiceManager.cs
internal async void SendPayload(Payload payload)
        {
            if (DispatchPeriod == TimeSpan.Zero && IsConnected)
            {
                await RunDispatchingTask(DispatchImmediatePayload(payload));
            }
            else
            {
                lock (payloads)
                {
                    payloads.Enqueue(payload);
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\googleanalyticssdk\GoogleAnalytics.WP7\..\GoogleAnalytics.Common\GAServiceManager.cs
public async Task Dispatch()
#endif
        {
            if (!isConnected) return;

            Task allDispatchingTasks = null;
            lock (dispatchingTasks)
            {
                if (dispatchingTasks.Any())
                {
#if WINDOWS_PHONE7
                    allDispatchingTasks = TaskEx.WhenAll(dispatchingTasks);
#else
                    allDispatchingTasks = Task.WhenAll(dispatchingTasks);
#endif
                }
            }
            if (allDispatchingTasks != null)
            {
                await allDispatchingTasks;
            }

            IList<Payload> payloadsToSend = new List<Payload>();
            lock (payloads)
            {
                while (payloads.Count > 0)
                {
                    payloadsToSend.Add(payloads.Dequeue());
                }
            }
            if (payloadsToSend.Any())
            {
                await RunDispatchingTask(DispatchQueuedPayloads(payloadsToSend));
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\googleanalyticssdk\GoogleAnalytics.WP7\..\GoogleAnalytics.Common\GAServiceManager.cs
async Task RunDispatchingTask(Task newDispatchingTask)
        {
            lock (dispatchingTasks)
            {
                dispatchingTasks.Add(newDispatchingTask);
            }
            try
            {
                await newDispatchingTask;
            }
            finally
            {
                lock (dispatchingTasks)
                {
                    dispatchingTasks.Remove(newDispatchingTask);
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\googleanalyticssdk\GoogleAnalytics.WP7\..\GoogleAnalytics.Common\GAServiceManager.cs
private async Task DispatchQueuedPayloads(IEnumerable<Payload> payloads)
        {
            using (var httpClient = GetHttpClient())
            {
                var now = DateTime.UtcNow;
                foreach (var payload in payloads)
                {
                    // clone the data
                    var payloadData = payload.Data.ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
                    payloadData.Add("qt", ((long)now.Subtract(payload.TimeStamp).TotalMilliseconds).ToString());
                    await DispatchPayloadData(payload, httpClient, payloadData);
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\googleanalyticssdk\GoogleAnalytics.WP7\..\GoogleAnalytics.Common\GAServiceManager.cs
async Task DispatchImmediatePayload(Payload payload)
        {
            using (var httpClient = GetHttpClient())
            {
                // clone the data
                var payloadData = payload.Data.ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
                await DispatchPayloadData(payload, httpClient, payloadData);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\googleanalyticssdk\GoogleAnalytics.WP7\..\GoogleAnalytics.Common\GAServiceManager.cs
async Task DispatchPayloadData(Payload payload, HttpClient httpClient, Dictionary<string, string> payloadData)
        {
            if (BustCache) payloadData.Add("z", GetCacheBuster());
            var endPoint = payload.IsUseSecure ? endPointSecure : endPointUnsecure;
            using (var content = new FormUrlEncodedContent(payloadData))
            {
                try
                {
                    await httpClient.PostAsync(endPoint, content);
                }
                catch
                {
                    OnPayloadFailed(payload);
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\googleanalyticssdk\GoogleAnalytics.WP7\..\GoogleAnalytics.WP8\EasyTracker.WP.cs
async void Current_Deactivated(object sender, DeactivatedEventArgs e)
        {
            if (Config.AutoAppLifetimeTracking)
            {
#if WINDOWS_PHONE7
                tracker.SendEvent("app", "suspend", null, 0);
#else
                tracker.SendEvent("app", "suspend", e.Reason.ToString(), 0);
#endif
            }

            suspended = DateTime.UtcNow;
            await Dispatch(); // there is no way to get a deferral in WP so this will not actually happen until after we return to the app
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\googleanalyticssdk\GoogleAnalytics.WP7\..\GoogleAnalytics.WP8\EasyTracker.WP.cs
async void app_UnhandledException(object sender, ApplicationUnhandledExceptionEventArgs e)
        {
            if (!reportingException)
            {
                if (e.Handled)
                {
                    tracker.SendException(e.ExceptionObject.ToString(), false);
                }
                else
                {
                    reportingException = true;
                    try
                    {
                        tracker.SendException(e.ExceptionObject.ToString(), true);
                        e.Handled = true;
                        await Dispatch();
                        // rethrow the exception now that we're done logging it. wrap in another exception in order to prevent stack trace from getting reset.
                        throw new Exception("Tracked exception rethrown", e.ExceptionObject);
                    }
                    finally
                    {
                        // we have to do some trickery in order to make sure the flag is reset only after the new exception has passed all the way through the UE pipeline. Otherwise we would have an infinite loop.
                        System.Windows.Deployment.Current.Dispatcher.BeginInvoke(async () =>
                        {
#if WINDOWS_PHONE7
                                await TaskEx.Yield();
#else
                            await Task.Yield();
#endif
                            reportingException = false;
                        });
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\googleanalyticssdk\GoogleAnalytics.WP8\..\GoogleAnalytics.Common\GAServiceManager.cs
async void timer_Tick(object sender)
        {
            await Dispatch();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\googleanalyticssdk\GoogleAnalytics.WP8\..\GoogleAnalytics.Common\GAServiceManager.cs
internal async void SendPayload(Payload payload)
        {
            if (DispatchPeriod == TimeSpan.Zero && IsConnected)
            {
                await RunDispatchingTask(DispatchImmediatePayload(payload));
            }
            else
            {
                lock (payloads)
                {
                    payloads.Enqueue(payload);
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\googleanalyticssdk\GoogleAnalytics.WP8\..\GoogleAnalytics.Common\GAServiceManager.cs
public async Task Dispatch()
#endif
        {
            if (!isConnected) return;

            Task allDispatchingTasks = null;
            lock (dispatchingTasks)
            {
                if (dispatchingTasks.Any())
                {
#if WINDOWS_PHONE7
                    allDispatchingTasks = TaskEx.WhenAll(dispatchingTasks);
#else
                    allDispatchingTasks = Task.WhenAll(dispatchingTasks);
#endif
                }
            }
            if (allDispatchingTasks != null)
            {
                await allDispatchingTasks;
            }

            IList<Payload> payloadsToSend = new List<Payload>();
            lock (payloads)
            {
                while (payloads.Count > 0)
                {
                    payloadsToSend.Add(payloads.Dequeue());
                }
            }
            if (payloadsToSend.Any())
            {
                await RunDispatchingTask(DispatchQueuedPayloads(payloadsToSend));
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\googleanalyticssdk\GoogleAnalytics.WP8\..\GoogleAnalytics.Common\GAServiceManager.cs
async Task RunDispatchingTask(Task newDispatchingTask)
        {
            lock (dispatchingTasks)
            {
                dispatchingTasks.Add(newDispatchingTask);
            }
            try
            {
                await newDispatchingTask;
            }
            finally
            {
                lock (dispatchingTasks)
                {
                    dispatchingTasks.Remove(newDispatchingTask);
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\googleanalyticssdk\GoogleAnalytics.WP8\..\GoogleAnalytics.Common\GAServiceManager.cs
private async Task DispatchQueuedPayloads(IEnumerable<Payload> payloads)
        {
            using (var httpClient = GetHttpClient())
            {
                var now = DateTime.UtcNow;
                foreach (var payload in payloads)
                {
                    // clone the data
                    var payloadData = payload.Data.ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
                    payloadData.Add("qt", ((long)now.Subtract(payload.TimeStamp).TotalMilliseconds).ToString());
                    await DispatchPayloadData(payload, httpClient, payloadData);
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\googleanalyticssdk\GoogleAnalytics.WP8\..\GoogleAnalytics.Common\GAServiceManager.cs
async Task DispatchImmediatePayload(Payload payload)
        {
            using (var httpClient = GetHttpClient())
            {
                // clone the data
                var payloadData = payload.Data.ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
                await DispatchPayloadData(payload, httpClient, payloadData);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\googleanalyticssdk\GoogleAnalytics.WP8\..\GoogleAnalytics.Common\GAServiceManager.cs
async Task DispatchPayloadData(Payload payload, HttpClient httpClient, Dictionary<string, string> payloadData)
        {
            if (BustCache) payloadData.Add("z", GetCacheBuster());
            var endPoint = payload.IsUseSecure ? endPointSecure : endPointUnsecure;
            using (var content = new FormUrlEncodedContent(payloadData))
            {
                try
                {
                    await httpClient.PostAsync(endPoint, content);
                }
                catch
                {
                    OnPayloadFailed(payload);
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\googleanalyticssdk\GoogleAnalytics.WP8\EasyTracker.WP.cs
async void Current_Deactivated(object sender, DeactivatedEventArgs e)
        {
            if (Config.AutoAppLifetimeTracking)
            {
#if WINDOWS_PHONE7
                tracker.SendEvent("app", "suspend", null, 0);
#else
                tracker.SendEvent("app", "suspend", e.Reason.ToString(), 0);
#endif
            }

            suspended = DateTime.UtcNow;
            await Dispatch(); // there is no way to get a deferral in WP so this will not actually happen until after we return to the app
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\googleanalyticssdk\GoogleAnalytics.WP8\EasyTracker.WP.cs
async void app_UnhandledException(object sender, ApplicationUnhandledExceptionEventArgs e)
        {
            if (!reportingException)
            {
                if (e.Handled)
                {
                    tracker.SendException(e.ExceptionObject.ToString(), false);
                }
                else
                {
                    reportingException = true;
                    try
                    {
                        tracker.SendException(e.ExceptionObject.ToString(), true);
                        e.Handled = true;
                        await Dispatch();
                        // rethrow the exception now that we're done logging it. wrap in another exception in order to prevent stack trace from getting reset.
                        throw new Exception("Tracked exception rethrown", e.ExceptionObject);
                    }
                    finally
                    {
                        // we have to do some trickery in order to make sure the flag is reset only after the new exception has passed all the way through the UE pipeline. Otherwise we would have an infinite loop.
                        System.Windows.Deployment.Current.Dispatcher.BeginInvoke(async () =>
                        {
#if WINDOWS_PHONE7
                                await TaskEx.Yield();
#else
                            await Task.Yield();
#endif
                            reportingException = false;
                        });
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\googleanalyticssdk\Test.WP8\Page1.xaml.cs
private async void ButtonProductTransaction_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var productId = "test";
                var receipt = await CurrentApp.RequestProductPurchaseAsync(productId, true);
                if (CurrentApp.LicenseInformation.ProductLicenses[productId].IsActive)
                {
                    var listing = await CurrentApp.LoadListingInformationAsync();
                    var transaction = GoogleAnalytics.TransactionBuilder.GetProductPurchaseTransaction(listing, receipt);
                    GoogleAnalytics.EasyTracker.GetTracker().SendTransaction(transaction);
                }
            }
            catch (Exception ex)
            {
                GoogleAnalytics.EasyTracker.GetTracker().SendException(ex.StackTrace, false);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\googleanalyticssdk\Test.WP8\Page1.xaml.cs
private async void ButtonAppTransaction_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var receipt = await CurrentApp.RequestAppPurchaseAsync(true);
                if (CurrentApp.LicenseInformation.IsActive)
                {
                    var listing = await CurrentApp.LoadListingInformationAsync();
                    var transaction = GoogleAnalytics.TransactionBuilder.GetAppPurchaseTransaction(listing, receipt);
                    GoogleAnalytics.EasyTracker.GetTracker().SendTransaction(transaction);
                }
            }
            catch (Exception ex)
            {
                GoogleAnalytics.EasyTracker.GetTracker().SendException(ex.StackTrace, false);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\huemvvm\HueSource\Hue_Demo_Phone\ViewModels\HueClientViewModel.cs
private async Task SaveUserInfo(string userName)
        {
            StorageFile userNameFile = await ApplicationData.Current.LocalFolder.CreateFileAsync("userName.txt", CreationCollisionOption.ReplaceExisting);
            var writeStream = await userNameFile.OpenStreamForWriteAsync();
            DataContractSerializer uNameS = new DataContractSerializer(typeof(string));
            uNameS.WriteObject(writeStream, userName);
            await writeStream.FlushAsync();
#if WIN_PHONE
            writeStream.Close();
#elif NETFX_CORE
            writeStream.Dispose();
#endif

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\huemvvm\HueSource\Hue_Demo_Phone\ViewModels\HueClientViewModel.cs
private async Task<bool> GetUserInfo()
        {
            try
            {
                StorageFile uNameFile = await ApplicationData.Current.LocalFolder.GetFileAsync("userName.txt");
                using (var readStream = await uNameFile.OpenStreamForReadAsync())
                {
                    DataContractSerializer uNameS = new DataContractSerializer(typeof(string));
                    string userName = "";
                    userName = (string)uNameS.ReadObject(readStream);
#if WIN_PHONE
                    readStream.Close();
#endif
                    UserName = userName;
                    return true;
                }
            }
            catch(Exception e)
            {
                return false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\huemvvm\HueSource\Hue_Demo_Phone\ViewModels\HueClientViewModel.cs
private async Task SaveBridgeInfo(HueSettings ipBridgeInfo)
        {
            StorageFile bridgeFile = await ApplicationData.Current.LocalFolder.CreateFileAsync("hueBridgeInfo.dat", CreationCollisionOption.ReplaceExisting);
            var writeStream = await bridgeFile.OpenStreamForWriteAsync();
            DataContractSerializer uNameS = new DataContractSerializer(typeof(HueSettings));
            uNameS.WriteObject(writeStream, ipBridgeInfo);
            await writeStream.FlushAsync();
#if WIN_PHONE
            writeStream.Close();
#elif NETFX_CORE
            writeStream.Dispose();
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\huemvvm\HueSource\Hue_Demo_Phone\ViewModels\HueClientViewModel.cs
private async Task<HueSettings> GetBridgeInfo()
        {
            try
            {
                StorageFile bridgeFile = await ApplicationData.Current.LocalFolder.GetFileAsync("hueBridgeInfo.dat");
                using (var readStream = await bridgeFile.OpenStreamForReadAsync())
                {
                    DataContractSerializer bridgeSerial = new DataContractSerializer(typeof(string));
                    HueSettings bridgeInfo = null;
                    bridgeInfo = (HueSettings)bridgeSerial.ReadObject(readStream);
#if WIN_PHONE
                    readStream.Close();
#endif
                    return bridgeInfo;
                }
            }
            catch (Exception e)
            {
                return null;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\ianhong+windows.phone.apps\ianhong-windows.phone.apps-b66276a\ContosoCookBoookPhone\ContosoCookBoookPhone\Data\RecipeDataAgent.cs
public async Task<IEnumerable<RecipeDataItemDto>> GetRecipeDataItems()
        {
            var client = new HttpClient();
            client.BaseAddress = new Uri("http://contosorecipes8.blob.core.windows.net/");
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            client.MaxResponseContentBufferSize = 1024 * 1024; // Read up to 1 MB of data
            var response = await client.GetAsync(("AzureRecipesRP"));
            var jsonTypeFormatter = new JsonMediaTypeFormatter
            {
                SerializerSettings = new JsonSerializerSettings
                {
                    Converters = new List<JsonConverter> 
                                {
                                    new RecipeDataItemDtoConverter()
                                }
                }
            };
            jsonTypeFormatter.SupportedMediaTypes.Add(new MediaTypeHeaderValue("application/octet-stream"));
            return await response.Content.ReadAsAsync<List<RecipeDataItemDto>>(new[] { jsonTypeFormatter });;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\ianhong+windows.phone.apps\ianhong-windows.phone.apps-b66276a\ContosoCookBoookPhone\ContosoCookBoookPhone\ViewModels\MainViewModel.cs
public async void LoadData()
        {
            var results = await new RecipeDataAgent().GetRecipeDataItems();
            foreach (var recipeDto in results)
            {
                var recipeGroup = Items.FirstOrDefault(g => string.Equals(recipeDto.Group.UniqueId, g.UniqueId));
                if (null == recipeGroup)
                {
                    recipeGroup = new RecipeDataGroupViewModel(recipeDto.Group.UniqueId, recipeDto.Group.Title, recipeDto.Group.ShortTitle, recipeDto.Group.Description, recipeDto.Group.GroupImagePath, recipeDto.Group.ImagePath);
                    Items.Add(recipeGroup);
                }

                var recipe = new RecipeDataItemViewModel(recipeDto.Title, recipeDto.UniqueId, recipeDto.PrepTime, recipeDto.ShortTitle, recipeDto.Directions, recipeDto.TitleImagePath, recipeDto.ImagePath);
                foreach (var i in recipeDto.Ingredients)
                {
                    recipe.Ingredients.Add(i);
                }
                recipeGroup.Items.Add(recipe);
                recipe.Group = recipeGroup;
            }
            this.IsDataLoaded = true;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\ianhong+windows.phone.apps\ianhong-windows.phone.apps-b66276a\ContosoCookBoookPhone.PL\ContosoCookBoookPhone\ViewModels\MainViewModel.cs
public async void LoadData()
        {
            var results = await new RecipeDataAgent().GetRecipeDataItems();
            foreach (var recipeDto in results)
            {
                var recipeGroup = Items.FirstOrDefault(g => string.Equals(recipeDto.Group.UniqueId, g.UniqueId));
                if (null == recipeGroup)
                {
                    recipeGroup = new RecipeDataGroupViewModel(recipeDto.Group.UniqueId, recipeDto.Group.Title, recipeDto.Group.ShortTitle, recipeDto.Group.Description, recipeDto.Group.GroupImagePath, recipeDto.Group.ImagePath);
                    Items.Add(recipeGroup);
                }

                var recipe = new RecipeDataItemViewModel(recipeDto.Title, recipeDto.UniqueId, recipeDto.PrepTime, recipeDto.ShortTitle, recipeDto.Directions, recipeDto.TitleImagePath, recipeDto.ImagePath);
                foreach (var i in recipeDto.Ingredients)
                {
                    recipe.Ingredients.Add(i);
                }
                recipeGroup.Items.Add(recipe);
                recipe.Group = recipeGroup;
            }
            this.IsDataLoaded = true;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\icewind1991+wp-news\icewind1991-wp-news-987d630\News\Models\Server.cs
async public Task<Folder[]> getFoldersAsync()
        {
            HttpResponseMessage response = await Client.GetAsync("folders?format=json");
            string data = await response.Content.ReadAsStringAsync();
            OCSFolderData result = await JsonConvert.DeserializeObjectAsync<OCSFolderData>(data);
            return result.folders;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\icewind1991+wp-news\icewind1991-wp-news-987d630\News\Models\Server.cs
async public Task<Item[]> getFolderItemsAsync(Folder folder, int offset = 0)
        {
            return await getItemsAsync(1, folder.id, offset);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\icewind1991+wp-news\icewind1991-wp-news-987d630\News\Models\Server.cs
async public Task<Item[]> getAllItemsAsync(int offset = 0)
        {
            return await getItemsAsync(3, 0, offset);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\icewind1991+wp-news\icewind1991-wp-news-987d630\News\Models\Server.cs
async public Task<Item[]> getItemsAsync(int type, int id, int offset = 0)
        {
            HttpResponseMessage response = await Client.GetAsync("items?format=json&batchSize=20&offset=" + offset + "&getRead=true&type=" + type + "&id=" + id);
            string data = await response.Content.ReadAsStringAsync();
            OCSItemData result = await JsonConvert.DeserializeObjectAsync<OCSItemData>(data);
            return result.items;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\icewind1991+wp-news\icewind1991-wp-news-987d630\News\Models\Server.cs
async public void markAsRead(int itemId)
        {
            System.Diagnostics.Debug.WriteLine("markRead");
            await Client.PutAsync("items/" + itemId + "/read", new StringContent(""));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\icewind1991+wp-news\icewind1991-wp-news-987d630\News\Models\Server.cs
async public void markAsUnRead(int itemId)
        {
            System.Diagnostics.Debug.WriteLine("markUnRead");
            await Client.PutAsync("items/" + itemId + "/unread", new StringContent(""));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\icewind1991+wp-news\icewind1991-wp-news-987d630\News\ViewModels\MainViewModel.cs
async public Task<bool> LoadData()
        {
            if (!this.IsConfigured)
            {
                return false;
            }
            IsLoading = true;
            this.Folders.Clear();
            NotifyPropertyChanged("IsLoading");
            try
            {
                Folder[] folders = await server.getFoldersAsync();

                FolderViewModel folderView;
                FolderViewModel all = new FolderViewModel(new Folder() { name = "All", id = -1 }, server);
                this.Folders.Add(all);
                foreach (Folder folder in folders)
                {
                    folderView = new FolderViewModel(folder, server);
                    this.Folders.Add(folderView);
                }

                IsLoading = false;
                this.IsDataLoaded = true;
                NotifyPropertyChanged("IsLoading");
                return true;
            }
            catch (Exception e)
            {
                Debug.WriteLine("loading folders failed");
                IsLoading = false;
                NotifyPropertyChanged("IsLoading");
                this.server = null;
                return false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\icewind1991+wp-news\icewind1991-wp-news-987d630\News\ViewModels\MainViewModel.cs
async public void loadFolder(int i, int offset)
        {
            try
            {
                IsLoading = true;
                NotifyPropertyChanged("IsLoading");
                ActiveFolder = this.Folders[i];
                Folder folder = this.Folders[i].folder;
                Item[] items;
                if (folder.id >= 0)
                {
                    items = await server.getFolderItemsAsync(folder, offset);

                }
                else
                {
                    items = await server.getAllItemsAsync(offset);
                }
                ItemViewModel itemView;
                foreach (Item item in items)
                {
                    itemView = new ItemViewModel(item, server);
                    this.Folders[i].Items.Add(itemView);
                }
                IsLoading = false;
                NotifyPropertyChanged("IsLoading");
            }
            catch (Exception e)
            {
                IsLoading = false;
                NotifyPropertyChanged("IsLoading");
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\iFixit+ifixit-microsoft\iFixit-ifixit-microsoft-a045ba8\iFixit.WP8.UI\..\Shared\PeerConnector.cs
public async void SendGuideAsync([ReadOnlyArray] byte[] imageBytes)
        {
            if (!_socketClosed)
            {
                if (imageBytes.Length > 0)
                {
                    try
                    {
                        _dataWriter.WriteInt32(imageBytes.Length);
                        _dataWriter.WriteBytes(imageBytes);
                        uint numBytesWritten = await _dataWriter.StoreAsync();
                        if (numBytesWritten > 0)
                        {
                            Debug.WriteLine("Sent guide. Number of bytes written: {0} ", numBytesWritten);

                        }
                        else
                        {
                            SocketError("The remote side closed the socket");
                            UpdateConnectionStatus(ConnectionStatus.Disconnected);
                        }
                    }
                    catch (Exception err)
                    {
                        if (!_socketClosed)
                        {
                            SocketError("Failed to send message with error: " + err.Message);
                        }
                    }
                }
                else
                {
                    Debug.WriteLine("BAD guide size:{0} ", imageBytes.Length);
                }
            }
            else
            {
                SocketError("The remote side closed the socket");
                UpdateConnectionStatus(ConnectionStatus.Disconnected);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\iFixit+ifixit-microsoft\iFixit-ifixit-microsoft-a045ba8\iFixit.WP8.UI\..\Shared\PeerConnector.cs
async void StartReceiveGuide(DataReader socketReader)
        {
            try
            {
                uint bytesRead = await socketReader.LoadAsync(sizeof(uint));
                if (bytesRead > 0)
                {
                    uint strLength = (uint)socketReader.ReadUInt32();
                    bytesRead = await socketReader.LoadAsync(strLength);
                    if (bytesRead > 0)
                    {
                        byte[] bytesIn = new byte[bytesRead];

                        Debug.WriteLine("ReadBytes");
                        socketReader.ReadBytes(bytesIn);
                        Debug.WriteLine("ReadBytes End");

                        // Raise PicReceived event
                        if (GuideReceived != null)
                        {
                            GuideReceivedEventArgs args = new GuideReceivedEventArgs();
                            args.Bytes = bytesIn;
                            GuideReceived(this, args);
                        }

                        StartReceiveGuide(socketReader); // Start another reader
                    }
                    else
                    {
                        SocketError("The remote side closed the socket");
                        socketReader.Dispose();
                        UpdateConnectionStatus(ConnectionStatus.Disconnected);
                    }
                }
                else
                {
                    SocketError("The remote side closed the socket");
                    socketReader.Dispose();
                    UpdateConnectionStatus(ConnectionStatus.Disconnected);
                }
            }
            catch (Exception e)
            {
                if (!_socketClosed)
                {
                    SocketError("Reading from socket failed: " + e.Message);
                }
                socketReader.Dispose();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\iFixit+ifixit-microsoft\iFixit-ifixit-microsoft-a045ba8\iFixit.WP8.UI\Services\SimplePeerConnector.cs
public async void SendGuideAsync([ReadOnlyArray] byte[] imageBytes)
        {
            if (!_socketClosed)
            {
                if (imageBytes.Length > 0)
                {
                    try
                    {
                        _dataWriter.WriteInt32(imageBytes.Length);
                        _dataWriter.WriteBytes(imageBytes);
                        uint numBytesWritten = await _dataWriter.StoreAsync();
                        if (numBytesWritten > 0)
                        {
                            Debug.WriteLine("Sent guide. Number of bytes written: {0} ", numBytesWritten);

                        }
                        else
                        {
                            SocketError("The remote side closed the socket");
                            UpdateConnectionStatus(ConnectionStatus.Disconnected);
                        }
                    }
                    catch (Exception err)
                    {
                        if (!_socketClosed)
                        {
                            SocketError("Failed to send message with error: " + err.Message);
                        }
                    }
                }
                else
                {
                    Debug.WriteLine("BAD guide size:{0} ", imageBytes.Length);
                }
            }
            else
            {
                SocketError("The remote side closed the socket");
                UpdateConnectionStatus(ConnectionStatus.Disconnected);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\iFixit+ifixit-microsoft\iFixit-ifixit-microsoft-a045ba8\iFixit.WP8.UI\Services\SimplePeerConnector.cs
async void StartReceiveGuide(DataReader socketReader)
        {
            try
            {
                uint bytesRead = await socketReader.LoadAsync(sizeof(uint));
                if (bytesRead > 0)
                {
                    uint strLength = (uint)socketReader.ReadUInt32();
                    bytesRead = await socketReader.LoadAsync(strLength);
                    if (bytesRead > 0)
                    {
                        byte[] bytesIn = new byte[bytesRead];

                        Debug.WriteLine("ReadBytes");
                        socketReader.ReadBytes(bytesIn);
                        Debug.WriteLine("ReadBytes End");

                        // Raise PicReceived event
                        if (GuideReceived != null)
                        {
                            GuideReceivedEventArgs args = new GuideReceivedEventArgs();
                            args.Bytes = bytesIn;
                            GuideReceived(this, args);
                        }

                        StartReceiveGuide(socketReader); // Start another reader
                    }
                    else
                    {
                        SocketError("The remote side closed the socket");
                        socketReader.Dispose();
                        UpdateConnectionStatus(ConnectionStatus.Disconnected);
                    }
                }
                else
                {
                    SocketError("The remote side closed the socket");
                    socketReader.Dispose();
                    UpdateConnectionStatus(ConnectionStatus.Disconnected);
                }
            }
            catch (Exception e)
            {
                if (!_socketClosed)
                {
                    SocketError("Reading from socket failed: " + e.Message);
                }
                socketReader.Dispose();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\iFixit+ifixit-microsoft\iFixit-ifixit-microsoft-a045ba8\iFixit.WP8.UI\Services\UiStorage.cs
public async Task WriteData(string fileName, string content)
        {
            byte[] data = Encoding.UTF8.GetBytes(content);
            fileName = fileName.Replace(@"'", "").Replace("\"", "");
            StorageFolder folder = ApplicationData.Current.LocalFolder;
            StorageFile file = await folder.CreateFileAsync(fileName, CreationCollisionOption.ReplaceExisting);

            using (Stream s = await file.OpenStreamForWriteAsync())
            {
                await s.WriteAsync(data, 0, data.Length);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\iFixit+ifixit-microsoft\iFixit-ifixit-microsoft-a045ba8\iFixit.WP8.UI\Services\UiStorage.cs
public async Task WriteBinary(string folderName, string fileName, byte[] content)
        {
            StorageFolder folder = ApplicationData.Current.LocalFolder;

            fileName = fileName.Replace(@"'", "");

            var folders = await folder.GetFoldersAsync();
            if (!folders.Any(f => f.Name == folderName))
                await folder.CreateFolderAsync(folderName);

            var targetFolder = await folder.GetFolderAsync(folderName);

            StorageFile file = await targetFolder.CreateFileAsync(fileName, CreationCollisionOption.ReplaceExisting);

            using (Stream s = await file.OpenStreamForWriteAsync())
            {
                await s.WriteAsync(content, 0, content.Length);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\iFixit+ifixit-microsoft\iFixit-ifixit-microsoft-a045ba8\iFixit.WP8.UI\Services\UiStorage.cs
public async Task RemoveFolder(string folderName)
        {
            StorageFolder storage = ApplicationData.Current.LocalFolder;
            var folders = await storage.GetFoldersAsync();
            if (folders.Any(o => o.Name == folderName))
            {
                var x = folders.Where(o => o.Name == folderName).SingleOrDefault();
                await x.DeleteAsync(StorageDeleteOption.PermanentDelete);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\iFixit+ifixit-microsoft\iFixit-ifixit-microsoft-a045ba8\iFixit.WP8.UI\Services\UiStorage.cs
public async Task<bool> FolderExists(string folderName)
        {
            StorageFolder storage = ApplicationData.Current.LocalFolder;
            var folders = await storage.GetFoldersAsync();
            return folders.Any(o => o.Name == folderName);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\iFixit+ifixit-microsoft\iFixit-ifixit-microsoft-a045ba8\iFixit.WP8.UI\Services\UiStorage.cs
public async Task<bool> Exists(string fileName)
        {
            try
            {
                fileName = fileName.Replace(@"'", "").Replace("\"", "");
                var taskCompletionSource = new TaskCompletionSource<bool>();
                IsolatedStorageFile fileStorage = IsolatedStorageFile.GetUserStoreForApplication();
                taskCompletionSource.SetResult(fileStorage.FileExists(fileName));
                //StorageFile file = await baseFolder.GetFileAsync(fileName);
                //return true;
                return await taskCompletionSource.Task;
            }
            catch (Exception)
            {

                return false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\iFixit+ifixit-microsoft\iFixit-ifixit-microsoft-a045ba8\iFixit.WP8.UI\Services\UiStorage.cs
public async Task<bool> Exists(string fileName, TimeSpan expiration)
        {
            try
            {
                fileName = fileName.Replace(@"'", "").Replace("\"", "");
                var taskCompletionSource = new TaskCompletionSource<bool>();
                IsolatedStorageFile fileStorage = IsolatedStorageFile.GetUserStoreForApplication();
                var Exists = fileStorage.FileExists(fileName);
                if (Exists)
                {
                    var createdAt = fileStorage.GetLastWriteTime(fileName);
                    var TimeDiff = (DateTimeOffset.Now - createdAt);
                    if (TimeDiff > expiration)
                        Exists = false;
                }
                taskCompletionSource.SetResult(Exists);
                //StorageFile file = await baseFolder.GetFileAsync(fileName);
                //return true;
                return await taskCompletionSource.Task;
            }
            catch (Exception)
            {

                return false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\iFixit+ifixit-microsoft\iFixit-ifixit-microsoft-a045ba8\iFixit.WP8.UI\Services\UiStorage.cs
public async Task<string> ReadData(string fileName)
        {
            byte[] data;
            fileName = fileName.Replace(@"'", "").Replace("\"", "");
            StorageFile file = await baseFolder.GetFileAsync(fileName);
            using (Stream s = await file.OpenStreamForReadAsync())
            {
                data = new byte[s.Length];
                await s.ReadAsync(data, 0, (int)s.Length);
            }

            return Encoding.UTF8.GetString(data, 0, data.Length);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\iFixit+ifixit-microsoft\iFixit-ifixit-microsoft-a045ba8\iFixit.WP8.UI\Services\UiUx.cs
public async Task OpenTextSpeechUI(Domain.ViewModels.Guide guideToRead)
        {
            ObservableCollection<GuideBasePage> pagesToRead = guideToRead.Items;

            SpeechSynthesizer synth = new SpeechSynthesizer();
            var voices = InstalledVoices.All.Where(o => o.Language.StartsWith("en"));
            synth.SetVoice(voices.First());

            guideToRead.BeingRead = true;


            if (guideToRead.SelectedPageIndex == 0)
            {
                var toRead = ((GuideIntro)pagesToRead[0]);
                if (!string.IsNullOrEmpty(toRead.Subject))
                {
                    task = synth.SpeakTextAsync(toRead.Subject);
                    await task;
                }
                if (!string.IsNullOrEmpty(toRead.Summary))
                {
                    task = synth.SpeakTextAsync(toRead.Summary);
                    await task;
                }

                guideToRead.SelectedPageIndex = 1;
            }


            for (int i = guideToRead.SelectedPageIndex; i < pagesToRead.Count; i++)
            {
                if (guideToRead.BeingRead == false)
                    break;

                guideToRead.SelectedPage = (GuideBasePage)pagesToRead[i];

                guideToRead.SelectedPageIndex = guideToRead.Items.IndexOf(guideToRead.SelectedPage);

                var item = (GuideStepItem)pagesToRead[i];
                int m = 0;

                foreach (var line in item.Lines)
                {
                    if (guideToRead.BeingRead == false)
                        break;

                    guideToRead.SelectedStepLine = m;
                    try
                    {
                        task = synth.SpeakTextAsync(line.VoiceText);
                        await task;
                    }
                    catch (Exception ex)
                    {

                        //  throw;
                    }
                    m++;
                }

            }

            guideToRead.BeingRead = false;

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\isaacOjeda+Tareas\isaacOjeda-Tareas-2ecc716\Semana 3\VoiceTraslator\VoiceTraslator\MainPage.xaml.cs
public async void Speak(string text)
        {
            var voices = from v in InstalledVoices.All
                         where v.Language == MainPage.lanEn
                         select v;

            var speech = new SpeechSynthesizer();
            speech.SetVoice(voices.ElementAt(0));

            await speech.SpeakTextAsync(text);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\isaacOjeda+Tareas\isaacOjeda-Tareas-2ecc716\Semana 3\VoiceTraslator\VoiceTraslator\MainPage.xaml.cs
private async Task<string> startRecognition(string lan)
        {
            string text = String.Empty;

            IEnumerable<SpeechRecognizerInformation> recognizers = from recognizerInfo in InstalledSpeechRecognizers.All
                                                                   where recognizerInfo.Language == lan
                                                                   select recognizerInfo;
            var recognizer = new SpeechRecognizerUI();

            recognizer.Recognizer.SetRecognizer(recognizers.ElementAt(0));
            recognizer.Settings.ShowConfirmation = true;
            recognizer.Settings.ReadoutEnabled = false;

            var result = await recognizer.RecognizeWithUIAsync();

            if (result.ResultStatus == SpeechRecognitionUIStatus.Succeeded)
            {
                text = result.RecognitionResult.Text;
            }

            return text;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jackbrennan+network-info\jackbrennan-network-info-f2b6c74\PhoneApp1\GetLocation.cs
public async Task<Windows.Devices.Geolocation.Geocoordinate> GetSinglePositionAsync()
        {
            var geolocator = new Windows.Devices.Geolocation.Geolocator {DesiredAccuracyInMeters = 100};
            var geoposition = await geolocator.GetGeopositionAsync(TimeSpan.FromMinutes(1), TimeSpan.FromSeconds(30));
            return geoposition.Coordinate;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jamesseanwright+appfog-wp7\jamesseanwright-appfog-wp7-6057539\AppFogWP7\DataService\AppFogDataService.cs
public async Task<InfoModel> GetInfo(string token)
        {
            IWebClient client = GetClient(token);

            string data = await client.DownloadStringTaskAsync(new Uri("https://api.appfog.com/info"));

            InfoModel newModel = new InfoModel();

            JObject infoJson = JObject.Parse(data);
            newModel.User = infoJson["user"].ToString();
            newModel.Plan = infoJson["plan"].ToString();

            foreach (JToken framework in infoJson["frameworks"].Children())
            {
                newModel.Frameworks.Add(framework.First["name"].ToString());
            }

            newModel.Apps = (int) infoJson[Usage]["apps"];
            newModel.MemoryUsed = (int) infoJson[Usage][Memory];
            newModel.TotalMemory = (int) infoJson["limits"][Memory];

            return newModel;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jamesseanwright+appfog-wp7\jamesseanwright-appfog-wp7-6057539\AppFogWP7\DataService\AppFogDataService.cs
public async Task<List<AppModel>> GetApps(string token)
        {
            List<AppModel> apps = new List<AppModel>();

            IWebClient client = GetClient(token);
            
            string data = await client.DownloadStringTaskAsync(new Uri("https://api.appfog.com/apps"));

            JArray appsJson = JArray.Parse(data);
            
            AppModel newModel;

            foreach(JToken app in appsJson)
            {
                newModel = new AppModel
                               {
                                   Name = app["name"].ToString(),
                                   Instances = (int) app["instances"],
                                   Stack = app["staging"]["stack"].ToString(),
                                   Memory = (int) app["resources"][Memory],
                                   Created = DateUtils.TimeStampToDateTime((double) app["meta"]["created"])
                               };

                foreach (JToken uri in app["uris"])
                {
                    newModel.Uris.Add(uri.ToString());
                }

                apps.Add(newModel);
            }

            return apps;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jamesseanwright+appfog-wp7\jamesseanwright-appfog-wp7-6057539\AppFogWP7\DataService\MyWebClient.cs
public async Task<string> DownloadStringTaskAsync(Uri uri)
        {
            return await _client.DownloadStringTaskAsync(uri);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jamesseanwright+appfog-wp7\jamesseanwright-appfog-wp7-6057539\AppFogWP7\ViewModel\AppsViewModel.cs
public async void GetApps()
        {
            AppFogDataService appFogDataService = new AppFogDataService();
            Apps = await appFogDataService.GetApps(AuthToken);
            Loading = false;
            IsModelAvailable = true;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jamesseanwright+appfog-wp7\jamesseanwright-appfog-wp7-6057539\AppFogWP7\ViewModel\InfoViewModel.cs
public async void GetInfo()
        {
            AppFogDataService appFogDataService = new AppFogDataService();
            InfoModel = await appFogDataService.GetInfo(AuthToken);
            Loading = false;
            IsModelAvailable = true;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jankratochvilcz+DoesItStillAir\jankratochvilcz-DoesItStillAir-08e217f\SamplePhoneApp\SamplePhoneApp\Infrastructure\AsyncWebClientExtensions.cs
public static async Task<T> DownloadXmlDocument<T>(this WebClient client, string address, Encoding encoding)
        {
            var result = await client.DownloadStringTask(address);

            var serializer = new XmlSerializer(typeof(T));

            return (T)serializer.Deserialize(new MemoryStream(encoding.GetBytes(result)));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jankratochvilcz+DoesItStillAir\jankratochvilcz-DoesItStillAir-08e217f\SamplePhoneApp\SamplePhoneApp\Model\TvRage\TvRageService.cs
public async Task<IList<SeriesCompact>> SearchForSeries(string query)
        {
            var targetPath = Path.Combine(ApiRoot, string.Format(ApiSearch, query));
            var resultingDocument = await new WebClient().DownloadXmlDocument<SearchResultsDocument>(targetPath, Encoding.UTF8);

            return resultingDocument.Results.ToList();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jankratochvilcz+DoesItStillAir\jankratochvilcz-DoesItStillAir-08e217f\SamplePhoneApp\SamplePhoneApp\Model\TvRage\TvRageService.cs
public async Task<SeriesFull> GetSeries(long seriesId)
        {
            var targetPath = Path.Combine(ApiRoot, string.Format(ApiSeries, seriesId));
            var resultingDocument = await new WebClient().DownloadXmlDocument<SeriesInfoDocument>(targetPath, Encoding.UTF8);

            return resultingDocument.ToStandard();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jarvisji+kanboxwp\jarvisji-kanboxwp-acb86e8\kanboxwp\kanboxwp\Utils\KBApiUtil.cs
public static async Task<KbListInfo> GetFileListAsync(string path, KbToken token)
        {
            return await GetFileListAsync(path, token, null);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jarvisji+kanboxwp\jarvisji-kanboxwp-acb86e8\kanboxwp\kanboxwp\Utils\KBApiUtil.cs
public static async Task<KbListInfo> GetFileListAsync(string path, KbToken token, string hashcode)
        {
            string url = ListUrl + path;
            if (hashcode != null)
            {
                url += "?hash=" + hashcode;
            }
            string received = await doGetAsync(url, GetAuthorizationHeader(token));
            KbListInfo listInfo = JsonConvert.DeserializeObject<KbListInfo>(received);
            return listInfo;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jarvisji+kanboxwp\jarvisji-kanboxwp-acb86e8\kanboxwp\kanboxwp\Utils\KBApiUtil.cs
public static async Task<KbAccountInfo> GetAccountInfo(KbToken token)
        {
            string received = await doGetAsync(InfoUrl, GetAuthorizationHeader(token));
            KbAccountInfo accountInfo = JsonConvert.DeserializeObject<KbAccountInfo>(received);
            return accountInfo;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jarvisji+kanboxwp\jarvisji-kanboxwp-acb86e8\kanboxwp\kanboxwp\Utils\KBApiUtil.cs
public static async Task<StorageFile> DownloadFileAsync(string path, KbToken token)
        {
            string url = DownloadUrl + Uri.EscapeDataString(path);
            Stream respStream = await doGetBytesAsync(url, GetAuthorizationHeader(token));
            StorageFile sfile = await FileUtil.SaveStream(respStream, path);
            respStream.Close();
            return sfile;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jarvisji+kanboxwp\jarvisji-kanboxwp-acb86e8\kanboxwp\kanboxwp\Utils\KBApiUtil.cs
public static async Task<KbToken> GetTokenAsync(string authcode)
        {
            string postdata = GetUrlData(new
            {
                grant_type = HttpUtility.UrlEncode("authorization_code"),
                client_id = HttpUtility.UrlEncode(CLIENTID),
                client_secret = HttpUtility.UrlEncode(CLIENTSECRET),
                code = HttpUtility.UrlEncode(authcode),
                redirect_uri = HttpUtility.UrlEncode(KB_REDIRECTURL_KANBOXWP_DUMMYPAGE)
            });
            string received = await doPostAsync(TokenUrl, postdata);
            KbToken token = JsonConvert.DeserializeObject<KbToken>(received);
            UpdateExpiresTime(token);
            return token;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jarvisji+kanboxwp\jarvisji-kanboxwp-acb86e8\kanboxwp\kanboxwp\Utils\KBApiUtil.cs
public static async Task<KbToken> RefreshTokenAsync(string refreshToken)
        {
            string data = GetUrlData(new
            {
                grant_type = HttpUtility.UrlEncode("refresh_token"),
                client_id = HttpUtility.UrlEncode(CLIENTID),
                client_secret = HttpUtility.UrlEncode(CLIENTSECRET),
                refresh_token = HttpUtility.UrlEncode(refreshToken)
            });
            string received = await doPostAsync(TokenUrl, data);
            KbToken token = JsonConvert.DeserializeObject<KbToken>(received);
            UpdateExpiresTime(token);
            return token;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jarvisji+kanboxwp\jarvisji-kanboxwp-acb86e8\kanboxwp\kanboxwp\Utils\KBApiUtil.cs
private static async Task<string> doPostAsync(string url, string postdata)
        {
            var request = WebRequest.Create(new Uri(url, UriKind.Absolute)) as HttpWebRequest;
            request.ContentType = "application/x-www-form-urlencoded";
            request.Method = "POST";
            byte[] data = Encoding.UTF8.GetBytes(postdata);
            request.ContentLength = data.Length;
            using (var requestStream = await Task<Stream>.Factory.FromAsync(request.BeginGetRequestStream, request.EndGetRequestStream, request))
            {
                await requestStream.WriteAsync(data, 0, data.Length);
            }
            WebResponse response = await Task<WebResponse>.Factory.FromAsync(request.BeginGetResponse, request.EndGetResponse, request);
            StreamReader sr = new StreamReader(response.GetResponseStream());
            string received = await sr.ReadToEndAsync();
            sr.Close();
            return received;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jarvisji+kanboxwp\jarvisji-kanboxwp-acb86e8\kanboxwp\kanboxwp\Utils\KBApiUtil.cs
private static async Task<string> doGetAsync(string url)
        {
            return await doGetAsync(url, null);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jarvisji+kanboxwp\jarvisji-kanboxwp-acb86e8\kanboxwp\kanboxwp\Utils\KBApiUtil.cs
private static async Task<string> doGetAsync(string url, Dictionary<string, string> headers)
        {
            HttpWebRequest request = WebRequest.CreateHttp(url);
            addRequestHeaders(headers, request);
            WebResponse response = await Task<WebResponse>.Factory.FromAsync(request.BeginGetResponse, request.EndGetResponse, request);
            StreamReader sr = new StreamReader(response.GetResponseStream());
            string received = await sr.ReadToEndAsync();
            sr.Close();
            return received;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jarvisji+kanboxwp\jarvisji-kanboxwp-acb86e8\kanboxwp\kanboxwp\Utils\KBApiUtil.cs
private static async Task<Stream> doGetBytesAsync(string url, Dictionary<string, string> headers)
        {
            HttpWebRequest request = WebRequest.CreateHttp(url);
            addRequestHeaders(headers, request);
            WebResponse response = await Task<WebResponse>.Factory.FromAsync(request.BeginGetResponse, request.EndGetResponse, request);
            return response.GetResponseStream(); //TODO: Stream shouldn't be returned in case forget to close outside.
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jarvisji+kanboxwp\jarvisji-kanboxwp-acb86e8\kanboxwp\kanboxwp\Utils\FileUtil.cs
public static async Task<string> WriteTextFile(string filename, string contents)
        {
            StorageFolder localFolder = ApplicationData.Current.LocalFolder;
            StorageFile textFile = await localFolder.CreateFileAsync(filename, CreationCollisionOption.ReplaceExisting);

            using (IRandomAccessStream textStream = await textFile.OpenAsync(FileAccessMode.ReadWrite))
            {
                using (DataWriter textWriter = new DataWriter(textStream))
                {
                    textWriter.WriteString(contents);
                    await textWriter.StoreAsync();
                }
            }

            return textFile.Path;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jarvisji+kanboxwp\jarvisji-kanboxwp-acb86e8\kanboxwp\kanboxwp\Utils\FileUtil.cs
public static async Task<string> ReadTextFile(string filename)
        {
            string contents;
            StorageFolder localFolder = ApplicationData.Current.LocalFolder;
            StorageFile textFile = await localFolder.GetFileAsync(filename);

            using (IRandomAccessStream textStream = await textFile.OpenReadAsync())
            {
                using (DataReader textReader = new DataReader(textStream))
                {
                    uint textLength = (uint)textStream.Size;
                    await textReader.LoadAsync(textLength);
                    contents = textReader.ReadString(textLength);
                }
            }
            return contents;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jarvisji+kanboxwp\jarvisji-kanboxwp-acb86e8\kanboxwp\kanboxwp\Utils\FileUtil.cs
public static async Task<StorageFile> SaveStream(Stream inputStream, string fileName)
        {
            if (fileName == null)
            {
                throw new ArgumentException("Invalid file name (null).");
            }
            StorageFile localFile = await CreateFileInFolders(fileName);
            using (var localFileStream = await localFile.OpenStreamForWriteAsync())
            {
                await inputStream.CopyToAsync(localFileStream);
            }
            return localFile;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jarvisji+kanboxwp\jarvisji-kanboxwp-acb86e8\kanboxwp\kanboxwp\Utils\FileUtil.cs
private static async Task<StorageFile> CreateFileInFolders(string fileName)
        {
            int lastPathSeperatorIndex = fileName.LastIndexOf("/");
            string fPath = null;
            string fName = fileName;
            if (lastPathSeperatorIndex >= 0)
            {
                fPath = fileName.Substring(0, lastPathSeperatorIndex);
                fName = fileName.Substring(lastPathSeperatorIndex + 1);
            }

            StorageFolder localFolder = ApplicationData.Current.LocalFolder;
            string[] pathes = fPath.Split('/');
            for (int i = 0; i < pathes.Length; i++)
            {
                if (!string.IsNullOrEmpty(pathes[i].Trim()))
                {
                    localFolder = await localFolder.CreateFolderAsync(pathes[i], CreationCollisionOption.OpenIfExists);
                }
            }
            StorageFile localFile = await localFolder.CreateFileAsync(fName, CreationCollisionOption.ReplaceExisting);
            return localFile;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jarvisji+kanboxwp\jarvisji-kanboxwp-acb86e8\kanboxwp\kanboxwp\ViewModels\MainViewModel.cs
private async void RefreshTokenIfNeed()
        {
            if (IsExpired(token))
            {
                token = await KBApiUtil.RefreshTokenAsync(token.RefreshToken);
                FileUtil.writeTokenFile(token);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jarvisji+kanboxwp\jarvisji-kanboxwp-acb86e8\kanboxwp\kanboxwp\ViewModels\MainViewModel.cs
private async Task<KbListInfo> GetFileList(string path)
        {
            KbListInfo lastListInfo;
            KbListInfo newListInfo;
            if (cachedPathListInfoDict.TryGetValue(path, out lastListInfo))
            {
                newListInfo = await KBApiUtil.GetFileListAsync(path, token, lastListInfo.Hash);
            }
            else
            {
                newListInfo = await KBApiUtil.GetFileListAsync(path, token);
            }

            if (KBApiUtil.KB_STATUS_OK.Equals(newListInfo.Status))
            {
                cachedPathListInfoDict.Add(path, newListInfo);
                return newListInfo;
            }
            else
            {
                return lastListInfo;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jasonkuster+MetroLooper\jasonkuster-MetroLooper-3444432\MetroLooper\Helpers\FileHelper.cs
public static async void UploadToSkydrive(string fileName, MainViewModel viewModel)
        {
            try
            {
                LiveOperationResult clientResult = await viewModel.Client.GetAsync("me/skydrive");
                dynamic res = clientResult.Result;
                string path = res.id;
                {
                    await viewModel.Client.BackgroundUploadAsync(path, new Uri("/shared/transfers/" + fileName, UriKind.RelativeOrAbsolute), OverwriteOption.Overwrite);
                }
            }
            catch (System.Threading.Tasks.TaskCanceledException tce)
            {
            }
            catch (LiveConnectException ce)
            {
            }
            catch (Exception e)
            {
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jasonkuster+MetroLooper\jasonkuster-MetroLooper-3444432\MetroLooper\Model\RecordingManager.cs
public async void Record_Go(object state)
        {
            System.Diagnostics.Debug.WriteLine("Timer ticked, recording is " + recording + ", starting is " + starting + ", and stop is " + stop + ".");
            if (recording)
            {
                if (!starting)
                {
                    //Finalize
                    byte[] audioData = {};
                    int size = 0;
                    //Engine.StopRecord(audioData, size);
                    //Engine.Submit(bank, track, audioData, size);
                    //using (var store = IsolatedStorageFile.GetUserStoreForApplication())
                    //using (var stream = new IsolatedStorageFileStream("filename.txt",FileMode.Create, FileAccess.Write, store))
                    //{
                    //    stream.Write(audioData, 0, size);
                    //}
                    //addTrack(await StorageFile.GetFileFromPathAsync("filename.txt"));
                    recording = false;
                    if (stop)
                    {
                        lockUI(LOCK_STATE.NONE);
                    }
                }
                if (!stop || starting)
                {
                    starting = false;
                    //Engine.StartRecord();
                    recording = true;
                    if (!stop)
                    {
                        lockUI(LOCK_STATE.RECORDING);
                    }
                }
            }
            else
            {
                lockUI(LOCK_STATE.NONE);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jhalbrecht+Walker-Wp8\jhalbrecht-Walker-Wp8-df5fc58\Walker\Walker.Wp8\Service\WalkerDataService.cs
private async void TryBluetooth()
        {
            if (_walkerAppSettings.BlueToothEnabled)
            {
                PeerFinder.AlternateIdentities["Bluetooth:Paired"] = "";
                var pairedDevices = await PeerFinder.FindAllPeersAsync();

                if (pairedDevices.Count == 0)
                {
                    _logger.Log(this, "TryBluetooth() ", "No paired devices found.");
                }
                else
                {
                    try
                    {
                        PeerInformation selectedDevice = pairedDevices[0]; //I'm  selecting the first one
                        bluetoothSocket = new StreamSocket();
                        await bluetoothSocket.ConnectAsync(selectedDevice.HostName, "1");
                        WaitForData(bluetoothSocket);
                        Write("ping"); //first ping to test connection
                    }
                    catch (Exception e)
                    {
                        _logger.Log(this, "TryBluetooth() threw exception: ", e.ToString());
                        // fix Vm.StatusMessages = "TryBluetooth() threw exception: ";
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jhalbrecht+Walker-Wp8\jhalbrecht-Walker-Wp8-df5fc58\Walker\Walker.Wp8\Service\WalkerDataService.cs
async private void Write(string str)
        {
            var dataBuffer = GetBufferFromByteArray(Encoding.UTF8.GetBytes(str + "|"));
            await bluetoothSocket.OutputStream.WriteAsync(dataBuffer);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jhalbrecht+Walker-Wp8\jhalbrecht-Walker-Wp8-df5fc58\Walker\Walker.Wp8\Service\WalkerDataService.cs
async private void WaitForData(StreamSocket socket)
        {
            try
            {
                byte[] bytes = new byte[5];
                await socket.InputStream.ReadAsync(bytes.AsBuffer(), 5, InputStreamOptions.Partial);
                bytes = bytes.TakeWhile((v, index) => bytes.Skip(index).Any(w => w != 0x00)).ToArray();
                string str = Encoding.UTF8.GetString(bytes, 0, bytes.Length);
                if (str.Contains("|"))
                {
                    _receivedBuffer += str.Substring(0, str.IndexOf("|"));
                    DoSomethingWithReceivedString(_receivedBuffer);
                    _receivedBuffer = str.Substring(str.IndexOf("|") + 1);
                }
                else
                {
                    _receivedBuffer += str;
                }
            }
            catch
            {
                // TryConnect();
                TryBluetooth();
            }
            finally
            {
                WaitForData(socket);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jhalbrecht+Walker-Wp8\jhalbrecht-Walker-Wp8-df5fc58\Walker\Walker.Wp8\Service\WalkerDataService.cs
private async void DoSomethingWithReceivedString(string buffer)
        {
            _logger.Log(this, "DoSomethingWithReceivedString(string buffer) : ", buffer);

            if (SensorVm == null)
                SensorVm = SimpleIoc.Default.GetInstance<SensorsViewModel>();

            if (buffer.Contains("Temperature"))
            {
                var foo = buffer.Split(':');
                SensorVm.Temperature = foo[1].Trim(); // .StatusMessages += buffer + " ";
                goto TheEnd;
            }

            if (buffer.Contains("Humidity"))
            {
                var foo = buffer.Split(':');
                SensorVm.Humidity = foo[1].Trim(); // .StatusMessages += buffer + " ";
                goto TheEnd;
            }

            if (buffer.Contains("Heart"))
            {
                var foo = buffer.Split(':');
                SensorVm.Heart = foo[1].Trim(); // .StatusMessages += buffer + " ";

                // persist sensor data to skyDrive if we're in an activity and Bluetooth is enabled in settings.
                if (isActive && _walkerAppSettings.BlueToothEnabled)
                {
                    Sensor sensor = new Sensor
                    {
                        ActivityStartTime = _activity.Start,
                        Temperature = Convert.ToDouble(SensorVm.Temperature),
                        Humidity = Convert.ToDouble(SensorVm.Humidity),
                        Heart = Convert.ToInt16(SensorVm.Heart)
                    };

                    try
                    {
                        _logger.Log(this, "sensorTable.InsertAsync(sensor)");
                        await sensorTable.InsertAsync(sensor);
                    }
                    catch (Exception e)
                    {
                        _logger.Log(this, "sensorTable.InsertAsync(sensor) exception: ", e.ToString());
                    }
                }
                goto TheEnd;
            }
            else
            {
                Vm.StatusMessages += buffer;
            }

            //if (buffer == "ping")
        //{
        //    MessageBox.Show("Rountrip took " + DateTime.Now.Subtract(_pingSentTime).TotalMilliseconds + "MS");
        //}
        //else
        //{
        //    MessageBox.Show(buffer);
        //}

            // if (SensorVm == null)
        TheEnd:
            ;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jhalbrecht+Walker-Wp8\jhalbrecht-Walker-Wp8-df5fc58\Walker\Walker.Wp8\Service\WalkerDataService.cs
private async Task PersistIt(string fileName)
        {
            if (Vm == null)
                Vm = SimpleIoc.Default.GetInstance<Wp8AppHubViewModel>();
            Vm.Activities.Add(_activity);

            if (_walkerAppSettings.AzureEnabled)
            {
                try
                {
                    _activity.GpxFileName = fileName;
                    await walkTable.InsertAsync(_activity);
                    _logger.Log(this, "walkTable.InsertAsync(_activity); ", "apparently worked");

                }
                catch (Exception e)
                {
                    _logger.Log(this, "walkTable.InsertAsync(_activity); ", e.ToString());
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jhalbrecht+Walker-Wp8\jhalbrecht-Walker-Wp8-df5fc58\Walker\Walker.Wp8\Service\WalkerDataService.cs
public async Task<ObservableCollection<Walk>> GetActivitiesAsync()
        {
            try
            {
                _logger.Log(this, "GetActivitiesAsync");
                return await walkTable.ToCollectionAsync();
            }
            catch (Exception e)
            {
                _logger.Log(this, "GetActivitiesAsync threw exception: ", e.ToString());
                return null;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jhalbrecht+Walker-Wp8\jhalbrecht-Walker-Wp8-df5fc58\Walker\Walker.Wp8\ViewModels\Wp8AppHubViewModel.cs
private async Task DoIt()
        {
            Activities = new ObservableCollection<Walk>(); 
            Activities = await _walkerDataService.GetActivitiesAsync(); 
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jhalbrecht+WindowsPhone8i-Racer\jhalbrecht-WindowsPhone8i-Racer-ad27d82\EightRacer\ViewModel\MainViewModel.cs
private async void PopulatePairedDevicesListBox()
        {
            // Configure PeerFinder to search for all paired devices.
            PeerFinder.AlternateIdentities["Bluetooth:Paired"] = "";
            var pairedDevices = await PeerFinder.FindAllPeersAsync();

            if (pairedDevices.Count == 0)
            {
                Debug.WriteLine("No paired devices were found.");
            }
            else
            {
                foreach (var d in pairedDevices)
                {
                    Pdis.Add(new PairedDeviceInfo(d));
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\jhalbrecht+WindowsPhone8i-Racer\jhalbrecht-WindowsPhone8i-Racer-ad27d82\EightRacer\ViewModel\MainViewModel.cs
private async void timer_Tick(object sender, EventArgs e)
        {
            //DebugMessages = string.Format("X: {0} Y: {1} Z: {2}",
            //                                      acceleration.X.ToString("0.00"),
            //                                      acceleration.Y.ToString("0.00"),
            //                                      acceleration.Z.ToString("0.00")
            //            );

            DebugMessages = string.Format(
                // "X: {0} Y: {1} ", acceleration.X.ToString("0.00"), acceleration.Y.ToString("0.00"));
                "X: {0} Y: {1} ", acceleration.Y.ToString("0.00"), acceleration.X.ToString("0.00")); // x and y are reversed between phone and input to i-Racer

            if (isConnected)
            {
                if (isDataValid)
                {
                    x = (int)ofMap(acceleration.Y, -1.00f, 1.00f, -0xF, 0xF); // X = forward / backward *** Y = left/right on racer
                    // Although I get up to 1 (-1) from acceleration I want to make the control less drastic in the tilt action of the phone. 
                    // 3x = (int)ofMap(acceleration.Y, -0.75f, 0.75f, -0xF, 0xF); // X = forward / backward *** Y = left/right on racer
                    y = (int)ofMap(acceleration.X, -1.00f, 1.00f, -10, 10);

                    if (x == 0 && y == 0)
                    {
                        Debug.WriteLine("Stop - x: {0} \ty: {1}", x, y);
                        dir = 0;
                        speed = 0;
                        goto TheEnd;
                    }

                    // straight
                    if (x > 0 & (y < yLimit & y > -yLimit))
                    {
                        dir = 1;
                        speed = Math.Abs(x);
                        goto TheEnd;
                    }

                    // backward
                    if (x < 0 & (y < yLimit & y > -yLimit))
                    {
                        dir = 2;
                        speed = Math.Abs(x);
                        goto TheEnd;
                    }
                    if (x < 0 && y < yLimit)
                    {
                        Debug.WriteLine("Left Backward \t\tx: {0} \ty: {1}", x, y);
                        dir = 7;
                        speed = Math.Abs(x);
                        goto TheEnd;
                    }
                    if (x < 0 && y > yLimit)
                    {
                        Debug.WriteLine("Right Backward - x < y >  \tx: {0} \ty: {1}", x, y);
                        dir = 8;
                        speed = Math.Abs(x);
                        goto TheEnd;
                    }
                    if (x > 0 && y > yLimit)
                    {
                        Debug.WriteLine("Right Forward - x > y > \tx: {0} \ty: {1}", x, y);
                        dir = 6;
                        speed = Math.Abs(x);
                        goto TheEnd;
                    }
                    if (x > 0 && y < yLimit)
                    {
                        Debug.WriteLine("left forward - x > y <  \tx: {0} \ty: {1}", x, y);
                        dir = 5;
                        speed = Math.Abs(x);
                    }

                TheEnd:

                    var buff = GetBufferFromByte(Shifty(dir, speed));
                    await socket.OutputStream.WriteAsync(buff);
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\joelmartinez+Khan-Academy-for-Windows-Phone\joelmartinez-Khan-Academy-for-Windows-Phone-71a99bc\KhanViewer\Models\LocalStorage.cs
public static async Task<VideoItem> GetLastViewedAsync()
        {
#if !WINDOWS_PHONE
            var folder = ApplicationData.Current.LocalFolder;
            if (await FileExists(LAST_VIDEO_FILENAME))
            {
                return null;
            }

            var readtask = await folder.OpenStreamForReadAsync(LAST_VIDEO_FILENAME);
                        
            using (var stream = readtask)
            {
                DataContractSerializer serializer = new DataContractSerializer(typeof(VideoItem));
                var deserializedVid = serializer.ReadObject(stream) as VideoItem;
                return deserializedVid;
            }
#else
            using (var store = IsolatedStorageFile.GetUserStoreForApplication())
            {
                if (!store.FileExists(LAST_VIDEO_FILENAME))
                {
                    return null;
                }

                using (var stream = store.OpenFile(LAST_VIDEO_FILENAME, FileMode.Open))
                {
                    DataContractSerializer serializer = new DataContractSerializer(typeof(VideoItem));
                    var deserializedVid = serializer.ReadObject(stream) as VideoItem;
                    return deserializedVid;
                }
            }
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\joshtwist+Votabl\joshtwist-Votabl-ffddb88\Source\WindowsPhone8\Votabl\EventView.xaml.cs
public async void EventView_Loaded(object sender, RoutedEventArgs e)
        {
            string eventId = this.NavigationContext.QueryString["eventId"];
            await App.ViewModel.LoadEvent(int.Parse(eventId));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\joshtwist+Votabl\joshtwist-Votabl-ffddb88\Source\WindowsPhone8\Votabl\EventView.xaml.cs
private async void btnVote_Click_1(object sender, RoutedEventArgs e)
        {
            Button button = (Button) sender;
            button.IsEnabled = false;
            Votable votable = (Votable)button.DataContext;

            // TODO submit the vote with EventId and VotableId
            var vote = new JObject();
            vote.Add("votableId", votable.Id);
            vote.Add("eventId", votable.EventId);

            await App.MobileService.GetTable("votes").InsertAsync(vote);

            button.IsEnabled = true;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\joshtwist+Votabl\joshtwist-Votabl-ffddb88\Source\WindowsPhone8\Votabl\MainPage.xaml.cs
private async void btnSubscribe_Click_1(object sender, EventArgs e)
        {
            // TODO - subscribe to events by enumerating _subscriptions collection
            // and uncheck the checkboxes
            foreach (var sub in _subscriptions.ToArray())
            {
                var uc = new UserCategory
                {
                    CategoryId = sub.Category.Id,
                    UserId = App.MobileService.CurrentUser.UserId
                };

                await App.MobileService.GetTable<UserCategory>().InsertAsync(uc);
                sub.CheckBox.IsChecked = false;
                _subscriptions.Remove(sub);
            }

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\joshtwist+Votabl\joshtwist-Votabl-ffddb88\Source\WindowsPhone8\Votabl\MainViewModel.cs
public async Task<Category> LoadCategory(int categoryId)
        {
            var currentCategory = Categories.Single(c => c.Id == categoryId);

            // TODO - load real events
            var events = await App.MobileService.GetTable<Event>().Where(
                e => e.CategoryId == categoryId).ToEnumerableAsync();

            currentCategory.Events.SetRange(events);

            CurrentCategory = currentCategory;
            return currentCategory;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\joshtwist+Votabl\joshtwist-Votabl-ffddb88\Source\WindowsPhone8\Votabl\MainViewModel.cs
public async Task<Event> LoadEvent(int eventId)
        {
            var currentEvent = CurrentCategory.Events.Single(e => e.Id == eventId);

            // TODO - actually load votables
            var votables = await App.MobileService.GetTable<Votable>()
                .Where(v => v.EventId == eventId).ToEnumerableAsync();

            currentEvent.Votables.SetRange(votables);

            

            CurrentEvent = currentEvent;
            CurrentEvent.SetMaximum();
            return currentEvent;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\joshtwist+Votabl\joshtwist-Votabl-ffddb88\Source\WindowsPhone8\Votabl\MainViewModel.cs
private async Task LoginTwitter()
        {
            // TODO - ensure login via twitter
            await App.MobileService.LoginAsync(MobileServiceAuthenticationProvider.Twitter);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\joshtwist+Votabl\joshtwist-Votabl-ffddb88\Source\WindowsPhone8\Votabl\MainViewModel.cs
private async Task UploadNotificationChannel()
        {
            var pushChannel = AcquirePushChannel();

            // TODO - upload push channel
            var channel = new JObject();
            channel.Add("channelUri", pushChannel.ChannelUri.AbsoluteUri);
            channel.Add("deviceType", "WP8");

            await App.MobileService.GetTable("channels").InsertAsync(channel);

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\joshtwist+Votabl\joshtwist-Votabl-ffddb88\Source\WindowsPhone8\Votabl\MainViewModel.cs
public async void Initialize()
        {
            if (_initialized) return;
            _initialized = true;

            _categories.Clear();
            _categories.Add(new Category { Id = 1, Title = "Beer Fest", Image = "http://homebrewfanatic.com/wp-content/uploads/2008/03/beer-fest.jpg", Subtitle = "Enjoy beer at a festival" });
            _categories.Add(new Category { Id = 2, Title = "Garage Sales", Image = "http://bacc.cc/wp-content/uploads/2012/05/garage-sale.jpg", Subtitle = "Buy some trash" });
            _categories.Add(new Category { Id = 3, Title = "Presentations", Image = "http://www.hearsaycommunications.com/images/presentation.jpg", Subtitle = "Watch a cool presentation" });

            await LoginTwitter();

            await UploadNotificationChannel();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\joshtwist+Votabl\joshtwist-Votabl-ffddb88\Source\WindowsPhone8\Votabl\NewEvent.xaml.cs
private async void btnSave_Click_1(object sender, EventArgs e)
        {
            // TODO - save new event and votables
            var newEvent = new Event
            {
                Title = txtTitle.Text,
                Subtitle = txtSubtitle.Text,
                CategoryId = App.ViewModel.CurrentCategory.Id
            };

            await App.MobileService.GetTable<Event>().InsertAsync(newEvent);

            foreach (var votableName in listVotables.Items.OfType<String>())
            {
                var votable = new Votable
                {
                    Name = votableName,
                    EventId = newEvent.Id
                };

                await App.MobileService.GetTable<Votable>().InsertAsync(votable);
            }

            this.NavigationService.GoBack();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\authentication\ADFSWSTrustIdentityProvider.cs
public async Task<RequestTokenResult> RequestToken(Uri identityProviderUrl, string scope)
        {
            var message = template
                .Replace("[To]", identityProviderUrl.ToString())
                .Replace("[applyTo]", scope);

            try
            {
                var res = await identityProviderUrl.ExecuteAsync<object>(null, message, "application/soap+xml", "POST", cache:true);
                var content = res.Data.ToString();
                var doc = XDocument.Parse(content);
                var fault = doc
                    .Descendants(XName.Get("Fault", "http://www.w3.org/2003/05/soap-envelope"))
                    .FirstOrDefault();

                if (fault!=null)
                {
                    var text = fault
                    .Descendants(XName.Get("Text", "http://www.w3.org/2003/05/soap-envelope"))
                    .FirstOrDefault();

                    throw new Exception(text!=null ? text.Value : fault.ToString());
                }

                var indexBegin = content.IndexOf("<Assertion ");
                var indexEnd = content.IndexOf("</Assertion>") + 12;
                var token = content.Substring(indexBegin, indexEnd - indexBegin);
                return new RequestTokenResult { Token = token };
            }
            catch (Exception)
            {
                throw;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\authentication\Authentication.cs
public async Task<KZUser> Authenticate(string userName, string password, string providerKey = "default")
        {
            if (string.IsNullOrWhiteSpace(providerKey)) throw new ArgumentNullException("providerKey");
            if (string.IsNullOrWhiteSpace(userName)) throw new ArgumentNullException("userName");

            var securityTokenKey = GetHash(string.Format("{0}|{1}|{2}", providerKey, userName, password).ToLower());
            if (securityTokens.TryGetValue(securityTokenKey, out kidoZenUser))
            {
                if (!kidoZenUser.TokenApplication.Expired() &&
                    (kidoZenUser.TokenMarketplace==null || !kidoZenUser.TokenMarketplace.Expired()) &&
                    (kidoZenUser.TokenServiceBus==null || !kidoZenUser.TokenServiceBus.Expired()))
                {
                    return kidoZenUser;
                }
            }

            IdentityProviderConfig provider;
            if (!identityProviders.TryGetValue(providerKey, out provider))
            {
                throw new Exception("The specified provider does not exist");
            }
            currentIP = provider.instance;
            currentIP.Configure(provider);
            currentIP.Initialize(userName, password);
            kidoZenUser = await KZUserFactory.Authenticate(provider);
            if (kidoZenUser != null)
            {
                kidoZenUser.Provider = providerKey;
                kidoZenUser.Credential = new NetworkCredential(userName, password);
                securityTokens.AddOrUpdate(securityTokenKey, kidoZenUser, (k, current) => kidoZenUser);
            }
            return kidoZenUser;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\authentication\KZUserFactory.cs
static internal async Task<KZUser> Authenticate(IdentityProviderConfig config)
        {
            try
            {
                var ipToken = await config.instance.RequestToken(new Uri(config.ipEndpoint), config.authServiceScope);
                var kzTokenUser = await RequestKidoTokenAsync(config.authServiceEndpoint, config.applicationScope, ipToken.Token);
                var kzMarketplaceTokenUser = await RequestKidoTokenAsync(config.authServiceEndpoint, config.marketplaceScope, ipToken.Token);

                RequestTokenResult kzTokenSB = null;
                //if (!string.IsNullOrWhiteSpace(config.serviceBusIpScope))
                //{
                //    ipToken = await config.instance.RequestToken(new Uri(config.ipEndpoint), config.serviceBusIpScope);
                //    kzTokenSB = await RequestKidoTokenAsync(config.serviceBusEndpoint, config.serviceBusScope, ipToken.Token);
                //}

                return createUser(kzTokenUser, kzTokenSB, kzMarketplaceTokenUser);
            }
            catch (Exception e)
            {
                throw new Exception("User could not be authenticated.", e);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\authentication\KZUserFactory.cs
static private async Task<RequestTokenResult> RequestKidoTokenAsync(string kidoEndpoint, string scope, string ipToken)
        {
            var sb = new StringBuilder(512);
            sb.Append("wrap_scope=");
            sb.Append(WebUtility.UrlEncode(scope));
            sb.Append("&wrap_assertion_format=SAML");
            sb.Append("&wrap_assertion=");
            sb.Append(WebUtility.UrlEncode(ipToken));

            try
            {
                var res = await new Uri(kidoEndpoint).ExecuteAsync<object>(null, sb.ToString(), "application/x-www-form-urlencoded", "POST", cache:true);
                var contentType = default(string);
                contentType = (res.Headers.TryGetValue("Content-Type", out contentType)) ? contentType.ToLower() : "";
                
                if (contentType.Contains("application/json"))
                {
                    var content = JObject.Parse(res.Data.ToString());
                    return new RequestTokenResult
                    {
                        Token = content.Value<string>("rawToken"),
                        ExpirationTime = DateTime.ParseExact(content.Value<string>("expirationTime"), "G", DateTimeFormatInfo.InvariantInfo)
                    };
                }
                else if (contentType.Contains("application/x-www-form-urlencoded"))
                {
                    var dictionary = res.Data.ToString()
                        .Split('&')
                        .Select((item) =>
                        {
                            var pair = item.Split('=');
                            return new { key = pair[0], value = pair[1] };
                        })
                        .ToDictionary((pair) => pair.key, (pair) => pair.value);
                    
                    return new RequestTokenResult
                    {
                        Token = WebUtility.UrlDecode(dictionary["wrap_access_token"]),
                        ExpirationTime = DateTime.Now.AddSeconds(int.Parse(dictionary["wrap_access_token_expires_in"]))
                    };
                }
                throw new Exception (res.Data.ToString());
            }
            catch (Exception e)
            {
                throw new Exception("Unable to retrieve authentication token.", e);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\authentication\WRAPv09IdentityProvider.cs
public async Task<RequestTokenResult> RequestToken(Uri identityProviderUrl, String scope)
        {
            try
            {
                var sb = new StringBuilder(512);
                sb.Append("wrap_name=");
                sb.Append(WebUtility.UrlEncode(wrapName));
                sb.Append("&wrap_password=");
                sb.Append(WebUtility.UrlEncode(wrapPassword));
                sb.Append("&wrap_scope=");
                sb.Append(WebUtility.UrlEncode(scope));

                var headers = new Dictionary<string, string>();
                headers["Accept"] = "text/xml";

                var res = await identityProviderUrl.ExecuteAsync<object>(null, sb.ToString(), "application/x-www-form-urlencoded", "POST", headers: headers, cache:true);
                var content = res.Data.ToString();
                var contentType = default(string);
                res.Headers.TryGetValue("Content-Type", out contentType);

                if (contentType==null && !contentType.ToLower().Contains("xml"))
                    throw new Exception(content);

                var doc = XDocument.Parse(content);
                var fault = doc
                    .Descendants(XName.Get("Fault", "http://www.w3.org/2003/05/soap-envelope"))
                    .FirstOrDefault();

                if (fault != null)
                {
                    var text = fault
                    .Descendants(XName.Get("Text", "http://www.w3.org/2003/05/soap-envelope"))
                    .FirstOrDefault();

                    throw new Exception( text != null ? text.Value : fault.ToString() );
                }

                var indexBegin = content.IndexOf("<Assertion ");
                var indexEnd = content.IndexOf("</Assertion>") + 12;
                var token = content.Substring(indexBegin, indexEnd - indexBegin);
                return new RequestTokenResult { Token = token };
            }
            catch (Exception )
            {
                throw;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Configuration.cs
public async Task<ServiceEvent<JToken>> Delete()
        {
            Validate();
            return await Url.ExecuteAsync<JToken>(app, method: "DELETE");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Configuration.cs
public async Task<ServiceEvent<IEnumerable<Config>>> All()
        {
            Validate();
            return await Url.ExecuteAsync<IEnumerable<Config>>(app);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Configuration.cs
public async Task<ServiceEvent<JToken>> Save<T>(T value)
        {
            Validate();
            return await Url.ExecuteAsync<JToken>(app, value.ToJToken(), "POST");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Configuration.cs
public async Task<ServiceEvent<JToken>> Get()
        {
            return await Get<JToken>();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Configuration.cs
public async Task<ServiceEvent<T>> Get<T>()
        {
            Validate();
            return await Url.ExecuteAsync<T>(app);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Extensions.cs
internal static async Task<ServiceEvent<T>> ExecuteAsync<T>(this Uri uri, KZApplication app, string content, string contentType, string method = "GET", bool cache = false, TimeSpan? timeout = null, Dictionary<string, string> headers = null, UseToken useToken = UseToken.Application, Action<long[]> onProgress = null, bool cors = false)
        {
            MemoryStream    stream = null;
            TextWriter      writer = null;

            if (!string.IsNullOrWhiteSpace(content))
            {
                stream = new MemoryStream();
                writer = new StreamWriter(stream);

                if (!string.IsNullOrWhiteSpace(contentType))
                {
                    if (headers == null) headers = new Dictionary<string, string>();
                    headers["Content-Type"] = contentType;
                }
                await writer.WriteAsync(content);
                await writer.FlushAsync();
                stream.Seek(0, SeekOrigin.Begin);
            }

            var result = await uri.ExecuteAsync<T>(app, stream, method, cache, timeout, headers, useToken, onProgress, cors);

            if (writer==null) writer.Dispose();
            if (stream==null) stream.Dispose();
            
            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Extensions.cs
internal static async Task<ServiceEvent<T>> ExecuteAsync<T>(this Uri uri, KZApplication app, JToken content, string method = "GET", bool cache = false, TimeSpan? timeout = null, Dictionary<string, string> headers = null, UseToken useToken = UseToken.Application, Action<long[]> onProgress = null, bool cors = false)
        {
            MemoryStream    stream = null;
            TextWriter      writer = null;

            if (content!=null)
            {
                stream = new MemoryStream();
                writer = new StreamWriter(stream);
                
                content.SerializeJson(writer);
                await writer.FlushAsync();
                stream.Seek(0, SeekOrigin.Begin);

                if (headers == null) headers = new Dictionary<string, string>();
                headers["Content-Type"] = "application/json";
            }

            var result = await uri.ExecuteAsync<T>(app, stream, method, cache, timeout, headers, useToken, onProgress, cors);

            if (writer != null) writer.Dispose();
            if (stream != null) writer.Dispose();

            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Extensions.cs
internal static async Task<ServiceEvent<T>> ExecuteAsync<T>(this Uri uri, KZApplication app, Stream content = null, string method = "GET", bool cache = false, TimeSpan? timeout = null, Dictionary<string, string> headers = null, UseToken useToken = UseToken.Application, Action<long[]> onProgress = null, bool cors = false)
        {
            Request request = null;
            Response response = null;
            if (headers==null) headers = new Dictionary<string,string>();

            try
            {
                // Does the URL require a no cache?
                if (!cache)
                {
                    uri = addNoCache(uri);
                    headers.Add("Cache-Control", "no-cache");
                    headers.Add("Pragma", "no-cache");
                }
                
                // Adds authentication's header
                if (useToken != UseToken.None && app != null && app.Authentication != null && app.Authentication.User != null)
                {
                    addAuthenticationHeader(app, useToken, headers);
                }

                request = await Request.Create(uri, method.ToUpper(), content, headers, timeout);
                response = (method=="POST" || method=="GET" || method=="PUT")?
                    await request.Send_POST_GET_PUT(onProgress) :
                    await request.Send_OTHERS(onProgress);

                // Is token expired?
                if (response.StatusCode == HttpStatusCode.Unauthorized && app.User != null)
                {
                    // Refresh token if it is expired
                    var authHeader = response.Headers["WWW-Authenticate"];
                    if (!string.IsNullOrWhiteSpace(authHeader))
                    {
                        var realm = authHeader
                            .Split(',')
                            .Where(r => r.StartsWith("error="))
                            .FirstOrDefault();
                        if (!string.IsNullOrWhiteSpace(realm))
                        {
                            var message = realm.Split('=')[1].Trim();
                            if (string.Compare(message, "\"Token is expired\"", StringComparison.CurrentCultureIgnoreCase) == 0)
                            {
                                // Do refresh tokens
                                app.Authentication.RemoveFromCache(app.User.Credential.UserName, app.User.Credential.Password, app.User.Provider);
                                await app.Authentication.Authenticate(app.User.Credential.UserName, app.User.Credential.Password, app.User.Provider);

                                // Set new auth header
                                addAuthenticationHeader(app, useToken, request.Headers);
                                request.Content.Seek(0, SeekOrigin.Begin);
                                
                                // Send request
                                response = (method == "POST" || method == "GET" || method == "PUT") ?
                                    await request.Send_POST_GET_PUT(onProgress) :
                                    await request.Send_OTHERS(onProgress);
                            }
                        }
                    }
                }

                // Process response
                var evt = new ServiceEvent<T>();
                evt.StatusCode = response.StatusCode;
                evt.Headers = response.Headers;

                var read = 0L;
                var total = response.Body == null ? 0 : response.Body.Length;

                if (typeof(T) == typeof(Stream))
                {
                    // Download the body as stream an send progress information

                    // Sends initial progress notification
                    if (onProgress != null) onProgress(new[] { read, total });

                    // Creates the stream that will be returned to the client
                    dynamic result = new MemoryStream();
                    if (total > 0)
                    {
                        // Copies the response body's stream
                        var buffer = new byte[4096];
                        var bytesRead = await response.Body.ReadAsync(buffer, 0, 4096);
                        while (bytesRead > 0)
                        {
                            result.WriteAsync(buffer, 0, bytesRead);
                            if (onProgress != null)
                            {
                                read += bytesRead;
                                onProgress(new[] { read, total });
                            }
                            bytesRead = await response.Body.ReadAsync(buffer, 0, 4096);
                        }
                        // Rewinds the stream
                        result.Seek(0, SeekOrigin.Begin);
                    }
                    evt.Data = result;
                }
                else if (typeof(T) == typeof(object))
                {
                    using (var stream = response.Body)
                    {
                        using (var reader = new StreamReader(stream, UTF8Encoding.UTF8))
                        {
                            dynamic data = await reader.ReadToEndAsync();
                            evt.Data = data;
                        }
                    }
                }
                else if (response.Headers.ContainsKey("Content-Type") && response.Headers["Content-Type"].Contains("application/json"))
                {
                    using (var reader = new StreamReader(response.Body, Encoding.UTF8))
                    {
                        using (var jsonReader = new JsonTextReader(reader))
                        {
                            evt.Data = serializer.Deserialize<T>(jsonReader);
                        }
                    }
                }
                return evt;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (request != null) request.Dispose();
                if (response != null) response.Dispose();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\ExtensionsNet.cs
static public async Task<Response> Send_OTHERS(this Request request, Action<long[]> onProgress = null)
        {
            Response response = null;
            try
            {
                var req = WebRequest.CreateHttp(request.Uri);
                req.Method = request.Method;
                req.AddHeaders(request.Headers);
                if (request.Content != null && request.Content.Length > 0)
                {
                    var reqStream = await Task.Factory.FromAsync<Stream>(req.BeginGetRequestStream, req.EndGetRequestStream, null);
                    await request.Content.CopyToAsync(reqStream);
                    await reqStream.FlushAsync();
                }

                var res = (HttpWebResponse)await Task.Factory.FromAsync<WebResponse>(req.BeginGetResponse, req.EndGetResponse, null);
                var resStream = default(Stream);
                if (res.ContentLength > 0)
                {
                    resStream = res.GetResponseStream();
                }
                
                response = await Response.Create(res.StatusCode, resStream);
                foreach (var name in res.Headers.AllKeys)
                {
                    response.Headers.Add(name, res.Headers[name]);
                }
                return response;
            }
            catch (Exception e)
            {
                throw e;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Files.cs
public async Task<ServiceEvent<bool>> Upload(Stream stream, string path, TimeSpan? timeout = null)
        {
            if (stream == null) throw new ArgumentNullException("stream");
            if (path == null) throw new ArgumentNullException("path");

            string fileName;
            var targetUrl = buildUploadUrl(path, out fileName);
            var headers = new Dictionary<string, string>();
            headers.Add("Content-Type", "application/octet-stream");
            headers.Add("x-file-name", fileName);
            var result = await targetUrl.ExecuteAsync<JToken>(app, stream, "POST", false, timeout, headers);
            return result.Clone<bool>(result.Succeed && result.Data != null && result.Data.Value<bool>("success"));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Files.cs
public async Task<ServiceEvent<Stream>> Download(string path, TimeSpan? timeout = null)
        {
            if (string.IsNullOrWhiteSpace(path)) throw new ArgumentNullException("path");

            Action<long[]> progress = null;
            if (OnDownloadProgress != null) progress = p => { OnDownloadProgress.Invoke(this, new DownloadProgressArgs(path, p[0], p[1])); };
            return await buildDownloadUrl(path).ExecuteAsync<Stream>(app, timeout: timeout, onProgress: progress);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Files.cs
public async Task<ServiceEvent<FilesBrowseResult>> Browse(string path = "/")
        {
            if (string.IsNullOrWhiteSpace(path)) throw new ArgumentNullException("path");

            var targetUrl = buildBrowseUrl(path);
            return await targetUrl.ExecuteAsync<FilesBrowseResult>(app);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Files.cs
public async Task<ServiceEvent<bool>> Delete(string path = "/")
        {
            if (string.IsNullOrWhiteSpace(path)) throw new ArgumentNullException("path");

            var targetUrl = buildDeleteUrl(path);
            var result = await targetUrl.ExecuteAsync<JToken>(app, method: "DELETE");
            return result.Clone<bool>(result.Succeed);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Indexes.cs
public async Task<ServiceEvent<JToken>> All()
        {
            return await Url.ExecuteAsync<JToken>(app);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Indexes.cs
public async Task<ServiceEvent<JToken>> Get(string name)
        {
            if (string.IsNullOrWhiteSpace(name)) throw new ArgumentNullException("name");

            return await new Uri(Url, "?name=" + name).ExecuteAsync<JToken>(app);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Indexes.cs
public async Task<ServiceEvent<JToken>> Delete(string name)
        {
            if (string.IsNullOrWhiteSpace(name)) throw new ArgumentNullException("name");

            return await new Uri(Url, "?name=" + name).ExecuteAsync<JToken>(app, method:"DELETE");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Indexes.cs
public async Task<ServiceEvent<JToken>> Create(string spec, bool safe = false, bool unique = false, bool sparse = false, bool background = false, bool dropDups = false, double? min = null, double? max = null)
        {
            if (string.IsNullOrWhiteSpace(spec)) throw new ArgumentNullException("spec");

            var options = new JObject();
            options["safe"] = safe;
            options["unique"] = unique;
            options["sparse"] = sparse;
            options["background"] = background;
            options["dropDups"] = dropDups;
            if (min.HasValue) options["min"] = min.Value;
            if (max.HasValue) options["max"] = max.Value;

            var body = new JObject();
            body["spec"] = spec;
            body["options"] = options;

            return await Url.ExecuteAsync<JToken>(app, options);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\KZApplication.cs
public async Task Initialize()
        {
            try
            {
                lock (sync)
                {
                    if (IsInitializing)
                    {
                        throw new Exception("The application is already initializing");
                    }
                    IsInitializing = true;
                    Initialized = false;
                }

                var configurations = await new Uri(string.Format("{0}publicapi/apps?name={1}", marketPlaceUri, Name)).ExecuteAsync<JArray>(this);

                lock (sync)
                {
                    if (configurations.Data.Count > 0)
                    {
                        AllocServices(configurations.Data[0] as JObject);
                        Initialized = true;
                        if (OnInitialization != null)
                        {
                            var result = Task.Run(() =>
                            {
                                OnInitialization.Invoke(this, new EventArgs());
                            });
                        }
                    }
                    else
                    {
                        throw new Exception("Can not get application's configuration");
                    }
                    IsInitializing = false;
                }
            }
            catch (Exception)
            {
                IsInitializing = false;
                throw;
            }

            return;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\KZApplication.cs
public async Task<KZUser> Authenticate(string user, string password, string provider = "default")
        {
            try
            {
                lock (sync)
                {
                    if (!Initialized) throw new Exception("The application was not initialized.");
                    if (IsAuthenticating) throw new Exception("The application is already authenticating an user.");
                    IsAuthenticating = true;
                    Authenticated = false;
                }

                var userAuthenticated = await Authentication.Authenticate(user, password, provider);

                lock (sync)
                {
                    this.Authenticated = true;
                    IsAuthenticating = false;
                    var result = Task.Run(() =>
                    {
                        OnAuthentication.Invoke(this, new EventArgs());
                    });
                    return userAuthenticated;
                }
            }
            catch(Exception)
            {
                lock (sync)
                {
                    this.Authenticated = false;
                    this.IsAuthenticating = false;
                    throw;
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Logging.cs
public async Task<ServiceEvent<JToken>> Clear()
        {
            return await Url.ExecuteAsync<JToken>(app, method: "DELETE");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Logging.cs
public async Task<ServiceEvent<JToken>>  Write<T>(T message, LogLevel level)
        {
            return await new Uri(Url, string.Format("?level={0}", (int)level)).ExecuteAsync<JToken>(app, message.ToJToken(), "POST");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Logging.cs
public async Task<ServiceEvent<IEnumerable<JToken>>> Query(string query = "{}", string options = null)
        {
            return await Query<JToken>(query, options);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Logging.cs
public async Task<ServiceEvent<IEnumerable<T>>> Query<T>(string query = "{}", string options = null)
        {
            if (string.IsNullOrWhiteSpace(query)) throw new ArgumentNullException("query");

            var queryString = string.Format("?query={0}&options={1}",
                WebUtility.UrlEncode(query),
                WebUtility.UrlEncode(string.IsNullOrWhiteSpace(options) ? "{}" : options));

            return await new Uri(Url, queryString).ExecuteAsync<IEnumerable<T>>(app);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Logging.cs
public async Task<ServiceEvent<IEnumerable<JToken>>> All()
        {
            return await All<JToken>();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Logging.cs
public async Task<ServiceEvent<IEnumerable<T>>> All<T>()
        {
            return await Query<T>("{}");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\MailSender.cs
public async Task<ServiceEvent<JToken>> Send(Mail mail)
        {
            if (mail == null) throw new ArgumentNullException("mail");
            if (string.IsNullOrWhiteSpace(mail.to)) throw new ArgumentNullException("mail.to");
            if (string.IsNullOrWhiteSpace(mail.from)) throw new ArgumentNullException("mail.from");

            return await Url.ExecuteAsync<JToken>(app, mail.ToJToken(), "POST");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Marketplace.cs
public async Task<ServiceEvent<AppInfo>> GetApplication(string name)
        {
            if (string.IsNullOrWhiteSpace(name)) throw new ArgumentNullException("name");

            var result = await QueryApplications(name);
            if (result.Data == null || result.Data.Length == 0)
                return result.Clone<AppInfo>(null);

            return result.Clone<AppInfo>(result.Data.First());
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Marketplace.cs
public async Task<ServiceEvent<AppInfo[]>> GetApplications()
        {
            return await QueryApplications();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Marketplace.cs
public async Task<ServiceEvent<string[]>> GetApplicationNames()
        {
            string[] names = null;
            var apps = await QueryApplications();
            if (apps.Data != null)
            {
                names = apps.Data.Select(a => a.Name).ToArray();
            }
            return apps.Clone<string[]>(names);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Marketplace.cs
public async Task<ServiceEvent<AppInfo[]>> GetUserApplications()
        {
            if (!app.Initialized) throw new Exception("The application was not initialized.");
            if (app.User == null || app.User.TokenMarketplace == null) throw new Exception("User is not authenticated.");

            var apps = await Url.Concat("api/myapps").ExecuteAsync<JArray>(app, useToken:authentication.UseToken.Marketplace);
            var array = apps.Data == null ? 
                new AppInfo[0] : 
                apps
                    .Data
                    .Select(a => new AppInfo((JObject)a))
                    .ToArray();

            return apps.Clone<AppInfo[]>(array);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Marketplace.cs
public async Task<ServiceEvent<string[]>> GetUserApplicationNames()
        {
            string[] names = null;
            var apps = await GetUserApplications();
            if (apps.Data != null)
            {
                names = apps.Data.Select(a => a.Name).ToArray();
            }
            return apps.Clone<string[]>(names);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Marketplace.cs
private async Task<ServiceEvent<AppInfo[]>> QueryApplications(string name = null)
        {
            if (!app.Initialized) throw new Exception("The application was not initialized.");

            var resource = "publicapi/apps" + (string.IsNullOrWhiteSpace(name) ? "" : "?name=" + name);
            var apps = await Url.Concat(resource).ExecuteAsync<JArray>(app, useToken: authentication.UseToken.None);

            return apps.Clone<AppInfo[]>(apps
                .Data
                .Select(a => new AppInfo((JObject)a))
                .ToArray());
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Queue.cs
public async Task<ServiceEvent<JToken>> Enqueue<T>(T message)
        {
            Validate();
            return await Url.ExecuteAsync<JToken>(app, message.ToJToken(), "POST");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Queue.cs
public async Task<ServiceEvent<JToken>> Dequeue()
        {
            return await Dequeue<JToken>();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Queue.cs
public async Task<ServiceEvent<T>> Dequeue<T>()
        {
            Validate();
            return await Url.Concat("next").ExecuteAsync<T>(app, method:"DELETE");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Queue.cs
public async Task<ServiceEvent<JObject>> GetInfo()
        {
            Validate();
            return await Url.ExecuteAsync<JObject>(app);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Request.cs
static public async Task<Request> Create(Uri uri, string method, Stream content, IDictionary<string, string> headers, TimeSpan? timeout)
        {
            if (string.IsNullOrWhiteSpace(method)) method = "GET";

            var req = new Request
            {
                Uri = uri,
                Headers = new Dictionary<string, string>(StringComparer.CurrentCultureIgnoreCase), //InvariantCultureIgnoreCase
                Timeout = timeout,
                Method = method,
                Content = new MemoryStream()
            };

            if (headers != null)
            {
                foreach (var h in headers)
                    req.Headers.Add(h.Key, h.Value);
            }
            
            if (content != null)
            {
                await content.CopyToAsync(req.Content);
                await req.Content.FlushAsync();
                req.Content.Seek(0, SeekOrigin.Begin);
            }

            var length = req.Content.Length;
            if (length == 0)
            {
                if (headers.ContainsKey("Content-Type")) headers.Remove("Content-Type");
                if (headers.ContainsKey("Content-Length")) headers.Remove("Content-Length");
            }
            else
            {
                if (!headers.ContainsKey("Content-Type")) throw new Exception("'Content-Type' HTTP header is missing.");
                headers["Content-Length"] = length.ToString();
            }

            if (!headers.ContainsKey("Accept")) headers["Accept"] = "*/*";
            return req;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Response.cs
public static async Task<Response> Create(HttpStatusCode statusCode, Stream body = null, IDictionary<string, string> headers = null)
        {
            var res = new Response {
                StatusCode = statusCode,
                Body = new MemoryStream(),
                Headers = new Dictionary<string, string>(StringComparer.CurrentCultureIgnoreCase)
            };

            if (body != null)
            {
                await body.CopyToAsync(res.Body);
                await res.Body.FlushAsync();
                res.Body.Seek(0, SeekOrigin.Begin);
            }

            if (headers != null)
            {
                foreach (var h in headers)
                    res.Headers.Add(h.Key, h.Value);
            }

            return res;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Services.cs
public async Task<ServiceEvent<JObject>> Invoke(string method)
        {
            return await Invoke<JObject>(method, new JObject());
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Services.cs
public async Task<ServiceEvent<JObject>> Invoke<T>(string method, T args)
        {
            if (string.IsNullOrWhiteSpace(method)) throw new ArgumentNullException("method");

            Validate();
            var endpoint = Url.Concat("invoke/" + method);
            return await endpoint.ExecuteAsync<JObject>(app, args.ToJToken(), method="POST");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\SmsSender.cs
public async Task<ServiceEvent<SMSStatus>> Send(string message)
        {
            Validate();
            var url = new Uri(Url, string.Format("?to={0}&message={1}", Number, message));
            return await url.ExecuteAsync<SMSStatus>(app, method:"POST");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\SmsSender.cs
public async Task<ServiceEvent<SMSStatus>> GetStatus(string messageId)
        {
            Validate();
            if (string.IsNullOrWhiteSpace(messageId)) throw new ArgumentNullException("messageId");

            return await Url.Concat(string.Format("/{0}", messageId)).ExecuteAsync<SMSStatus>(app);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Storage.cs
public async Task<ServiceEvent<JToken>> Drop()
        {
            Validate();
            return await Url.ExecuteAsync<JToken>(app, method:"DELETE");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Storage.cs
public async Task<ServiceEvent<JToken>> Delete(string id)
        {
            Validate();
            if (string.IsNullOrWhiteSpace(id)) throw new ArgumentNullException("id");

            return await Url.Concat(id).ExecuteAsync<JToken>(app, method: "DELETE");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Storage.cs
public async Task<ServiceEvent<JArray>> Query(string query = "{}", string options = "{}", string fields = "{}")
        {
            return await DoQuery<JArray>(query, options, fields);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Storage.cs
public async Task<ServiceEvent<IEnumerable<T>>> Query<T>(string query = "{}", string options = "{}", string fields = "{}")
        {
            return await DoQuery<IEnumerable<T>>(query, options, fields);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Storage.cs
private async Task<ServiceEvent<T>> DoQuery<T>(string query = "{}", string options = "{}", string fields = "{}")
        {
            Validate();
            var queryString = string.Format("?query={0}&options={1}&fields={2}",
                WebUtility.UrlEncode(query),
                WebUtility.UrlEncode(options),
                WebUtility.UrlEncode(fields));

            return await new Uri(Url, queryString).ExecuteAsync<T>(app);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Storage.cs
public async Task<ServiceEvent<JToken>> Get(string id)
        {
            Validate();
            return await Url.Concat(id).ExecuteAsync<JToken>(app);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Storage.cs
public async Task<ServiceEvent<T>> Get<T>(string id)
        {
            Validate();
            return await Url.Concat(id).ExecuteAsync<T>(app);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Storage.cs
public async Task<ServiceEvent<StorageObject>> Save(StorageObject value, bool isPrivate = false)
        {
            return await Save<StorageObject>(value, isPrivate);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Storage.cs
public async Task<ServiceEvent<StorageObject>> Save<T>(T value, bool isPrivate = false)
        {
            Validate();
            var obj = value.ToJToken() as JObject;
            if (obj == null) throw new ArgumentException("Value must be an object, it could not be a value type.", "value");

            var id = obj.Value<string>("_id");
            if (string.IsNullOrWhiteSpace(id))
                return await Insert(obj, isPrivate);
            else
                return await Update(id, obj);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Storage.cs
public async Task<ServiceEvent<StorageObject>> Insert(StorageObject value, bool isPrivate = false)
        {
            return await Insert<StorageObject>(value, isPrivate);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Storage.cs
public async Task<ServiceEvent<StorageObject>> Insert<T>(T value, bool isPrivate = false)
        {
            Validate();
            return await new Uri(Url, "?isPrivate=" + isPrivate.ToString()).ExecuteAsync<StorageObject>(app, value.ToJToken(), "POST");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Storage.cs
public async Task<ServiceEvent<StorageObject>> Update(StorageObject value)
        {
            return await Update(value._id, value);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Storage.cs
public async Task<ServiceEvent<StorageObject>> Update<T>(string id, T value)
        {
            Validate();
            if (string.IsNullOrWhiteSpace(id)) throw new ArgumentNullException("id");
        
            return await Url.Concat(id).ExecuteAsync<StorageObject>(app, value.ToJToken(), "PUT");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Storage.cs
public async Task<ServiceEvent<JArray>> All()
        {
            Validate();
            return await Url.ExecuteAsync<JArray>(app);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\..\src\Storage.cs
public async Task<ServiceEvent<IEnumerable<T>>> All<T>()
        {
            Validate();
            return await Url.ExecuteAsync<IEnumerable<T>>(app);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\Notification.cs
public async Task<ServiceEvent<string[]>> GetSubscriptions()
        {
            var resource = "/devices/" + HttpUtility.UrlEncode(deviceId) + "/" + HttpUtility.UrlEncode(app.Name);
            var result = await new Uri(resource).ExecuteAsync<JArray>(app);

            string[] subscriptions = null;
            if (result.Succeed)
            {
                subscriptions = result.Data
                    .Select(subscription => subscription.Value<string>("channelName"))
                    .ToArray();
            }
            return result.Clone<string[]>(subscriptions);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\Notification.cs
public async Task<ServiceEvent<int>> GetSubscriptionsCount()
        {
            var resource = "/devices/" + HttpUtility.UrlEncode(deviceId) + "/" + HttpUtility.UrlEncode(app.Name) + "?count=true";
            return await Url.Concat(resource).ExecuteAsync<int>(app);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\Notification.cs
public async Task<ServiceEvent<JToken>> Push(string channelName, NotificationData data)
        {
            var resource = "/push/"
                + HttpUtility.UrlEncode(app.Name) + "/"
                + HttpUtility.UrlEncode(channelName);

            return await new Uri(resource).ExecuteAsync<JToken>(app, data.ToJToken(), "POST");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\kidozen+kido-win\kidozen-kido-win-bf4036c\KidoZen.Client.wp80\PubSubChannel.cs
public async Task<ServiceEvent<JToken>> Publish<T>(T message)
        {
            return await Url.ExecuteAsync<JToken>(app, message.ToJToken(), "POST");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\labs\Main\DaveSexton.Labs\Source\DaveSexton.Labs-Phone 7.1\..\DaveSexton.Labs\GUIConsoleLab.cs
protected internal async Task WhenMainCompletesAsync()
        {
            while (registeredTasks.Count > 0)
            {
                Task task;
                if (registeredTasks.TryDequeue(out task))
                {
                    await task;
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\labs\Main\DaveSexton.Labs\Source\DaveSexton.Labs-Phone 7.1\..\DaveSexton.Labs\GUIConsoleLab.cs
protected async void RunExperiments()
        {
            await RunExperimentsAsync().ConfigureAwait(false);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\labs\Main\DaveSexton.Labs\Source\DaveSexton.Labs-Phone 7.1\..\DaveSexton.Labs\GUIConsoleLab.cs
protected virtual async Task<bool> ExperimentStartingAsync(IList<IExperiment> experiments, int index)
        {
            Contract.Requires(HasProxy);
            Contract.Requires(experiments != null);
            Contract.Requires(experiments.IsReadOnly);
            Contract.Requires(index >= 0);
            Contract.Requires(index < experiments.Count);
            Contract.Ensures(experiments.Count == Contract.OldValue(experiments.Count));

            if (Proxy.IsRunningAllExperiments && pauseBetweenExperiments && index > 0)
            {
                TraceLine();
#if WINDOWS_PHONE
                TraceLine(Properties.Resources.PressAnyKeyToStartNextExperimentQToCancel);
#else
                TraceLine(Properties.Resources.PressAnyKeyToStartNextExperimentEscapeToCancel);
#endif
                TraceLine();

                var key = WaitForKey();

#if WINDOWS_PHONE
                if (key.Key == ConsoleKey.Q)
#else
                if (key.Key == ConsoleKey.Escape)
#endif
                {
                    return false;
                }
            }
            else if (!Proxy.IsRunningAllExperiments)
            {
                TraceLine();
            }

            return await Proxy.ExperimentStartingAsync(experiments, index).ConfigureAwait(false);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\labs\Main\DaveSexton.Labs\Source\DaveSexton.Labs-Phone 7.1\..\DaveSexton.Labs\GUIConsoleLabHost.cs
protected override async void Main()
        {
            if (lab.CanExecute())
            {
                await lab.ExecuteAsync();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\labs\Main\DaveSexton.Labs\Source\DaveSexton.Labs-Phone 7.1\..\DaveSexton.Labs\Lab.cs
protected internal async Task WhenMainCompletesAsync()
        {
            while (registeredTasks.Count > 0)
            {
                Task task;
                if (registeredTasks.TryDequeue(out task))
                {
                    await task;
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\labs\Main\DaveSexton.Labs\Source\DaveSexton.Labs-Phone 7.1\..\DaveSexton.Labs\Lab.cs
internal async Task ExecuteAsync()
        {
            Contract.Requires(CanExecute());

            ResetTime();

            Contract.Assume(CanExecute());

            Main();

            await WhenMainCompletesAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\labs\Main\DaveSexton.Labs\Source\DaveSexton.Labs-Phone 7.1\..\DaveSexton.Labs\Lab.cs
protected internal async void RunExperiments()
        {
            await RunExperimentsAsync().ConfigureAwait(false);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\labs\Main\DaveSexton.Labs\Source\DaveSexton.Labs-Phone 7.1\..\DaveSexton.Labs\Lab.cs
private async Task RunExperimentsAsync(
            Func<IList<IExperiment>, int, Task<bool>> starting,
            Func<IList<IExperiment>, int, Task> executing,
            Func<IList<IExperiment>, int, Task> completed)
        {
            Contract.Requires(starting != null);
            Contract.Requires(executing != null);
            Contract.Requires(completed != null);

            IsRunningAllExperiments = true;

            try
            {
                var currentExperiments = OverriddenExperiments;

                var list = currentExperiments as IList<IExperiment> ?? currentExperiments.ToList();

                if (!list.IsReadOnly)
                {
                    list = new System.Collections.ObjectModel.ReadOnlyCollection<IExperiment>(list);
                }

                for (int i = 0; i < list.Count; i++)
                {
                    Contract.Assume(list.IsReadOnly);

                    if (!(await ExecuteExperimentAsync(list, i, starting, executing, completed)))
                    {
                        break;
                    }
                }
            }
            finally
            {
                IsRunningAllExperiments = false;
            }

            Contract.Assert(IsProxy || overriddenExperiments == null);
            Contract.Assert(overriddenExperiments == null || overriddenExperiments.IsReadOnly);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\labs\Main\DaveSexton.Labs\Source\DaveSexton.Labs-Phone 7.1\..\DaveSexton.Labs\Lab.cs
private async Task<bool> ExecuteExperimentAsync(
            IList<IExperiment> experiments,
            int index,
            Func<IList<IExperiment>, int, Task<bool>> starting,
            Func<IList<IExperiment>, int, Task> executing,
            Func<IList<IExperiment>, int, Task> completed)
        {
            Contract.Requires(experiments != null);
            Contract.Requires(experiments.IsReadOnly);
            Contract.Requires(index >= 0);
            Contract.Requires(index < experiments.Count);
            Contract.Requires(starting != null);
            Contract.Requires(executing != null);
            Contract.Requires(completed != null);

            ResetTime();

            var running = new TaskCompletionSource<bool>();

            RegisterMainTask(running.Task);

            try
            {
                await EnsureUIThreadAccessAsync().ConfigureAwait(false);

                if (!(await starting(experiments, index).ConfigureAwait(false)))
                {
                    return false;
                }

                await EnsureUIThreadAccessAsync().ConfigureAwait(false);

                await executing(experiments, index).ConfigureAwait(false);

                await EnsureUIThreadAccessAsync().ConfigureAwait(false);

                await completed(experiments, index).ConfigureAwait(false);
            }
            catch (Exception ex)
            {
                running.SetException(ex);
                throw;
            }

            running.SetResult(true);

            return true;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\labs\Main\DaveSexton.Labs\Source\DaveSexton.Labs-Phone 7.1\..\DaveSexton.Labs\Lab.cs
protected internal virtual async Task ExperimentExecutingAsync(IList<IExperiment> experiments, int index)
        {
            Contract.Requires(experiments != null);
            Contract.Requires(experiments.IsReadOnly);
            Contract.Requires(index >= 0);
            Contract.Requires(index < experiments.Count);
            Contract.Ensures(experiments.Count == Contract.OldValue(experiments.Count));

            var experiment = experiments[index];

            Contract.Assume(experiment != null);

            TraceLine();

            await experiment.ExecuteAsync();

            TraceLine();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\labs\Main\DaveSexton.Labs\Source\DaveSexton.Labs-Phone 7.1\..\DaveSexton.Labs\LabController.cs
public async Task StartDebugAsync()
        {
            Assembly entryAssembly = Assembly.GetCallingAssembly();

            ICollection<Lab> labs = factory.LoadLabs(entryAssembly);

            TraceHeader(entryAssembly, labs.Count);

            if (labs.Count == 0)
            {
                ZeroLabs();
            }
            else
            {
                AttachGlobalListener();

                await ExecuteAsync(labs, showDescription: true, showSourceCode: false);

                Contract.Assume(labs.Count > 0);

                EndDebug(labs);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\labs\Main\DaveSexton.Labs\Source\DaveSexton.Labs-Phone 7.1\..\DaveSexton.Labs\LabController.cs
protected virtual async Task ExecuteAsync(ICollection<Lab> labs, bool showDescription, bool showSourceCode)
        {
            Contract.Requires(labs != null);
            Contract.Requires(labs.Count > 0);
            ////Contract.Requires(Contract.ForAll(labs, lab => lab != null));
            ////Contract.Requires(Contract.ForAll(labs, lab => lab.IsEnabled));

            int total = labs.Count;
            int number = 0;

            foreach (var lab in labs)
            {
                Contract.Assume(lab != null);

                await ExecuteAsync(lab, ++number, total, showDescription, showSourceCode);
            }

            WriteLine();
            WriteLine(Resources.AllLabsCompleted);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\labs\Main\DaveSexton.Labs\Source\DaveSexton.Labs-Phone 7.1\..\DaveSexton.Labs\LabController.cs
protected async Task<bool> ExecuteAsync(Lab lab, int number, int total, bool showDescription, bool showSourceCode)
        {
            Contract.Requires(lab != null);
            Contract.Requires(number > 0);
            Contract.Requires(total > 0);

            LabStarting(lab, number, total);

            if (lab.CanExecute())
            {
                if (lab.IsCancellable)
                    Write(Resources.PressAnyKeyToCancel_Inline);

                TraceLabDescriptionIf(showDescription, lab.Description);

                if (showSourceCode)
                    TraceSourceCode(lab.SourceCode);

                await ExecuteAsync(lab);

                LabCompleted(lab, number, total, executed: true);

                return true;
            }
            else
            {
                TraceWarning(Resources.Skipped_Inline);

                LabCompleted(lab, number, total, executed: false);

                return false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\labs\Main\DaveSexton.Labs\Source\DaveSexton.Labs-Phone 7.1\..\DaveSexton.Labs\LabController.cs
protected virtual async Task ExecuteAsync(Lab lab)
        {
            Contract.Requires(lab != null);
            Contract.Requires(lab.CanExecute());

            var listeners = lab.Listeners;

#if !SILVERLIGHT
            Contract.Assume(listeners != null);
#endif

            listeners.Add(this);

            try
            {
                Contract.Assume(lab.CanExecute());

                await lab.ExecuteAsync();
            }
            finally
            {
                listeners.Remove(this);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\lidermanrony+PodCast\lidermanrony-PodCast-14fe1e9\PodCast\loginPage.xaml.cs
private async void loginButton_Click(object sender, RoutedEventArgs e)
        {
            App.LoginViewModel.IsWaiting = true;
            try
            {
               await this.Authenticate();
               IEnumerable<Uri> feedUrls = await this.GetFeedUris();
            }
            finally
            {
                App.LoginViewModel.IsWaiting = false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\lidermanrony+PodCast\lidermanrony-PodCast-14fe1e9\PodCast\loginPage.xaml.cs
private async Task<IEnumerable<Uri>> GetFeedUris()
        {
            string requestUrl = string.Format(
                "https://www.google.com/reader/api/0/subscription/list?allcomments=true&output=json&ck={0}&client=scroll", 
                DateTime.Now.Ticks.ToString());
            WebClient client = new WebClient();
            client.Headers["Authorization"] = String.Format("GoogleLogin auth={0}", AUTH);
            client.Headers["Cookie"] = String.Format("SID={0}", SID);
            string result = await client.DownloadStringTask(new Uri(requestUrl, UriKind.Absolute));
            JObject jsonResponse = JObject.Parse(result);
            var subscriptions = jsonResponse["subscriptions"].Children();
            var subscriptionsWithCategories = subscriptions.Where(x => x["categories"].HasValues);
            //TODO handle case of multiple labels

            var listenSubscriptions = subscriptionsWithCategories.Where(x => x["categories"][0]["label"].ToString().Equals("Listen Subscriptions"));
            var feedUrls = listenSubscriptions.Select(x => x["id"].ToString().Substring("feed/".Length)).ToList();
            return feedUrls.Select(x => new Uri(x));

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\lidermanrony+PodCast\lidermanrony-PodCast-14fe1e9\PodCast\loginPage.xaml.cs
private async Task Authenticate()
        {
            var requestUrl = string.Format(
                "https://www.google.com/accounts/ClientLogin?service=reader&Email={0}&Passwd={1}",
                App.LoginViewModel.Username,
                App.LoginViewModel.Password);
            WebClient client = new WebClient();
            string response = await client.DownloadStringTask(new Uri(requestUrl));
            var split = response.Split(new string[] { "\n" }, StringSplitOptions.RemoveEmptyEntries);
            SID = split[0].Substring(split[0].IndexOf("=") + 1);
            LSID = split[1].Substring(split[1].IndexOf("=") + 1);
            AUTH = split[2].Substring(split[2].IndexOf("=") + 1);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson10\ContactStoreTipsDemo\ContactStoreTipsDemo\MainPage.xaml.cs
private async void Button_Click_1(object sender, RoutedEventArgs e)
        {
            ContactQueryResult result = store.CreateContactQuery();
            var contacts = await result.GetContactsAsync();
            foreach (var contact in contacts)
            {
                var stream = await contact.ToVcardAsync(VCardFormat.Version2_1);
                byte[] datas = StreamToBytes(stream.AsStreamForRead());
                string vcard = System.Text.Encoding.UTF8.GetString(datas, 0, datas.Length);
                Debug.WriteLine(vcard);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson10\ContactStoreTipsDemo\ContactStoreTipsDemo\RemoteIdHelper.cs
public async Task SetRemoteIdGuid(ContactStore store)
        {
            IDictionary<string, object> properties;
            properties = await store.LoadExtendedPropertiesAsync().AsTask<IDictionary<string, object>>();
            if (!properties.ContainsKey(ContactStoreLocalInstanceIdKey))
            {
                // the given store does not have a local instance id so set one against store extended properties
                Guid guid = Guid.NewGuid();
                properties.Add(ContactStoreLocalInstanceIdKey, guid.ToString());
                System.Collections.ObjectModel.ReadOnlyDictionary<string, object> readonlyProperties = new System.Collections.ObjectModel.ReadOnlyDictionary<string, object>(properties);
                await store.SaveExtendedPropertiesAsync(readonlyProperties).AsTask();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson10\ContactStoreTipsDemo\ContactStoreTipsDemo\RemoteIdHelper.cs
public async Task<string> GetTaggedRemoteId(ContactStore store, string remoteId)
        {
            string taggedRemoteId = string.Empty;

            System.Collections.Generic.IDictionary<string, object> properties;
            properties = await store.LoadExtendedPropertiesAsync().AsTask<System.Collections.Generic.IDictionary<string, object>>();
            if (properties.ContainsKey(ContactStoreLocalInstanceIdKey))
            {
                taggedRemoteId = string.Format("{0}_{1}", properties[ContactStoreLocalInstanceIdKey], remoteId);
            }
            else
            {
                // handle error condition
            }

            return taggedRemoteId;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson10\ContactStoreTipsDemo\ContactStoreTipsDemo\RemoteIdHelper.cs
public async Task<string> GetUntaggedRemoteId(ContactStore store, string taggedRemoteId)
        {
            string remoteId = string.Empty;

            System.Collections.Generic.IDictionary<string, object> properties;
            properties = await store.LoadExtendedPropertiesAsync().AsTask<System.Collections.Generic.IDictionary<string, object>>();
            if (properties.ContainsKey(ContactStoreLocalInstanceIdKey))
            {
                string localInstanceId = properties[ContactStoreLocalInstanceIdKey] as string;
                if (taggedRemoteId.Length > localInstanceId.Length + 1)
                {
                    remoteId = taggedRemoteId.Substring(localInstanceId.Length + 1);
                }
            }
            else
            {
                // handle error condition
            }

            return remoteId;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson11\SpeechDemo\SpeechDemo\MainPage.xaml.cs
private async void Button_Click_1(object sender, RoutedEventArgs e)
        {
            SpeechSynthesizer speechSynthesizer = new SpeechSynthesizer();
            await speechSynthesizer.SpeakTextAsync("??");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson11\VoiceCommandDemo\VoiceCommandDemo\MainPage.xaml.cs
private async void PhoneApplicationPage_Loaded_1(object sender, RoutedEventArgs e)
        {
            await VoiceCommandService.InstallCommandSetsFromFileAsync(new Uri("ms-appx:///VoiceCommandDefinition1.xml"));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson11\VoiceCommandDemo\VoiceCommandDemo\MainPage.xaml.cs
private async void Button_Click_1(object sender, RoutedEventArgs e)
        {
            VoiceCommandSet voiceCommandSet = VoiceCommandService.InstalledCommandSets["CommandSet1"];
            await voiceCommandSet.UpdatePhraseListAsync("number", new string[]
             {
                 "?",
                 "?",
                 "?",
                 "?",
                 "?"
             });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson12\DatagramSocketDemo\DatagramSocketDemo\MainPage.xaml.cs
private async void received_Click(object sender, RoutedEventArgs e)
        {
            DatagramSocket datagramSocket = new DatagramSocket();
            datagramSocket.MessageReceived+=datagramSocket_MessageReceived2;
            await datagramSocket.ConnectAsync(new HostName("localhost"), "22112");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson13\WalletDemo\WalletDemo\MainPage.xaml.cs
private async void Button_Click_1(object sender, RoutedEventArgs e)
        {
           await  Launcher.LaunchUriAsync(new Uri("wallet://", UriKind.RelativeOrAbsolute));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson14\StartMapLineDemo\StartMapLineDemo\MainPage.xaml.cs
private async void Button_Click_1(object sender, RoutedEventArgs e)
        {
            var success = await Windows.System.Launcher.LaunchUriAsync(new Uri("ms-drive-to:?destination.latitude=47.6451413797194&destination.longitude=-122.141964733601&destination.name=Redmond, WA"));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson16\LauncherDemo\LauncherDemo\MainPage.xaml.cs
private async void Button_Click_1(object sender, RoutedEventArgs e)
        {
            await Windows.System.Launcher.LaunchUriAsync(new Uri("testdemo:[test]"));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson16\LauncherDemo\LauncherDemo\MainPage.xaml.cs
private async void Button_Click_3(object sender, RoutedEventArgs e)
        {
            //????
            await Windows.System.Launcher.LaunchUriAsync(new Uri("http://www.baidu.com")); 

            //?????????? 
            //Windows.System.Launcher.LaunchUriAsync(new Uri("mailto:username@163.com")); 

            //???? 
            //Windows.System.Launcher.LaunchUriAsync(new Uri("tel:10000000000")); 

            //??Wi-Fi ?? 
            //Windows.System.Launcher.LaunchUriAsync(new Uri("ms-settings-wifi:")); 
            //ms-settings-accounts:        ????????? 
            //ms-settings-airplanemode:    ??????????? 
            //ms-settings-bluetooth:       ????????? 
            //ms-settings-cellular:        ??????????? 
            //ms-settings-emailandaccounts: ?????????????? 
            //ms-settings-location:        ????????? 
            //ms-settings-lock:            ????????? 
            //ms-settings-wifi:            ?? Wi-Fi ????? 

            //?? Windows Phone ?? ??????????????? 
            //Windows.System.Launcher.LaunchUriAsync(new Uri("zune:navigate?appid=fdf05477-814e-41d4-86cd-25d5a50ab2d8"));   
            //?? ?? ????????????? 
            //Windows.System.Launcher.LaunchUriAsync(new Uri("zune:reviewapp")); 
            //?? ?? ???????????? 
            //Windows.System.Launcher.LaunchUriAsync(new Uri("zune:reviewapp?appid=appfdf05477-814e-41d4-86cd-25d5a50ab2d8")); 
            //?? ?? ??? 
            //Windows.System.Launcher.LaunchUriAsync(new Uri("zune:search?keyword=???&publisher=?????&contenttype=app")); 
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson18\ContactDemo\ContactDemo\MainPage.xaml.cs
private async void Button_Click_1(object sender, RoutedEventArgs e)
        {
            WindowsPhoneRuntimeComponent windowsPhoneRuntimeComponent = new WindowsPhoneRuntimeComponent();
            await windowsPhoneRuntimeComponent.AddContactAsync("test");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson18\WinRTDemo\WinRTDemo\MainPage.xaml.cs
private async void Button_Click_3(object sender, RoutedEventArgs e)
        {
            try
            {
                cancellationTokenSource = new CancellationTokenSource();
                //int sum = await windowsPhoneRuntimeComponent.AddWithProgressAsync(1, 10).AsTask(myProgress);
                  int sum = await windowsPhoneRuntimeComponent.AddWithProgressAsync(1, 10).AsTask(cancellationTokenSource.Token,myProgress);
                Debug.WriteLine("??:" + sum);
            }
            catch (TaskCanceledException)
            {
                Debug.WriteLine("??????");
            }
            catch (Exception)
            {

            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson8\LockScreenDemo\LockScreenDemo\MainPage.xaml.cs
private async void Button_Click_3(object sender, RoutedEventArgs e)
        {
             await Windows.System.Launcher.LaunchUriAsync(new Uri("ms-settings-lock:"));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson9\FileAssociationTestDemo\FileAssociationTestDemo\MainPage.xaml.cs
private async void OnCreateFileButtonClicked(object sender, RoutedEventArgs e)
        {

            await WriteToFile("11111111", "rss.log");

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson9\FileAssociationTestDemo\FileAssociationTestDemo\MainPage.xaml.cs
public async Task WriteToFile(string contents, string fileName, StorageFolder folder = null)
        {
            folder = folder ?? ApplicationData.Current.LocalFolder;
            var file = await folder.CreateFileAsync(
                fileName,
                CreationCollisionOption.ReplaceExisting);
            using (var fs = await file.OpenAsync(FileAccessMode.ReadWrite))
            {
                using (var outStream = fs.GetOutputStreamAt(0))
                {
                    using (var dataWriter = new DataWriter(outStream))
                    {
                        if (contents != null)
                            dataWriter.WriteString(contents);

                        await dataWriter.StoreAsync();
                        dataWriter.DetachStream();
                    }

                    await outStream.FlushAsync();
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson9\FileAssociationTestDemo\FileAssociationTestDemo\MainPage.xaml.cs
private async void OnOpenFileButtonClicked(object sender, RoutedEventArgs e)
        {
            StorageFile file = await ApplicationData.Current.LocalFolder.GetFileAsync("rss.log");
            Windows.System.Launcher.LaunchFileAsync(file);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson9\FileDemo\FileDemo\MainPage.xaml.cs
private async void Button_Click_4(object sender, RoutedEventArgs e)
        {
           await  WriteFile("text.txt", "hello Windows Phone 8");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson9\FileDemo\FileDemo\MainPage.xaml.cs
public async Task WriteFile(string fileName, string text)
        {
            StorageFolder storageFolder = ApplicationData.Current.LocalFolder;
            StorageFile storageFile = await storageFolder.CreateFileAsync(fileName, CreationCollisionOption.ReplaceExisting);
            using (Stream steam = await storageFile.OpenStreamForWriteAsync())
            {
                byte[] content = Encoding.UTF8.GetBytes(text);
                await steam.WriteAsync(content, 0, content.Length);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\linzhengcode+WindowsPhone8\linzhengcode-WindowsPhone8-28eb9d9\Soure\Lesson9\FileDemo\FileDemo\MainPage.xaml.cs
public async Task<string> ReadFile(string fileName)
        {
            StorageFile storageFile = await StorageFile.GetFileFromApplicationUriAsync
                (new Uri("ms-appdata:///local/" + fileName));
            IRandomAccessStream randomAccessStream = await storageFile.OpenReadAsync();
            Stream stream = randomAccessStream.AsStreamForRead();
            byte[] content = new byte[stream.Length];
            await stream.ReadAsync(content, 0, (int)stream.Length);
            return Encoding.UTF8.GetString(content, 0, content.Length);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\lockscreen\Coding4Fun.Lockscreen.Core\Storage\LocalStorageHelper.cs
public async static Task<bool> WriteData(string folderName, string fileName, byte[] content)
        {
            try
            {
                IStorageFolder rootFolder = ApplicationData.Current.LocalFolder;

                if (folderName != string.Empty)
                {
                    rootFolder = await rootFolder.CreateFolderAsync(folderName,
                        CreationCollisionOption.OpenIfExists);
                }

                IStorageFile file = await rootFolder.CreateFileAsync(fileName, CreationCollisionOption.ReplaceExisting);
                using (var s = await file.OpenStreamForWriteAsync())
                {
                    s.Write(content, 0, content.Length);
                }

                return true;
            }
            catch
            {
                return false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\lockscreen\Coding4Fun.Lockscreen.Core\Storage\LocalStorageHelper.cs
public static async Task<bool> ClearFolder(string folderName)
        {
            try
            {
                StorageFolder folder = await ApplicationData.Current.LocalFolder.CreateFolderAsync(folderName, CreationCollisionOption.ReplaceExisting);
                return true;
            }
            catch
            {
                return false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\lockscreen\Coding4Fun.Lockscreen.Core\Storage\LocalStorageHelper.cs
public static async Task<string> ReadData(string fileName)
        {
            byte[] data;

            StorageFolder folder = ApplicationData.Current.LocalFolder;

            StorageFile file = await folder.GetFileAsync(fileName);

            using (Stream s = await file.OpenStreamForReadAsync())
            {
                data = new byte[s.Length];
                await s.ReadAsync(data, 0, (int)s.Length);
            }

            return Encoding.UTF8.GetString(data, 0, data.Length);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\lockscreen\Coding4Fun.Lockscreen.Mobile\Data\DataEngine.cs
async public Task<List<Category>> GetCategoryList()
        {
            IMobileServiceTable<Category> table = App.MobileService.GetTable<Category>();
            List<Category> data = await table.ToListAsync();

            return data;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\lockscreen\Coding4Fun.Lockscreen.Mobile\Data\DataEngine.cs
async public Task<List<Image>> GetImagesByCategoryId(int categoryId)
        {
            IMobileServiceTable<Image> table = App.MobileService.GetTable<Image>();
            List<Image> data = await table.Where(x => x.CategoryID == categoryId).ToListAsync();

            return data;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\lockscreen\Coding4Fun.Lockscreen.Mobile\ImageSetPage.xaml.cs
private async void btnSetStack_Click_1(object sender, EventArgs e)
        {
            var isProvider = Windows.Phone.System.UserProfile.LockScreenManager.IsProvidedByCurrentApplication;
            if (!isProvider)
            {
                var op = await Windows.Phone.System.UserProfile.LockScreenManager.RequestAccessAsync();
                isProvider = op == Windows.Phone.System.UserProfile.LockScreenRequestResult.Granted;
            }

            if (isProvider)
            {
                downloadableItems = new List<string>();
                fileItems = new List<string>();

                foreach (var image in CentralBindingPoint.Instance.CurrentCategory.Images)
                {
                    if (Uri.IsWellFormedUriString(image.URL, UriKind.Absolute))
                    {
                        downloadableItems.Add(image.URL);
                    }
                }

                await LocalStorageHelper.ClearFolder("CurrentSet");

                try
                {
                    DownloadImages();

                    grdDownloading.Visibility = System.Windows.Visibility.Visible;
                    this.ApplicationBar.IsVisible = false;
                }
                catch
                {
                    MessageBox.Show("There seems to be a problem getting the wallpapers. Please try again later.",
                      "Download Wallpaper Sets", MessageBoxButton.OK);

                    grdDownloading.Visibility = System.Windows.Visibility.Collapsed;
                    this.ApplicationBar.IsVisible = true;
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\lockscreen\Coding4Fun.Lockscreen.Mobile\MainPage.xaml.cs
async void RefreshSetList()
        {
            grdLoading.Visibility = System.Windows.Visibility.Visible;
            ApplicationBar.IsVisible = false;

            try
            {
                CentralBindingPoint.Instance.Categories = new ObservableCollection<Category>(await dataEngine.GetCategoryList());

                grdLoading.Visibility = System.Windows.Visibility.Collapsed;
                ApplicationBar.IsVisible = true;
            }
            catch
            {
                MessageBox.Show("There seems to be a problem getting the set list. Please try again later.",
                    "Download Wallpaper Sets", MessageBoxButton.OK);

                grdLoading.Visibility = System.Windows.Visibility.Collapsed;
                ApplicationBar.IsVisible = true;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\lockscreen\Coding4Fun.Lockscreen.Mobile\MainPage.xaml.cs
async void ListBox_SelectionChanged_1(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
        {
            if (lstWebCategories.SelectedItem != null)
            {
                Category selectedCategory = (Category)lstWebCategories.SelectedItem;

                try
                {
                    selectedCategory.Images = new ObservableCollection<Coding4Fun.Lockscreen.Core.Models.Image>
                        (await dataEngine.GetImagesByCategoryId((int)selectedCategory.id));

                    CentralBindingPoint.Instance.CurrentCategory = selectedCategory;


                    NavigationService.Navigate(new Uri("/ImageSetPage.xaml", UriKind.Relative));
                }
                catch
                {
                    MessageBox.Show("There seems to be a problem opening the category. Try again later.",
                                           "Open Category",
                                           MessageBoxButton.OK);
                }

                lstWebCategories.SelectedItem = null;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\lucaswerkmeister+wp_geohashing\lucaswerkmeister-wp_geohashing-30abc4c\App\MainPage.xaml.cs
public async Task LoadGeohash(GeoCoordinate position, DateTime date)
        {
            try
            {
                geohash = await Geohash.Get(position, date, threadSafeSettings.HashMode);

                focus();
            }
            catch (NoDjiaException e)
            {
                geohash = null;
                throw e;
            }
            finally
            {
                redrawGeohashPin();
                redrawGraticuleOutline();
                updateInfoLayer();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\lucaswerkmeister+wp_geohashing\lucaswerkmeister-wp_geohashing-30abc4c\Base\Djia.cs
public static async Task<string> Get(DateTime date)
        {
            string key = settingPrefix + date.ToString("yyyy-MM-dd", CultureInfo.CurrentCulture);
            if (!settings.Contains(key))
            {
                IEnumerable<string> djiaKeys = (from string setting in settings.Keys
                                                where setting.StartsWith(settingPrefix)
                                                select setting);

                while (djiaKeys.Count() > appSettings.DjiaBufferSize)
                {
                    // Delete the oldest value
                    List<string> dates = new List<string>();
                    foreach (string oldKey in djiaKeys)
                        dates.Add(oldKey.Substring(settingPrefix.Length));
                    dates.Sort();
                    settings.Remove(settingPrefix + dates[0]);
                }
                string djia = await Load(date);
                if (appSettings.DjiaBufferSize == 0)
                    return djia; // Don't save
                settings[key] = djia;
                settings.Save();
                return djia; // No point in wasting time in the lookup below when we already have the value
            }
            return (string)settings[key];
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\lucaswerkmeister+wp_geohashing\lucaswerkmeister-wp_geohashing-30abc4c\Base\Djia.cs
private static async Task<string> Load(DateTime date)
        {
            HttpWebResponse response = await HttpWebRequest.Create("http://geo.crox.net/djia/" + date.Year + "/" + date.Month + "/" + date.Day).GetResponseAsync();
            if (response == null)
                throw new NoDjiaException(NoDjiaException.NoDjiaCause.UnknownConnectionError);
            string content;
            using (StreamReader sr = new StreamReader(response.GetResponseStream()))
                content = await sr.ReadToEndAsync();
            if (response.StatusCode == HttpStatusCode.OK)
                return content;
            throw new NoDjiaException(content);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\lucaswerkmeister+wp_geohashing\lucaswerkmeister-wp_geohashing-30abc4c\Base\Geohash.cs
public static async Task<Geohash> Get()
        {
            return await Get(DateTime.Now);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\lucaswerkmeister+wp_geohashing\lucaswerkmeister-wp_geohashing-30abc4c\Base\Geohash.cs
public static async Task<Geohash> Get(GeoCoordinate position)
        {
            return await Get(position, DateTime.Now);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\lucaswerkmeister+wp_geohashing\lucaswerkmeister-wp_geohashing-30abc4c\Base\Geohash.cs
public static async Task<Geohash> Get(DateTime date)
        {
            Geolocator geolocator = new Geolocator();
            geolocator.DesiredAccuracyInMeters = 50;

            return await Get((await geolocator.GetGeopositionAsync()).Coordinate.Convert(), date);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\lucaswerkmeister+wp_geohashing\lucaswerkmeister-wp_geohashing-30abc4c\Base\Geohash.cs
public static async Task<Geohash> Get(GeoCoordinate position, DateTime date, GeohashMode geohashMode = GeohashMode.CurrentGraticule)
        {
            int[] deltas = geohashMode == GeohashMode.CurrentGraticule ? new[] { 0 } : new[] { -1, 0, 1 };

            GeoCoordinate nearestHash = position; // Will get overwritten anyways,
            double distance = Double.MaxValue;    // because of this
            foreach (int dx in deltas)
                foreach (int dy in deltas)
                {
                    GeoCoordinate newCoordinate = new GeoCoordinate(position.Latitude - dx, position.Longitude - dy);
                    string[] appendices = calculateAppendices(date, await Djia.Get(convertDate30W(date, newCoordinate)));
                    string latStr = (int)newCoordinate.Latitude + "." + appendices[0];
                    string lonStr = (int)newCoordinate.Longitude + "." + appendices[1];
                    double latitude = Convert.ToDouble(latStr, CultureInfo.InvariantCulture);
                    double longitude = Convert.ToDouble(lonStr, CultureInfo.InvariantCulture);
                    GeoCoordinate newHash = new GeoCoordinate(latitude, longitude);
                    double newDistance = position.GetDistanceTo(newHash);
                    if (newDistance < distance)
                    {
                        nearestHash = newHash;
                        distance = newDistance;
                    }
                }

            return new Geohash(date, nearestHash);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\madsum+SkyPhoto_WP8\madsum-SkyPhoto_WP8-4d11661\AlbumDetailPage.xaml.cs
private async void DownloadPictures(SkydriveAlbum albumItem)
        {
            LiveConnectClient folderListClient = new LiveConnectClient(App.Session);
            LiveOperationResult result = await folderListClient.GetAsync(albumItem.ID + "/files");
            FolderListClient_GetCompleted(result, albumItem);

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\madsum+SkyPhoto_WP8\madsum-SkyPhoto_WP8-4d11661\AlbumDetailPage.xaml.cs
private async void UploadPicture(PhotoResult e)
        {
            LiveConnectClient uploadClient = new LiveConnectClient(App.Session);
            if (e.OriginalFileName == null)
            {
                return;
            }

            // file name is the current datetime stapm
            string ext = e.OriginalFileName.Substring(e.OriginalFileName.LastIndexOf('.'));
            DateTime dt = DateTime.Now;
            string fileName = String.Format("{0:d_MM_yyy_HH_mm_ss}", dt);
            fileName = fileName + ext;
            
            string progMsgUpPic = SkyPhoto.Resources.Resources.progMsgUpPic;
            ShowProgressBar(progMsgUpPic);

            try
            {
               LiveOperationResult result = await uploadClient.UploadAsync(App.CurrentAlbum.ID, fileName, e.ChosenPhoto, OverwriteOption.Overwrite);
               ISFile_UploadCompleted(result);
            }
            catch (Exception)
            {
                string upFaild = SkyPhoto.Resources.Resources.upFaild;
                MessageBox.Show(upFaild);
                HideProgressBar();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\madsum+SkyPhoto_WP8\madsum-SkyPhoto_WP8-4d11661\AlbumDetailPage.xaml.cs
private async void MenuDelte_Click(object sender, RoutedEventArgs e)
        {
            var Menu = sender as MenuItem;
            SkydrivePhoto selectedFile = Menu.DataContext as SkydrivePhoto;

            string msgDelPic = SkyPhoto.Resources.Resources.msgDelPic;
            string msgDelPicTitel = SkyPhoto.Resources.Resources.msgDelPicTitle;
            MessageBoxResult m = MessageBox.Show(msgDelPic + selectedFile.Title + "?", msgDelPicTitel, MessageBoxButton.OKCancel);
            if (m == MessageBoxResult.OK)
            {
                LiveConnectClient client = new LiveConnectClient(App.Session);
                LiveOperationResult result = await client.DeleteAsync(selectedFile.ID);
                DeleteFile_Completed(selectedFile, result);

            }
            else
            {
                return;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\madsum+SkyPhoto_WP8\madsum-SkyPhoto_WP8-4d11661\AlbumPage.xaml.cs
private async void GetAlubmData()
        {
            ImageCounter = 0;
            // show progressbar.
            string progMsgDownAlbum = SkyPhoto.Resources.Resources.progMsgDownAlbum;
            ShowProgressBar(progMsgDownAlbum);
            LiveConnectClient clientFolder = new LiveConnectClient(App.Session);
            LiveOperationResult result = await clientFolder.GetAsync("/me/albums");
            GetAlubmData_Completed(result);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\madsum+SkyPhoto_WP8\madsum-SkyPhoto_WP8-4d11661\AlbumPage.xaml.cs
private async void GetAlbumPicture(SkydriveAlbum albumItem)
        {
            try
            {
                LiveConnectClient albumPictureClient = new LiveConnectClient(App.Session);

                LiveOperationResult result = await albumPictureClient.GetAsync(albumItem.ID + "/picture");
                albumPictureClient_GetCompleted(result, albumItem);
            }
            catch (LiveConnectException lce)
            {
                albumPictureClient_GetCompleted(null, albumItem);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\madsum+SkyPhoto_WP8\madsum-SkyPhoto_WP8-4d11661\AlbumPage.xaml.cs
private async void MenuDelte_Click(object sender, RoutedEventArgs e)
        {
            var Menu = sender as MenuItem;
            SkydriveAlbum selectedAlbum = Menu.DataContext as SkydriveAlbum;
            string msgDel = SkyPhoto.Resources.Resources.msgDelAlbum;
            string msgDelAlbumTitel = SkyPhoto.Resources.Resources.msgDelAlbumTitel;

            MessageBoxResult m = MessageBox.Show(msgDel + selectedAlbum.Title + "?", msgDelAlbumTitel, MessageBoxButton.OKCancel);
            if (m == MessageBoxResult.OK)
            {
                LiveConnectClient client = new LiveConnectClient(App.Session);
                LiveOperationResult result = await client.DeleteAsync(selectedAlbum.ID);
                DeleteFolder_Completed(selectedAlbum, result);

            }
            else
            {
                return;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\madsum+SkyPhoto_WP8\madsum-SkyPhoto_WP8-4d11661\AlbumPage.xaml.cs
private async void Create_new_album()
        {
            Dictionary<string, object> folderData = new Dictionary<string, object>();
            folderData.Add("name", NewAlbumName);
            folderData.Add("type", "album");
            LiveConnectClient client = new LiveConnectClient(App.Session);
            LiveOperationResult result = await client.PostAsync("me/skydrive", folderData);
            CreateFolder_Completed(result);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\madsum+SkyPhoto_WP8\madsum-SkyPhoto_WP8-4d11661\MainPage.xaml.cs
private async void btnSignin_SessionChanged(object sender, LiveConnectSessionChangedEventArgs e)
        {
            if (e.Session != null && e.Status == LiveConnectSessionStatus.Connected)
            {
                App.Session = e.Session;
                client = new LiveConnectClient(e.Session);
                LiveOperationResult result =  await client.GetAsync("me");
                OnGetCompleted(result);
            }
            else
            {
                // remove all live profile informaion.
                client = null;
                App.Session = null;
                gotoAlbum.Visibility = Visibility.Collapsed;
                ProfileName.Text = "";
                ProfilePic.Source = null;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\madsum+SkyPhoto_WP8\madsum-SkyPhoto_WP8-4d11661\MainPage.xaml.cs
private async void GetProfilePicture()
        {
           LiveConnectClient clientGetPicture = new LiveConnectClient(App.Session);
           LiveOperationResult result = await clientGetPicture.GetAsync("me/picture");
           GetPicture_GetCompleted(result);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\matthidinger+Build2013RealWorldStocks\matthidinger-Build2013RealWorldStocks-ecad50b\RealWorldStocks.UI.Phone\Platform\LocalStorage.cs
public async Task<string> ReadAsync(string fileName)
        {
            var folder = ApplicationData.Current.LocalFolder;
            var file = await folder.CreateFileAsync(fileName, CreationCollisionOption.OpenIfExists);

            using (var stream = await file.OpenReadAsync())
            using (var textReader = new DataReader(stream))
            {
                var textLength = (uint) stream.Size;
                await textReader.LoadAsync(textLength);
                return textReader.ReadString(textLength);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\matthidinger+Build2013RealWorldStocks\matthidinger-Build2013RealWorldStocks-ecad50b\RealWorldStocks.UI.Phone\Platform\LocalStorage.cs
public async Task SaveAsync(string fileName, string content)
        {
            var folder = ApplicationData.Current.LocalFolder;
            var file = await folder.CreateFileAsync(fileName, CreationCollisionOption.ReplaceExisting);

            using (var stream = await file.OpenReadAsync())
            using (var writer = new DataWriter(stream))
            {
                writer.WriteString(content);
                await writer.StoreAsync();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\matthidinger+Build2013RealWorldStocks\matthidinger-Build2013RealWorldStocks-ecad50b\RealWorldStocks.UI.Phone\Platform\LocalStorage.cs
public async Task DeleteAsync(string fileName)
        {
            try
            {
                var file = await ApplicationData.Current.LocalFolder.GetFileAsync(fileName);
                await file.DeleteAsync();
            }
            catch (FileNotFoundException)
            {
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\matthidinger+Build2013RealWorldStocks\matthidinger-Build2013RealWorldStocks-ecad50b\RealWorldStocks.UI.Phone\Views\HomeView.xaml.cs
protected override async void OnNavigatedTo(NavigationEventArgs e)
        {
            base.OnNavigatedTo(e);
            await ViewModel.LoadAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\matthidinger+Build2013RealWorldStocks\matthidinger-Build2013RealWorldStocks-ecad50b\RealWorldStocks.UI.Phone\ViewModels\HomeViewModel.cs
public override async Task LoadAsync()
        {
            if (IsBusy)
                return;

            IsBusy = true;
            await WatchList.InitializeAsync();

            WatchListItems.Repopulate(await WatchList.Current.RefreshSnapshotsAsync());
            News.Repopulate(await WatchList.Current.RefreshNewsAsync());
            IsBusy = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\matthidinger+Build2013RealWorldStocks\matthidinger-Build2013RealWorldStocks-ecad50b\RealWorldStocks.UI.Phone\Views\StockDetailsView.xaml.cs
protected override async void OnNavigatedTo(NavigationEventArgs e)
        {
            base.OnNavigatedTo(e);
            var symbol = NavigationContext.QueryString["symbol"];
            if (symbol != null)
            {
                await ViewModel.LoadAsync(symbol);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\meteofvg\OsmerFvg\OsmerFvg\ViewModels\MainPageViewModel.cs
private async void ReadForecast(Pages page)
        {
            IsNotReading = false;
            var synth = new SpeechSynthesizer();
            switch (page)
            {
                case Pages.Today:
                    await synth.SpeakTextAsync(TodayForecast);
                    break;
                case Pages.Tomorrow:
                    await synth.SpeakTextAsync(TomorrowForecast);
                    break;
                case Pages.TomorrowAfter:
                    await synth.SpeakTextAsync(TomorrowAfterForecast);
                    break;
            }
            IsNotReading = true;

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\metroeeg\Trunk\JustinAngel.MindwaveSensor.WP8\JustinAngel.MindwaveSensor.WP8\Mindwave.cs
public async void Start()
        {
            if (IsConnected)
            {
                throw new ApplicationException("Cannot Start a sensor once it's also started.");
            }
            State = MindwaveServiceState.Connecting;

            try
            {

                PeerFinder.AlternateIdentities["Bluetooth:Paired"] = "";

                var peers = await PeerFinder.FindAllPeersAsync();

                if (!peers.Any(p => p.DisplayName.Contains("MindWave")))
                {
                    State = MindwaveServiceState.FailedConnection;
                }
                else
                {
                    PeerInformation = peers.First(p => p.DisplayName.Contains("MindWave"));

                    Socket = new StreamSocket();
                    await Socket.ConnectAsync(PeerInformation.HostName, "1");

                    State = MindwaveServiceState.ConnectedWithNoDataYet;

                    try
                    {
                        InitalizeListeningToSocket();
                    }
                    catch
                    {
                        State = MindwaveServiceState.FailedDuringExecution;
                    }
                }
            }
            catch
            {
                State = MindwaveServiceState.FailedConnection;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\metroeeg\Trunk\JustinAngel.MindwaveSensor.WP8\JustinAngel.MindwaveSensor.WP8\Mindwave.cs
private async void InitalizeListeningToSocket()
        {
            while (IsConnected)
            {
                var resultArray = await GetNextBuffer();
                //Debug.WriteLine(string.Join(",", resultArray.Select(b => b.ToString())));

                int? indexOfUsefulDataHeader = GetUsefulDataHeaderIndex(resultArray);
                if (indexOfUsefulDataHeader.HasValue == false)
                {
                    // ignore data and just dump it
                }
                else
                {
                    // Check if enough data exists to finalize this useful data packet, if not, get another
                    if (indexOfUsefulDataHeader.Value + LengthOfUsefulPacket > resultArray.Length)
                    {
                        var nextResultsArray = await GetNextBuffer();
                        resultArray = resultArray.Concat(nextResultsArray).ToArray();
                    }

                    var usefulDataPacket =
                        resultArray
                            .Skip(indexOfUsefulDataHeader.Value)
                            .Take(LengthOfUsefulPacket + 4)
                            .ToArray();
                    //Print(string.Join(",", usefulDataPacket.Select(b => b.ToString())));

                    // based on http://wearcam.org/ece516/mindset_communications_protocol.pdf
                    var data = new MindwaveReading(
                        usefulDataPacket[4],
                        IntHelper.GetUnsignedInt24ValueFrom3Bytes(usefulDataPacket, 7),
                        IntHelper.GetUnsignedInt24ValueFrom3Bytes(usefulDataPacket, 10),
                        IntHelper.GetUnsignedInt24ValueFrom3Bytes(usefulDataPacket, 13),
                        IntHelper.GetUnsignedInt24ValueFrom3Bytes(usefulDataPacket, 16),
                        IntHelper.GetUnsignedInt24ValueFrom3Bytes(usefulDataPacket, 19),
                        IntHelper.GetUnsignedInt24ValueFrom3Bytes(usefulDataPacket, 22),
                        IntHelper.GetUnsignedInt24ValueFrom3Bytes(usefulDataPacket, 25),
                        IntHelper.GetUnsignedInt24ValueFrom3Bytes(usefulDataPacket, 28),
                        usefulDataPacket[32],
                        usefulDataPacket[34],
                        DateTime.Now);
                    //Print(data.ToString());
                    HandleNewMindwaveReading(data);
                }
            }

            if (!IsConnected)
            {
                Socket.Dispose();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\metroeeg\Trunk\JustinAngel.MindwaveSensor.WP8\JustinAngel.MindwaveSensor.WP8\Mindwave.cs
private async Task<byte[]> GetNextBuffer(uint length = 512)
        {
            var buffer = await Socket.InputStream.ReadAsync(new Windows.Storage.Streams.Buffer(length), length,
                                                            InputStreamOptions.None);

            var resultArray = buffer.GetBytesFromBuffer();
            return resultArray;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\metroeeg\Trunk\JustinAngel.MindwaveSensor.WP8\JustinAngel.MindwaveSensor.WP8.TestApp\Standalone.xaml.cs
private async Task<byte[]> GetNextBuffer(uint length = 512)
        {
            var buffer = await socket.InputStream.ReadAsync(new Windows.Storage.Streams.Buffer(length), length,
                                                            InputStreamOptions.None);

            var resultArray = GetBytesFromBuffer(buffer);
            return resultArray;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\micinemard\Caribbean Cinemas\CaribbeanCinemas.WindowsPhone.RD\MainPage.xaml.cs
public async void StartLoadingData()
        {
            await TaskEx.Delay(500);
            Utils.UpdateMessage("Cargando M󤵬os");
            await Task.Factory.StartNew(DisponibilidadRed());

            await TaskEx.Delay(1500);

            Utils.UpdateMessage("Conectando con la base de datos");
            await Task.Factory.StartNew(ModuleLoad());
            await TaskEx.Delay(1500);

            Utils.UpdateMessage("Creando el perfil del usuario");
            await TaskEx.Delay(1500);

            Utils.HidePopup();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\micinemard\Caribbean Cinemas\CaribbeanCinemas.WindowsPhone.RD\MainPage.xaml.cs
public async void GetCarteles()
        {
            if (Carteles.Count == 0)
            {
                //Traer listado de Carteles disponibles
                client.FindCartelesCompleted += (s, a) =>
                {
                    //Si no hay errores ni la operacion haya sido cancelada
                    //Se procede a extraer los datos
                    if (a.Error != null || a.Cancelled) return;
                    var doc = XDocument.Parse(a.Result);
                    var data =
                        from cueri in doc.Descendants("Datos").Elements("Tabla")
                        select new beCartel
                        {
                            Nombre = (string)cueri.Element("Nombre"),
                            Region = (int)cueri.Element("Region"),
                            Pais = (int)cueri.Element("Pais"),
                            Descripcion = (string)cueri.Element("Descripcion"),
                            URL = (string)cueri.Element("Url"),
                            Direccion = (string)cueri.Element("Direccion"),
                            Telefono = (string)cueri.Element("Telefono"),
                            Precio = (string)cueri.Element("Precio"),
                            Foto = (string)cueri.Element("Foto"),
                            Latitud = (double)cueri.Element("Latitud"),
                            Longitud = (double)cueri.Element("Longitud")
                        };

                    DB.Carteles.InsertAllOnSubmit(data);
                    DB.SubmitChanges();

                    Carteles = new ObservableCollection<beCartel>(DB.Carteles);

                };

                //Cargar los carteles de la Rep򢬩ca Dominicana
                client.FindCartelesAsync(1);
            }

            do
            {
                await TaskEx.Delay(200);
            } while (lpCartelera.Items.Count == 0);

            if (!_isolated.Contains("tbCartelera"))
            {
                _isolated.Add("tbCartelera", (lpCartelera.Items[0] as beCartel).Nombre);
                _isolated.Save();
            }
            else
            {
                var x = 0;
                foreach (beCartel item in lpCartelera.Items)
                {
                    x++;
                    if (item.Nombre != _isolated["tbCartelera"].ToString()) continue;
                    lpCartelera.SelectedIndex = x;
                    break;
                }
            }

            GetCarteleras();
            lpCartelera.SelectionChanged += lpCartelera_SelectionChanged;

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mikkoviitala+battlelogmobile\mikkoviitala-battlelogmobile-fc0a9ec\BattlelogMobile.Core\Service\DownloadService.cs
public async Task RetrieveServerMessage(string url)
        {
            var request = WebRequest.Create(new Uri(url)) as HttpWebRequest;
            if (request == null)
                throw new ArgumentNullException();

            request.Method = Common.HttpGetMethod;
            request.Accept = Common.HttpAccept;
            request.UserAgent = Common.HttpUserAgent;
            request.CookieContainer = CookieJar;

            var task = request.GetResponseAsync();

            try
            {
                var response = (HttpWebResponse) await task.ConfigureAwait(false);
                var responseStream = response.GetResponseStream();
                var reader = new StreamReader(responseStream);
                string message = reader.ReadToEnd();
                response.Close();
                if (message.Length > 0)
                    Messenger.Default.Send(new DialogMessage(this, null, message, null));
            }
            catch (WebException we)
            {
                // Omitted
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mikkoviitala+battlelogmobile\mikkoviitala-battlelogmobile-fc0a9ec\BattlelogMobile.Core\Service\DownloadService.cs
public async void ResolveUserIdAndPlatform(string url, IUserIdAndPlatformResolver userIdAndPlatformResolver)
        {
            var request = WebRequest.Create(new Uri(url)) as HttpWebRequest;
            if (request == null)
                throw new ArgumentNullException();

            request.Method = Common.HttpGetMethod;
            request.Accept = Common.HttpAccept;
            request.UserAgent = Common.HttpUserAgent;
            request.CookieContainer = CookieJar;

            var task = request.GetResponseAsync();

            try
            {
                var response = (HttpWebResponse) await task.ConfigureAwait(false);
                var responseStream = response.GetResponseStream();
                userIdAndPlatformResolver.Resolve(responseStream);
                response.Close();
            }
            catch (WebException we)
            {
                Messenger.Default.Send(new BattlelogResponseMessage(we.Message, false));
            }

            //var client = new SharpGIS.GZipWebClient();
            //client.OpenReadCompleted += (s, e) =>
            //    {
            //        try
            //        {
            //            Stream stream = e.Result;
            //            userIdAndPlatformUserIdAndPlatformResolver.Resolve(stream);
            //            stream.Close();
            //        }
            //        catch (WebException we)
            //        {
            //            Messenger.Default.Send(new BattlelogResponseMessage(we.Message, false));
            //        }
            //    };
            //client.OpenReadAsync(new Uri(url), client);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mobileacs\Components\xamarin.mobile-0.6.3\samples\Xamarin.Mobile.WP.Samples\ContactsSample\MainPageViewModel.cs
private async Task Setup()
        {
            if (!await this.addressBook.RequestPermission())
                this.addressBook = null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mobileacs\Components\xamarin.mobile-0.6.3\samples\Xamarin.Mobile.WP.Samples\GeolocationSample\MainPageViewModel.cs
private async void GetPositionHandler (object state)
        {
            ShowProgress = true;
            Status = "Getting location..";

            if (!this.geolocator.IsGeolocationEnabled)
            {
                Status = "Location disabled";
                return;
            }

            try
            {
                Position p = await this.geolocator.GetPositionAsync (10000, includeHeading: true);
                CurrentPosition = p;
                Status = "Success";
            }
            catch (GeolocationException ex)
            {
                Status = "Error: (" + ex.Error + ") " + ex.Message;
            }
            catch (TaskCanceledException cex)
            {
                Status = "Canceled";
            }

            ShowProgress = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mobileacs\Components\xamarin.mobile-0.6.3\samples\Xamarin.Mobile.WP8.Samples\ContactsSample\MainPageViewModel.cs
private async Task Setup()
        {
            if (!await this.addressBook.RequestPermission())
                this.addressBook = null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mobileacs\Components\xamarin.mobile-0.6.3\samples\Xamarin.Mobile.WP8.Samples\GeolocationSample\MainPageViewModel.cs
private async void GetPositionHandler (object state)
        {
            ShowProgress = true;
            Status = "Getting location..";

            if (!this.geolocator.IsGeolocationEnabled)
            {
                Status = "Location disabled";
                return;
            }

            try
            {
                Position p = await this.geolocator.GetPositionAsync (10000, includeHeading: true);
                CurrentPosition = p;
                Status = "Success";
            }
            catch (GeolocationException ex)
            {
                Status = "Error: (" + ex.Error + ") " + ex.Message;
            }
            catch (TaskCanceledException cex)
            {
                Status = "Canceled";
            }

            ShowProgress = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mrlacey+wp8demos\mrlacey-wp8demos-2f4604c\demos\LockScreen\LockScreenMainPage.xaml.cs
private async void LockSettingsClicked(object sender, RoutedEventArgs e)
        {
            await Windows.System.Launcher.LaunchUriAsync(new Uri("ms-settings-lock:"));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mrlacey+wp8demos\mrlacey-wp8demos-2f4604c\demos\launchingSource\LsMainPage.xaml.cs
private async void CreateAndOpenFileClicked(object sender, RoutedEventArgs e)
        {
            using (var fileStorage = IsolatedStorageFile.GetUserStoreForApplication())
            {
                using (var writer = new StreamWriter(new IsolatedStorageFileStream("test.matt", FileMode.Create, fileStorage)))
                {
                    writer.WriteLine("hello file contents");
                    writer.Close();
                }
            }

            var local = ApplicationData.Current.LocalFolder;

            var file = await local.GetFileAsync("test.matt");

            Launcher.LaunchFileAsync(file);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mrlacey+wp8demos\mrlacey-wp8demos-2f4604c\demos\Speech\SpeechMainPage.xaml.cs
private async void SpeakClicked(object sender, RoutedEventArgs e)
        {
            var message = "all these years of talking to your phone and only now it starts speaking back...";

            // set a male voice (default is female)
            speechOutput.SetVoice(InstalledVoices.All.FirstOrDefault(v => v.Gender == VoiceGender.Male));

            await speechOutput.SpeakTextAsync(message);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\Shared\Multimedia\YouTube.cs
public static async Task<string> GetVideoTitleAsync(string youTubeId) // should be improved
        {
            var response = await Http.GetAsync("http://www.youtube.com/watch?v=" + youTubeId + "&nomobile=1");
            if (response != null)
            {
                var html = response.Response;
                var startIndex = html.IndexOf(" title=\"");
                if (startIndex != -1)
                {
                    startIndex = html.IndexOf(" title=\"", startIndex + 1);
                    if (startIndex != -1)
                    {
                        startIndex += 8;
                        var endIndex = html.IndexOf("\">", startIndex);
                        if (endIndex != -1)
                            return html.Substring(startIndex, endIndex - startIndex);
                    }
                }
            }
            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\UI\Popups\MultiButtonPopup.xaml.cs
public static async Task<int> ShowAsync(string[] buttons)
        {
            var popup = new MultiButtonPopup(buttons);
            await ShowAsync(popup, true, false);
            return popup.SelectedButton;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\Shared\Caching\DataManagerBase.cs
public async Task<T> GetItemAsync<T>(int id, string[] included, bool reload)
        {
            return (T)await GetItemAsync(GetBaseType(typeof(T)).Name, id, included, reload);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\Shared\Caching\DataManagerBase.cs
private async Task<ICacheable> GetItemAsync(string type, int id, string[] included, bool reload)
        {
            var item = GetItem(type, id);
            if (item != null && !reload)
                return item;

            if (loadingItems.Any(t => t.Item1 == type && t.Item2 == id))
            {
                await WaitUntilCompleted(type, id, null);
                return GetItem(type, id);
            }

            var tuple = new Tuple<string, int>(type, id);
            loadingItems.Add(tuple);
            try
            {
                var result = await GetItemAsync(type, id, included ?? new string[] { });
                if (result != null)
                    return AddItem((ICacheable)result);
            }
            catch (Exception ex)
            {
                CompleteWaitingWithException(type, 0, null, ex);
            }
            finally
            {
                CompleteWaiting(type, 0, null);
                loadingItems.Remove(tuple);
            }
            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\Shared\Caching\DataManagerBase.cs
public async Task<IEnumerable<T>> GetAllItemsAsync<T>(string[] included, bool reload)
        {
            return (await GetAllItemsAsync(GetBaseType(typeof(T)).Name, included, reload))
                .OfType<T>().ToList();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\Shared\Caching\DataManagerBase.cs
private async Task<IEnumerable<ICacheable>> GetAllItemsAsync(string type, string[] included, bool reload)
        {
            if (!reload && fullLoadedTypes.Contains(type))
                return list[type].Select(p => p.Value).ToList();

            if (fullLoadingTypes.Contains(type)) // already loading
            {
                await WaitUntilCompleted(type, 0, null);
                return list[type].Select(p => p.Value).ToList();
            }

            fullLoadingTypes.Add(type);
            try
            {
                var items = (await GetAllItemsAsync(type, included)).OfType<ICacheable>();
                fullLoadedTypes.Add(type);

                if (list.ContainsKey(type)) // remove deleted entities from cache
                {
                    var toRemove = list[type].Where(p => items.All(i => i.Id != p.Value.Id)).ToList();
                    foreach (var r in toRemove)
                        list[type].Remove(r.Key);
                }
                return AddItems(items);
            }
            catch (Exception ex)
            {
                CompleteWaitingWithException(type, 0, null, ex);
            }
            finally
            {
                CompleteWaiting(type, 0, null);
                fullLoadingTypes.Remove(type);
            }
            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\Shared\Caching\DataManagerBase.cs
public async Task LoadPropertyForItemAsync<T, TProperty>(T item, string propertyName, string[] included, bool reload)
            where T : ICacheable
            where TProperty : ICacheable
        {
            var info = item.GetType().GetTypeInfo();
            var baseType = GetBaseType(typeof(T));
            var itemType = baseType.Name;

            var property = info.GetProperty(propertyName); 
            var isCollectionProperty = typeof(IList).GetTypeInfo().IsAssignableFrom(property.PropertyType.GetTypeInfo());

            // check loaded
            int? foreignId = 0; 
            if (!reload)
            {
                var currentValue = property.GetValue(item, null);
                if (isCollectionProperty)
                {
                    if (currentValue != null)
                        return;
                }
                else
                {
                    var idProperty = info.GetProperty(propertyName + "Id");
                    if (idProperty.PropertyType == typeof(int?))
                    {
                        foreignId = (int?)idProperty.GetValue(item, null);

                        // sync navigation proprety with foreign id
                        if (!foreignId.HasValue) 
                        {
                            if (currentValue != null)
                                property.SetValue(item, null, null);
                            return; 
                        }
                        else
                        {
                            if (currentValue != null && ((ICacheable) currentValue).Id == foreignId.Value)
                                return;
                            property.SetValue(item, null, null);
                        }
                    }
                    else
                    {
                        var id = (int)idProperty.GetValue(item, null);
                        if (currentValue != null && ((ICacheable)currentValue).Id == id)
                            return;
                    }
                }
            }

            // check IsLoading (already loading)
            var loadingProperty = info.GetProperty("Is" + propertyName + "Loading"); 
            if (loadingProperty != null)
            {
                var isLoading = (bool)loadingProperty.GetValue(item, null);
                if (isLoading)
                {
                    await WaitUntilCompleted(itemType, item.Id, propertyName);
                    return;
                }
            }
            else
                Debug.WriteLine("DataManagerBase - Warning: No 'Is" + propertyName + "Loading' property found on '" + info.Name + "'");

            // set IsLoading = true
            if (loadingProperty != null)
                loadingProperty.SetValue(item, true, null);

            // call web service
            try
            {
                if (isCollectionProperty)
                {
                    var result = await GetCollectionPropertyForItemAsync(baseType.Name, item.Id, propertyName, included ?? new string[] { });
                    if (result != null)
                    {
                        var items = AddItems(result).OfType<TProperty>();
                        property.SetValue(item, new ObservableCollection<TProperty>(items), null);
                    }
                }
                else
                {
                    var result = await GetItemAsync(GetBaseType(property.PropertyType).Name, foreignId.Value, included ?? new string[] { });
                    if (result != null)
                        property.SetValue(item, AddItem((TProperty)result), null);
                }
            }
            catch (Exception ex)
            {
                CompleteWaitingWithException(itemType, item.Id, propertyName, ex);
            }
            finally
            {
                CompleteWaiting(itemType, item.Id, propertyName);
                if (loadingProperty != null)
                    loadingProperty.SetValue(item, false, null);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\Shared\Multimedia\YouTube.cs
public static async Task<string> GetVideoTitleAsync(string youTubeId) // should be improved
        {
            var response = await Http.GetAsync("http://www.youtube.com/watch?v=" + youTubeId + "&nomobile=1");
            if (response != null)
            {
                var html = response.Response;
                var startIndex = html.IndexOf(" title=\"");
                if (startIndex != -1)
                {
                    startIndex = html.IndexOf(" title=\"", startIndex + 1);
                    if (startIndex != -1)
                    {
                        startIndex += 8;
                        var endIndex = html.IndexOf("\">", startIndex);
                        if (endIndex != -1)
                            return html.Substring(startIndex, endIndex - startIndex);
                    }
                }
            }
            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\UI\Popups\MultiButtonPopup.xaml.cs
public static async Task<int> ShowAsync(string[] buttons)
        {
            var popup = new MultiButtonPopup(buttons);
            await ShowAsync(popup, true, false);
            return popup.SelectedButton;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\Shared\Caching\DataManagerBase.cs
public async Task<T> GetItemAsync<T>(int id, string[] included, bool reload)
        {
            return (T)await GetItemAsync(GetBaseType(typeof(T)).Name, id, included, reload);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\Shared\Caching\DataManagerBase.cs
private async Task<ICacheable> GetItemAsync(string type, int id, string[] included, bool reload)
        {
            var item = GetItem(type, id);
            if (item != null && !reload)
                return item;

            if (loadingItems.Any(t => t.Item1 == type && t.Item2 == id))
            {
                await WaitUntilCompleted(type, id, null);
                return GetItem(type, id);
            }

            var tuple = new Tuple<string, int>(type, id);
            loadingItems.Add(tuple);
            try
            {
                var result = await GetItemAsync(type, id, included ?? new string[] { });
                if (result != null)
                    return AddItem((ICacheable)result);
            }
            catch (Exception ex)
            {
                CompleteWaitingWithException(type, 0, null, ex);
            }
            finally
            {
                CompleteWaiting(type, 0, null);
                loadingItems.Remove(tuple);
            }
            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\Shared\Caching\DataManagerBase.cs
public async Task<IEnumerable<T>> GetAllItemsAsync<T>(string[] included, bool reload)
        {
            return (await GetAllItemsAsync(GetBaseType(typeof(T)).Name, included, reload))
                .OfType<T>().ToList();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\Shared\Caching\DataManagerBase.cs
private async Task<IEnumerable<ICacheable>> GetAllItemsAsync(string type, string[] included, bool reload)
        {
            if (!reload && fullLoadedTypes.Contains(type))
                return list[type].Select(p => p.Value).ToList();

            if (fullLoadingTypes.Contains(type)) // already loading
            {
                await WaitUntilCompleted(type, 0, null);
                return list[type].Select(p => p.Value).ToList();
            }

            fullLoadingTypes.Add(type);
            try
            {
                var items = (await GetAllItemsAsync(type, included)).OfType<ICacheable>();
                fullLoadedTypes.Add(type);

                if (list.ContainsKey(type)) // remove deleted entities from cache
                {
                    var toRemove = list[type].Where(p => items.All(i => i.Id != p.Value.Id)).ToList();
                    foreach (var r in toRemove)
                        list[type].Remove(r.Key);
                }
                return AddItems(items);
            }
            catch (Exception ex)
            {
                CompleteWaitingWithException(type, 0, null, ex);
            }
            finally
            {
                CompleteWaiting(type, 0, null);
                fullLoadingTypes.Remove(type);
            }
            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\Shared\Caching\DataManagerBase.cs
public async Task LoadPropertyForItemAsync<T, TProperty>(T item, string propertyName, string[] included, bool reload)
            where T : ICacheable
            where TProperty : ICacheable
        {
            var info = item.GetType().GetTypeInfo();
            var baseType = GetBaseType(typeof(T));
            var itemType = baseType.Name;

            var property = info.GetProperty(propertyName); 
            var isCollectionProperty = typeof(IList).GetTypeInfo().IsAssignableFrom(property.PropertyType.GetTypeInfo());

            // check loaded
            int? foreignId = 0; 
            if (!reload)
            {
                var currentValue = property.GetValue(item, null);
                if (isCollectionProperty)
                {
                    if (currentValue != null)
                        return;
                }
                else
                {
                    var idProperty = info.GetProperty(propertyName + "Id");
                    if (idProperty.PropertyType == typeof(int?))
                    {
                        foreignId = (int?)idProperty.GetValue(item, null);

                        // sync navigation proprety with foreign id
                        if (!foreignId.HasValue) 
                        {
                            if (currentValue != null)
                                property.SetValue(item, null, null);
                            return; 
                        }
                        else
                        {
                            if (currentValue != null && ((ICacheable) currentValue).Id == foreignId.Value)
                                return;
                            property.SetValue(item, null, null);
                        }
                    }
                    else
                    {
                        var id = (int)idProperty.GetValue(item, null);
                        if (currentValue != null && ((ICacheable)currentValue).Id == id)
                            return;
                    }
                }
            }

            // check IsLoading (already loading)
            var loadingProperty = info.GetProperty("Is" + propertyName + "Loading"); 
            if (loadingProperty != null)
            {
                var isLoading = (bool)loadingProperty.GetValue(item, null);
                if (isLoading)
                {
                    await WaitUntilCompleted(itemType, item.Id, propertyName);
                    return;
                }
            }
            else
                Debug.WriteLine("DataManagerBase - Warning: No 'Is" + propertyName + "Loading' property found on '" + info.Name + "'");

            // set IsLoading = true
            if (loadingProperty != null)
                loadingProperty.SetValue(item, true, null);

            // call web service
            try
            {
                if (isCollectionProperty)
                {
                    var result = await GetCollectionPropertyForItemAsync(baseType.Name, item.Id, propertyName, included ?? new string[] { });
                    if (result != null)
                    {
                        var items = AddItems(result).OfType<TProperty>();
                        property.SetValue(item, new ObservableCollection<TProperty>(items), null);
                    }
                }
                else
                {
                    var result = await GetItemAsync(GetBaseType(property.PropertyType).Name, foreignId.Value, included ?? new string[] { });
                    if (result != null)
                        property.SetValue(item, AddItem((TProperty)result), null);
                }
            }
            catch (Exception ex)
            {
                CompleteWaitingWithException(itemType, item.Id, propertyName, ex);
            }
            finally
            {
                CompleteWaiting(itemType, item.Id, propertyName);
                if (loadingProperty != null)
                    loadingProperty.SetValue(item, false, null);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\shared\messaging\Messenger.cs
public static async Task<T> SendAsync<T>(this T msg)
        {
            await Messenger.SendAsync(msg);
            return msg; 
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\shared\messaging\Messenger.cs
public static async Task<T> SendAsync<T>(T message)
        {
            var type = typeof(T);
            foreach (var a in actions.Where(a => a.Type == type).ToArray())
            {
                if (a.Action is Action<T>)
                    ((Action<T>)a.Action)(message);
                else
                    await ((Func<T, Task>)a.Action)(message);
            }
            return message;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\Shared\Networking\WakeOnLan.cs
public static async Task WakeAsync(HostName endPoint, int port, byte[] macAddress)
        {
            var packet = new List<byte>();
            for (var i = 0; i < 6; i++) // Trailer of 6 FF packets
                packet.Add(0xFF);
            for (var i = 0; i < 16; i++) // Repeat 16 times the MAC address
                packet.AddRange(macAddress);

            using (var socket = new DatagramSocket())
            {
                await socket.ConnectAsync(endPoint, port.ToString());
                var stream = socket.OutputStream;
                using (var writer = new DataWriter(stream))
                {
                    writer.WriteBytes(packet.ToArray());
                    await writer.StoreAsync();
                }				
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\Shared\Caching\DataManagerBase.cs
public async Task<T> GetItemAsync<T>(int id, string[] included, bool reload)
        {
            return (T)await GetItemAsync(GetBaseType(typeof(T)).Name, id, included, reload);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\Shared\Caching\DataManagerBase.cs
private async Task<ICacheable> GetItemAsync(string type, int id, string[] included, bool reload)
        {
            var item = GetItem(type, id);
            if (item != null && !reload)
                return item;

            if (loadingItems.Any(t => t.Item1 == type && t.Item2 == id))
            {
                await WaitUntilCompleted(type, id, null);
                return GetItem(type, id);
            }

            var tuple = new Tuple<string, int>(type, id);
            loadingItems.Add(tuple);
            try
            {
                var result = await GetItemAsync(type, id, included ?? new string[] { });
                if (result != null)
                    return AddItem((ICacheable)result);
            }
            catch (Exception ex)
            {
                CompleteWaitingWithException(type, 0, null, ex);
            }
            finally
            {
                CompleteWaiting(type, 0, null);
                loadingItems.Remove(tuple);
            }
            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\Shared\Caching\DataManagerBase.cs
public async Task<IEnumerable<T>> GetAllItemsAsync<T>(string[] included, bool reload)
        {
            return (await GetAllItemsAsync(GetBaseType(typeof(T)).Name, included, reload))
                .OfType<T>().ToList();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\Shared\Caching\DataManagerBase.cs
private async Task<IEnumerable<ICacheable>> GetAllItemsAsync(string type, string[] included, bool reload)
        {
            if (!reload && fullLoadedTypes.Contains(type))
                return list[type].Select(p => p.Value).ToList();

            if (fullLoadingTypes.Contains(type)) // already loading
            {
                await WaitUntilCompleted(type, 0, null);
                return list[type].Select(p => p.Value).ToList();
            }

            fullLoadingTypes.Add(type);
            try
            {
                var items = (await GetAllItemsAsync(type, included)).OfType<ICacheable>();
                fullLoadedTypes.Add(type);

                if (list.ContainsKey(type)) // remove deleted entities from cache
                {
                    var toRemove = list[type].Where(p => items.All(i => i.Id != p.Value.Id)).ToList();
                    foreach (var r in toRemove)
                        list[type].Remove(r.Key);
                }
                return AddItems(items);
            }
            catch (Exception ex)
            {
                CompleteWaitingWithException(type, 0, null, ex);
            }
            finally
            {
                CompleteWaiting(type, 0, null);
                fullLoadingTypes.Remove(type);
            }
            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\Shared\Caching\DataManagerBase.cs
public async Task LoadPropertyForItemAsync<T, TProperty>(T item, string propertyName, string[] included, bool reload)
            where T : ICacheable
            where TProperty : ICacheable
        {
            var info = item.GetType().GetTypeInfo();
            var baseType = GetBaseType(typeof(T));
            var itemType = baseType.Name;

            var property = info.GetProperty(propertyName); 
            var isCollectionProperty = typeof(IList).GetTypeInfo().IsAssignableFrom(property.PropertyType.GetTypeInfo());

            // check loaded
            int? foreignId = 0; 
            if (!reload)
            {
                var currentValue = property.GetValue(item, null);
                if (isCollectionProperty)
                {
                    if (currentValue != null)
                        return;
                }
                else
                {
                    var idProperty = info.GetProperty(propertyName + "Id");
                    if (idProperty.PropertyType == typeof(int?))
                    {
                        foreignId = (int?)idProperty.GetValue(item, null);

                        // sync navigation proprety with foreign id
                        if (!foreignId.HasValue) 
                        {
                            if (currentValue != null)
                                property.SetValue(item, null, null);
                            return; 
                        }
                        else
                        {
                            if (currentValue != null && ((ICacheable) currentValue).Id == foreignId.Value)
                                return;
                            property.SetValue(item, null, null);
                        }
                    }
                    else
                    {
                        var id = (int)idProperty.GetValue(item, null);
                        if (currentValue != null && ((ICacheable)currentValue).Id == id)
                            return;
                    }
                }
            }

            // check IsLoading (already loading)
            var loadingProperty = info.GetProperty("Is" + propertyName + "Loading"); 
            if (loadingProperty != null)
            {
                var isLoading = (bool)loadingProperty.GetValue(item, null);
                if (isLoading)
                {
                    await WaitUntilCompleted(itemType, item.Id, propertyName);
                    return;
                }
            }
            else
                Debug.WriteLine("DataManagerBase - Warning: No 'Is" + propertyName + "Loading' property found on '" + info.Name + "'");

            // set IsLoading = true
            if (loadingProperty != null)
                loadingProperty.SetValue(item, true, null);

            // call web service
            try
            {
                if (isCollectionProperty)
                {
                    var result = await GetCollectionPropertyForItemAsync(baseType.Name, item.Id, propertyName, included ?? new string[] { });
                    if (result != null)
                    {
                        var items = AddItems(result).OfType<TProperty>();
                        property.SetValue(item, new ObservableCollection<TProperty>(items), null);
                    }
                }
                else
                {
                    var result = await GetItemAsync(GetBaseType(property.PropertyType).Name, foreignId.Value, included ?? new string[] { });
                    if (result != null)
                        property.SetValue(item, AddItem((TProperty)result), null);
                }
            }
            catch (Exception ex)
            {
                CompleteWaitingWithException(itemType, item.Id, propertyName, ex);
            }
            finally
            {
                CompleteWaiting(itemType, item.Id, propertyName);
                if (loadingProperty != null)
                    loadingProperty.SetValue(item, false, null);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\Shared\Multimedia\YouTube.cs
public static async Task<string> GetVideoTitleAsync(string youTubeId) // should be improved
        {
            var response = await Http.GetAsync("http://www.youtube.com/watch?v=" + youTubeId + "&nomobile=1");
            if (response != null)
            {
                var html = response.Response;
                var startIndex = html.IndexOf(" title=\"");
                if (startIndex != -1)
                {
                    startIndex = html.IndexOf(" title=\"", startIndex + 1);
                    if (startIndex != -1)
                    {
                        startIndex += 8;
                        var endIndex = html.IndexOf("\">", startIndex);
                        if (endIndex != -1)
                            return html.Substring(startIndex, endIndex - startIndex);
                    }
                }
            }
            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\UI\Popups\MultiButtonPopup.xaml.cs
public static async Task<int> ShowAsync(string[] buttons)
        {
            var popup = new MultiButtonPopup(buttons);
            await ShowAsync(popup, true, false);
            return popup.SelectedButton;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\Shared\Caching\DataManagerBase.cs
public async Task<T> GetItemAsync<T>(int id, string[] included, bool reload)
        {
            return (T)await GetItemAsync(GetBaseType(typeof(T)).Name, id, included, reload);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\Shared\Caching\DataManagerBase.cs
private async Task<ICacheable> GetItemAsync(string type, int id, string[] included, bool reload)
        {
            var item = GetItem(type, id);
            if (item != null && !reload)
                return item;

            if (loadingItems.Any(t => t.Item1 == type && t.Item2 == id))
            {
                await WaitUntilCompleted(type, id, null);
                return GetItem(type, id);
            }

            var tuple = new Tuple<string, int>(type, id);
            loadingItems.Add(tuple);
            try
            {
                var result = await GetItemAsync(type, id, included ?? new string[] { });
                if (result != null)
                    return AddItem((ICacheable)result);
            }
            catch (Exception ex)
            {
                CompleteWaitingWithException(type, 0, null, ex);
            }
            finally
            {
                CompleteWaiting(type, 0, null);
                loadingItems.Remove(tuple);
            }
            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\Shared\Caching\DataManagerBase.cs
public async Task<IEnumerable<T>> GetAllItemsAsync<T>(string[] included, bool reload)
        {
            return (await GetAllItemsAsync(GetBaseType(typeof(T)).Name, included, reload))
                .OfType<T>().ToList();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\Shared\Caching\DataManagerBase.cs
private async Task<IEnumerable<ICacheable>> GetAllItemsAsync(string type, string[] included, bool reload)
        {
            if (!reload && fullLoadedTypes.Contains(type))
                return list[type].Select(p => p.Value).ToList();

            if (fullLoadingTypes.Contains(type)) // already loading
            {
                await WaitUntilCompleted(type, 0, null);
                return list[type].Select(p => p.Value).ToList();
            }

            fullLoadingTypes.Add(type);
            try
            {
                var items = (await GetAllItemsAsync(type, included)).OfType<ICacheable>();
                fullLoadedTypes.Add(type);

                if (list.ContainsKey(type)) // remove deleted entities from cache
                {
                    var toRemove = list[type].Where(p => items.All(i => i.Id != p.Value.Id)).ToList();
                    foreach (var r in toRemove)
                        list[type].Remove(r.Key);
                }
                return AddItems(items);
            }
            catch (Exception ex)
            {
                CompleteWaitingWithException(type, 0, null, ex);
            }
            finally
            {
                CompleteWaiting(type, 0, null);
                fullLoadingTypes.Remove(type);
            }
            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\Shared\Caching\DataManagerBase.cs
public async Task LoadPropertyForItemAsync<T, TProperty>(T item, string propertyName, string[] included, bool reload)
            where T : ICacheable
            where TProperty : ICacheable
        {
            var info = item.GetType().GetTypeInfo();
            var baseType = GetBaseType(typeof(T));
            var itemType = baseType.Name;

            var property = info.GetProperty(propertyName); 
            var isCollectionProperty = typeof(IList).GetTypeInfo().IsAssignableFrom(property.PropertyType.GetTypeInfo());

            // check loaded
            int? foreignId = 0; 
            if (!reload)
            {
                var currentValue = property.GetValue(item, null);
                if (isCollectionProperty)
                {
                    if (currentValue != null)
                        return;
                }
                else
                {
                    var idProperty = info.GetProperty(propertyName + "Id");
                    if (idProperty.PropertyType == typeof(int?))
                    {
                        foreignId = (int?)idProperty.GetValue(item, null);

                        // sync navigation proprety with foreign id
                        if (!foreignId.HasValue) 
                        {
                            if (currentValue != null)
                                property.SetValue(item, null, null);
                            return; 
                        }
                        else
                        {
                            if (currentValue != null && ((ICacheable) currentValue).Id == foreignId.Value)
                                return;
                            property.SetValue(item, null, null);
                        }
                    }
                    else
                    {
                        var id = (int)idProperty.GetValue(item, null);
                        if (currentValue != null && ((ICacheable)currentValue).Id == id)
                            return;
                    }
                }
            }

            // check IsLoading (already loading)
            var loadingProperty = info.GetProperty("Is" + propertyName + "Loading"); 
            if (loadingProperty != null)
            {
                var isLoading = (bool)loadingProperty.GetValue(item, null);
                if (isLoading)
                {
                    await WaitUntilCompleted(itemType, item.Id, propertyName);
                    return;
                }
            }
            else
                Debug.WriteLine("DataManagerBase - Warning: No 'Is" + propertyName + "Loading' property found on '" + info.Name + "'");

            // set IsLoading = true
            if (loadingProperty != null)
                loadingProperty.SetValue(item, true, null);

            // call web service
            try
            {
                if (isCollectionProperty)
                {
                    var result = await GetCollectionPropertyForItemAsync(baseType.Name, item.Id, propertyName, included ?? new string[] { });
                    if (result != null)
                    {
                        var items = AddItems(result).OfType<TProperty>();
                        property.SetValue(item, new ObservableCollection<TProperty>(items), null);
                    }
                }
                else
                {
                    var result = await GetItemAsync(GetBaseType(property.PropertyType).Name, foreignId.Value, included ?? new string[] { });
                    if (result != null)
                        property.SetValue(item, AddItem((TProperty)result), null);
                }
            }
            catch (Exception ex)
            {
                CompleteWaitingWithException(itemType, item.Id, propertyName, ex);
            }
            finally
            {
                CompleteWaiting(itemType, item.Id, propertyName);
                if (loadingProperty != null)
                    loadingProperty.SetValue(item, false, null);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\..\Shared\Multimedia\YouTube.cs
public static async Task<string> GetVideoTitleAsync(string youTubeId) // should be improved
        {
            var response = await Http.GetAsync("http://www.youtube.com/watch?v=" + youTubeId + "&nomobile=1");
            if (response != null)
            {
                var html = response.Response;
                var startIndex = html.IndexOf(" title=\"");
                if (startIndex != -1)
                {
                    startIndex = html.IndexOf(" title=\"", startIndex + 1);
                    if (startIndex != -1)
                    {
                        startIndex += 8;
                        var endIndex = html.IndexOf("\">", startIndex);
                        if (endIndex != -1)
                            return html.Substring(startIndex, endIndex - startIndex);
                    }
                }
            }
            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\mytoolkit\Phone\UI\Popups\MultiButtonPopup.xaml.cs
public static async Task<int> ShowAsync(string[] buttons)
        {
            var popup = new MultiButtonPopup(buttons);
            await ShowAsync(popup, true, false);
            return popup.SelectedButton;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\nokia-entertainment+Shuffler.fm\nokia-entertainment-Shuffler.fm-65ef855\Api\Artist.cs
public async void AttemptNokiaLookup()
        {
            if (!this._lookupAttempted)
            {
                this._lookupAttempted = true;

                string name = this.Name;

                int index = name.IndexOf("with", StringComparison.OrdinalIgnoreCase);
                if (index > -1)
                {
                    name = name.Substring(0, index - 1);
                }

                index = name.IndexOf("ft.", StringComparison.OrdinalIgnoreCase);
                if (index > -1)
                {
                    name = name.Substring(0, index - 1);
                }

                index = name.IndexOf("feat.", StringComparison.OrdinalIgnoreCase);
                if (index > -1)
                {
                    name = name.Substring(0, index - 1);
                }

                index = name.IndexOf("f/", StringComparison.OrdinalIgnoreCase);
                if (index > -1)
                {
                    name = name.Substring(0, index - 1);
                }

                if (!string.IsNullOrEmpty(name))
                {
                    ListResponse<Nokia.Music.Types.Artist> artists = await App.NokiaMusicApiClient.SearchArtistsAsync(name);

                    if (artists.Result != null && artists.Result.Count > 0)
                    {
                        if (string.Compare(artists.Result[0].Name, name, CultureInfo.CurrentUICulture, CompareOptions.IgnoreNonSpace) == 0)
                        {
                            this.IsAvailableOnNokiaMusic = true;
                            this._nokiaMusicArtist = artists.Result[0];
                            this.NotifyPropertyChanged("IsAvailableOnNokiaMusic");
                            Debug.WriteLine("Found " + name + " on Nokia Music");
                        }
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\noxo+bluetoothchat-wp8-winrt\noxo-bluetoothchat-wp8-winrt-7f11005\BluetoothChatWP8\PhoneApp1\ChatConnection.cs
private static async Task readSocket()
        {
            while (State == STATE_CONNECTED)
            {

                try
                {
                    
                    uint len = await reader.LoadAsync(1024);

                    if (len > 0)
                    {

                        String msg = reader.ReadString(len);

                        ChatMessage chatMsg = new ChatMessage()
                        {
                            Content = "<< " + msg
                        };

                        ChatMessages.Data.Add(chatMsg);
                    }

                }
                catch (Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine("ERROR/readSocket/" + ex.ToString());
                    CleanUp();
                    break;
                }
            }

            State = STATE_DISCONNECTED; 
            
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\noxo+bluetoothchat-wp8-winrt\noxo-bluetoothchat-wp8-winrt-7f11005\BluetoothChatWP8\PhoneApp1\ChatConnection.cs
public async static void SendChatMessageAsync(ChatMessage msg)
        {
            try
            {
                if (State == STATE_CONNECTED)
                {
                    writer.WriteString(msg.Content);
                    await writer.StoreAsync();
                    System.Diagnostics.Debug.WriteLine("Chat msg sent/" + msg.Content);
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine("ERROR/SendChatMessageAsync/" + ex.ToString());
                CleanUp();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Nznoonee+VKAgent\Nznoonee-VKAgent-9194c0e\VKAgent\ApiRelated\TaskRelated\TaskExecutor.cs
private async Task<IVkHttpResponseResult> ExecuteHttpRequest()
        {
            // Creating request string
            var requestString = _task.BuildFullRequestString();

            // Calling web request
            var httpRequest = new HttpRequest(_tokenSource.Token, _taskParams.HttpTimeout);
            return await httpRequest.DoRequest(requestString, _taskParams.HttpRequestType);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Nznoonee+VKAgent\Nznoonee-VKAgent-9194c0e\VKAgent\ApiRelated\TaskRelated\TaskExecutor.cs
public async Task<ITaskResult> ExecuteTask()
        {
            AppLogger.Info("New task - {0}", _task.GetType());

            // Execute Http Request
            var respObject = await ExecuteHttpRequest();

            // If we have any http errors, map them to ErrorTaskResult and return it
            if (respObject.IsError)
            {
                var taskResult = ParseErrorHttpResult(respObject);
                return taskResult;
            }

            // Parse data based on success web response or throw appropriate exception
            try
            {
                var jsonObject = JObject.Parse(respObject.ResponseString);

                // If we have any server (api) errors, at first we try to parse and handle them globally.
                if (JsonHelper.JsonContainsError(jsonObject))
                {
                    var taskErrorCode = TryHandleErrorServerResult(jsonObject);
                    if (taskErrorCode != TaskErrorCode.UnknownError)
                        return new ErrorTaskResult { ErrorCode = taskErrorCode };
                }

                // Perform response execution and parsing
                var data =
                    await Task.Factory.StartNew(() => _task.ProcessResponseData(jsonObject), _tokenSource.Token);

                // Check if we requested to cancel this task. If task was cancelled we just return ErrorTaskResult
                if (_tokenSource.Token.IsCancellationRequested)
                {
                    AppLogger.Info("Task {0} is canceled, processing is finished", _task.GetType());
                    return new ErrorTaskResult { ErrorCode = TaskErrorCode.Canceled };
                }

                return data;
            }
            catch (TaskCanceledException)
            {
                AppLogger.Info("Task {0} is canceled, response is returned but no processing is pending", _task.GetType());
                return new ErrorTaskResult();
            }
            catch (JsonReaderException e)
            {
                AppLogger.Error("JSON exception occurred while processing Task {0}. Message: {1}", _task.GetType(), e.Message);
                return new ErrorTaskResult();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Nznoonee+VKAgent\Nznoonee-VKAgent-9194c0e\VKAgent\ApiRelated\TaskRelated\TaskExecutor.cs
private async void repeatTimer_Tick(object state)
        {
            AppLogger.Info("Recurring task {0} trigerred", _task.GetType());

            ITaskResult result = await ExecuteTask();

            if (state != null)
            {
                var callback = (Action<ITaskResult>) state;
                callback(result);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Nznoonee+VKAgent\Nznoonee-VKAgent-9194c0e\VKAgent\ApiRelated\TaskRelated\TaskManager.cs
public static async Task<ITaskResult> ExecuteAwaitableTask(IRequestTask task, string taskContext = null)
        {
            var taskParams = new TaskParameters { Context = taskContext };

            return await ExecuteSingleTaskInternal(task, taskParams);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Nznoonee+VKAgent\Nznoonee-VKAgent-9194c0e\VKAgent\ApiRelated\TaskRelated\TaskManager.cs
public static async void ExecuteTask(IRequestTask task, Action<ITaskResult> callback = null, string taskContext = null)
        {
            var taskParams = new TaskParameters { Callback = callback, Context = taskContext };

            ITaskResult result = await ExecuteSingleTaskInternal(task, taskParams);

            if (callback != null)
                callback(result);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Nznoonee+VKAgent\Nznoonee-VKAgent-9194c0e\VKAgent\ApiRelated\TaskRelated\TaskManager.cs
public static async void ExecuteTask(IRequestTask task, ITaskParameters taskParams)
        {
            ITaskResult result = await ExecuteSingleTaskInternal(task, taskParams);

            if (taskParams.Callback != null)
                taskParams.Callback(result);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Nznoonee+VKAgent\Nznoonee-VKAgent-9194c0e\VKAgent\ApiRelated\TaskRelated\TaskManager.cs
private static async Task<ITaskResult> ExecuteSingleTaskInternal(IRequestTask task, ITaskParameters taskParams)
        {
            var executor = new TaskExecutor(task, taskParams);
            _tasksList.Add(executor);

            ITaskResult result = await executor.ExecuteTask();

            _tasksList.Remove(executor);

            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Nznoonee+VKAgent\Nznoonee-VKAgent-9194c0e\VKAgent\Services\ImageUploader\ImageUploader.cs
public static async Task<string> Upload(string uploadUrl, byte[] content)
        {
            Uri requestUri;
            try
            {
                requestUri = new Uri(uploadUrl);
            }
            catch (UriFormatException)
            {
                return string.Empty;
            }

            var request = (HttpWebRequest) WebRequest.Create(requestUri);
            request.Method = "POST";

            var boundary = Guid.NewGuid();
            request.ContentType = "multipart/form-data; boundary=" + boundary;

            using (var requestStream = await request.GetRequestStreamAsync())
            {
                var bytes = Encoding.UTF8.GetBytes("--" + boundary + "\r\n");
                requestStream.Write(bytes, 0, bytes.Length);

                var bytes2 = Encoding.UTF8.GetBytes("Content-Disposition: form-data; name=\"photo\"; filename=\"image.jpg\";\r\nContent-Type: image/jpeg\r\n\r\n");
                requestStream.Write(bytes2, 0, bytes2.Length);
                requestStream.Write(content, 0, content.Length);

                bytes = Encoding.UTF8.GetBytes("\r\n--" + boundary + "--\r\n");
                requestStream.Write(bytes, 0, bytes.Length);
            }

            string resultString;
            using (var response = await request.GetResponseAsync())
            {
                using (var responseStream = response.GetResponseStream())
                {
                    using (var reader = new StreamReader(responseStream))
                    {
                        resultString = reader.ReadToEnd();
                    }
                }
            }

            return resultString;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Nznoonee+VKAgent\Nznoonee-VKAgent-9194c0e\VKAgent\ViewModels\BaseConversationViewModel.cs
private async void SendMessageToServer()
        {
            var attList = new List<IAttachment>(_attachments);
            _attachments.Clear();
            AttachmentsTotal = 0;

            var message = ComposeMessageToSend();
            message.RenderedAttachments = attList;

            Messages.Add(message);

            MessageInput = string.Empty;
            _serverMessagesCount++;
            _eventAggregator.Publish(new AppEvent { EventType = AppEventType.MessageListUpdated, EventArgs = Messages.Count });

            var canBeSent = true;

            double? latitude = null;
            double? longitude = null;
            string attachmentString = string.Empty;

            if (attList.Count > 0)
            {
                var mapItem = attList.FirstOrDefault(p => p is AttachmentMap);
                if (mapItem != null)
                {
                    latitude = ((AttachmentMap) mapItem).Latitude;
                    longitude = ((AttachmentMap) mapItem).Longitude;
                }

                if (attList.Any(p => p is AttachmentImage))
                {
                    var getPhotosServerTask = new GetMessagePhotosUploadServerTask();
                    var result = await TaskManager.ExecuteAwaitableTask(getPhotosServerTask);

                    if (result.IsSuccess)
                    {
                        var uploadUrl = (string) result.ResultArgs;
                        attachmentString = await UploadPhotosOnServer(uploadUrl, attList);

                        if (attachmentString.IsEmpty())
                            canBeSent = false;
                    }
                    else
                        canBeSent = false;
                }
            }

            if (canBeSent)
                ExecuteSendMessageTask(message.Body, message.Guid, latitude, longitude, attachmentString);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Nznoonee+VKAgent\Nznoonee-VKAgent-9194c0e\VKAgent\ApiRelated\HttpRelated\HttpRequest.cs
public async Task<IVkHttpResponseResult> DoRequest(string requestString, HttpRequestType requestType)
        {
            // Check if network is available
            if(!AppUtils.NetworkIsAvailable())
                return new VkHttpResponseResult { IsError = true, StatusCode = VkResponseStatusCode.UnknownError };

            Uri requestUri;
            try
            {
                requestUri = new Uri(requestString);
            }
            catch (UriFormatException)
            {
                return new VkHttpResponseResult { IsError = true };
            }

            _request = (HttpWebRequest) WebRequest.Create(requestUri);

            _request.Method = requestType == HttpRequestType.GET ? "GET" : "POST";
            _request.UserAgent = string.Format("{0}{1}", "WindowsPhone7", "\r\nAccept-Encoding: gzip, deflate");

            WebResponse response;

            try
            {
                _timeoutTimer = new Timer(timeoutTimer_Tick, null, _timeout, Timeout.Infinite);
                _cancellationTimer = new Timer(cancellationTimer_Tick, null, 0, 200);

                response = await _request.GetResponseAsync();
            }
            catch (WebException e)
            {
                // Processing error response
                var respResult = new VkHttpResponseResult { IsError = true };

                if (e.Status == WebExceptionStatus.RequestCanceled)
                {
                    if (_token.IsCancellationRequested)
                        respResult.StatusCode = VkResponseStatusCode.Canceled;
                    else
                        respResult.StatusCode = VkResponseStatusCode.Timeout;
                }
                else
                {
                    HttpStatusCode statusCode = ((HttpWebResponse)e.Response).StatusCode;

                    if (statusCode == HttpStatusCode.Unauthorized)
                        respResult.StatusCode = VkResponseStatusCode.Unauthorized;
                    else
                        respResult.StatusCode = VkResponseStatusCode.UnknownError;
                }

                return respResult;
            }
            finally
            {
                // Disposing the timers
                if (_cancellationTimer != null)
                    _cancellationTimer.Dispose();

                if (_timeoutTimer != null)
                    _timeoutTimer.Dispose();
            }

            // Successful response is returned, processing response string
            var resultString = GetResponseString(response);

            if (resultString.IsEmpty())
                return new VkHttpResponseResult { IsError = true, StatusCode = VkResponseStatusCode.EmptyResponse };
            else
                return new VkHttpResponseResult { ResponseString = resultString };
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\S1Nyan.App.WP7\Model\ServerItem.cs
public async void Check()
        {
            try
            {
                client = new S1WebClient();
                var result = await client.DownloadStringTaskAsync(Addr + ParserFactory.Path);
                if (result.Length > 0)
                {
                    var data = ParserFactory.ParseMainListData(result);
                    if (NotifySuccess != null /*&& data.Count > 0*/)
                    {
                        System.Diagnostics.Debug.WriteLine("NotifySuccess " + Addr);
                        NotifySuccess(this);
                        return;
                    }
                }
            }
            catch (S1UserException e) { 
                if(e.Message != null ) 
                    UserException = e; 
            }
            catch (Exception) { }
            finally
            {
                if (NotifyComplete != null)
                    NotifyComplete(this);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\S1Nyan.App.WP7\Model\ServerModel.cs
public async Task UpdateListFromRemote()
        {
            Stream s = StorageHelper.ReadFromLocalCache(ServerListCacheName, ServerListCacheDays);
            if (s != null)
            {
                s.Dispose();
                return;
            }

            WebClient client = new WebClient();
            try
            {
                s = await client.OpenReadTaskAsync(RemoteServerPath);
                Debug.WriteLine("Update server list from remote");
                UpdateList(s);

                UpdateHostList();

                using (s)
                {
                    using (var reader = new StreamReader(s))
                    {
                        s.Seek(0, SeekOrigin.Begin);
                        StorageHelper.WriteToLocalCache(ServerListCacheName, reader.ReadToEnd());
                    }
                }
            }
            catch (Exception) { }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\S1Nyan.App.WP7\Model\ResourceServices.cs
public static async Task<Stream> GetResourceStreamStatic(Uri uri, string path = null, int expireDays = 3, bool isS1 = true)
        {
            Stream s = null;

            if (path != null)
            {
                s = helper.ReadFromLocalCache(path, expireDays);
                if (s != null) return s;
            }

            if (isS1)
                s = await new S1WebClient().OpenReadTaskAsync(uri);
            else
                s = await new WebClient().OpenReadTaskAsync(uri);

            if (path != null && s != null)
            {
                helper.WriteBinaryToLocalCache(path, s);
                s.Seek(0, SeekOrigin.Begin);
            }
            return s;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\S1Nyan.App.WP7\Model\UserExtension.cs
public static async Task<string> GetVerifyString(this S1WebClient client)
        {
            string verify = "";
            
            //use DownloadString will just return cached data, which is not what i want
            //post dummy data to disable cache
            var privacyPage = await client.PostDataTaskAsync(new Uri(UserAction.PrivacyUrl)); 
            var root = new HtmlDoc(privacyPage).RootElement;
            var input = root.FindFirst("input", (e) => e.Attributes["name"] == "verify");
            if (input != null)
                verify = input.Attributes["value"];
            else
            {
                throw new S1UserException(ErrorParser.Parse(root));
            }
            return verify;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\S1Nyan.App.WP7\ViewModel\UserViewModel.cs
private async void OnReLoginMsg(NotificationMessage<S1NyanViewModelBase> msg)
        {
            if (msg.Notification != Messages.ReLoginMessageString) return;

            Uid = null;
            if (SettingView.IsRememberPass && SettingView.CurrentUsername.Length > 0)
                await BackgroundLogin(SettingView.CurrentUsername, SettingView.CurrentPassword);

            if (Uid != null)
                MessengerInstance.Send(new NotificationMessage<S1NyanViewModelBase>(msg.Content, Messages.RefreshMessageString));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\S1Nyan.App.WP7\ViewModel\UserViewModel.cs
public async Task<string> DoLogin(string name, string pass)
        {
            if (name.Length == 0 || pass.Length == 0) return AppResources.ErrorMsgNamePassEmpty;

            string uid = null;
            bool isSuccess = false;
            try
            {
                IsBusy = true;
                uid = await new S1WebClient().Login(name, pass);
                if (uid != null)
                {
                    Uid = uid;
                    LoginStatus = name;
                    isSuccess = true;
                    return null;
                }
                return AppResources.ErrorMsgUnknown;
            }
            catch (Exception ex)
            {
                return S1Nyan.Utils.Util.ErrorMsg.GetExceptionMessage(ex);
            }
            finally
            {
                IsBusy = false;
                MessengerInstance.Send<NotificationMessage<bool>>(new NotificationMessage<bool>(isSuccess, Messages.LoginStatusChangedMessageString));
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\S1Nyan.App.WP7\ViewModel\UserViewModel.cs
public async Task BackgroundLogin(string name, string pass)
        {
            var error = await DoLogin(name, pass);
            if (error == null)
            {
                previousText = null;
            }
            else
            {
                SetNotifyMsg(error);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\S1Nyan.App.WP7\ViewModel\UserViewModel.cs
internal async void InitLogin()
        {
            if (Uid != null) return;

            try
            {
                SettingView.InitAccountData();
                if (SettingView.IsRememberPass && SettingView.CurrentUsername.Length > 0)
                    await BackgroundLogin(SettingView.CurrentUsername, SettingView.CurrentPassword);
                else if (SettingView.IsFirstLogin)
                    SetNotifyMsg(AppResources.ErrorMsgClickToLogin);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(ex.Message);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\S1Nyan.App.WP7\ViewModel\UserViewModel.cs
public async Task<string> DoSendPost(string replyLink, string replyText)
        {
            UserErrorTypes result = UserErrorTypes.Unknown;
            int retryTimes = 0;
            try
            {
                while (result != UserErrorTypes.Success)
                {
                    if (retryTimes > 2)
                        throw new S1UserException("MaxRetry", UserErrorTypes.MaxRetryTime);
                    if (result == UserErrorTypes.InvalidVerify)
                    {
                        Uid = null;
                        var error = await DoLogin(SettingView.CurrentUsername, SettingView.CurrentPassword);
                        if (error != null)
                            throw new S1UserException(error, UserErrorTypes.LoginFailed);
                    }

                    await CheckVerify();
                    result = await new S1WebClient().Reply(SettingView.VerifyString,
                        reletivePostUrl: replyLink,
                        content: replyText,
                        signature: S1Nyan.Views.SettingView.GetSignature());

                    retryTimes++;
                }
                return null;
            }
            catch (Exception ex)
            {
                return S1Nyan.Utils.Util.ErrorMsg.GetExceptionMessage(ex);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\S1Nyan.App.WP7\ViewModel\UserViewModel.cs
private async Task CheckVerify()
        {
            if (SettingView.VerifyString == null || SettingView.VerifyString.Length == 0)
            {
                SettingView.VerifyString = await new S1WebClient().GetVerifyString();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\S1Nyan.App.WP7\ViewModel\UserViewModel.cs
internal async Task<string> GetVerifyString()
        {
            try
            {
                return await new S1WebClient().GetVerifyString();
            }
            catch (Exception)
            {
                return null;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\S1Nyan.App.WP7\Views\ImageSourceProxy.cs
private async Task GetRemoteStream()
        {
            client.DownloadProgressChanged += OnDownloadProgressChanged;
            try
            {
                SourceStream = await client.OpenReadTaskAsync(SourceUrl);
            }
            catch { }
            finally
            {
                if (SourceStream == null) OnImageOpenFailed();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\S1Nyan.Model.Test\DataServiceTest.cs
[TestMethod]
        public async Task TestUpdateMainListAsync_FromCache()
        {
            Mock<IParserFactory> stubPaserFactory = new Mock<IParserFactory>();
            Mock<IStorageHelper> stubStorageHelper = new Mock<IStorageHelper>();

            stubStorageHelper.Setup(x => x.ReadFromLocalCache(It.IsAny<string>(), It.IsAny<double>()))
                .Returns(new MemoryStream());
            stubPaserFactory.Setup(x => x.ParseMainListData(It.IsAny<Stream>()))
                .Returns(new List<S1ListItem>());

            DataService service = new DataService { 
                ParserFactory = stubPaserFactory.Object,
                StorageHelper = stubStorageHelper.Object
            };
            var result = await service.UpdateMainListAsync();

            Assert.IsTrue(result is List<S1ListItem>);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\S1Nyan.Model.Test\DataServiceTest.cs
[TestMethod]
        public async Task TestUpdateMainListAsync_FromRemote()
        {
            TaskCompletionSource<Stream> tcs = new TaskCompletionSource<Stream>();
            tcs.SetResult(new MemoryStream());

            Mock<IParserFactory> stubPaserFactory = new Mock<IParserFactory>();
            Mock<IStorageHelper> stubStorageHelper = new Mock<IStorageHelper>();

            stubStorageHelper.Setup(x => x.ReadFromLocalCache(It.IsAny<string>(), It.IsAny<double>()))
                .Returns<Stream>(null);
            stubPaserFactory.Setup(x => x.GetMainListStream())
                .Returns(tcs.Task);
            stubPaserFactory.Setup(x => x.ParseMainListData(It.IsAny<string>()))
                .Returns(new List<S1ListItem>());

            DataService service = new DataService
            {
                ParserFactory = stubPaserFactory.Object,
                StorageHelper = stubStorageHelper.Object
            };
            var result = await service.UpdateMainListAsync();

            Assert.IsTrue(result is List<S1ListItem>);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\UnderDev\..\S1Nyan.App.WP7\Model\UserExtension.cs
public static async Task<string> GetVerifyString(this S1WebClient client)
        {
            string verify = "";
            
            //use DownloadString will just return cached data, which is not what i want
            //post dummy data to disable cache
            var privacyPage = await client.PostDataTaskAsync(new Uri(UserAction.PrivacyUrl)); 
            var root = new HtmlDoc(privacyPage).RootElement;
            var input = root.FindFirst("input", (e) => e.Attributes["name"] == "verify");
            if (input != null)
                verify = input.Attributes["value"];
            else
            {
                throw new S1UserException(ErrorParser.Parse(root));
            }
            return verify;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\UnderDev\..\S1Nyan.App.WP7\Model\ResourceServices.cs
public static async Task<Stream> GetResourceStreamStatic(Uri uri, string path = null, int expireDays = 3, bool isS1 = true)
        {
            Stream s = null;

            if (path != null)
            {
                s = helper.ReadFromLocalCache(path, expireDays);
                if (s != null) return s;
            }

            if (isS1)
                s = await new S1WebClient().OpenReadTaskAsync(uri);
            else
                s = await new WebClient().OpenReadTaskAsync(uri);

            if (path != null && s != null)
            {
                helper.WriteBinaryToLocalCache(path, s);
                s.Seek(0, SeekOrigin.Begin);
            }
            return s;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\UnderDev\..\S1Nyan.App.WP7\Views\ImageSourceProxy.cs
private async Task GetRemoteStream()
        {
            client.DownloadProgressChanged += OnDownloadProgressChanged;
            try
            {
                SourceStream = await client.OpenReadTaskAsync(SourceUrl);
            }
            catch { }
            finally
            {
                if (SourceStream == null) OnImageOpenFailed();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\UnderDev\ViewModel\ServerListViewModel.cs
public async void TestServer()
        {
            Status = "Connecting";
            try{
                client = new S1WebClient();
                var result = await client.DownloadStringTaskAsync(Addr + path); 
                Status = "Wrong Data";
                if (result.Length > 0)
                {
                    var root = new HtmlDoc(result).RootElement;
                    var serverDownTitle = ServerListViewModel.ServerDownTitle;
                    if (serverDownTitle != null &&
                        root.FindFirst("title").InnerHtml.Contains(serverDownTitle))
                    {
                        Status = "Server Down";
                        if (NotifySuccess != null) NotifySuccess();
                    }
                    else
                    {
                        if (NotifySuccess != null) NotifySuccess();
                        Status = "Success";
                    }
                }
            }
            catch (TaskCanceledException)
            {
                Status = "Cancled";
            }
            catch(Exception)
            {
                Status = "Failed";
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\UnderDev\ViewModel\UserTestViewModel.cs
private async void DoLogin()
        {
            client = new S1WebClient();

            client.AddPostParam(stepKey, 2);
            client.AddPostParam(loginTypeKey, loginType);
            client.AddPostParam(userKey, testUser);
            client.AddPostParam(passKey, testPass);
            client.AddPostParam(cktimeKey, cktime);
            Result = await client.PostDataTaskAsync(new Uri(loginUrl));
            foreach (Cookie c in client.Cookies)
                if (c.Name.Contains("uid")) Uid = c.Value;

            if (OnUpdateView != null) OnUpdateView(Result);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\UnderDev\ViewModel\UserTestViewModel.cs
private async Task DoTestLogin()
        {
            try
            {
                Result = await UserLogin();
                //verify = await new S1WebClient().GetVerifyString();
            }
            catch (Exception ex)
            {
                Result = ex.Message;
            }
            finally
            {
                if (OnUpdateView != null) OnUpdateView(Result);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\UnderDev\ViewModel\UserTestViewModel.cs
private async Task<string> UserLogin()
        {
            return await new S1WebClient().Login(testUser, testPass);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\UnderDev\ViewModel\UserTestViewModel.cs
private async Task DoTestLogin2()
        {
            try
            {
                Result = await new S1WebClient().Login("test1", testPass);
                //verify = await new S1WebClient().GetVerifyString();
            }
            catch (Exception ex)
            {
                Result = ex.Message;
            }
            finally
            {
                if (OnUpdateView != null) OnUpdateView(Result);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\UnderDev\ViewModel\UserTestViewModel.cs
private async Task DoPost()
        {
            UserErrorTypes result = UserErrorTypes.Unknown;
            int retryTimes = 0;
            try
            {
                IsSending = true;
                while (result != UserErrorTypes.Success)
                {
                    if (retryTimes > 2)
                        throw new S1UserException("MaxRetry", UserErrorTypes.MaxRetryTime);
                    if (result == UserErrorTypes.InvalidVerify)
                    {
                        await UserLogin();
                    }

                    await CheckVerify();
                    result = await new S1WebClient().Reply(verify,
                        reletivePostUrl: replyLink,
                        content: ReplyText + "\r\n" + DateTime.Now.ToShortTimeString(),
                        signature: deviceInfo);

                    if (result == UserErrorTypes.Success)
                        Result = "Success";
                    retryTimes++;
                }
            }
            catch (Exception ex)
            {
                Result = ex.Message;
            }
            finally
            {
                IsSending = false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\UnderDev\ViewModel\UserTestViewModel.cs
private async Task CheckVerify()
        {
            if (verify == null || verify.Length == 0)
            {
                verify = await new S1WebClient().GetVerifyString();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\UnderDev\ViewModel\UserTestViewModel.cs
private async void TestReply()
        {
            await DoPost();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\UnderDev\ViewModel\UserTestViewModel.cs
private async void TestWrongVerify()
        {
            verify = "12345";
            await DoPost();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\UnderDev\ViewModel\UserTestViewModel.cs
private async void TestWrongID()
        {
            replyLink = "post.php?action=reply&fid=2&tid=2";
            await DoPost();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\obiwang+S1Nyan\obiwang-S1Nyan-e615e80\UnderDev\ViewModel\UserTestViewModel.cs
private async void DoTest()
        {
            client = new S1WebClient();
            int fid = 2;
            //client.Headers[HttpRequestHeader.Referer] = "http://192.168.0.113:8080/phpwind/read.php?tid=1";
            //client.AddPostParam("replytouser", "asdf");
            //client.AddPostParam("cyid", "1");
            //client.AddPostParam("iscontinue", "0");
            //client.AddPostParam("atc_desc1", "");
            //client.AddPostParam("_hexie", "36c309f2");
            client.AddPostParam("atc_title", "12345");
            client.AddPostParam("verify", verify);
            client.AddPostParam("atc_usesign", "1");
            client.AddPostParam("atc_convert", "1");
            client.AddPostParam("atc_autourl", "1");
            client.AddPostParam("stylepath", "wind");

            client.AddPostParam(stepKey, 2);
            client.AddPostParam("action", "reply");
            client.AddPostParam("fid", fid);
            client.AddPostParam("tid", "1");
            client.AddPostParam("ajax", "1");

            client.AddPostParam("atc_content", "[s:13] test from client @" + DateTime.Now.ToShortTimeString() + deviceInfo);

            Result = await client.PostDataTaskAsync(new Uri(postFormatString + fid));
            //Result = await client.PostMultipartTaskAsync(new Uri(postUrl));
            string error = "";
            var match =resultPattern.Match(Result);
            if (match.Success)
                error = match.Groups["data"].Value;
            if (error.Length < 200)
                Debug.WriteLine(error);

            if (OnUpdateView != null) OnUpdateView(Result + ConvertExtendedASCII(error));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Oblo+Smile\Oblo-Smile-7d5a18e\Tutorial Windows Phone 8\App.xaml.cs
private async void Application_Launching(object sender, LaunchingEventArgs e)
        {
            await ViewModelLocator.InitAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\orsko+WP8HF\orsko-WP8HF-74fbaf4\WP8HF\AnswerQuestion.xaml.cs
private async void SayQuestion()
        {
            var voice = InstalledVoices.Default;

            using (var text2Speech = new SpeechSynthesizer())
            {
                text2Speech.SetVoice(voice);
                await text2Speech.SpeakTextAsync(Question);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\ovatsus+UKTrains\ovatsus-UKTrains-d35f46b\UKTrains.WP8\..\UKTrains.WP7\StationPage.xaml.cs
private async void OnShowPlatformOnLockScreenClick(object sender, EventArgs e) 
        {
            await Launcher.LaunchUriAsync(new Uri("ms-settings-lock:"));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\panohead\Coding4Fun PanoHead Windows Phone 8\Coding4Fun.PanoHead\MainPage.xaml.cs
private async void buttonCamera_Click(object sender, EventArgs e)
        {
            await _panoControl.TakePicture();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\panohead\Coding4Fun PanoHead Windows Phone 8\Coding4Fun.PanoHead\MainPage.xaml.cs
private async void buttonLeft_Click(object sender, EventArgs e)
        {
            await _panoControl.Left();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\panohead\Coding4Fun PanoHead Windows Phone 8\Coding4Fun.PanoHead\MainPage.xaml.cs
private async void buttonCancel_Click(object sender, EventArgs e)
        {
            await _panoControl.Stop();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\panohead\Coding4Fun PanoHead Windows Phone 8\Coding4Fun.PanoHead\MainPage.xaml.cs
private async void buttonRight_Click(object sender, EventArgs e)
        {
            await _panoControl.Right();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\panohead\Coding4Fun PanoHead Windows Phone 8\Coding4Fun.PanoHead\PanoControl.cs
public async Task SpinTheLights()
        {
            await SendCommand(Commands.CmdLeds);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\panohead\Coding4Fun PanoHead Windows Phone 8\Coding4Fun.PanoHead\PanoControl.cs
public async Task TakePicture()
        {
            await SendCommand(Commands.CmdShut);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\panohead\Coding4Fun PanoHead Windows Phone 8\Coding4Fun.PanoHead\PanoControl.cs
public async Task Left()
        {
            await SendCommand(Commands.CmdLeft);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\panohead\Coding4Fun PanoHead Windows Phone 8\Coding4Fun.PanoHead\PanoControl.cs
public async Task Right()
        {
            await SendCommand(Commands.CmdRight);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\panohead\Coding4Fun PanoHead Windows Phone 8\Coding4Fun.PanoHead\PanoControl.cs
public async Task Stop()
        {
            await SendCommand(Commands.CmdStop);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\panohead\Coding4Fun PanoHead Windows Phone 8\Coding4Fun.PanoHead\PanoControl.cs
public async Task Pano()
        {
            await SendCommand(String.Format("{0},{1}", Commands.CmdPano, App.panoViewModel.MakePanoCommand()));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\passick+wp.fm\passick-wp.fm-80d5150\lastfm\API\album.cs
public static async Task<List<albumInfo>> search(string albumName, int page = 0, int limit = 30)
        {
            RequestParameters rParams = new RequestParameters("album.search");
            rParams.Add("album", albumName);
            rParams.Add("limit", limit.ToString());
            rParams.Add("page", page.ToString());
            XDocument returnedXml = await Request.MakeRequest(rParams);
            if (Request.CheckStatus(returnedXml) == 0)
            {
                List<albumInfo> albums = new List<albumInfo>((from item in returnedXml.Descendants("albummatches").Elements() select new albumInfo(item)));
                XNamespace opensearch = @"http://a9.com/-/spec/opensearch/1.1/";
                IEnumerable<XElement> opensearch_ = from el in returnedXml.Element("lfm").Element("results").Elements()
                                                    where el.Name.Namespace == opensearch
                                                    select el;
                int totalResults = Int32.Parse((from el in opensearch_ where el.Name.LocalName == "totalResults" select el.Value).First());
                int startIndex = Int32.Parse((from el in opensearch_ where el.Name.LocalName == "startIndex" select el.Value).First());
                int itemsPerPage = Int32.Parse((from el in opensearch_ where el.Name.LocalName == "itemsPerPage" select el.Value).First());
                if (totalResults - startIndex < 0)
                    throw new IndexOutOfRangeException("Page being shown is the first page");
                return albums;
            }
            else
                throw new LastFmAPIException(returnedXml);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\passick+wp.fm\passick-wp.fm-80d5150\lastfm\API\album.cs
public static async Task<albumInfo> getInfo(string artistName, string albumName, string username = "", string lang = "en")
        {
            RequestParameters rParams = new RequestParameters("album.getinfo");
            rParams.Add("artist", artistName);
            rParams.Add("album", albumName);
            if (!string.IsNullOrEmpty(username))
                rParams.Add("username", username);
            rParams.Add("lang", lang);
            XDocument returnedXml = await Request.MakeRequest(rParams);
            if (Request.CheckStatus(returnedXml) == 0)
            {
                albumInfo album = new albumInfo(returnedXml.Element("lfm").Element("album"));
                return album;
            }
            else
                throw new LastFmAPIException(returnedXml);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\passick+wp.fm\passick-wp.fm-80d5150\lastfm\API\chart.cs
public static async Task<List<artistInfo>> getTopArtists(int page = 1, int limit = 50)
        {
            RequestParameters rParams = new RequestParameters("chart.getTopArtists");
            rParams.Add("page", page.ToString());
            rParams.Add("limit", limit.ToString());
            XDocument returnedXml = await Request.MakeRequest(rParams);
            if (Request.CheckStatus(returnedXml) == 0)
            {
                List<artistInfo> artists = new List<artistInfo>(from item in returnedXml.Descendants("artists").Elements()
                                                                select new artistInfo(item));
                int totalResults = Int32.Parse(returnedXml.Element("lfm").Element("artists").Attribute("total").Value);
                int currentPage = Int32.Parse(returnedXml.Element("lfm").Element("artists").Attribute("page").Value);
                int itemsPerPage = Int32.Parse(returnedXml.Element("lfm").Element("artists").Attribute("perPage").Value);
                // chart.getTopArtists if passed page number is more than the overall number of pages does load the last page
                if (currentPage != page)
                    throw new IndexOutOfRangeException("No more pages to show");
                return artists;
            }
            else
                throw new LastFmAPIException(returnedXml);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\passick+wp.fm\passick-wp.fm-80d5150\lastfm\API\artist.cs
public static async Task<artistInfo> getInfo(string artistName)
        {
            RequestParameters rParams = new RequestParameters("artist.getinfo");
            rParams.Add("artist", artistName);
            XDocument returnedXml = await Request.MakeRequest(rParams);
            if (Request.CheckStatus(returnedXml) == 0)
            {
                artistInfo artist = new artistInfo(returnedXml.Element("lfm").Element("artist"));
                return artist;
            }
            else
                throw new LastFmAPIException(returnedXml);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\passick+wp.fm\passick-wp.fm-80d5150\lastfm\API\artist.cs
public static async Task<List<albumInfo>> getTopAlbums(string artistName, int page = 0, int limit = 0)
        {
            RequestParameters rParams = new RequestParameters("artist.getTopAlbums");
            rParams.Add("artist", artistName);
            rParams.Add("page", page.ToString());
            rParams.Add("limit", limit.ToString());
            XDocument returnedXml = await Request.MakeRequest(rParams);
            if (Request.CheckStatus(returnedXml) == 0)
            {
                List<albumInfo> albums = new List<albumInfo>((from item in returnedXml.Descendants("topalbums").Elements() select new albumInfo(item)));
                return albums;
            }
            else
                throw new LastFmAPIException(returnedXml);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\passick+wp.fm\passick-wp.fm-80d5150\lastfm\API\artist.cs
public static async Task<List<artistInfo>> search(string artistName, int page = 0, int limit = 30)
        {
            RequestParameters rParams = new RequestParameters("artist.search");
            rParams.Add("artist", artistName);
            rParams.Add("page", page.ToString());
            rParams.Add("limit", limit.ToString());
            XDocument returnedXml = await Request.MakeRequest(rParams);
            if (Request.CheckStatus(returnedXml) == 0)
            {
                List<artistInfo> artists = new List<artistInfo>((from item in returnedXml.Descendants("artistmatches").Elements() select new artistInfo(item)));
                XNamespace opensearch = @"http://a9.com/-/spec/opensearch/1.1/";
                IEnumerable<XElement> opensearch_ = from el in returnedXml.Element("lfm").Element("results").Elements()
                                                   where el.Name.Namespace == opensearch
                                                   select el;
                int totalResults = Int32.Parse((from el in opensearch_ where el.Name.LocalName == "totalResults" select el.Value).First());
                int startIndex = Int32.Parse((from el in opensearch_ where el.Name.LocalName == "startIndex" select el.Value).First());
                int itemsPerPage = Int32.Parse((from el in opensearch_ where el.Name.LocalName == "itemsPerPage" select el.Value).First());
                if (totalResults - startIndex < 0)
                    throw new IndexOutOfRangeException("Page being shown is the first page");
                return artists;
            }
            else
                throw new LastFmAPIException(returnedXml);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\passick+wp.fm\passick-wp.fm-80d5150\lastfm\Requests\Request.cs
public async static Task<XDocument> MakeRequest(RequestParameters rParams, bool toSign = false)
        {
            try { rParams.Add("api_key", secret_data.api_key); }
            catch (ArgumentException) { }
            if (toSign == true)
            {
                StringBuilder sb = new StringBuilder();
                //All arguments must be sorted in signature
                //Because silverlight doesn't support SortedDictionary, I used Linq instead
                var sortedList = from q in rParams orderby q.Key ascending select q.Key;

                foreach (string key in sortedList)
                    sb.Append(key.ToString() + rParams[key]);

                sb.Append(secret_data.secret);
                rParams.Add("api_sig", MD5CryptoServiceProvider.GetMd5String(sb.ToString()));
            }
            string request_string = rParams.ToString();
            WebClient client = new WebClient();
            client.Headers["User-Agent"] = "wp.fm";
            client.Headers["Content-Type"] = "application/x-www-form-urlencoded";
            client.Headers["Accept-Charset"] = "utf-8";
            client.Encoding = Encoding.UTF8;
            byte[] byteArray = rParams.ToBytes();
            Stream toReadFrom;
            try
            {
                string response = "response string not set";
                response = await client.UploadStringTaskAsync(new Uri(root_url), "POST", rParams.ToString());
                toReadFrom = new MemoryStream(Encoding.UTF8.GetBytes(response));
            }
            catch (WebException ex)
            {
                toReadFrom = ((HttpWebResponse)ex.Response).GetResponseStream();
            }
            return XDocument.Load(new XmlSanitizingStream(toReadFrom)); 
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\passick+wp.fm\passick-wp.fm-80d5150\lastfm\API\tag.cs
public static async Task<List<tagInfo>> search(string tagName, int page = 0, int limit = 30)
        {
            RequestParameters rParams = new RequestParameters("tag.search");
            rParams.Add("tag", tagName);
            rParams.Add("limit", limit.ToString());
            rParams.Add("page", page.ToString());
            XDocument returnedXml = await Request.MakeRequest(rParams);
            if (Request.CheckStatus(returnedXml) == 0)
            {
                List<tagInfo> tags = new List<tagInfo>((from item in returnedXml.Descendants("tagmatches").Elements() select new tagInfo(item)));
                XNamespace opensearch = @"http://a9.com/-/spec/opensearch/1.1/";
                IEnumerable<XElement> opensearch_ = from el in returnedXml.Element("lfm").Element("results").Elements()
                                                    where el.Name.Namespace == opensearch
                                                    select el;
                int totalResults = Int32.Parse((from el in opensearch_ where el.Name.LocalName == "totalResults" select el.Value).First());
                int startIndex = Int32.Parse((from el in opensearch_ where el.Name.LocalName == "startIndex" select el.Value).First());
                int itemsPerPage = Int32.Parse((from el in opensearch_ where el.Name.LocalName == "itemsPerPage" select el.Value).First());
                if (totalResults - startIndex < 0)
                    throw new IndexOutOfRangeException("Page being shown is the first page");
                return tags;
            }
            else
                throw new LastFmAPIException(returnedXml);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\passick+wp.fm\passick-wp.fm-80d5150\lastfm\API\tag.cs
public static async Task<tagInfo> getInfo(string tagName, string lang = "en")
        {
            RequestParameters rParams = new RequestParameters("tag.getinfo");
            rParams.Add("tag", tagName);
            rParams.Add("lang", lang);
            XDocument returnedXml = await Request.MakeRequest(rParams);
            if (Request.CheckStatus(returnedXml) == 0)
            {
                tagInfo retTag = new tagInfo(returnedXml.Element("lfm").Element("tag"));
                return retTag;
            }
            else
                throw new LastFmAPIException(returnedXml);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\passick+wp.fm\passick-wp.fm-80d5150\lastfm\API\track.cs
public static async Task<List<trackInfo>> search(string trackName, int page = 0, int limit = 30)
        {
            RequestParameters rParams = new RequestParameters("track.search");
            rParams.Add("track", trackName);
            rParams.Add("limit", limit.ToString());
            rParams.Add("page", page.ToString());
            XDocument returnedXml = await Request.MakeRequest(rParams);
            if (Request.CheckStatus(returnedXml) == 0)
            {
                List<trackInfo> tracks = new List<trackInfo>((from item in returnedXml.Descendants("trackmatches").Elements() select new trackInfo(item)));
                XNamespace opensearch = @"http://a9.com/-/spec/opensearch/1.1/";
                IEnumerable<XElement> opensearch_ = from el in returnedXml.Element("lfm").Element("results").Elements()
                                                    where el.Name.Namespace == opensearch
                                                    select el;
                int totalResults = Int32.Parse((from el in opensearch_ where el.Name.LocalName == "totalResults" select el.Value).First());
                int startIndex = Int32.Parse((from el in opensearch_ where el.Name.LocalName == "startIndex" select el.Value).First());
                int itemsPerPage = Int32.Parse((from el in opensearch_ where el.Name.LocalName == "itemsPerPage" select el.Value).First());
                if (totalResults - startIndex < 0)
                    throw new IndexOutOfRangeException("Page being shown is the first page");
                return tracks;
            }
            else
                throw new LastFmAPIException(returnedXml);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\passick+wp.fm\passick-wp.fm-80d5150\lastfm\API\track.cs
public static async Task<trackInfo> getInfo(string artistName, string trackName, string username = "")
        {
            RequestParameters rParams = new RequestParameters("track.getinfo");
            rParams.Add("artist", artistName);
            rParams.Add("track", trackName);
            if (!string.IsNullOrEmpty(username))
                rParams.Add("username", username);
            XDocument returnedXml = await Request.MakeRequest(rParams);
            if (Request.CheckStatus(returnedXml) == 0)
            {
                trackInfo track = new trackInfo(returnedXml.Element("lfm").Element("track"));
                return track;
            }
            else if (Request.CheckStatus(returnedXml) == 6) // Track not found
            {
                // Trying with autocorrect
                rParams.Add("autocorrect", "1");
                returnedXml = await Request.MakeRequest(rParams);
                if (Request.CheckStatus(returnedXml) == 0)
                {
                    trackInfo track = new trackInfo(returnedXml.Element("lfm").Element("track"));
                    return track;
                }
                else
                    throw new LastFmAPIException(returnedXml);
            }
            else
                throw new LastFmAPIException(returnedXml);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\passick+wp.fm\passick-wp.fm-80d5150\lastfm\API\track.cs
public static async void love(string trackName, string artistName)
        {
            if (!Session.CanUseCurrentSession())
                throw new UnauthorizedException("User must login to perform this action");
            RequestParameters rParams = new RequestParameters("track.love");
            rParams.Add("artist", artistName);
            rParams.Add("track", trackName);
            rParams.Add("sk", Session.CurrentSession.SessionKey);
            XDocument returnedXml = await Request.MakeRequest(rParams, true);
            if (Request.CheckStatus(returnedXml) != 0)
                throw new LastFmAPIException(returnedXml);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\passick+wp.fm\passick-wp.fm-80d5150\lastfm\API\track.cs
public static async void unlove(string trackName, string artistName)
        {
            if (!Session.CanUseCurrentSession())
                throw new UnauthorizedException("User must login to perform this action");
            RequestParameters rParams = new RequestParameters("track.unlove");
            rParams.Add("artist", artistName);
            rParams.Add("track", trackName);
            rParams.Add("sk", Session.CurrentSession.SessionKey);
            XDocument returnedXml = await Request.MakeRequest(rParams, true);
            if (Request.CheckStatus(returnedXml) != 0)
                throw new LastFmAPIException(returnedXml);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\passick+wp.fm\passick-wp.fm-80d5150\lastfm\API\user.cs
public static async Task<UserInfo> getInfo(string user)
        {
            RequestParameters rParams = new RequestParameters("user.getinfo");
            rParams.Add("user", user);
            XDocument ReturnedXML = await Request.MakeRequest(rParams);
            if (Request.CheckStatus(ReturnedXML) == 0)
                return new UserInfo(ReturnedXML.Element("lfm").Element("user"));
            else
                throw new LastFmAPIException(Request.GetErrorMessage(ReturnedXML), Request.CheckStatus(ReturnedXML));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\passick+wp.fm\passick-wp.fm-80d5150\lastfm\API\user.cs
public static async Task<List<trackInfo>> getRecentTracks(String user, int limit = 50, int page = 1)
        {
            RequestParameters rParams = new RequestParameters("user.getRecentTracks");
            rParams.Add("user", user);
            rParams.Add("limit", limit.ToString());
            rParams.Add("page", page.ToString());
            XDocument returnedXml = await Request.MakeRequest(rParams);
            if (Request.CheckStatus(returnedXml) == 0)
            {
                int totalPagesAttr = Int32.Parse(returnedXml.Element("lfm").Element("recenttracks").Attribute("totalPages").Value);
                if (page > totalPagesAttr)
                    throw new ArgumentOutOfRangeException("page", "Page number is greater than total amount of pages");
                List<trackInfo> tracks = new List<trackInfo>(from item in returnedXml.Element("lfm").Element("recenttracks").Elements() select new trackInfo(item));
                return tracks;
            }
            else
                throw new LastFmAPIException(Request.GetErrorMessage(returnedXml), Request.CheckStatus(returnedXml));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\passick+wp.fm\passick-wp.fm-80d5150\lastfm\API\user.cs
public static async Task<List<artistInfo>> getRecommendedArtists(int page = 1, int limit = 50)
        {
            RequestParameters rParams = new RequestParameters("user.getRecommendedArtists");
            rParams.Add("limit", limit.ToString());
            rParams.Add("page", page.ToString());
            rParams.Add("sk", Session.CurrentSession.SessionKey);
            XDocument returnedXml = await Request.MakeRequest(rParams, true);
            if (Request.CheckStatus(returnedXml) == 0)
            {
                int totalPagesAttr = Int32.Parse(returnedXml.Element("lfm").Element("recommendations").Attribute("totalPages").Value);
                if (page > totalPagesAttr)
                    throw new ArgumentOutOfRangeException("page", "Page number is greater than total amount of pages");
                List<artistInfo> artists = new List<artistInfo>(from item in returnedXml.Element("lfm").Element("recommendations").Elements() select new artistInfo(item));
                return artists;
            }
            else
                throw new LastFmAPIException(returnedXml);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\Helpers\ExtensionMethods.cs
public static async Task<T> SendAndDeserialize<T>(this HttpClient client, HttpRequestMessage requestMessage, CancellationToken cancellationToken)
        {
            var response = await client.SendAsync(requestMessage, cancellationToken);

            if (response.StatusCode == HttpStatusCode.NotModified)
            {
                return default(T);
            }

            response.EnsureSuccessStatusCode();

            return JsonConvert.DeserializeObject<T>(await response.Content.ReadAsStringAsync());
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\Service\GoogleAuthService.cs
public async Task<GoogleAuthToken> ExchangeAuthorizationCode(string code, CancellationToken cancellationToken)
        {
            var formPostValues = new Dictionary<string, string>
            {
                { "code", code },
                { "client_id", _clientSettings.ClientId },
                { "client_secret", _clientSettings.ClientSecret },
                { "redirect_uri", "http://localhost" },
                { "grant_type", "authorization_code" }
            };

            var requestMessage = new HttpRequestMessage
            {
                Method = HttpMethod.Post,
                Content = new FormUrlEncodedContent(formPostValues)
            };

            var result = await _client.SendAndDeserialize<GoogleAuthToken>(requestMessage, cancellationToken);

            result.ExpiresDateTime = DateTime.Now.AddSeconds(result.ExpiresIn - SafeExpirationWindow);

            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\Service\GoogleAuthService.cs
public async Task<GoogleAuthToken> RefreshToken(GoogleAuthToken authToken, CancellationToken cancellationToken)
        {
            var formPostValues = new Dictionary<string, string>
            {
                { "client_id", _clientSettings.ClientId },
                { "client_secret", _clientSettings.ClientSecret },
                { "refresh_token", authToken.RefreshToken },
                { "grant_type", "refresh_token" }
            };

            var requestMessage = new HttpRequestMessage
            {
                Method = HttpMethod.Post,
                Content = new FormUrlEncodedContent(formPostValues)
            };

            var result = await _client.SendAndDeserialize<GoogleAuthToken>(requestMessage, cancellationToken);

            result.RefreshToken = authToken.RefreshToken;
            result.ExpiresDateTime = DateTime.Now.AddSeconds(result.ExpiresIn - SafeExpirationWindow);

            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\Service\GoogleDriveService.cs
public async Task<byte[]> FileDownload(GoogleAuthToken authToken, string downloadUrl, CancellationToken cancellationToken)
        {
            var request = _googleAuthService.CreateRestRequest(authToken,downloadUrl, HttpMethod.Get);

            var response = await _client.SendAsync(request, cancellationToken);

            response.EnsureSuccessStatusCode();

            return await response.Content.ReadAsByteArrayAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\Model\MainModel.cs
public async Task CheckToken(CancellationToken cancellationToken)
        {
            var authToken = CurrentAccount.AuthToken;

            if (DateTime.Now > authToken.ExpiresDateTime)
            {
                _systemTrayService.SetProgressIndicator("Refreshing the access token...");

                CurrentAccount.AuthToken = await _googleAuthService.RefreshToken(authToken, cancellationToken);

                Save();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\ViewModel\AuthorizationViewModel.cs
private async void ExchangeAuthorizationCode(string authorizationCode)
        {
            try
            {
                var authToken = await _googleAuthService.ExchangeAuthorizationCode(authorizationCode, CancellationToken.None);

                var userInfo = await _googleOAuth2Service.GetUserInfo(authToken, CancellationToken.None);

                _systemTrayService.HideProgressIndicator();

                var email = userInfo.EMail;

                var oldAccount = _mainModel.AvailableAccounts.FirstOrDefault(x => x.Name == email);

                if (oldAccount != null)
                {
                    _mainModel.AvailableAccounts.Remove(oldAccount);
                }

                _mainModel.AvailableAccounts.Add(new AccountModel(email, authToken));
                _mainModel.Save();

                MessengerInstance.Send(new AvailableAccountsChangedMessage());

                _navigationService.GoBack();
            }
            catch
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Unable to retrieve the access tokens!", "Error");
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\ViewModel\ExplorerViewModel.cs
private async void ExecuteInitialLoad()
        {
            if (!_mainModel.ExecuteInitialLoad)
            {
                return;
            }

            _mainModel.ExecuteInitialLoad = false;

            AbortCurrentCall();

            try
            {
                await _mainModel.CheckToken(_cancellationTokenSource.Token);

                _systemTrayService.SetProgressIndicator("Reading drive info...");

                var about = await _googleDriveService.About(_mainModel.CurrentAccount.AuthToken, new GoogleDriveAboutRequest()
                {
                    ETag = _mainModel.CurrentAccount.Info != null ? _mainModel.CurrentAccount.Info.ETag : null
                }, _cancellationTokenSource.Token);

                if (about != null)
                {
                    _mainModel.CurrentAccount.Info = about;
                    _mainModel.Save();
                }

                await RefreshFilesAsync();
            }
            catch (TaskCanceledException)
            {
                _systemTrayService.HideProgressIndicator();
            }
            catch (Exception)
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Unable to get the drive information!", "Error");
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\ViewModel\ExplorerViewModel.cs
private async void ChangeStaredStatus(GoogleFileViewModel fileViewModel)
        {
            if (IsBusy)
            {
                return;
            }

            AbortCurrentCall();

            try
            {
                await _mainModel.CheckToken(_cancellationTokenSource.Token);

                _systemTrayService.SetProgressIndicator("Changing file star state...");

                var currentStaredtatus = fileViewModel.FileModel.Labels.Starred;

                var fileModel = await _googleDriveService.FilesUpdate(_mainModel.CurrentAccount.AuthToken, fileViewModel.Id, new GoogleDriveFilesUpdateRequest()
                {
                    File = new GoogleDriveFile()
                    {
                        Labels = new GoogleDriveLabels()
                        {
                            Starred = !currentStaredtatus.GetValueOrDefault()
                        }
                    },
                    Fields = GoogleDriveFileFields
                }, _cancellationTokenSource.Token);

                fileViewModel.FileModel = fileModel;

                _systemTrayService.HideProgressIndicator();
            }
            catch (TaskCanceledException)
            {
                _systemTrayService.HideProgressIndicator();
            }
            catch (Exception)
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Unable to change the file star state!", "Error");
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\ViewModel\ExplorerViewModel.cs
private async void RefreshFiles()
        {
            await RefreshFilesAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\ViewModel\ExplorerViewModel.cs
private async void DeleteFile(GoogleFileViewModel fileViewModel)
        {
            AbortCurrentCall();

            await DeleteFileAsync(fileViewModel);

            _systemTrayService.HideProgressIndicator();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\ViewModel\ExplorerViewModel.cs
private async void DeleteFiles(IEnumerable<GoogleFileViewModel> filesToDelete)
        {
            AbortCurrentCall();

            foreach (var fileViewModel in filesToDelete)
            {
                if (!await DeleteFileAsync(fileViewModel))
                {
                    break;
                }
            }

            _systemTrayService.HideProgressIndicator();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\ViewModel\ExplorerViewModel.cs
private async Task RefreshFilesAsync()
        {
            AbortCurrentCall();

            try
            {
                var currentFolderId = _mainModel.CurrentFolderId;

                await _mainModel.CheckToken(_cancellationTokenSource.Token);

                _systemTrayService.SetProgressIndicator("Refreshing the file list...");

                Files.Clear();
                PictureFiles.Clear();

                string pageToken = null;

                while (true)
                {
                    var filesListResponse = await _googleDriveService.FilesList(_mainModel.CurrentAccount.AuthToken, new GoogleDriveFilesListRequest()
                    {
                        Query = "trashed=false and '{0}' in parents".FormatWith(currentFolderId),
                        Fields = GoogleDriveFilesListFields,
                        PageToken = pageToken
                    }, _cancellationTokenSource.Token);

                    if (filesListResponse.Items != null)
                    {
                        foreach (var item in filesListResponse.Items)
                        {
                            var googleFileViewModel = new GoogleFileViewModel(item);

                            Files.Add(googleFileViewModel);

                            if (item != null && !string.IsNullOrEmpty(item.ThumbnailLink))
                            {
                                PictureFiles.Add(googleFileViewModel);
                            }
                        }
                    }

                    pageToken = filesListResponse.NextPageToken;

                    if (string.IsNullOrEmpty(pageToken))
                    {
                        _systemTrayService.HideProgressIndicator();

                        return;
                    }
                }
            }
            catch (TaskCanceledException)
            {
                _systemTrayService.HideProgressIndicator();
            }
            catch (Exception)
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Unable to update the file list!", "Error");
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\ViewModel\ExplorerViewModel.cs
private async Task<bool> DeleteFileAsync(GoogleFileViewModel fileViewModel)
        {
            try
            {
                await _mainModel.CheckToken(_cancellationTokenSource.Token);

                _systemTrayService.SetProgressIndicator(string.Format("Deleting: {0}...", fileViewModel.Title));

                await _googleDriveService.FilesDelete(_mainModel.CurrentAccount.AuthToken, fileViewModel.Id, _cancellationTokenSource.Token);

                lock (Files)
                {
                    if (Files.Contains(fileViewModel))
                    {
                        Files.Remove(fileViewModel);
                    }
                }

                return true;
            }
            catch
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show(string.Format("Unable to delete '{0}'!", fileViewModel.Title), "Error");
            }

            return false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\ViewModel\NewFolderViewModel.cs
private async void CreateNewFolder()
        {
            try
            {
                await _mainModel.CheckToken(CancellationToken.None);
            
                _systemTrayService.SetProgressIndicator("Creating new folder...");

                var file = await _googleDriveService.FilesInsert(_mainModel.CurrentAccount.AuthToken, new GoogleDriveFilesInsertRequest()
                {
                    Filename = FolderName,
                    FolderId = _mainModel.CurrentFolderId,
                    Fields = GoogleDriveFileFields
                }, CancellationToken.None);

                FolderName = string.Empty;

                MessengerInstance.Send(new RefreshFilesMessage());

                _navigationService.GoBack();
            }
            catch (TaskCanceledException)
            {
                _systemTrayService.HideProgressIndicator();
            }
            catch (Exception)
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Unable to create the new folder!", "Error");
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\ViewModel\RenameFileViewModel.cs
private async void RenameFile()
        {
            try
            {
                await _mainModel.CheckToken(CancellationToken.None);

                _systemTrayService.SetProgressIndicator("Renaming the file...");

                var file = await _googleDriveService.FilesUpdate(_mainModel.CurrentAccount.AuthToken, _mainModel.SelectedFile.Id, new GoogleDriveFilesUpdateRequest()
                {
                    File = new GoogleDriveFile()
                    {
                        Title = FileName
                    },
                    Fields = GoogleDriveFileFields
                }, CancellationToken.None);

                _mainModel.SelectedFile = null;

                MessengerInstance.Send(new RefreshFilesMessage());

                _navigationService.GoBack();
            }
            catch (TaskCanceledException)
            {
                _systemTrayService.HideProgressIndicator();
            }
            catch (Exception)
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Unable to rename the file!", "Error");
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP7\ViewModel\ViewFileViewModel.cs
private async void DownloadFile()
        {
            try
            {
                AbortCurrentCall();

                await _mainModel.CheckToken(CancellationToken.None);

                _systemTrayService.SetProgressIndicator("Downloading file...");

                var fileData = await _googleDriveService.FileDownload(_mainModel.CurrentAccount.AuthToken, _mainModel.SelectedFile.DownloadUrl, CancellationToken.None);

                var destinationFilename = string.Format("{0}_{1:ddMMyyyyHHmmss}{2}", 
                    Path.GetFileNameWithoutExtension(_mainModel.SelectedFile.Title), 
                    DateTime.Now, 
                    Path.GetExtension(_mainModel.SelectedFile.Title));

                _mediaLibraryService.SavePicture(destinationFilename, fileData);

                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Image file downloaded and saved to phone successfully!", "File Downloaded");
            }
            catch (TaskCanceledException)
            {
                _systemTrayService.HideProgressIndicator();
            }
            catch (Exception)
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Unable to download file!", "Error");
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP8\..\PedroLamas.GDrive.WP7\Helpers\ExtensionMethods.cs
public static async Task<T> SendAndDeserialize<T>(this HttpClient client, HttpRequestMessage requestMessage, CancellationToken cancellationToken)
        {
            var response = await client.SendAsync(requestMessage, cancellationToken);

            if (response.StatusCode == HttpStatusCode.NotModified)
            {
                return default(T);
            }

            response.EnsureSuccessStatusCode();

            return JsonConvert.DeserializeObject<T>(await response.Content.ReadAsStringAsync());
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP8\..\PedroLamas.GDrive.WP7\Model\MainModel.cs
public async Task CheckToken(CancellationToken cancellationToken)
        {
            var authToken = CurrentAccount.AuthToken;

            if (DateTime.Now > authToken.ExpiresDateTime)
            {
                _systemTrayService.SetProgressIndicator("Refreshing the access token...");

                CurrentAccount.AuthToken = await _googleAuthService.RefreshToken(authToken, cancellationToken);

                Save();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP8\..\PedroLamas.GDrive.WP7\Service\GoogleAuthService.cs
public async Task<GoogleAuthToken> ExchangeAuthorizationCode(string code, CancellationToken cancellationToken)
        {
            var formPostValues = new Dictionary<string, string>
            {
                { "code", code },
                { "client_id", _clientSettings.ClientId },
                { "client_secret", _clientSettings.ClientSecret },
                { "redirect_uri", "http://localhost" },
                { "grant_type", "authorization_code" }
            };

            var requestMessage = new HttpRequestMessage
            {
                Method = HttpMethod.Post,
                Content = new FormUrlEncodedContent(formPostValues)
            };

            var result = await _client.SendAndDeserialize<GoogleAuthToken>(requestMessage, cancellationToken);

            result.ExpiresDateTime = DateTime.Now.AddSeconds(result.ExpiresIn - SafeExpirationWindow);

            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP8\..\PedroLamas.GDrive.WP7\Service\GoogleAuthService.cs
public async Task<GoogleAuthToken> RefreshToken(GoogleAuthToken authToken, CancellationToken cancellationToken)
        {
            var formPostValues = new Dictionary<string, string>
            {
                { "client_id", _clientSettings.ClientId },
                { "client_secret", _clientSettings.ClientSecret },
                { "refresh_token", authToken.RefreshToken },
                { "grant_type", "refresh_token" }
            };

            var requestMessage = new HttpRequestMessage
            {
                Method = HttpMethod.Post,
                Content = new FormUrlEncodedContent(formPostValues)
            };

            var result = await _client.SendAndDeserialize<GoogleAuthToken>(requestMessage, cancellationToken);

            result.RefreshToken = authToken.RefreshToken;
            result.ExpiresDateTime = DateTime.Now.AddSeconds(result.ExpiresIn - SafeExpirationWindow);

            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP8\..\PedroLamas.GDrive.WP7\Service\GoogleDriveService.cs
public async Task<byte[]> FileDownload(GoogleAuthToken authToken, string downloadUrl, CancellationToken cancellationToken)
        {
            var request = _googleAuthService.CreateRestRequest(authToken,downloadUrl, HttpMethod.Get);

            var response = await _client.SendAsync(request, cancellationToken);

            response.EnsureSuccessStatusCode();

            return await response.Content.ReadAsByteArrayAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP8\..\PedroLamas.GDrive.WP7\ViewModel\AuthorizationViewModel.cs
private async void ExchangeAuthorizationCode(string authorizationCode)
        {
            try
            {
                var authToken = await _googleAuthService.ExchangeAuthorizationCode(authorizationCode, CancellationToken.None);

                var userInfo = await _googleOAuth2Service.GetUserInfo(authToken, CancellationToken.None);

                _systemTrayService.HideProgressIndicator();

                var email = userInfo.EMail;

                var oldAccount = _mainModel.AvailableAccounts.FirstOrDefault(x => x.Name == email);

                if (oldAccount != null)
                {
                    _mainModel.AvailableAccounts.Remove(oldAccount);
                }

                _mainModel.AvailableAccounts.Add(new AccountModel(email, authToken));
                _mainModel.Save();

                MessengerInstance.Send(new AvailableAccountsChangedMessage());

                _navigationService.GoBack();
            }
            catch
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Unable to retrieve the access tokens!", "Error");
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP8\..\PedroLamas.GDrive.WP7\ViewModel\ExplorerViewModel.cs
private async void ExecuteInitialLoad()
        {
            if (!_mainModel.ExecuteInitialLoad)
            {
                return;
            }

            _mainModel.ExecuteInitialLoad = false;

            AbortCurrentCall();

            try
            {
                await _mainModel.CheckToken(_cancellationTokenSource.Token);

                _systemTrayService.SetProgressIndicator("Reading drive info...");

                var about = await _googleDriveService.About(_mainModel.CurrentAccount.AuthToken, new GoogleDriveAboutRequest()
                {
                    ETag = _mainModel.CurrentAccount.Info != null ? _mainModel.CurrentAccount.Info.ETag : null
                }, _cancellationTokenSource.Token);

                if (about != null)
                {
                    _mainModel.CurrentAccount.Info = about;
                    _mainModel.Save();
                }

                await RefreshFilesAsync();
            }
            catch (TaskCanceledException)
            {
                _systemTrayService.HideProgressIndicator();
            }
            catch (Exception)
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Unable to get the drive information!", "Error");
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP8\..\PedroLamas.GDrive.WP7\ViewModel\ExplorerViewModel.cs
private async void ChangeStaredStatus(GoogleFileViewModel fileViewModel)
        {
            if (IsBusy)
            {
                return;
            }

            AbortCurrentCall();

            try
            {
                await _mainModel.CheckToken(_cancellationTokenSource.Token);

                _systemTrayService.SetProgressIndicator("Changing file star state...");

                var currentStaredtatus = fileViewModel.FileModel.Labels.Starred;

                var fileModel = await _googleDriveService.FilesUpdate(_mainModel.CurrentAccount.AuthToken, fileViewModel.Id, new GoogleDriveFilesUpdateRequest()
                {
                    File = new GoogleDriveFile()
                    {
                        Labels = new GoogleDriveLabels()
                        {
                            Starred = !currentStaredtatus.GetValueOrDefault()
                        }
                    },
                    Fields = GoogleDriveFileFields
                }, _cancellationTokenSource.Token);

                fileViewModel.FileModel = fileModel;

                _systemTrayService.HideProgressIndicator();
            }
            catch (TaskCanceledException)
            {
                _systemTrayService.HideProgressIndicator();
            }
            catch (Exception)
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Unable to change the file star state!", "Error");
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP8\..\PedroLamas.GDrive.WP7\ViewModel\ExplorerViewModel.cs
private async void RefreshFiles()
        {
            await RefreshFilesAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP8\..\PedroLamas.GDrive.WP7\ViewModel\ExplorerViewModel.cs
private async void DeleteFile(GoogleFileViewModel fileViewModel)
        {
            AbortCurrentCall();

            await DeleteFileAsync(fileViewModel);

            _systemTrayService.HideProgressIndicator();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP8\..\PedroLamas.GDrive.WP7\ViewModel\ExplorerViewModel.cs
private async void DeleteFiles(IEnumerable<GoogleFileViewModel> filesToDelete)
        {
            AbortCurrentCall();

            foreach (var fileViewModel in filesToDelete)
            {
                if (!await DeleteFileAsync(fileViewModel))
                {
                    break;
                }
            }

            _systemTrayService.HideProgressIndicator();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP8\..\PedroLamas.GDrive.WP7\ViewModel\ExplorerViewModel.cs
private async Task RefreshFilesAsync()
        {
            AbortCurrentCall();

            try
            {
                var currentFolderId = _mainModel.CurrentFolderId;

                await _mainModel.CheckToken(_cancellationTokenSource.Token);

                _systemTrayService.SetProgressIndicator("Refreshing the file list...");

                Files.Clear();
                PictureFiles.Clear();

                string pageToken = null;

                while (true)
                {
                    var filesListResponse = await _googleDriveService.FilesList(_mainModel.CurrentAccount.AuthToken, new GoogleDriveFilesListRequest()
                    {
                        Query = "trashed=false and '{0}' in parents".FormatWith(currentFolderId),
                        Fields = GoogleDriveFilesListFields,
                        PageToken = pageToken
                    }, _cancellationTokenSource.Token);

                    if (filesListResponse.Items != null)
                    {
                        foreach (var item in filesListResponse.Items)
                        {
                            var googleFileViewModel = new GoogleFileViewModel(item);

                            Files.Add(googleFileViewModel);

                            if (item != null && !string.IsNullOrEmpty(item.ThumbnailLink))
                            {
                                PictureFiles.Add(googleFileViewModel);
                            }
                        }
                    }

                    pageToken = filesListResponse.NextPageToken;

                    if (string.IsNullOrEmpty(pageToken))
                    {
                        _systemTrayService.HideProgressIndicator();

                        return;
                    }
                }
            }
            catch (TaskCanceledException)
            {
                _systemTrayService.HideProgressIndicator();
            }
            catch (Exception)
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Unable to update the file list!", "Error");
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP8\..\PedroLamas.GDrive.WP7\ViewModel\ExplorerViewModel.cs
private async Task<bool> DeleteFileAsync(GoogleFileViewModel fileViewModel)
        {
            try
            {
                await _mainModel.CheckToken(_cancellationTokenSource.Token);

                _systemTrayService.SetProgressIndicator(string.Format("Deleting: {0}...", fileViewModel.Title));

                await _googleDriveService.FilesDelete(_mainModel.CurrentAccount.AuthToken, fileViewModel.Id, _cancellationTokenSource.Token);

                lock (Files)
                {
                    if (Files.Contains(fileViewModel))
                    {
                        Files.Remove(fileViewModel);
                    }
                }

                return true;
            }
            catch
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show(string.Format("Unable to delete '{0}'!", fileViewModel.Title), "Error");
            }

            return false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP8\..\PedroLamas.GDrive.WP7\ViewModel\NewFolderViewModel.cs
private async void CreateNewFolder()
        {
            try
            {
                await _mainModel.CheckToken(CancellationToken.None);
            
                _systemTrayService.SetProgressIndicator("Creating new folder...");

                var file = await _googleDriveService.FilesInsert(_mainModel.CurrentAccount.AuthToken, new GoogleDriveFilesInsertRequest()
                {
                    Filename = FolderName,
                    FolderId = _mainModel.CurrentFolderId,
                    Fields = GoogleDriveFileFields
                }, CancellationToken.None);

                FolderName = string.Empty;

                MessengerInstance.Send(new RefreshFilesMessage());

                _navigationService.GoBack();
            }
            catch (TaskCanceledException)
            {
                _systemTrayService.HideProgressIndicator();
            }
            catch (Exception)
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Unable to create the new folder!", "Error");
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP8\..\PedroLamas.GDrive.WP7\ViewModel\RenameFileViewModel.cs
private async void RenameFile()
        {
            try
            {
                await _mainModel.CheckToken(CancellationToken.None);

                _systemTrayService.SetProgressIndicator("Renaming the file...");

                var file = await _googleDriveService.FilesUpdate(_mainModel.CurrentAccount.AuthToken, _mainModel.SelectedFile.Id, new GoogleDriveFilesUpdateRequest()
                {
                    File = new GoogleDriveFile()
                    {
                        Title = FileName
                    },
                    Fields = GoogleDriveFileFields
                }, CancellationToken.None);

                _mainModel.SelectedFile = null;

                MessengerInstance.Send(new RefreshFilesMessage());

                _navigationService.GoBack();
            }
            catch (TaskCanceledException)
            {
                _systemTrayService.HideProgressIndicator();
            }
            catch (Exception)
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Unable to rename the file!", "Error");
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\PedroLamas+GDrive\PedroLamas-GDrive-c34e610\PedroLamas.GDrive.WP8\..\PedroLamas.GDrive.WP7\ViewModel\ViewFileViewModel.cs
private async void DownloadFile()
        {
            try
            {
                AbortCurrentCall();

                await _mainModel.CheckToken(CancellationToken.None);

                _systemTrayService.SetProgressIndicator("Downloading file...");

                var fileData = await _googleDriveService.FileDownload(_mainModel.CurrentAccount.AuthToken, _mainModel.SelectedFile.DownloadUrl, CancellationToken.None);

                var destinationFilename = string.Format("{0}_{1:ddMMyyyyHHmmss}{2}", 
                    Path.GetFileNameWithoutExtension(_mainModel.SelectedFile.Title), 
                    DateTime.Now, 
                    Path.GetExtension(_mainModel.SelectedFile.Title));

                _mediaLibraryService.SavePicture(destinationFilename, fileData);

                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Image file downloaded and saved to phone successfully!", "File Downloaded");
            }
            catch (TaskCanceledException)
            {
                _systemTrayService.HideProgressIndicator();
            }
            catch (Exception)
            {
                _systemTrayService.HideProgressIndicator();

                _messageBoxService.Show("Unable to download file!", "Error");
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\IHttpClient.cs
public async Task<IHttpResponseMessage> GetAsync(Uri requestUri)
        {
            return Factory.Instance.Get<IHttpResponseMessage>(await _client.GetAsync(requestUri));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\IHttpClient.cs
public async Task<IHttpResponseMessage> DeleteAsync(Uri requestUri)
        {
            return Factory.Instance.Get<IHttpResponseMessage>(await _client.DeleteAsync(requestUri));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\IHttpClient.cs
public async Task<IHttpResponseMessage> PutAsync(Uri requestUri, IHttpContent content)
        {

            var rawContent = Factory.Instance.Get<HttpContent>(content);
            return Factory.Instance.Get<IHttpResponseMessage>(await _client.PutAsync(requestUri, rawContent));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\IHttpClient.cs
public async Task<IHttpResponseMessage> PostAsync(Uri requestUri, IHttpContent content)
        {
            var rawContent = Factory.Instance.Get<HttpContent>(content);
            return Factory.Instance.Get<IHttpResponseMessage>(await _client.PostAsync(requestUri, rawContent));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\IHttpContent.cs
public async Task<string> ReadAsStringAsync()
        {
            return await Content.ReadAsStringAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyHandshake.cs
public async Task<KinveyHandshakeResponse> Do()
        {
            var uri = new Uri(string.Format("/appdata/{0}", KinveySettings.Get().AppKey), UriKind.Relative);

            var resp = await _httpClient.GetAsync(uri);
            var json = await resp.Content.ReadAsStringAsync();

            return JsonConvert.DeserializeObject<KinveyHandshakeResponse>(json);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyService.cs
public async Task<T> Create(T t)
        {
            var body = _factory.Get<IHttpContent>(JsonConvert.SerializeObject(t));
            var uri = new Uri(string.Format("/appdata/{0}/{1}/", KinveySettings.Get().AppKey, _entityName), UriKind.Relative);

            var response = await _httpClient.PostAsync(uri, body);
            return await GetResult<T>(response);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyService.cs
public async Task<T> Read(string id)
        {
            var uri = new Uri(string.Format("/appdata/{0}/{1}/{2}/", KinveySettings.Get().AppKey, _entityName, id), UriKind.Relative);

            var response = await _httpClient.GetAsync(uri);
            return await GetResult<T>(response);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyService.cs
public async Task<IEnumerable<T>> Read(KinveyConstraints<T> kinveyQuery)
        {
            var uri = new Uri(string.Format("/appdata/{0}/{1}/{2}", KinveySettings.Get().AppKey, _entityName, kinveyQuery), UriKind.Relative);

            var response = await _httpClient.GetAsync(uri);
            return await GetResult<IEnumerable<T>>(response);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyService.cs
public async Task<T> Update(T t)
        {
            var body = _factory.Get<IHttpContent>(JsonConvert.SerializeObject(t));
            var uri = new Uri(string.Format("/appdata/{0}/{1}/{2}", KinveySettings.Get().AppKey, _entityName, t.Id), UriKind.Relative);

            var response = await _httpClient.PutAsync(uri, body);
            return await GetResult<T>(response);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyService.cs
public async Task<int> Delete(T t)
        {
            var id = t.Id;
            var query = "{\"_id\": \"" + id + "\"}";
            var uri = new Uri(string.Format("/appdata/{0}/{1}/?query={2}", KinveySettings.Get().AppKey, _entityName, query), UriKind.Relative);

            var response = await _httpClient.DeleteAsync(uri);
            return (await GetResult<CountResponse>(response)).Count;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyService.cs
public async Task<int> Delete(KinveyConstraints<T> query)
        {
            var uri = new Uri(string.Format("/appdata/{0}/{1}/{2}", KinveySettings.Get().AppKey, _entityName, query), UriKind.Relative);

            var response = await _httpClient.DeleteAsync(uri);
            return (await GetResult<CountResponse>(response)).Count;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyService.cs
public async Task<int> Count()
        {
            var uri = new Uri(string.Format("/appdata/{0}/{1}/{2}", KinveySettings.Get().AppKey, _entityName, "_count"), UriKind.Relative);

            var response = await _httpClient.GetAsync(uri);
            return (await GetResult<CountResponse>(response)).Count;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyService.cs
public async Task<int> Count(KinveyConstraints<T> query)
        {
            var uri = new Uri(string.Format("/appdata/{0}/{1}/{2}/{3}", KinveySettings.Get().AppKey, _entityName, "_count", query), UriKind.Relative);

            var response = await _httpClient.GetAsync(uri);
            return (await GetResult<CountResponse>(response)).Count;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyService.cs
private static async Task<TR> GetResult<TR>(IHttpResponseMessage response)
        {
            var content = response.Content;
            var json = await content.ReadAsStringAsync();

            try
            {
                var errorObject = JsonConvert.DeserializeObject<KinveyError>(json);
                if (null != errorObject.Error)
                    throw new KinveyException(errorObject);
            }
            catch (JsonSerializationException)
            { }

            return JsonConvert.DeserializeObject<TR>(json);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyUserService.cs
public async Task<KinveyUser> LogIn(string username, string password)
        {
            var uri = new Uri(string.Format("/user/{0}/login", KinveySettings.Get().AppKey), UriKind.Relative);
            return await DoAuth(uri, username, password);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyUserService.cs
public async Task<KinveyUser> SignUp(string username, string password)
        {
            var uri = new Uri(string.Format("/user/{0}/", KinveySettings.Get().AppKey), UriKind.Relative);
            return await DoAuth(uri, username, password);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyUserService.cs
public async Task<KinveyFacebookUser> SignUp(FacebookIdentityToken socialIdentity)
        {
            var uri = new Uri(string.Format("/user/{0}/", KinveySettings.Get().AppKey), UriKind.Relative);
            return await DoSocialAuth<KinveyFacebookUser, FacebookIdentity>(uri, socialIdentity);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyUserService.cs
public async Task<KinveyTwitterUser> SignUp(TwitterIdentityToken socialIdentity)
        {
            var uri = new Uri(string.Format("/user/{0}/", KinveySettings.Get().AppKey), UriKind.Relative);
            return await DoSocialAuth<KinveyTwitterUser, TwitterIdendity>(uri, socialIdentity);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyUserService.cs
public async Task<KinveyGooglePlusUser> SignUp(GooglePlusIdentityToken socialIdentity)
        {
            var uri = new Uri(string.Format("/user/{0}/", KinveySettings.Get().AppKey), UriKind.Relative);
            return await DoSocialAuth<KinveyGooglePlusUser, GooglePlusIdentity>(uri, socialIdentity);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyUserService.cs
public async Task<KinveyLinkedInUser> SignUp(LinkedInIdentityToken socialIdentity)
        {
            var uri = new Uri(string.Format("/user/{0}/", KinveySettings.Get().AppKey), UriKind.Relative);
            return await DoSocialAuth<KinveyLinkedInUser, LinkedInIdentity>(uri, socialIdentity);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyUserService.cs
public async Task LogOut()
        {
            var content = _factory.Get<IHttpContent>(string.Empty);
            var uri = new Uri("/user/badger/_logout", UriKind.Relative);

            await _httpClient.PostAsync(uri, content);

            KinveySettings.Get().UserAuthToken = null;
            KinveySettings.Get().CurrentUser = null;

            _headers.Remove("Authorization");
            _headers.Add("Authorization", new[]
                {
                    string.Format("Basic {0}", KinveySettings.Get().AppAuthToken)
                });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyUserService.cs
public async Task<T> Read(string id)
        {
            var uri = new Uri(string.Format("/user/{0}/{1}", KinveySettings.Get().AppKey, id), UriKind.Relative);
            var response = await _httpClient.GetAsync(uri);
            return await ResponseOrError<T>(response);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyUserService.cs
public async Task<T> Update(T user)
        {
            var uri = new Uri(string.Format("/user/{0}/{1}", KinveySettings.Get().AppKey, user.Id), UriKind.Relative);
            var requestContent = GetContent(user);
            var response = await _httpClient.PutAsync(uri, requestContent);
            return await ResponseOrError<T>(response);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyUserService.cs
public async Task SoftDelete(string id)
        {
            var uri = new Uri(string.Format("/user/{0}/{1}/?soft=true", KinveySettings.Get().AppKey, id), UriKind.Relative);
            var response = await _httpClient.DeleteAsync(uri);
            await ResponseOrError<T>(response);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyUserService.cs
public async Task SoftDelete(T user)
        {
            var uri = new Uri(string.Format("/user/{0}/{1}/?soft=true", KinveySettings.Get().AppKey, user.Id), UriKind.Relative);
            var response = await _httpClient.DeleteAsync(uri);
            await ResponseOrError<T>(response);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyUserService.cs
public async Task HardDelete(string id)
        {
            var uri = new Uri(string.Format("/user/{0}/{1}/?hard=true", KinveySettings.Get().AppKey, id), UriKind.Relative);
            var response = await _httpClient.DeleteAsync(uri);
            await ResponseOrError<T>(response);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyUserService.cs
public async Task HardDelete(T user)
        {
            var uri = new Uri(string.Format("/user/{0}/{1}/?hard=true", KinveySettings.Get().AppKey, user.Id), UriKind.Relative);
            var response = await _httpClient.DeleteAsync(uri);
            await ResponseOrError<T>(response);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyUserService.cs
public async Task Restore(string id)
        {
            var uri = new Uri(string.Format("/user/{0}/{1}/_restore", KinveySettings.Get().AppKey, id), UriKind.Relative);
            var response = await _httpClient.PostAsync(uri, _factory.Get<IHttpContent>(string.Empty));
            await ResponseOrError<T>(response);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyUserService.cs
public async Task VerifyEmail(string username)
        {
            var uri = new Uri(string.Format("/rpc/{0}/{1}/user-email-verification-initiate", KinveySettings.Get().AppKey, username), UriKind.Relative);
            var response = await _httpClient.PostAsync(uri, _factory.Get<IHttpContent>(string.Empty));
            await ResponseOrError<T>(response);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyUserService.cs
public async Task PasswordResetEmail(string email)
        {
            var uri = new Uri(string.Format("/rpc/{0}/{1}/user-password-reset-initiate", KinveySettings.Get().AppKey, email), UriKind.Relative);
            var response = await _httpClient.PostAsync(uri, _factory.Get<IHttpContent>(string.Empty));
            await ResponseOrError<T>(response);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyUserService.cs
public async Task PasswordResetUsername(string username)
        {
            var uri = new Uri(string.Format("/rpc/{0}/{1}/user-password-reset-initiate", KinveySettings.Get().AppKey, username), UriKind.Relative);
            var response = await _httpClient.PostAsync(uri, _factory.Get<IHttpContent>(string.Empty));
            await ResponseOrError<T>(response);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyUserService.cs
private async Task<KinveyUser> DoAuth(Uri uri, string username, string password)
        {
            var content = GetContent(new LogInDetails { Username = username, Password = password });

            var response = await _httpClient.PostAsync(uri, content);
            var retVal = await ResponseOrError<T>(response);

            KinveySettings.Get().UserAuthToken = retVal.Metadata.AuthToken;
            KinveySettings.Get().CurrentUser = retVal;

            _headers.Remove("Authorization");
            _headers.Add("Authorization", new[]
                {
                    string.Format("Kinvey {0}", retVal.Metadata.AuthToken)
                });

            return retVal;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyUserService.cs
private async Task<TSocialUser> DoSocialAuth<TSocialUser, TSocialIdentity>(Uri uri, SocialIdentityToken identity) where TSocialUser : KinveySocialUser<TSocialIdentity>
        {
            var content = GetContent(identity);

            var response = await _httpClient.PostAsync(uri, content);
            var retVal = await ResponseOrError<TSocialUser>(response);

            KinveySettings.Get().UserAuthToken = retVal.Metadata.AuthToken;
            KinveySettings.Get().CurrentUser = retVal;

            _headers.Remove("Authorization");
            _headers.Add("Authorization", new[]
                {
                    string.Format("Kinvey {0}", retVal.Metadata.AuthToken)
                });

            return retVal;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Penrillian+KinveyWindowsPhone8\Penrillian-KinveyWindowsPhone8-bd0e0dc\Com.Penrillian.Kinvey\KinveyUserService.cs
private static async Task<TResponse> ResponseOrError<TResponse>(IHttpResponseMessage response)
        {
            var responseContent = response.Content;
            var responseJson = await responseContent.ReadAsStringAsync();
            var errorObject = JsonConvert.DeserializeObject<KinveyError>(responseJson);
            if (null != errorObject.Error)
                throw new KinveyException(errorObject);
            var responseObject = JsonConvert.DeserializeObject<TResponse>(responseJson);
            return responseObject;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\phonesm\Source\Phone\HlsView.WP8\..\HlsView\MainPage.xaml.cs
async void play_Click(object sender, RoutedEventArgs e)
        {
            Debug.WriteLine("Play clicked");

            if (null != mediaElement1 && MediaElementState.Paused == mediaElement1.CurrentState)
            {
                mediaElement1.Play();
                return;
            }

            errorBox.Visibility = Visibility.Collapsed;
            playButton.IsEnabled = false;

            var programManager = new ProgramManager(_httpClients.RootPlaylistClient)
                                 {
                                     Playlists = new[]
                                                 {
                                                     new Uri("http://www.nasa.gov/multimedia/nasatv/NTV-Public-IPS.m3u8")
                                                     //new Uri("http://devimages.apple.com/iphone/samples/bipbop/bipbopall.m3u8"
                                                 }
                                 };

            Program program;
            ISubProgram subProgram;

            try
            {
                var programs = await programManager.LoadAsync();

                program = programs.Values.FirstOrDefault();

                if (null == program)
                {
                    errorBox.Text = "No programs found";
                    errorBox.Visibility = Visibility.Visible;
                    playButton.IsEnabled = true;

                    return;
                }

                subProgram = program.SubPrograms.FirstOrDefault();

                if (null == subProgram)
                {
                    errorBox.Text = "No program streams found";
                    errorBox.Visibility = Visibility.Visible;
                    playButton.IsEnabled = true;

                    return;
                }
            }
            catch (Exception ex)
            {
                errorBox.Text = ex.Message;
                errorBox.Visibility = Visibility.Visible;
                playButton.IsEnabled = true;

                return;
            }

            var playlist = new PlaylistSegmentManager(uri => new CachedWebRequest(uri, _httpClients.GetPlaylistClient(program.Url)), subProgram);

            _mediaElementManager = new MediaElementManager(Dispatcher,
                () =>
                {
                    var me = new MediaElement
                             {
                                 Margin = new Thickness(0)
                             };

                    me.MediaFailed += mediaElement1_MediaFailed;
                    me.MediaEnded += mediaElement1_MediaEnded;
                    me.CurrentStateChanged += mediaElement1_CurrentStateChanged;
                    me.BufferingProgressChanged += OnBufferingProgressChanged;
                    ContentPanel.Children.Add(me);

                    mediaElement1 = me;

                    UpdateState(MediaElementState.Opening);

                    return me;
                },
                me =>
                {
                    if (null != me)
                    {
                        Debug.Assert(ReferenceEquals(me, mediaElement1));

                        ContentPanel.Children.Remove(me);

                        me.MediaFailed -= mediaElement1_MediaFailed;
                        me.MediaEnded -= mediaElement1_MediaEnded;
                        me.CurrentStateChanged -= mediaElement1_CurrentStateChanged;
                        me.BufferingProgressChanged -= OnBufferingProgressChanged;
                    }

                    mediaElement1 = null;

                    UpdateState(MediaElementState.Closed);
                });

            var segmentReaderManager = new SegmentReaderManager(new[] { playlist }, _httpClients.GetSegmentClient);

            if (null != _tsMediaManager)
                _tsMediaManager.OnStateChange -= TsMediaManagerOnOnStateChange;

            _tsMediaManager = new TsMediaManager(segmentReaderManager, _mediaElementManager, new TsMediaStreamSource());

            _tsMediaManager.OnStateChange += TsMediaManagerOnOnStateChange;

            _tsMediaManager.Play();

            _positionSampler.Start();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\phonesm\Source\Libraries\SM.Media.Platform.WP8\..\SM.Media.Platform.WP7\MediaElementManager.cs
public async Task Close()
        {
            var wasSet = Interlocked.CompareExchange(ref _sourceIsSet, 2, 1);

            if (0 != wasSet)
            {
                await Dispatch(() =>
                               {
                                   UiThreadCleanup();

                                   var mediaElement = _mediaElement;
                                   _mediaElement = null;

                                   _destroyMediaElement(mediaElement);
                               })
                               .ConfigureAwait(false);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\phonesm\Source\Libraries\SM.Media.Platform.WP8\..\SM.Media.Platform.WP7\TsMediaStreamSource.cs
async Task SeekHandler()
        {
            TimeSpan seekTimestamp;

            _taskScheduler.ThrowIfNotOnThread();

            var mediaManager = MediaManager;

            if (null == mediaManager)
                throw new InvalidOperationException("MediaManager has not been initialized");

            lock (_stateLock)
            {
                seekTimestamp = _pendingSeekTarget;
            }

            try
            {
                var position = await mediaManager.SeekMediaAsync(seekTimestamp);

                _taskScheduler.ThrowIfNotOnThread();

                if (_isClosed)
                    return;

                ValidateEvent(MediaStreamFsm.MediaEvent.CallingReportSeekCompleted);
                ReportSeekCompleted(position.Ticks);

                Debug.WriteLine("TsMediaStreamSource.SeekHandler({0}) completed, actual: {1}", seekTimestamp, position);

                State = SourceState.Play;
            }
            catch (Exception ex)
            {
                Debug.WriteLine("TsMediaStreamSource.SeekHandler({0}) failed: {1}", seekTimestamp, ex.Message);
                ErrorOccurred("Seek failed: " + ex.Message);

                _taskScheduler.ThrowIfNotOnThread();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\phonesm\Source\Libraries\SM.Media.MediaPlayer.WP8\MediaElementWrapper.cs
async Task SetMediaSourceAsync(Uri value)
        {
            _programManager = new ProgramManager(_httpClients.RootPlaylistClient)
                              {
                                  Playlists = new[] { value }
                              };

            if (null != _tsMediaStreamSource)
            {
                // Implement cleanup
                Debug.Assert(true);
            }

            await OpenMediaAsync();

            SetSource(_tsMediaStreamSource);

            var task = StartPlaybackWrapperAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\phonesm\Source\Libraries\SM.Media.MediaPlayer.WP8\MediaElementWrapper.cs
async Task StartPlaybackWrapperAsync()
        {
            try
            {
                await StartPlaybackAsync();
            }
            catch (Exception ex)
            {
                // Send a "Failed" message here?
                Debug.WriteLine("MediaElementWrapper.StartPlaybackWrapperAsync failed: " + ex.Message);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\phonesm\Source\Libraries\SM.Media.MediaPlayer.WP8\MediaElementWrapper.cs
async Task StartPlaybackAsync()
        {
            Debug.WriteLine("MediaElementWrapper.StartPlaybackAsync");

            if (null == _programManager)
                return;

            var state = MediaElement.CurrentState;

            if (MediaElementState.Closed != state && MediaElementState.Opening != state)
            {
                if (new[] { MediaElementState.Paused, MediaElementState.Stopped }.Contains(state))
                    MediaElement.Play();

                return;
            }

            await OpenMediaAsync();

            _tsMediaManager.Play();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\phonesm\Source\Libraries\SM.Media.MediaPlayer.WP8\MediaElementWrapper.cs
async Task OpenMediaAsync()
        {
            Program program;
            ISubProgram subProgram;

            var programs = await _programManager.LoadAsync().ConfigureAwait(false);

            program = programs.Values.FirstOrDefault();

            if (null == program)
            {
                Debug.WriteLine("MediaElementWrapper.SetMediaSource: program not found");
                throw new FileNotFoundException("Unable to load program");
            }

            subProgram = program.SubPrograms.FirstOrDefault();

            if (null == subProgram)
            {
                Debug.WriteLine("MediaElementWrapper.SetMediaSource: no sub programs found");
                throw new FileNotFoundException("Unable to load program stream");
            }

            var playlist = new PlaylistSegmentManager(uri => new CachedWebRequest(uri, _httpClients.GetPlaylistClient(uri)), subProgram);

            _mediaElementManager = new NoOpMediaElementManager();

            var segmentReaderManager = new SegmentReaderManager(new[] { playlist }, _httpClients.GetSegmentClient);

            if (null != _tsMediaManager)
                _tsMediaManager.OnStateChange -= TsMediaManagerOnOnStateChange;

            if (null == _tsMediaStreamSource)
                _tsMediaStreamSource = new TsMediaStreamSource();

            _tsMediaManager = new TsMediaManager(segmentReaderManager, _mediaElementManager, _tsMediaStreamSource);

            _tsMediaManager.OnStateChange += TsMediaManagerOnOnStateChange;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\piccoloaiutante+CodemotionBerlin\piccoloaiutante-CodemotionBerlin-4be6134\OrangeCode.Codemotion.SpotifyViewer\Services\SongService.cs
public async Task<info> Query(string query)
        {

            var request = new RestRequest(query, Method.GET);

            var response=(await _client.ExecuteTaskAsync<info>(request));
            
            return response.Data;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\piccoloaiutante+CodemotionBerlin\piccoloaiutante-CodemotionBerlin-4be6134\OrangeCode.Codemotion.SpotifyViewer\ViewModel\MainViewModel.cs
public async Task  Search()
        {

            TrackList = (await _songService.Query(SearchedText)).tracks;
            
            OnPropertyChanged("TrackList");

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\piccoloaiutante+CodemotionBerlin\piccoloaiutante-CodemotionBerlin-4be6134\OrangeCode.Codemotion.SpotifyViewer.Fixture\Services\SongServiceFixture.cs
[TestMethod]
        public async Task Query_Should_LoadDataFromServer()
        {
          
            var data=await _service.Query("Tiesto");

            Assert.IsNotNull(data);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\piccoloaiutante+CodemotionBerlin\piccoloaiutante-CodemotionBerlin-4be6134\OrangeCode.Codemotion.SpotifyViewer.Fixture\Services\SongServiceFixture.cs
[TestMethod]
        public async Task Query_Should_Load_ProperArtist()
        {
            var data = await _service.Query("Tiesto");
            Assert.IsTrue(data.tracks.Count!=0);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\piccoloaiutante+WP8TestingExample\piccoloaiutante-WP8TestingExample-c5180e6\OrangeCode.WpReborn.SQLiteTestingApp\Services\DbServiceFixture.cs
[TestMethod]
        public async void LoadProductsAsync_Should_Load_Data_FromDb()
        {
            var data= await _service.LoadProductsAsync();

            Assert.AreEqual(data.Count,1);

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\piccoloaiutante+WP8TestingExample\piccoloaiutante-WP8TestingExample-c5180e6\OangeCode.Wpreborn.SQLIteApp\ApplicationBootstrapper.cs
protected async override void Configure()
        {
            container = new PhoneContainer(RootFrame);

            container.RegisterPhoneServices();
            container.PerRequest<MainViewModel>();
            container.PerRequest<IDbService,DbService>();
            container.RegisterInstance(typeof(SQLiteAsyncConnection), "SQLiteAsyncConnection", new SQLiteAsyncConnection(Path.Combine(Windows.Storage.ApplicationData.Current.LocalFolder.Path, "TestDb.sqlite")));

            AddCustomConventions();


            SQLiteAsyncConnection connection = (SQLiteAsyncConnection)container.GetInstance(typeof(SQLiteAsyncConnection), "SQLiteAsyncConnection");

            //connection.DropTableAsync<Product>();
            await connection.CreateTableAsync<Product>();

            await connection.InsertAsync(new Product { Name = "Product 1", Serial = "123456" });
            await connection.InsertAsync(new Product { Name = "Product 2", Serial = "123456" });

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\piccoloaiutante+WP8TestingExample\piccoloaiutante-WP8TestingExample-c5180e6\OangeCode.Wpreborn.SQLIteApp\Db\SqliteAsync.cs
public async  Task<CreateTablesResult> CreateTablesAsync(params Type[] types)
        {
            return await  Task.Factory.StartNew(() =>
            {
                CreateTablesResult result = new CreateTablesResult();
                var conn = GetConnection();
                using (conn.Lock())
                {
                    foreach (Type type in types)
                    {
                        int aResult = conn.CreateTable(type);
                        result.Results[type] = aResult;
                    }
                }
                return result;
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\piccoloaiutante+WP8TestingExample\piccoloaiutante-WP8TestingExample-c5180e6\OangeCode.Wpreborn.SQLIteApp\Db\SqliteAsync.cs
public async Task<int> InsertOrReplaceAsync(object item)
        {
            return await Task.Factory.StartNew(() =>
            {
                var conn = GetConnection();
                using (conn.Lock())
                {
                    return conn.InsertOrReplace(item);
                }
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\piccoloaiutante+WP8TestingExample\piccoloaiutante-WP8TestingExample-c5180e6\OangeCode.Wpreborn.SQLIteApp\Services\DbServiceAsync.cs
public async Task<IList<Product>> LoadProductsAsync()
        {
            return await _context.Table<Product>().ToListAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\piccoloaiutante+WP8TestingExample\piccoloaiutante-WP8TestingExample-c5180e6\OangeCode.Wpreborn.SQLIteApp\Services\DbService.cs
public async Task<IList<Product>> LoadProductsAsync()
        {
            return await _context.Table<Product>().ToListAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\piccoloaiutante+WP8TestingExample\piccoloaiutante-WP8TestingExample-c5180e6\OangeCode.Wpreborn.SQLIteApp\ViewModels\MainViewModel.cs
public async void Initialize()
        {
            Products = await _service.LoadProductsAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Pinultimate+Pinultimate_Windows_Phone\Pinultimate-Pinultimate_Windows_Phone-ba5771a\Pinultimate_Windows_Phone\GeoTracker.cs
public async Task<GeoCoordinate> GetCurrentLocation()
        {
            // Get current location
            if (!this.tracking)
                return LOCATION_DISABLED;

            Debug.Assert(this.geolocator != null);
            Geoposition position = await this.geolocator.GetGeopositionAsync();
            Geocoordinate coordinate = position.Coordinate;
            return CoordinateConverter.ConvertGeocoordinate(coordinate);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\pixeltucker+SpeedoPlus\pixeltucker-SpeedoPlus-1d4b9ad\Speedo\SpeedAlert.cs
public async void Notify()
            {
                await synthesizer.SpeakTextAsync( AppResources.SpeechAlert );
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL\..\Win8.xaml\controls\MediaPlayer.TemplateDefinitions.cs
private async void OnAfterApplyTemplate()
#else
        private void OnAfterApplyTemplate()
#endif
        {
#if SILVERLIGHT
            if (mediaElement != null) // The SSME needs to complete template loading before we should start setting properties
            {
                await mediaElement.TemplateAppliedTask;
            }
#endif
            while (OnApplyTemplateActions.Any())
            {
                var action = OnApplyTemplateActions.Dequeue();
                action();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.TimedText\Compatibility\HttpClient.cs
public async Task<Stream> GetStreamAsync(Uri address)
        {
            var request = WebRequest.CreateHttp(address);
            request.AllowReadStreamBuffering = true;
            var response = await Task.Factory.FromAsync<WebResponse>(request.BeginGetResponse, request.EndGetResponse, null);
            return response.GetResponseStream();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.TimedText\Compatibility\HttpClient.cs
public async Task<byte[]> GetByteArrayAsync(string address)
        {
            using (var stream = await GetStreamAsync(new Uri(address)))
            {
                var buffer = new byte[stream.Length];
                stream.Read(buffer, 0, buffer.Length);
                return buffer;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.TimedText\..\Win8.TimedText\TimedTextCaptions.cs
public async Task AugmentTtml(string ttml, TimeSpan startTime, TimeSpan endTime)
        {
            // parse on a background thread
#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
            var markers = await TaskEx.Run(() => factory.ParseTtml(ttml, startTime, endTime));       
#else
            var markers = await Task.Run(() => factory.ParseTtml(ttml, startTime, endTime));
#endif
            if (CaptionParsed != null)
            {
                foreach (var marker in markers)
                {
                    CaptionParsed(this, new CaptionParsedEventArgs(marker));
                }
            }

            factory.MergeMarkers(markers);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.TimedText\..\Win8.TimedText\TimedTextCaptions.cs
public async Task ParseTtml(string ttml, bool forceRefresh)
        {
            // parse on a background thread
#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
            var markers = await TaskEx.Run(() => factory.ParseTtml(ttml, TimeSpan.Zero, TimeSpan.MaxValue));       
#else
            var markers = await Task.Run(() => factory.ParseTtml(ttml, TimeSpan.Zero, TimeSpan.MaxValue));
#endif
            if (CaptionParsed != null)
            {
                foreach (var marker in markers)
                {
                    CaptionParsed(this, new CaptionParsedEventArgs(marker));
                }
            }
            
            factory.UpdateMarkers(markers, forceRefresh);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\Compatibility\HttpClient.cs
public async Task<Stream> GetStreamAsync(Uri address)
        {
            var request = WebRequest.CreateHttp(address);
            if (UserAgent != null) request.UserAgent = UserAgent;
            request.AllowReadStreamBuffering = true;
            var response = await Task.Factory.FromAsync<WebResponse>(request.BeginGetResponse, request.EndGetResponse, null);
            return response.GetResponseStream();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\AdHandlerController.cs
public async Task PreloadAdAsync(IAdSource adSource, CancellationToken cancellationToken)
#else
        public IAsyncAction PreloadAdAsync(IAdSource adSource)
        {
            return AsyncInfo.Run(c => PreloadAdAsync(adSource, c));
        }

        internal async Task PreloadAdAsync(IAdSource adSource, CancellationToken cancellationToken)
#endif
        {
            var handler = AdPayloadHandlers.Where(h => h.SupportedTypes.Contains(adSource.Type)).FirstOrDefault();
            if (handler == null) throw new ArgumentException("No suitable handler was found to play this ad", "source");

            // resolve the source
            if (adSource is IResolveableAdSource)
            {
                var resolveableAdSource = adSource as IResolveableAdSource;
#if SILVERLIGHT
                await resolveableAdSource.LoadPayload(cancellationToken);
#else
                await (resolveableAdSource.LoadPayload().AsTask(cancellationToken));
#endif
                cancellationToken.ThrowIfCancellationRequested();
            }
#if SILVERLIGHT
            await handler.PreloadAdAsync(adSource, cancellationToken);
#else
            await handler.PreloadAdAsync(adSource).AsTask(cancellationToken);
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\AdHandlerController.cs
public async Task PlayAdAsync(IAdSource adSource, CancellationToken cancellationToken, IProgress<AdStatus> progress)
#else
        public IAsyncActionWithProgress<AdStatus> PlayAdAsync(IAdSource adSource)
        {
            return AsyncInfo.Run<AdStatus>((c, p) => PlayAdAsync(adSource, c, p));
        }

        internal async Task PlayAdAsync(IAdSource adSource, CancellationToken cancellationToken, IProgress<AdStatus> progress)
#endif
        {
            try
            {
                if (ActiveHandler != null)
                {
                    if (!await ActiveHandler.CancelAd(false))
                    {
                        throw new Exception("Ad in progress and cannot be canceled.");
                    }
                }

                DateTime startTime = DateTime.Now;

                using (var timeoutTokenSource = new CancellationTokenSource())
                {
                    if (StartTimeout.HasValue)
                    {
                        timeoutTokenSource.CancelAfter(StartTimeout.Value);
                    }
                    var timeoutToken = timeoutTokenSource.Token;
                    using (var cancellationTokenSource = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, timeoutToken))
                    {
                        IsAdvertising = true;
                        var adContext = activeAdContext = new object();

                        progress.Report(AdStatus.Loading);

                        try
                        {
                            ActiveHandler = AdPayloadHandlers.Where(h => h.SupportedTypes.Contains(adSource.Type)).FirstOrDefault();
                            if (ActiveHandler == null) throw new ArgumentException("No suitable handler was found to play this ad", "source");

                            // resolve the source
                            if (adSource is IResolveableAdSource)
                            {
                                var resolveableAdSource = adSource as IResolveableAdSource;
                                try
                                {
#if SILVERLIGHT
                                    await resolveableAdSource.LoadPayload(cancellationTokenSource.Token);
#else
                                    await resolveableAdSource.LoadPayload().AsTask(cancellationTokenSource.Token);
#endif
                                }
                                catch (OperationCanceledException)
                                {
                                    if (timeoutToken.IsCancellationRequested) throw new TimeoutException(); else throw;
                                }
                            }

                            TimeSpan? timeRemaining = null;
                            if (StartTimeout.HasValue)
                            {
                                var timeElapsed = DateTime.Now.Subtract(startTime);
                                timeRemaining = StartTimeout.Value.Subtract(timeElapsed);
                            }

                            //var handlerProgress = new Progress<AdStatus>();
                            //handlerProgress.ProgressChanged += (s, e) => Progress_Handle(adContext, progress, e);
                            var handlerProgress = new Progress<AdStatus>(s => Progress_Handle(adContext, progress, s));
#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
                            await ActiveHandler.PlayAdAsync(adSource, timeRemaining, cancellationToken, handlerProgress);
                            await TaskEx.Yield(); // let evertyhing complete before finishing
#elif WINDOWS_PHONE
                            await ActiveHandler.PlayAdAsync(adSource, timeRemaining, cancellationToken, handlerProgress);
                            await Task.Yield(); // let evertyhing complete before finishing
#else
                            await ActiveHandler.PlayAdAsync(adSource, timeRemaining).AsTask(cancellationToken, handlerProgress);
                            await Task.Yield(); // let evertyhing complete before finishing
#endif
                            // leave the progress handler alone, it reports on secondary task which could still be running.
                        }
                        catch
                        {
                            TeardownAd();
                            progress.Report(AdStatus.Unloaded);
                            throw;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                if (AdFailure != null) AdFailure(this, new AdFailureEventArgs(adSource, ex));
                throw;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\AdHandlerController.cs
public async Task CancelActiveAds()
#else
        public IAsyncAction CancelActiveAds()
        {
            return CancelActiveAdsInternal().AsAsyncAction();
        }

        internal async Task CancelActiveAdsInternal()
#endif
        {
            // cancel any active ads
            foreach (var handler in AdPayloadHandlers)
            {
                await handler.CancelAd(true);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\AdTracking.cs
public async void FireTrackingUri(Uri trackingUri)
        {
            if (trackingUri != null)
            {
                try
                {
#if DEBUG
                    System.Diagnostics.Debug.WriteLine(trackingUri);
#endif
                    await Extensions.PingAsync(trackingUri);
                }
                catch (Exception ex)
                {
                    if (TrackingFailed != null) TrackingFailed(this, new TrackingFailureEventArgs(trackingUri.OriginalString, ex));
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\clips\ClipAdPayloadHandler.cs
public async Task PreloadAdAsync(IAdSource adSource, CancellationToken cancellationToken)
#else
        public IAsyncAction PreloadAdAsync(IAdSource adSource)
        {
            return AsyncInfo.Run(c => PreloadAdAsync(adSource, c));
        }

        internal async Task PreloadAdAsync(IAdSource adSource, CancellationToken cancellationToken)
#endif
        {
            ProcessPayload(adSource);
            await adHandlerBase.PreloadAdAsync(adSource, cancellationToken);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\clips\ClipAdPayloadHandler.cs
public async Task PlayAdAsync(IAdSource adSource, TimeSpan? startTimeout, CancellationToken cancellationToken, IProgress<AdStatus> progress)
#else
        public IAsyncActionWithProgress<AdStatus> PlayAdAsync(IAdSource adSource, TimeSpan? startTimeout)
        {
            return AsyncInfo.Run<AdStatus>((c, p) => PlayAdAsync(adSource, startTimeout, c, p));
        }

        internal async Task PlayAdAsync(IAdSource adSource, TimeSpan? startTimeout, CancellationToken cancellationToken, IProgress<AdStatus> progress)
#endif
        {
            ProcessPayload(adSource);
            if (!cancellationToken.IsCancellationRequested)
            {
                await adHandlerBase.PlayAdAsync(adSource, startTimeout, cancellationToken, progress);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\DocumentAdPayloadHandler.cs
public async Task<bool> CancelAd(bool force)
#else
        public IAsyncOperation<bool> CancelAd(bool force)
        {
            return AsyncInfo.Run(c => CancelActiveAd(force));
        }

        internal async Task<bool> CancelActiveAd(bool force)
#endif
        {
            // if there is a linear ad playing, return false.
            if (activeAd != null && !force && activeAd.Player.AdLinear) return false;
            if (activeOperation != null)
            {
                var cancelingOperation = activeOperation;
                try
                {
                    // there are active ads still. Force them to close.
                    await cancelingOperation.CancelAsync();
                }
                catch { /* ignore */ }
            }
            if (loadOperation != null && force)
            {
                try
                {
                    // there are preloads happening, force them to stop.
                    await loadOperation.CancelAsync();
                }
                catch { /* ignore */ }
                finally
                {
                    loadOperation = null;
                }
            }
            return true;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\DocumentAdPayloadHandler.cs
public async Task PlayAdAsync(IAdSource adSource, TimeSpan? startTimeout, CancellationToken cancellationToken, IProgress<AdStatus> progress)
#else
        public IAsyncActionWithProgress<AdStatus> PlayAdAsync(IAdSource adSource, TimeSpan? startTimeout)
        {
            return AsyncInfo.Run<AdStatus>((c, p) => PlayAdAsync(adSource, startTimeout, c, p));
        }

        internal async Task PlayAdAsync(IAdSource adSource, TimeSpan? startTimeout, CancellationToken cancellationToken, IProgress<AdStatus> progress)
#endif
        {
            if (!(adSource.Payload is AdDocumentPayload)) throw new ArgumentException("adSource must contain a payload of type AdDocumentPayload", "adPayload");
            var adDoc = (AdDocumentPayload)adSource.Payload;

            // create a new token that we can cancel independently
            var masterCancellationToken = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken);
            var playTasks = PlayAdAsync(adDoc, adSource, startTimeout, masterCancellationToken.Token, progress);
            try
            {
                activeOperation = new ActiveOperation(playTasks.Secondary, masterCancellationToken);
                await playTasks.Primary;
            }
            catch (PlayException)
            {
                activeOperation = null;
                throw;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\DocumentAdPayloadHandler.cs
async Task StartAdUnitAsync(ActiveAdUnit adUnit, Ad ad, CancellationToken cancellationToken)
        {
            // start the ad
            await VpaidController.StartAdAsync(adUnit, cancellationToken);

            // fire the impression beacon
            foreach (var url in ad.Impressions)
            {
                VpaidController.TrackUrl(url, adUnit.CreativeSource);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\DocumentAdPayloadHandler.cs
async Task<Task> PlayAdUnitAsync(ActiveAdUnit adUnit, CancellationToken cancellationToken)
        {
#if WINDOWS_PHONE7
            // WP doesn't support 3 MediaElements all with a source loaded. Instead of preloading, just wait until we finish the ad.
            await VpaidController.FinishAdAsync(activeAd, cancellationToken);
            var finished = true;
#else
            var finished = await VpaidController.PlayAdAsync(adUnit, cancellationToken);
#endif
            if (!finished)
            {
                // if approaching end has happened, retain a new task that will run to completion
                return TaskHelpers.Create<Task>(async () =>
                {
                    await VpaidController.FinishAdAsync(adUnit, cancellationToken);
                    CleanupAd(adUnit);
                });
            }
            else
            {
                CleanupAd(adUnit);
                return null;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\DocumentAdPayloadHandler.cs
public async Task PreloadAdAsync(IAdSource adSource, CancellationToken cancellationToken)
#else
        public IAsyncAction PreloadAdAsync(IAdSource adSource)
        {
            return AsyncInfo.Run(c => PreloadAdAsync(adSource, c));
        }

        internal async Task PreloadAdAsync(IAdSource adSource, CancellationToken cancellationToken)
#endif
        {
            if (!(adSource.Payload is AdDocumentPayload)) throw new ArgumentException("adSource must contain a payload of type AdDocumentPayload", "adPayload");
            var adDoc = (AdDocumentPayload)adSource.Payload;

            if (loadOperation != null && loadOperation.Task.IsRunning())
            {
                return;
            }

            await PreloadAdAsync(adDoc, adSource, cancellationToken);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\DocumentAdPayloadHandler.cs
async Task<ActiveAdUnit> GetInitializationTask(ActiveAdUnit adUnit, CancellationToken cancellationToken)
        {
            try
            {
                await VpaidController.InitAdAsync(adUnit, cancellationToken);
                cancellationToken.ThrowIfCancellationRequested();
            }
            catch
            {
                OnUnloadPlayer(adUnit.Player);
                throw;
            }
            return adUnit;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\DocumentAdPayloadHandler.cs
public async Task CancelAsync()
            {
                if (Task.IsRunning())
                {
                    if (!cts.IsCancellationRequested)
                    {
                        cts.Cancel();
                    }
                    try
                    {
                        await Task;
                    }
                    catch { /* ignore */ }
                }
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\Freewheel\FreewheelFactory.cs
public static async Task<FWAdResponse> LoadSource(Uri source, CancellationToken cancellationToken)
#else
        public static IAsyncOperation<FWAdResponse> LoadSource(Uri source)
        {
            return AsyncInfo.Run(c => InternalLoadSource(source, c));
        }

        static async Task<FWAdResponse> InternalLoadSource(Uri source, CancellationToken cancellationToken)
#endif
        {
            using (var stream = await Extensions.LoadStreamAsync(source))
            {
#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
                return await TaskEx.Run(() => CreateFromSmartXml(stream), cancellationToken);
#else
                return await Task.Run(() => CreateFromSmartXml(stream), cancellationToken);
#endif
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\Freewheel\FreewheelFactory.cs
public static async Task<AdDocumentPayload> GetAdDocumentPayload(FWTemporalAdSlot adSlot, FWAdResponse adResponse, CancellationToken c)
#endif
        {
            var payload = new AdDocumentPayload();
            var adPod = new AdPod();
            payload.AdPods.Add(adPod);
            foreach (var adReference in adSlot.SelectedAds)
            {
                var ad = await CreateAd(adResponse, adReference);
                adPod.Ads.Add(ad);

                foreach (var fallbackAdReference in adReference.FallbackAds)
                {
                    var fallbackAd = await CreateAd(adResponse, fallbackAdReference);
                    ad.FallbackAds.Add(fallbackAd);
                }
            }
            return payload;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\Freewheel\FreewheelFactory.cs
private static async Task<Ad> CreateAd(FWAdResponse adResponse, FWAdReference adReference)
        {
            var ad = adResponse.Ads.FirstOrDefault(a => a.Id == adReference.AdId);
            if (ad != null)
            {
                var linearCreative = await CreateLinearAd(ad, adReference);

                foreach (var companionAdReference in adReference.CompanionAds)
                {
                    var companionAd = adResponse.Ads.FirstOrDefault(a => a.Id == companionAdReference.AdId);
                    var companionCreative = CreateCompanionAds(companionAd, companionAdReference);
                    companionCreative.Sequence = 1;
                    linearCreative.Creatives.Add(companionCreative);
                }

                return linearCreative;
            }
            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\Freewheel\FreewheelFactory.cs
static async Task<Ad> CreateLinearAd(FWAd source, FWAdReference reference)
        {
            var ad = new Ad();

            var allCallbacks = reference.EventCallbacks;
            foreach (var url in allCallbacks.Where(ec => ec.Type == FWCallbackType.Impression && ec.Name == FWEventCallback.DefaultImpression).SelectMany(ec => ec.GetUrls()))
            {
                ad.Impressions.Add(url);
            }

            int index = 0;
            IEnumerable<FWCreative> creatives = source.Creatives;
            if (reference.CreativeId != null)
            {
                creatives = creatives.Where(c => c.Id == reference.CreativeId);
            }
            foreach (var creative in creatives)
            {
                index++;
                var wrappedAds = new List<Ad>();
                var linear = new CreativeLinear();
                linear.Duration = creative.Duration;
                linear.Sequence = index;

                IEnumerable<FWCreativeRendition> creativeRenditions = creative.CreativeRenditions;
                if (reference.CreativeRenditionId != null)
                {
                    creativeRenditions = creativeRenditions.Where(cr => cr.Id == reference.CreativeRenditionId).DefaultIfEmpty(creativeRenditions);
                    if (reference.ReplicaId != null)
                    {
                        creativeRenditions = creativeRenditions.Where(cr => cr.AdReplicaId == reference.ReplicaId).DefaultIfEmpty(creativeRenditions);
                    }
                }

                foreach (var rendition in creativeRenditions)
                {
                    if (!string.IsNullOrEmpty(rendition.WrapperType))
                    {
                        switch (rendition.WrapperType.ToLowerInvariant())
                        {
                            case "external/vast-2":
                                try
                                {
                                    var vastAdUri = new Uri(rendition.WrapperUrl);
                                    // load the stream from the web
                                    using (var s = await Extensions.LoadStreamAsync(vastAdUri))
                                    {
                                        var wrappedVastDoc = await AdModelFactory.CreateFromVast(s, null, true);
                                        if (wrappedVastDoc != null)
                                        {
                                            // use the first ad
                                            var wrappedAd = wrappedVastDoc.AdPods.SelectMany(pod => pod.Ads).FirstOrDefault();
                                            if (wrappedAd != null)
                                            {
                                                wrappedAds.Add(wrappedAd);
                                            }
                                        }
                                    }
                                }
                                catch { /* swallow */ }
                                break;
                        }
                    }
                    else
                    {
                        // TODO: FreeWheel assets can contain Content instead of Url. This could be supported someday; for now it is ignored.
                        if (rendition.Asset != null)
                        {
                            var mediaFile = CreateMediaFile(creative, rendition, rendition.Asset);
                            if (mediaFile != null)
                            {
                                mediaFile.Ranking = (int)rendition.Preference + 1; // add one to indicate this is preferred over "OtherAssets"
                                linear.MediaFiles.Add(mediaFile);
                            }
                        }

                        foreach (var asset in rendition.OtherAssets)
                        {
                            var mediaFile = CreateMediaFile(creative, rendition, asset);
                            if (mediaFile != null)
                            {
                                mediaFile.Ranking = (int)rendition.Preference;
                                linear.MediaFiles.Add(mediaFile);
                            }
                        }
                    }
                }

                // generate callback urls from one base url
                foreach (var eventCallback in allCallbacks.Where(ec => ec.Type == FWCallbackType.Impression))
                {
                    foreach (var url in eventCallback.GetUrls())
                    {
                        switch (eventCallback.Name.ToLower())
                        {
                            case "start":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Start, Value = url });
                                break;
                            case "firstquartile":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.FirstQuartile, Value = url });
                                break;
                            case "midpoint":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Midpoint, Value = url });
                                break;
                            case "thirdquartile":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.ThirdQuartile, Value = url });
                                break;
                            case "complete":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Complete, Value = url });
                                break;
                        }
                    }
                }

                // generate callback urls from one base url
                foreach (var eventCallback in allCallbacks.Where(ec => ec.Type == FWCallbackType.Standard))
                {
                    foreach (var url in eventCallback.GetUrls())
                    {
                        switch (eventCallback.Name.Replace("-", "").ToLower())
                        {
                            case "_creativeview":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.CreativeView, Value = url });
                                break;
                            case "_mute":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Mute, Value = url });
                                break;
                            case "_unmute":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Unmute, Value = url });
                                break;
                            case "_pause":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Pause, Value = url });
                                break;
                            case "_rewind":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Rewind, Value = url });
                                break;
                            case "_resume":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Resume, Value = url });
                                break;
                            case "_fullscreen":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Fullscreen, Value = url });
                                break;
                            case "_exitfullscreen":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.ExitFullscreen, Value = url });
                                break;
                            case "_expand":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Expand, Value = url });
                                break;
                            case "_collapse":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Collapse, Value = url });
                                break;
                            case "_acceptinvitation":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.AcceptInvitation, Value = url });
                                break;
                            case "_close":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Close, Value = url });
                                break;
                            case "_skip":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Skip, Value = url });
                                break;
                            case "_progress":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Progress, Value = url });
                                break;
                        }
                    }
                }

                foreach (var url in allCallbacks.Where(ec => ec.Type == FWCallbackType.Click && !ec.ShowBrowser).SelectMany(ec => ec.GetUrls()))
                {
                    linear.ClickTracking.Add(url);
                }

                var clickUrl = allCallbacks.Where(ec => ec.Type == FWCallbackType.Click && ec.ShowBrowser).SelectMany(ec => ec.GetUrls()).FirstOrDefault();
                if (clickUrl != null)
                {
                    linear.ClickThrough = new Uri(clickUrl);
                }

                // generate callback urls from one base url ONLY when the callback does not already exist
                foreach (var eventCallback in allCallbacks.Where(ec => ec.Type == FWCallbackType.Generic))
                {
                    foreach (var url in eventCallback.GetUrls())
                    {
                        var baseUrl = url + string.Format("&metr={0}", FreeWheelFactory.GetSupportedMetrics());

                        // quartile events
                        var quartileUrl = baseUrl + "&ct=[LASTQUARTILE]&et=i"; // [LASTQUARTILE] will get replaced by the VPAID controller
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.FirstQuartile, Value = quartileUrl + "&cn=firstQuartile" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Midpoint, Value = quartileUrl + "&cn=midPoint" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.ThirdQuartile, Value = quartileUrl + "&cn=thirdQuartile" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Complete, Value = quartileUrl + "&cn=complete" });

                        // advanced metrics
                        var advancedUrl = baseUrl + "&et=s";
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Mute, Value = advancedUrl + "&cn=_mute" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Unmute, Value = advancedUrl + "&cn=_un-mute" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Collapse, Value = advancedUrl + "&cn=_collapse" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Expand, Value = advancedUrl + "&cn=_expand" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Pause, Value = advancedUrl + "&cn=_pause" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Resume, Value = advancedUrl + "&cn=_resume" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Rewind, Value = advancedUrl + "&cn=_rewind" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.AcceptInvitation, Value = advancedUrl + "&cn=_accept-invitation" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Close, Value = advancedUrl + "&cn=_close" });
                        //AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Minimize, Value = advancedUrl + "&cn=_minimize" });
                    }
                }

                ad.Creatives.Add(linear);

                foreach (var wrappedAd in wrappedAds)
                {
                    AdModelFactory.MergeWrappedAdBeacons(wrappedAd, ad);
                    var wrappedCreative = AdModelFactory.FindMatchingCreative(linear, wrappedAd);
                    AdModelFactory.MergeWrappedCreative(wrappedCreative, linear);
                }
            }

            return ad;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\helpers\Extensions.cs
internal static async Task<Stream> LoadStreamAsync(Uri source)
        {
#if NETFX_CORE || (WINDOWS_PHONE && !WINDOWS_PHONE7)
            switch (source.Scheme.ToLowerInvariant())
            {
                case "ms-appx":
                case "ms-appdata":
                    var file = await Windows.Storage.StorageFile.GetFileFromApplicationUriAsync(source);
                    return await file.OpenStreamForReadAsync();
                default:
                    return await DownloadStreamAsync(source);
            }
#else
            return await DownloadStreamAsync(source);
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\helpers\Extensions.cs
internal static async Task PingAsync(Uri source)
        {
#if SILVERLIGHT
            using (var client = new HttpClient())
            {
                client.UserAgent = DefaultUserAgent;
                await client.GetStreamAsync(source);
            }
#else
            using (var client = new HttpClient())
            {
                using (HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, source))
                {
                    if (DefaultUserAgent != null)
                    {
                        request.Headers.UserAgent.ParseAdd(DefaultUserAgent);
                    }
                    using (var response = await client.SendAsync(request))
                    {
                        response.EnsureSuccessStatusCode();
                    }
                }
            }
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\helpers\Extensions.cs
internal static async Task<Stream> DownloadStreamAsync(Uri source)
        {
#if SILVERLIGHT
            using (var client = new HttpClient())
            {
                client.UserAgent = DefaultUserAgent;
                return await client.GetStreamAsync(source);
            }
#else
            using (var client = new HttpClient())
            {
                using (HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, source))
                {
                    if (DefaultUserAgent != null)
                    {
                        request.Headers.UserAgent.ParseAdd(DefaultUserAgent);
                    }
                    using (var response = await client.SendAsync(request))
                    {
                        response.EnsureSuccessStatusCode();
                        using (var stream = await response.Content.ReadAsStreamAsync())
                        {
                            var result = new MemoryStream();
                            await stream.CopyToAsync(result);
                            result.Seek(0, SeekOrigin.Begin);
                            return result;
                        }
                    }
                }
            }
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\helpers\VpaidExtensions.cs
public static async Task InitAdAsync(this IVpaid vpaid, double width, double height, string viewMode, int desiredBitrate, string creativeData, string environmentVariables, CancellationToken cancellationToken)
#else
        internal static async Task InitAdAsync(this IVpaid vpaid, double width, double height, string viewMode, int desiredBitrate, string creativeData, string environmentVariables, CancellationToken cancellationToken)
#endif
        {
            var errorTask = vpaid.GetErrorTask(cancellationToken);
            var loadedTask = vpaid.GetLoadedTask(cancellationToken);
            var cancellationTask = cancellationToken.AsTask();

            vpaid.InitAd(width, height, viewMode, desiredBitrate, creativeData, environmentVariables);

#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
            var completedTask = await TaskEx.WhenAny(loadedTask, errorTask, cancellationTask);
#else
            var completedTask = await Task.WhenAny(loadedTask, errorTask, cancellationTask);
#endif
            if (completedTask == errorTask)
            {
                throw errorTask.Result;
            }
            else if (completedTask == cancellationTask)
            {
                vpaid.StopAd();
            }
            cancellationToken.ThrowIfCancellationRequested();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\helpers\VpaidExtensions.cs
public static async Task StartAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
#else
        internal static async Task StartAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
#endif
        {
            var errorTask = vpaid.GetErrorTask(cancellationToken);
            var startedTask = vpaid.GetStartedTask(cancellationToken);
            var cancellationTask = cancellationToken.AsTask();

            vpaid.StartAd();

#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
            var completedTask = await TaskEx.WhenAny(startedTask, errorTask, cancellationTask);
#else
            var completedTask = await Task.WhenAny(startedTask, errorTask, cancellationTask);
#endif
            if (completedTask == errorTask)
            {
                throw errorTask.Result;
            }
            else if (completedTask == cancellationTask)
            {
                vpaid.StopAd();
            }
            cancellationToken.ThrowIfCancellationRequested();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\helpers\VpaidExtensions.cs
public static async Task<bool> PlayAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
#else
        internal static async Task<bool> PlayAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
#endif
        {
            var errorTask = vpaid.GetErrorTask(cancellationToken);
            var stoppedTask = vpaid.GetStoppedTask(cancellationToken);
            var approachingEndTask = vpaid.GetApproachingEndTask(cancellationToken);
            var cancellationTask = cancellationToken.AsTask();

#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
            var completedTask = await TaskEx.WhenAny(stoppedTask, approachingEndTask, errorTask, cancellationTask);
#else
            var completedTask = await Task.WhenAny(stoppedTask, approachingEndTask, errorTask, cancellationTask);
#endif
            bool result = true;
            if (completedTask == errorTask)
            {
                throw errorTask.Result;
            }
            else if (completedTask == cancellationTask)
            {
                vpaid.StopAd();
            }
            else if (completedTask == approachingEndTask)
            {
                result = false;
            }
            cancellationToken.ThrowIfCancellationRequested();
            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\helpers\VpaidExtensions.cs
public static async Task FinishAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
#else
        internal static async Task FinishAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
#endif
        {
            var errorTask = vpaid.GetErrorTask(cancellationToken);
            var stoppedTask = vpaid.GetStoppedTask(cancellationToken);
            var cancellationTask = cancellationToken.AsTask();

#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
            var completedTask = await TaskEx.WhenAny(stoppedTask, errorTask, cancellationTask);
#else
            var completedTask = await Task.WhenAny(stoppedTask, errorTask, cancellationTask);
#endif
            if (completedTask == errorTask)
            {
                throw errorTask.Result;
            }
            else if (completedTask == cancellationTask)
            {
                vpaid.StopAd();
            }
            cancellationToken.ThrowIfCancellationRequested();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\helpers\VpaidExtensions.cs
public static async Task StopAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
#else
        internal static async Task StopAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
#endif
        {
            var errorTask = vpaid.GetErrorTask(cancellationToken);
            var stoppedTask = vpaid.GetStoppedTask(cancellationToken);
            var cancellationTask = cancellationToken.AsTask();

            vpaid.StopAd();
#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
            var completedTask = await TaskEx.WhenAny(stoppedTask, errorTask, cancellationTask);
#else
            var completedTask = await Task.WhenAny(stoppedTask, errorTask, cancellationTask);
#endif
            if (completedTask == errorTask)
            {
                throw errorTask.Result;
            }
            cancellationToken.ThrowIfCancellationRequested();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\mast\Mainsail.cs
public async Task LoadSource(Uri source, CancellationToken cancellationToken)
#else
        public IAsyncAction LoadSource(Uri source)
        {
            return AsyncInfo.Run(c => InternalLoadSource(source, c));
        }

        internal async Task InternalLoadSource(Uri source, CancellationToken cancellationToken)
#endif
        {
            using (var stream = await Extensions.LoadStreamAsync(source))
            {
#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
                await TaskEx.Run(() => AddMastDoc(stream), cancellationToken);
#elif WINDOWS_PHONE
                await Task.Run(() => AddMastDoc(stream), cancellationToken);
#else
                await Task.Run(() => AddMastDoc(stream.AsInputStream()), cancellationToken);
#endif
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\vast\AdModelFactory.cs
public static async Task<AdDocumentPayload> LoadSource(Uri source, int? maxRedirectDepth, bool allowMultipleAds, CancellationToken cancellationToken)
#else
        public static IAsyncOperation<AdDocumentPayload> LoadSource(Uri source, int? maxRedirectDepth, bool allowMultipleAds)
        {
            return AsyncInfo.Run(c => InternalLoadSource(source, maxRedirectDepth, allowMultipleAds, c));
        }

        static async Task<AdDocumentPayload> InternalLoadSource(Uri source, int? maxRedirectDepth, bool allowMultipleAds, CancellationToken cancellationToken)
#endif
        {
            using (var stream = await Extensions.LoadStreamAsync(source))
            {
#if SILVERLIGHT
                return await CreateFromVast(stream, maxRedirectDepth, allowMultipleAds);
#else
                return await Task.Run(() => CreateFromVast(stream, maxRedirectDepth, allowMultipleAds), cancellationToken);
#endif
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\vast\AdModelFactory.cs
public static async Task<AdDocumentPayload> CreateFromVast(Stream stream, int? maxRedirectDepth, bool allowMultipleAds)
#else
        public static IAsyncOperation<AdDocumentPayload> CreateFromVast(IInputStream stream, int? maxRedirectDepth, bool allowMultipleAds)
        {
            return AsyncInfo.Run(c => CreateFromVast(stream.AsStreamForRead(), maxRedirectDepth, allowMultipleAds));
        }

        internal static async Task<AdDocumentPayload> CreateFromVast(Stream stream, int? maxRedirectDepth, bool allowMultipleAds)
#endif
        {
            XDocument xDoc = XDocument.Load(stream);
            XElement vastRoot = xDoc.Element("VAST");
            if (vastRoot == null)
            {
                vastRoot = xDoc.Element("VideoAdServingTemplate");
                if (vastRoot == null) throw new NotImplementedException();
                return await CreateFromVast1(vastRoot, maxRedirectDepth, allowMultipleAds);
            }
            else
            {
                var result = new AdDocumentPayload();
                result.Version = (string)vastRoot.Attribute("version");
                result.Error = (string)vastRoot.Element("Error");

                var eligableAds = vastRoot.Elements("Ad");
                if (!allowMultipleAds)
                {
                    eligableAds = eligableAds.Where(va => string.IsNullOrEmpty((string)va.Attribute("sequence")));
                }
                foreach (var vastAdPod in eligableAds.GroupBy(va => va.Attribute("sequence") != null ? 1 : int.MaxValue).OrderBy(vap => vap.Key))
                {
                    var adPod = new AdPod();
                    foreach (var vastAd in vastAdPod.OrderBy(va => ToNullableInt((string)va.Attribute("sequence")).GetValueOrDefault(0)))
                    {
                        var ad = new Ad();
                        ad.Id = (string)vastAd.Attribute("id");

                        if (vastAd.Elements("InLine").Any())
                        {
                            var vastAdInline = vastAd.Element("InLine");

                            ad.AdSystem = GetAdSystem(vastAdInline.Element("AdSystem"));

                            ad.Advertiser = (string)vastAdInline.Element("Advertiser");
                            ad.Description = (string)vastAdInline.Element("Description");
                            var error = (string)vastAdInline.Element("Error");
                            if (error != null) ad.Errors.Add(error);
                            ad.Title = (string)vastAdInline.Element("AdTitle");
                            ad.Survey = GetUriValue(vastAdInline.Element("Survey"));

                            ad.Pricing = new Pricing();
                            var pricing = vastAdInline.Element("Pricing");
                            if (pricing != null)
                            {
                                ad.Pricing.Currency = (string)pricing.Attribute("currency");
                                ad.Pricing.Model = (PricingModel)Enum.Parse(typeof(PricingModel), (string)pricing.Attribute("model"), true);
                                ad.Pricing.Value = Convert.ToDouble((string)pricing);
                            }

                            foreach (var vastImpression in vastAdInline.Elements("Impression"))
                            {
                                ad.Impressions.Add((string)vastImpression);
                            }

                            if (vastAdInline.Elements("Extensions").Any())
                            {
                                foreach (var vastExtension in vastAdInline.Element("Extensions").Elements("Extension"))
                                {
                                    ad.Extensions.Add(new Extension()); // TODO
                                }
                            }

                            LoadCreatives(vastAdInline, ad);

                            adPod.Ads.Add(ad);
                        }
                        else if (vastAd.Elements("Wrapper").Any())
                        {
                            Ad wrapper = new Ad();
                            var vastAdWrapper = vastAd.Element("Wrapper");

                            // parse the wrapper itself
                            wrapper.AdSystem = GetAdSystem(vastAdWrapper.Element("AdSystem"));
                            var error = (string)vastAdWrapper.Element("Error");
                            if (error != null) wrapper.Errors.Add(error);

                            foreach (var vastImpression in vastAdWrapper.Elements("Impression"))
                            {
                                wrapper.Impressions.Add((string)vastImpression);
                            }

                            LoadCreatives(vastAdWrapper, wrapper);

                            if (vastAdWrapper.Elements("Extensions").Any())
                            {
                                foreach (var vastExtension in vastAdWrapper.Element("Extensions").Elements("Extension"))
                                {
                                    ad.Extensions.Add(new Extension()); // TODO
                                }
                            }

                            AdDocumentPayload wrappedVastDoc = null;
                            var vastAdUri = GetUriValue(vastAdWrapper.Element("VASTAdTagURI"));
                            if (vastAdUri != null && (!maxRedirectDepth.HasValue || maxRedirectDepth.Value > 0))
                            {
                                try
                                {
                                    // load the stream from the web
                                    using (var s = await Extensions.LoadStreamAsync(vastAdUri))
                                    {
                                        var newAllowMultipleAds = vastAdWrapper.GetBoolAttribute("allowMultipleAds", allowMultipleAds);
                                        var followAdditionalWrappers = vastAdWrapper.GetBoolAttribute("followAdditionalWrappers", true);
                                        int? nextMaxRedirectDepth = followAdditionalWrappers ? (maxRedirectDepth.HasValue ? maxRedirectDepth.Value - 1 : maxRedirectDepth) : 0;
                                        wrappedVastDoc = await CreateFromVast(s, nextMaxRedirectDepth, newAllowMultipleAds);
                                    }
                                }
                                catch { /* swallow */ }
                            }

                            AdPod wrappedAdPod = null;
                            if (wrappedVastDoc != null)
                            {
                                wrappedAdPod = wrappedVastDoc.AdPods.FirstOrDefault();
                            }

                            if (wrappedAdPod == null || !wrappedAdPod.Ads.Any())
                            {
                                // no ads were returned
                                var fallbackOnNoAd = vastAdWrapper.GetBoolAttribute("fallbackOnNoAd", true);
                                if (fallbackOnNoAd)
                                {
                                    wrappedAdPod = FallbackAdPod;
                                }
                            }

                            if (wrappedAdPod != null)
                            {
                                // merge tracking info from this wrapper to every ad in the first adpod in the child
                                foreach (Ad inlineAd in wrappedAdPod.Ads)
                                    MergeWrappedAd(wrapper, inlineAd);

                                // add each ad from the first adpod in the child to the current adpod
                                foreach (Ad inlineAd in wrappedAdPod.Ads)
                                    adPod.Ads.Add(inlineAd);
                            }
                        }
                    }
                    result.AdPods.Add(adPod);
                }
                return result;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\Vast\AdModelFactory_Vast1.cs
internal static async Task<AdDocumentPayload> CreateFromVast1(XElement vastRoot, int? maxRedirectDepth, bool allowMultipleAds)
        {
            var result = new AdDocumentPayload();
            result.Version = (string)vastRoot.Attribute("version");

            foreach (var vastAdPod in vastRoot.Elements("Ad").GroupBy(va => va.Attribute("sequence") != null ? 1 : int.MaxValue).OrderBy(vap => vap.Key))
            {
                var adPod = new AdPod();
                foreach (var vastAd in vastAdPod.OrderBy(va => ToNullableInt((string)va.Attribute("sequence")).GetValueOrDefault(0)))
                {
                    var ad = new Ad();
                    ad.Id = (string)vastAd.Attribute("id");

                    if (vastAd.Elements("InLine").Any())
                    {
                        throw new NotImplementedException();
                    }
                    else if (vastAd.Elements("Wrapper").Any())
                    {
                        Ad wrapper = new Ad();
                        var vastAdWrapper = vastAd.Element("Wrapper");

                        // parse the wrapper itself
                        wrapper.AdSystem = GetAdSystem(vastAdWrapper.Element("AdSystem"));
                        var error = (string)vastAdWrapper.Element("Error");
                        if (error == null) wrapper.Errors.Add(error);

                        var linearCreative = new CreativeLinear();

                        foreach (var trackingEvent in GetTrackingEvents(vastAdWrapper))
                            linearCreative.TrackingEvents.Add(trackingEvent);

                        LoadVideoClicks(vastAdWrapper, linearCreative);

                        wrapper.Creatives.Add(linearCreative);

                        var vastAdUri = GetUriValue(vastAdWrapper.Element("VASTAdTagURL"));
                        if (vastAdUri != null)
                        {
                            // load the stream from the web
                            using (var s = await Extensions.LoadStreamAsync(vastAdUri))
                            {
                                int? nextMaxRedirectDepth = maxRedirectDepth.HasValue ? maxRedirectDepth.Value - 1 : maxRedirectDepth;
                                var vastDoc = await CreateFromVast(s, nextMaxRedirectDepth, allowMultipleAds);

                                var firstAdPodInChild = vastDoc.AdPods.FirstOrDefault();

                                if (firstAdPodInChild != null)
                                {
                                    // merge tracking info from this wrapper to every ad in the first adpod in the child
                                    foreach (Ad inlineAd in firstAdPodInChild.Ads)
                                        MergeWrappedAd(wrapper, inlineAd);

                                    // add each ad from the first adpod in the child to the current adpod
                                    foreach (Ad inlineAd in firstAdPodInChild.Ads)
                                        adPod.Ads.Add(inlineAd);
                                }
                            }
                        }
                    }
                }
                result.AdPods.Add(adPod);
            }
            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\vast\VastAdPayloadHandler.cs
public async Task PreloadAdAsync(IAdSource adSource, CancellationToken cancellationToken)
#else
        public IAsyncAction PreloadAdAsync(IAdSource adSource)
        {
            return AsyncInfo.Run(c => PreloadAdAsync(adSource, c));
        }

        internal async Task PreloadAdAsync(IAdSource adSource, CancellationToken cancellationToken)
#endif
        {
            await ProcessPayload(adSource);
            await adHandlerBase.PreloadAdAsync(adSource, cancellationToken);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\vast\VastAdPayloadHandler.cs
public async Task PlayAdAsync(IAdSource adSource, TimeSpan? startTimeout, CancellationToken cancellationToken, IProgress<AdStatus> progress)
#else
        public IAsyncActionWithProgress<AdStatus> PlayAdAsync(IAdSource adSource, TimeSpan? startTimeout)
        {
            return AsyncInfo.Run<AdStatus>((c, p) => PlayAdAsync(adSource, startTimeout, c, p));
        }

        internal async Task PlayAdAsync(IAdSource adSource, TimeSpan? startTimeout, CancellationToken cancellationToken, IProgress<AdStatus> progress)
#endif
        {
            await ProcessPayload(adSource);
            if (!cancellationToken.IsCancellationRequested)
            {
                await adHandlerBase.PlayAdAsync(adSource, startTimeout, cancellationToken, progress);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\vast\VastAdPayloadHandler.cs
static async Task ProcessPayload(IAdSource adSource)
        {
            if (adSource.Payload is Stream)
            {
                using (var stream = (Stream)adSource.Payload)
                {
                    adSource.Payload = await AdModelFactory.CreateFromVast(stream, adSource.MaxRedirectDepth, adSource.AllowMultipleAds);
                }
            }
            else if (adSource.Payload is string)
            {
                using (var stream = new MemoryStream(System.Text.Encoding.UTF8.GetBytes((string)adSource.Payload)))
                {
                    adSource.Payload = await AdModelFactory.CreateFromVast(stream, adSource.MaxRedirectDepth, adSource.AllowMultipleAds);
                }
            }
            if (!(adSource.Payload is AdDocumentPayload))
            {
                throw new ArgumentException("adSource must contain a payload of type Stream", "adPayload");
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\Vmap\VmapFactory.cs
public static async Task<Vmap> LoadSource(Uri source, CancellationToken cancellationToken)
#else
        public static IAsyncOperation<Vmap> LoadSource(Uri source)
        {
            return AsyncInfo.Run(c => InternalLoadSource(source, c));
        }

        static async Task<Vmap> InternalLoadSource(Uri source, CancellationToken cancellationToken)
#endif
        {
            using (var stream = await Extensions.LoadStreamAsync(source))
            {
#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
                return await TaskEx.Run(() => CreateFromVmap(stream), cancellationToken);
#else
                return await Task.Run(() => CreateFromVmap(stream), cancellationToken);
#endif
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\VpaidController.cs
public async Task StartAdAsync(ActiveAdUnit ad, double defaultVolume, CancellationToken cancellationToken)
        {
            try
            {
                ad.Player.AdVolume = defaultVolume;
                await ad.Player.StartAdAsync(cancellationToken);
            }
            catch (Exception ex)
            {
                OnLog(new ActiveAdUnitLogEventArgs(ad, "VPAID.StartAd Exception: " + ex.Message));
                throw ex;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\VpaidController.cs
public async Task<bool> PlayAdAsync(ActiveAdUnit ad, CancellationToken cancellationToken)
        {
            try
            {
                return await ad.Player.PlayAdAsync(cancellationToken);
            }
            catch (Exception ex)
            {
                OnLog(new ActiveAdUnitLogEventArgs(ad, "VPAID.StartAd Exception: " + ex.Message));
                throw ex;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\VpaidController.cs
public async Task FinishAdAsync(ActiveAdUnit ad, CancellationToken cancellationToken)
        {
            try
            {
                await ad.Player.FinishAdAsync(cancellationToken);
            }
            catch (Exception ex)
            {
                OnLog(new ActiveAdUnitLogEventArgs(ad, "VPAID.StartAd Exception: " + ex.Message));
                throw ex;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\VpaidController.cs
public async Task StopAdAsync(ActiveAdUnit ad, CancellationToken cancellationToken)
        {
            try
            {
                await ad.Player.StopAdAsync(cancellationToken);
            }
            catch (Exception ex)
            {
                OnLog(new ActiveAdUnitLogEventArgs(ad, "VPAID.StopAd Exception: " + ex.Message));
                throw ex;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.TimedText\..\Win8.Xaml.TimedText\CaptionsPlugin.cs
private async void AugmentCaption(Caption caption, object payload, TimeSpan startTime, TimeSpan endTime)
        {
            if (caption != null)
            {
                string result = null;
                if (payload is byte[])
                {
                    var byteArray = (byte[])payload;
#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
                    result = await TaskEx.Run(() => System.Text.Encoding.UTF8.GetString(byteArray, 0, byteArray.Length));
#else
                    result = await Task.Run(() => System.Text.Encoding.UTF8.GetString(byteArray, 0, byteArray.Length));
#endif
                    //result = System.Text.Encoding.UTF8.GetString(byteArray, 0, byteArray.Length);
                }
                else if (payload is string)
                {
                    result = (string)payload;
                }
                if (result != null)
                {
                    allTasks = EnqueueTask(() => captionsPanel.AugmentTtml(result, startTime, endTime), allTasks);
                    await allTasks;
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.TimedText\..\Win8.Xaml.TimedText\CaptionsPlugin.cs
private async void RefreshCaption(Caption caption, bool forceRefresh)
        {
            if (caption != null)
            {
                string result = null;
                if (caption.Payload is Uri)
                {
                    try
                    {
                        result = await ((Uri)caption.Payload).LoadToString();
                    }
                    catch
                    {
                        // TODO: expose event to log errors
                        return;
                    }
                }
                else if (caption.Payload is byte[])
                {
                    var byteArray = (byte[])caption.Payload;
#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
                    result = await TaskEx.Run(() => System.Text.Encoding.UTF8.GetString(byteArray, 0, byteArray.Length));
#else
                    result = await Task.Run(() => System.Text.Encoding.UTF8.GetString(byteArray, 0, byteArray.Length));
#endif
                    //result = System.Text.Encoding.UTF8.GetString(byteArray, 0, byteArray.Length);
                }
                else if (caption.Payload is string)
                {
                    result = (string)caption.Payload;
                }

                if (result != null)
                {
                    allTasks = EnqueueTask(() => captionsPanel.ParseTtml(result, forceRefresh), allTasks);
                    await allTasks;
                    IsSourceLoaded = true;

                    // refresh the caption based on the current position. Fixes issue where caption is changed while paused.
                    if (IsLoaded) // make sure we didn't get unloaded by the time this completed.
                    {
                        captionsPanel.UpdateCaptions(MediaPlayer.Position);
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.TimedText\..\Win8.Xaml.TimedText\CaptionsPlugin.cs
static async Task EnqueueTask(Func<Task> newTask, Task taskQueue)
        {
            if (taskQueue != null) await taskQueue;
            await newTask();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.TimedText\..\Win8.Xaml.TimedText\Helpers\Extensions.cs
public static async Task<Stream> LoadToStream(this Uri source)
        {
#if NETFX_CORE || (WINDOWS_PHONE && !WINDOWS_PHONE7)
            switch (source.Scheme.ToLowerInvariant())
            {
                case "ms-appx":
                case "ms-appdata":
                    var file = await Windows.Storage.StorageFile.GetFileFromApplicationUriAsync(source);
                    return await file.OpenStreamForReadAsync();
                default:
                    using (var client = new HttpClient())
                    {
                        using (var stream = await client.GetStreamAsync(source))
                        {
                            var result = new MemoryStream();
                            await stream.CopyToAsync(result);
                            result.Seek(0, SeekOrigin.Begin);
                            return result;
                        }
                    }
            }
#else
            using (var client = new HttpClient())
            {
                return await client.GetStreamAsync(source);
            }
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.TimedText\..\Win8.Xaml.TimedText\Helpers\Extensions.cs
public static async Task<string> LoadToString(this Uri source)
        {
            using (var stream = await source.LoadToStream())
            {
                return new StreamReader(stream).ReadToEnd();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.TimedText\Helpers\HttpClient.cs
public async Task<Stream> GetStreamAsync(Uri address)
        {
            var request = WebRequest.CreateHttp(address);
            var response = await Task.Factory.FromAsync<WebResponse>(request.BeginGetResponse, request.EndGetResponse, null);
            var stream = ((HttpWebResponse)response).GetResponseStream();
            var result = new MemoryStream();
            await stream.CopyToAsync(result);
            result.Seek(0, SeekOrigin.Begin);
            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Phone.VideoAdvertising\Compatibility\HttpClient.cs
public async Task<Stream> GetStreamAsync(Uri address)
        {
            var request = WebRequest.CreateHttp(address);
            if (UserAgent != null) request.UserAgent = UserAgent;
            request.AllowReadStreamBuffering = true;
            var response = await Task.Factory.FromAsync<WebResponse>(request.BeginGetResponse, request.EndGetResponse, null);
            return response.GetResponseStream();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\AdHandlerBase.cs
public async Task CancelActiveAds()
        {
            await controller.CancelActiveAds();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\AdSchedulerPlugin.cs
async Task SetOrReplaceActivePreloadOperation(PreloadOperation value)
        {
            if (activePreloadOperation != null)
            {
                await activePreloadOperation.CancelAsync();
            }
            activePreloadOperation = value;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\AdSchedulerPlugin.cs
async void MediaPlayer_ScrubbingStarted(object sender, ScrubRoutedEventArgs e)
        {
            if (activePreloadOperation != null)
            {
                await activePreloadOperation.CancelAsync();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\AdSchedulerPlugin.cs
async void MediaPlayer_MediaEnding(object sender, MediaPlayerDeferrableEventArgs e)
        {
            if (EligableAds.OfType<PostrollAdvertisement>().Any(a => a.Source != null))
            {
                var deferral = e.DeferrableOperation.GetDeferral();
                try
                {
                    await PlayAdsOfType<PostrollAdvertisement>(CancellationTokenSource.CreateLinkedTokenSource(deferral.CancellationToken, cts.Token).Token);
                }
                catch { /* ignore */ }
                finally
                {
                    deferral.Complete();
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\AdSchedulerPlugin.cs
async void MediaPlayer_MediaLoading(object sender, MediaPlayerDeferrableEventArgs e)
#else
        async void MediaPlayer_MediaStarting(object sender, MediaPlayerDeferrableEventArgs e)
#endif
        {
            if (MediaPlayer.AllowMediaStartingDeferrals)
            {
                IList<Advertisement> startupAds;
                if (MediaPlayer.StartupPosition.HasValue)
                {
                    startupAds = EligableAds
                        .OfType<MidrollAdvertisement>()
                        .Where(a => a.Source != null && a.Time == MediaPlayer.StartupPosition.Value)
                        .Cast<Advertisement>()
                        .ToList();
                }
                else
                {
                    startupAds = EligableAds
                        .OfType<PrerollAdvertisement>()
                        .Where(a => a.Source != null)
                        .Cast<Advertisement>()
                        .ToList();
                }


                if (startupAds.Any())
                {
                    var deferral = e.DeferrableOperation.GetDeferral();
                    try
                    {
                        using (var adCts = CancellationTokenSource.CreateLinkedTokenSource(deferral.CancellationToken, cts.Token))
                        {
                            HandledAds.AddRange(startupAds);
                            await PlayAds(startupAds, adCts.Token);
                        }
                    }
                    catch { /* ignore */ }
                    finally
                    {
                        deferral.Complete();
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\AdSchedulerPlugin.cs
async Task PlayAdsOfType<T>(CancellationToken cancellationToken) where T : Advertisement
        {
            var adsToPlay = EligableAds.OfType<T>().Where(a => a.Source != null).ToList();
            HandledAds.AddRange(adsToPlay.Cast<Advertisement>());
            if (adsToPlay.Any())
            {
                await PlayAds(adsToPlay.Cast<Advertisement>(), cancellationToken);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\AdSchedulerPlugin.cs
async Task PlayAds(IEnumerable<Advertisement> advertisements, CancellationToken cancellationToken)
        {
            foreach (var advertisement in advertisements)
            {
                try
                {
                    await PlayAdAsync(advertisement, cancellationToken);
                }
                catch { /* swallow */ }
                if (cancellationToken.IsCancellationRequested) break;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\AdSchedulerPlugin.cs
public async Task CancelAsync()
            {
                if (Task.IsRunning())
                {
                    if (!cts.IsCancellationRequested)
                    {
                        cts.Cancel();
                    }
                    try
                    {
                        await Task;
                    }
                    catch { /* ignore */ }
                }
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\FreewheelPlugin.cs
private async void mediaPlayer_MediaLoading(object sender, MediaPlayerDeferrableEventArgs e)
        {
            if (IsEnabled)
            {
                if (Source != null)
                {
                    var deferral = e.DeferrableOperation.GetDeferral();
                    try
                    {
                        await LoadAds(Source, deferral.CancellationToken);
                    }
                    catch { /* ignore */ }
                    finally
                    {
                        deferral.Complete();
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\FreewheelPlugin.cs
public async Task LoadAds(Uri source, CancellationToken c)
        {
            adSlots.Clear();
            var cancellationToken = CancellationTokenSource.CreateLinkedTokenSource(c, cts.Token).Token;

#if SILVERLIGHT
            adResponse = await FreeWheelFactory.LoadSource(source, cancellationToken);
#else
            adResponse = await FreeWheelFactory.LoadSource(source).AsTask(cancellationToken);
#endif

            var videoTracking = adResponse.SiteSection.VideoPlayer.VideoAsset.EventCallbacks.FirstOrDefault(ec => ec.Name == FWEventCallback.VideoView);
            if (videoTracking != null)
            {
                // use the tracking plugins to help with tracking markers. Create it if it doesn't exist.
                var positionTrackingPlugin = MediaPlayer.Plugins.OfType<PositionTrackingPlugin>().FirstOrDefault();
                if (positionTrackingPlugin == null)
                {
                    positionTrackingPlugin = new PositionTrackingPlugin();
                    MediaPlayer.Plugins.Add(positionTrackingPlugin);
                }
                positionTrackingPlugin.EventTracked += trackingPlugin_EventTracked;
                lastTrackingEvent = null; // reset
                trackingEnded = false;
                positionTrackingPlugin.TrackingEvents.Add(new PositionTrackingEvent() { PositionPercentage = 1, Data = videoTracking, Area = TrackingEventArea });

                var playTimeTrackingPlugin = MediaPlayer.Plugins.OfType<PlayTimeTrackingPlugin>().FirstOrDefault();
                if (playTimeTrackingPlugin == null)
                {
                    playTimeTrackingPlugin = new PlayTimeTrackingPlugin();
                    MediaPlayer.Plugins.Add(playTimeTrackingPlugin);
                }
                playTimeTrackingPlugin.EventTracked += trackingPlugin_EventTracked;
                for (int i = 0; i < 60; i = i + 15)
                    playTimeTrackingPlugin.TrackingEvents.Add(new PlayTimeTrackingEvent() { PlayTime = TimeSpan.FromSeconds(i), Data = videoTracking, Area = TrackingEventArea });
                for (int i = 60; i < 60 * 3; i = i + 30)
                    playTimeTrackingPlugin.TrackingEvents.Add(new PlayTimeTrackingEvent() { PlayTime = TimeSpan.FromSeconds(i), Data = videoTracking, Area = TrackingEventArea });
                for (int i = 60 * 3; i < 60 * 10; i = i + 60)
                    playTimeTrackingPlugin.TrackingEvents.Add(new PlayTimeTrackingEvent() { PlayTime = TimeSpan.FromSeconds(i), Data = videoTracking, Area = TrackingEventArea });
                for (int i = 60 * 10; i < 60 * 30; i = i + 120)
                    playTimeTrackingPlugin.TrackingEvents.Add(new PlayTimeTrackingEvent() { PlayTime = TimeSpan.FromSeconds(i), Data = videoTracking, Area = TrackingEventArea });
                for (int i = 60 * 30; i < 60 * 60; i = i + 300)
                    playTimeTrackingPlugin.TrackingEvents.Add(new PlayTimeTrackingEvent() { PlayTime = TimeSpan.FromSeconds(i), Data = videoTracking, Area = TrackingEventArea });
                for (int i = 60 * 60; i < 60 * 180; i = i + 600)
                    playTimeTrackingPlugin.TrackingEvents.Add(new PlayTimeTrackingEvent() { PlayTime = TimeSpan.FromSeconds(i), Data = videoTracking, Area = TrackingEventArea });
            }

            var videoAsset = adResponse.SiteSection.VideoPlayer.VideoAsset;
            if (videoAsset != null)
            {
                foreach (var adSlot in videoAsset.AdSlots)
                {
                    Advertisement ad = null;
                    switch (adSlot.TimePositionClass)
                    {
                        case "preroll":
                            ad = new PrerollAdvertisement();
                            break;
                        case "postroll":
                            ad = new PostrollAdvertisement();
                            break;
                        default:
                            var midroll = new MidrollAdvertisement();
                            midroll.Time = adSlot.TimePosition;
                            ad = midroll;
                            break;
                    }

#if SILVERLIGHT
                    var payload = await FreeWheelFactory.GetAdDocumentPayload(adSlot, adResponse, cancellationToken);
#else
                    var payload = await FreeWheelFactory.GetAdDocumentPayload(adSlot, adResponse).AsTask(cancellationToken);
#endif
                    ad.Source = new AdSource(payload, DocumentAdPayloadHandler.AdType);

                    Advertisements.Add(ad);
                    adSlots.Add(ad, adSlot);
                }
            }

            ShowCompanions();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\FreewheelPlugin.cs
protected override async Task PlayAdAsync(Advertisement ad, CancellationToken cancellationToken)
        {
            if (adSlots.ContainsKey(ad)) // app could have manually added ads besides those from FreeWheel
            {
                var adSlot = adSlots[ad];
                try
                {
                    var slotImpression = adSlot.EventCallbacks.FirstOrDefault(ec => ec.Type == FWCallbackType.Impression && ec.Name == FWEventCallback.SlotImpression);
                    if (slotImpression != null)
                    {
                        foreach (var url in slotImpression.GetUrls())
                        {
                            AdTracking.Current.FireTracking(url);
                        }
                    }
                    if (ad.Source != null)
                    {
                        await base.PlayAdAsync(ad, cancellationToken);
                    }
                }
                catch { /* swallow */ }
            }
            else
            {
                await base.PlayAdAsync(ad, cancellationToken);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.xaml.advertising\helpers\Extensions.cs
public static async Task<Stream> GetStreamAsync(this WebRequest request)
        {
            var response = await Task.Factory.FromAsync<WebResponse>(request.BeginGetResponse, request.EndGetResponse, null);
            return response.GetResponseStream();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.xaml.advertising\helpers\Extensions.cs
public static async Task<Stream> LoadStreamAsync(Uri source)
        {
#if NETFX_CORE || (WINDOWS_PHONE && !WINDOWS_PHONE7)
            switch (source.Scheme.ToLowerInvariant())
            {
                case "ms-appx":
                case "ms-appdata":
                    var file = await Windows.Storage.StorageFile.GetFileFromApplicationUriAsync(source);
                    return await file.OpenStreamForReadAsync();
                default:
                    return await DownloadStreamAsync(source);
            }
#else
            return await DownloadStreamAsync(source);
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.xaml.advertising\helpers\Extensions.cs
public static async Task<Stream> DownloadStreamAsync(Uri source)
        {
#if SILVERLIGHT
            using (var client = new HttpClient())
            {
                client.UserAgent = Microsoft.VideoAdvertising.Extensions.DefaultUserAgent;
                return await client.GetStreamAsync(source);
            }
#else
            using (var client = new HttpClient())
            {
                using (HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, source))
                {
                    if (Microsoft.VideoAdvertising.Extensions.DefaultUserAgent != null)
                    {
                        request.Headers.UserAgent.ParseAdd(Microsoft.VideoAdvertising.Extensions.DefaultUserAgent);
                    }
                    using (var response = await client.SendAsync(request))
                    {
                        response.EnsureSuccessStatusCode();
                        using (var stream = await response.Content.ReadAsStreamAsync())
                        {
                            var result = new MemoryStream();
                            await stream.CopyToAsync(result);
                            result.Seek(0, SeekOrigin.Begin);
                            return result;
                        }
                    }
                }
            }
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.xaml.advertising\helpers\MediaPlayerExtensions.cs
public static async Task<bool> PlayAd(this MediaPlayer mediaPlayer, IAdSource adSource, IProgress<AdStatus> progress, CancellationToken cancellationToken)
        {
            var adPlugin = mediaPlayer.Plugins.OfType<AdHandlerPlugin>().FirstOrDefault();
            if (adPlugin != null)
            {
                await adPlugin.PlayAd(adSource, cancellationToken, progress);
                return true;
            }
            else
            {
                return false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\MastSchedulerPlugin.cs
async void mediaPlayer_MediaStarting(object sender, MediaPlayerDeferrableEventArgs e)
        {
            // we need to do a little trickery to find out if there is a preroll.
            capturetriggerTask = true;
            try
            {
                triggerTask = null;
                mastAdapter.InvokeMediaStarting(); // tell the adapter to fire the OnItemStarting event. This will cause the ActivateTrigger event to fire before we return.
                if (MediaPlayer.AllowMediaStartingDeferrals)
                {
                    if (triggerTask != null)
                    {
                        var deferral = e.DeferrableOperation.GetDeferral();
                        try
                        {
                            await triggerTask;
                        }
                        catch { /* ignore */ }
                        finally
                        {
                            deferral.Complete();
                            triggerTask = null;
                        }
                    }
                }
            }
            finally
            {
                capturetriggerTask = false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\MastSchedulerPlugin.cs
async void mediaPlayer_MediaEnding(object sender, MediaPlayerDeferrableEventArgs e)
        {
            // we need to do a little trickery to get the post roll to play and await its completion before allowing MediaEnded to fire.
            // otherwise MediaEnded will fire during the ad and the next playlistitem will start.
            capturetriggerTask = true;
            try
            {
                triggerTask = null;
                mastAdapter.InvokeMediaEnded(); // tell the adapter to fire the OnItemEnd event. This will cause the ActivateTrigger event to fire before we return.
                if (triggerTask != null)
                {
                    var deferral = e.DeferrableOperation.GetDeferral();
                    try
                    {
                        await triggerTask;
                    }
                    catch { /* ignore */ }
                    finally
                    {
                        deferral.Complete();
                        triggerTask = null;
                    }
                }
            }
            finally
            {
                capturetriggerTask = false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\MastSchedulerPlugin.cs
async void mediaPlayer_MediaLoading(object sender, MediaPlayerDeferrableEventArgs e)
        {
            if (IsEnabled)
            {
                if (Source != null)
                {
                    var deferral = e.DeferrableOperation.GetDeferral();
                    try
                    {
                        await LoadAds(Source, deferral.CancellationToken);
                    }
                    catch { /* ignore */ }
                    finally
                    {
                        deferral.Complete();
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\MastSchedulerPlugin.cs
public async Task LoadAds(Uri source, CancellationToken c)
        {
            mainsail.Clear();
            var cancellationToken = CancellationTokenSource.CreateLinkedTokenSource(c, cts.Token).Token;
#if SILVERLIGHT
            await mainsail.LoadSource(source, cancellationToken);
#else
            await mainsail.LoadSource(source).AsTask(cancellationToken);
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\RemoteAdSource.cs
public async Task LoadPayload(CancellationToken cancellationToken)
#else
        public IAsyncAction LoadPayload()
        {
            return AsyncInfo.Run(c => LoadPayload(c));
        }

        internal async Task LoadPayload(CancellationToken cancellationToken)
#endif
        {
            if (IsLoaded) return;
            if (loadingTask == null)
            {
#if SILVERLIGHT
                if (WebRequest != null)
                {
                    loadingTask = WebRequest.GetStreamAsync();
                }
#else
                if (HttpClient != null)
                {
                    loadingTask = HttpClient.GetStreamAsync(Uri);
                }
#endif
                else
                {
                    loadingTask = Extensions.LoadStreamAsync(Uri);
                }
                try
                {
                    payload = await loadingTask;
                    IsLoaded = true;
                }
                finally
                {
                    loadingTask = null;
                }
            }
            else
            {
                await loadingTask;
            }
            cancellationToken.ThrowIfCancellationRequested();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\VmapSchedulerPlugin.cs
async void timer_Tick(object sender, object e)
        {
            try
            {
#if SILVERLIGHT
                var vmap = await VmapFactory.LoadSource(Source, cts.Token);
#else
                var vmap = await VmapFactory.LoadSource(Source).AsTask(cts.Token);
#endif
                // remove all ads that were not found new info
                foreach (var adBreak in adBreaks.Where(existingBreak => !vmap.AdBreaks.Any(newBreak => newBreak.BreakId == existingBreak.Value.BreakId)))
                {
                    Advertisements.Remove(adBreak.Key);
                }
                // create new ads for those that do not already exist
                foreach (var adBreak in vmap.AdBreaks.Where(newBreak => !adBreaks.Values.Any(existingBreak => existingBreak.BreakId == newBreak.BreakId)))
                {
                    CreateAdvertisement(adBreak);
                }
            }
            catch { /* ignore */ }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\VmapSchedulerPlugin.cs
async void mediaPlayer_MediaLoading(object sender, MediaPlayerDeferrableEventArgs e)
        {
            if (IsEnabled)
            {
                if (Source != null)
                {
                    var deferral = e.DeferrableOperation.GetDeferral();
                    try
                    {
                        await LoadAds(Source, deferral.CancellationToken);
                    }
                    catch { /* ignore */ }
                    finally
                    {
                        deferral.Complete();
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\VmapSchedulerPlugin.cs
public async Task LoadAds(Uri source, CancellationToken c)
        {
            adBreaks.Clear();
            var cancellationToken = CancellationTokenSource.CreateLinkedTokenSource(c, cts.Token).Token;
#if SILVERLIGHT
            var vmap = await VmapFactory.LoadSource(source, cancellationToken);
#else
            var vmap = await VmapFactory.LoadSource(source).AsTask(cancellationToken);
#endif
            foreach (var adBreak in vmap.AdBreaks)
            {
                CreateAdvertisement(adBreak);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\VmapSchedulerPlugin.cs
protected override async Task PlayAdAsync(Advertisement ad, CancellationToken cancellationToken)
        {
            if (adBreaks.ContainsKey(ad)) // app could have manually added ads besides those in vmap
            {
                VmapAdBreak adBreak = adBreaks[ad];
                try
                {
                    TrackEvent(adBreak.TrackingEvents.Where(te => te.EventType == VmapTrackingEventType.BreakStart));
                    await base.PlayAdAsync(ad, cancellationToken);
                    TrackEvent(adBreak.TrackingEvents.Where(te => te.EventType == VmapTrackingEventType.BreakEnd));
                }
                catch
                {
                    TrackEvent(adBreak.TrackingEvents.Where(te => te.EventType == VmapTrackingEventType.Error));
                }
            }
            else
            {
                await base.PlayAdAsync(ad, cancellationToken);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.WebVTT\..\Win8.Xaml.WebVTT\Helpers\Extensions.cs
public static async Task<Stream> LoadToStream(this Uri source)
        {
#if NETFX_CORE || (WINDOWS_PHONE && !WINDOWS_PHONE7)
            switch (source.Scheme.ToLowerInvariant())
            {
                case "ms-appx":
                case "ms-appdata":
                    var file = await Windows.Storage.StorageFile.GetFileFromApplicationUriAsync(source);
                    return await file.OpenStreamForReadAsync();
                default:
                    using (var client = new HttpClient())
                    {
                        using (var stream = await client.GetStreamAsync(source))
                        {
                            var result = new MemoryStream();
                            await stream.CopyToAsync(result);
                            result.Seek(0, SeekOrigin.Begin);
                            return result;
                        }
                    }
            }
#else
            using (var client = new HttpClient())
            {
                return await client.GetStreamAsync(source);
            }
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.WebVTT\..\Win8.Xaml.WebVTT\Helpers\Extensions.cs
public static async Task<string> LoadToString(this Uri source)
        {
            using (var stream = await source.LoadToStream())
            {
                return new StreamReader(stream).ReadToEnd();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.WebVTT\..\Win8.Xaml.WebVTT\WebVTTPlugin.cs
private async void AugmentCaption(Caption caption, object payload, TimeSpan startTime, TimeSpan endTime)
        {
            if (caption != null)
            {
                string result = null;
                if (payload is byte[])
                {
                    var byteArray = (byte[])payload;
#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
                    result = await TaskEx.Run(() => System.Text.Encoding.UTF8.GetString(byteArray, 0, byteArray.Length));
#else
                    result = await Task.Run(() => System.Text.Encoding.UTF8.GetString(byteArray, 0, byteArray.Length));
#endif
                    //result = System.Text.Encoding.UTF8.GetString(byteArray, 0, byteArray.Length);
                }
                else if (payload is string)
                {
                    result = (string)payload;
                }
                if (result != null)
                {
                    allTasks = EnqueueTask(() => AugmentWebVTT(result, startTime, endTime), allTasks);
                    await allTasks;
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.WebVTT\..\Win8.Xaml.WebVTT\WebVTTPlugin.cs
private async Task<WebVTTDocument> LoadWebVTTDocument(string webvtt, TimeSpan startTime, TimeSpan endTime)
        {
            // parse on a background thread
#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
            return await TaskEx.Run(() => WebVTTParser.ParseDocument(webvtt, startTime, endTime));       
#else
            return await Task.Run(() => WebVTTParser.ParseDocument(webvtt, startTime, endTime));
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.WebVTT\..\Win8.Xaml.WebVTT\WebVTTPlugin.cs
private async Task AugmentWebVTT(string webvtt, TimeSpan startTime, TimeSpan endTime)
        {
            var doc = await LoadWebVTTDocument(webvtt, startTime, endTime);
            // merge
            foreach (var cue in doc.Cues)
            {
                bool found = false;
                foreach (var marker in markerManager.MediaMarkers)
                {
                    if (marker.Begin == cue.Begin && marker.End == cue.End) // assume its the same one if begin and end match.
                    {
                        found = true;
                        break;
                    }
                }
                if (!found)
                {
                    markerManager.MediaMarkers.Add(new MediaMarker() { Begin = cue.Begin, End = cue.End, Content = cue });
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.WebVTT\..\Win8.Xaml.WebVTT\WebVTTPlugin.cs
private async Task LoadWebVTT(string webvtt)
        {
            var doc = await LoadWebVTTDocument(webvtt, TimeSpan.Zero, TimeSpan.MaxValue);
            foreach (var cue in doc.Cues)
            {
                markerManager.MediaMarkers.Add(new MediaMarker() { Begin = cue.Begin, End = cue.End, Content = cue });
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.WebVTT\..\Win8.Xaml.WebVTT\WebVTTPlugin.cs
private async void RefreshCaption(Caption caption)
        {
            if (caption != null)
            {
                string result = null;
                if (caption.Payload is Uri)
                {
                    try
                    {
                        result = await ((Uri)caption.Payload).LoadToString();
                    }
                    catch
                    {
                        // TODO: expose event to log errors
                        return;
                    }
                }
                else if (caption.Payload is byte[])
                {
                    var byteArray = (byte[])caption.Payload;
#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
                    result = await TaskEx.Run(() => System.Text.Encoding.UTF8.GetString(byteArray, 0, byteArray.Length));
#else
                    result = await Task.Run(() => System.Text.Encoding.UTF8.GetString(byteArray, 0, byteArray.Length));
#endif
                    //result = System.Text.Encoding.UTF8.GetString(byteArray, 0, byteArray.Length);
                }
                else if (caption.Payload is string)
                {
                    result = (string)caption.Payload;
                }

                if (result != null)
                {
                    allTasks = EnqueueTask(() => LoadWebVTT(result), allTasks);
                    await allTasks;
                    IsSourceLoaded = true;

                    // refresh the caption based on the current position. Fixes issue where caption is changed while paused.
                    if (IsLoaded) // make sure we didn't get unloaded by the time this completed.
                    {
                        captionsPanel.UpdatePosition(MediaPlayer.Position);
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.WebVTT\..\Win8.Xaml.WebVTT\WebVTTPlugin.cs
static async Task EnqueueTask(Func<Task> newTask, Task taskQueue)
        {
            if (taskQueue != null) await taskQueue;
            await newTask();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.WebVTT\Helpers\HttpClient.cs
public async Task<Stream> GetStreamAsync(Uri address)
        {
            var request = WebRequest.CreateHttp(address);
            var response = await Task.Factory.FromAsync<WebResponse>(request.BeginGetResponse, request.EndGetResponse, null);
            var stream = ((HttpWebResponse)response).GetResponseStream();
            var result = new MemoryStream();
            await stream.CopyToAsync(result);
            result.Seek(0, SeekOrigin.Begin);
            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAnalytics\..\Win8.VideoAnalytics\AnalyticsCollector.cs
public async void SendLog(ILog log)
        {
            // add all the extra info to the log
            log.ExtraData.Add("VideoSessionId", VideoSessionId);
            log.ExtraData.Add("VideoSessionDuration", VideoSessionDuration);
            log.ExtraData.Add("IsLive", isLive);
            foreach (var kvp in AddtionalData.ToList())
            {
                log.ExtraData.Add(kvp);
            }

            // add additional info about the stream (which may require us to wait until it's finished).
            StreamLoadedLog streamLoadedLog = null;
            if (streamLoadTask != null)
            {
                streamLoadedLog = await streamLoadTask.Task;
            }
            if (streamLoadedLog != null)
            {
                log.ExtraData.Add("EdgeIP", streamLoadedLog.EdgeServer);
                log.ExtraData.Add("RelatedLogId", streamLoadedLog.Id);
                log.ExtraData.Add("VideoUrl", streamLoadedLog.Source);
            }

            // notify that the log is ready
            if (LogCreated != null) LogCreated(this, new LogEventArgs(log));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAnalytics\..\Win8.VideoAnalytics\AnalyticsCollector.cs
async void Player_StreamLoaded(object sender, object e)
        {
            isPaused = true;
            AddLog(new StreamEventLog(StreamEventType.Loaded, TimeSpan.Zero, Player.Duration));

            var loadedLog = new StreamLoadedLog(Player.Source);
            if (AdaptiveMonitor != null)
            {
                loadedLog.MaxBitrate = AdaptiveMonitor.MaxBitrate;
                loadedLog.MinBitrate = AdaptiveMonitor.MinBitrate;
            }

            EdgeServerResult edgeResult = EdgeServerResult.Empty;
            if (Player.Source.IsAbsoluteUri)
            {
                var sourceRoot = GetUrlWithoutQueryString(Player.Source);
                try
                {
                    edgeResult = await GetEdgeServerAsync(new Uri(sourceRoot, UriKind.Absolute));
                }
                catch (OperationCanceledException) { /* ignore */ }
            }

            loadedLog.EdgeServer = edgeResult.EdgeServer;
            loadedLog.ClientIp = edgeResult.ClientIP;
            AddLog(loadedLog);
            streamLoadTask.SetResult(loadedLog);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAnalytics\..\Win8.VideoAnalytics\AnalyticsCollector.cs
async Task<EdgeServerResult> GetEdgeServerAsync(Uri currentStreamUri)
        {
            EdgeServerResult result = null;
            if (EdgeServerMonitor != null)
            {
                try
                {
#if SILVERLIGHT
                    result = await EdgeServerMonitor.GetEdgeServerAsync(currentStreamUri, cts.Token);
#else
                    result = await EdgeServerMonitor.GetEdgeServerAsync(currentStreamUri).AsTask(cts.Token);
#endif
                }
                catch (OperationCanceledException) { throw; }
                catch { /* unable to get edge server info, nothing we can do but continue */}
            }

            return result ?? EdgeServerResult.Empty;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAnalytics\..\win8.videoanalytics\audienceinsight\RESTDataClient.cs
public async Task<LogBatchResult> SendBatchAsync(IBatch batch, CancellationToken c)
#endif
        {
            if (batch.Logs != null)
            {
                using (HttpClient httpClient = new HttpClient())
                {
                    httpClient.Timeout = Timeout;
                    httpClient.DefaultRequestHeaders.Add("Ver", Version.ToString());

                    using (var stream = new MemoryStream())
                    {
                        batch.SerializeCompressed(stream);
                        stream.Seek(0, SeekOrigin.Begin);
                        using (var content = new StreamContent(stream))
                        {
                            using (var response = await httpClient.PostAsync(ServiceUrl, content, c))
                            {
                                response.EnsureSuccessStatusCode();

                                using (var responseStream = await response.Content.ReadAsStreamAsync())
                                {
                                    c.ThrowIfCancellationRequested();
                                    return ResponseDeserializer.Deserialize(responseStream);
                                }
                            }
                        }
                    }
                }
            }
            else return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAnalytics\..\win8.videoanalytics\dataclients\EdgeServerMonitor.cs
public async Task<EdgeServerResult> GetEdgeServerAsync(Uri currentStreamUri, CancellationToken cancellationToken)
#endif
        {
            if (EdgeServerRuleCollection != null)
            {
                var edgeServerRules = EdgeServerRuleCollection.FirstOrDefault(ai => ai.Domain != null && currentStreamUri.Host.EndsWith(ai.Domain, StringComparison.OrdinalIgnoreCase));
                // fallback on the address rules without a domain
                if (edgeServerRules == null)
                {
                    edgeServerRules = EdgeServerRuleCollection.FirstOrDefault(ai => ai.Domain == null);
                }
                if (edgeServerRules != null)
                {
                    Uri ipRequestUri;
                    if (currentStreamUri != null)
                        ipRequestUri = new Uri(string.Format(CultureInfo.InvariantCulture, edgeServerRules.EdgeResolverUrlPattern, currentStreamUri.Host, currentStreamUri.Port), UriKind.Absolute);
                    else
                        ipRequestUri = new Uri(edgeServerRules.EdgeResolverUrlPattern, UriKind.Absolute);

                    // use the client networking stack so we can read headers
#if SILVERLIGHT
                    var request = (HttpWebRequest)System.Net.Browser.WebRequestCreator.ClientHttp.Create(ipRequestUri);
#else
                    var request = WebRequest.CreateHttp(ipRequestUri);
#endif
                    for (int i = 0; i < edgeServerRules.EdgeResolverHeaders.Count; i = i + 2)
                    {
                        string key = edgeServerRules.EdgeResolverHeaders[i];
                        string value = edgeServerRules.EdgeResolverHeaders[i + 1];
                        request.Headers[key] = value;
                    }
                    request.Method = "GET";
                    var response = await Task.Factory.FromAsync<WebResponse>(request.BeginGetResponse, request.EndGetResponse, null);
                    cancellationToken.ThrowIfCancellationRequested();

                    string result;
                    using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                    {
                        result = reader.ReadToEnd();
                    }
                    string thingToParse;

                    // get the edge server
                    string edgeServer = "";
                    thingToParse = result;
                    if (edgeServerRules.EdgeHeader != null)
                    {
                        if (response.SupportsHeaders)
                            thingToParse = response.Headers[edgeServerRules.EdgeHeader].Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries).FirstOrDefault();
                    }
                    if (edgeServerRules.EdgeRegex != null && thingToParse != null)
                    {
                        Regex regex = new Regex(edgeServerRules.EdgeRegex);
                        if (regex.IsMatch(thingToParse))
                        {
                            var matches = regex.Matches(thingToParse);
                            edgeServer = matches[0].Value;
                        }
                    }

                    // get the client IP
                    string clientIP = EdgeServerResult.IpNA;
                    thingToParse = result;
                    if (edgeServerRules.ClientIPHeader != null)
                    {
                        if (response.SupportsHeaders)
                            thingToParse = response.Headers[edgeServerRules.ClientIPHeader];
                    }
                    if (edgeServerRules.ClientIPRegex != null && thingToParse != null)
                    {
                        Regex regex = new Regex(edgeServerRules.ClientIPRegex);
                        if (regex.IsMatch(thingToParse))
                        {
                            var matches = regex.Matches(thingToParse);
                            clientIP = matches[0].Value;
                        }
                    }

                    return new EdgeServerResult(edgeServer, clientIP);
                }
            }
            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAnalytics\..\win8.videoanalytics\logging\QueueManager.cs
async void pollingTimer_Tick(object sender)
        {
            if (!isProcessing) // ignore reentrance
            {
                isProcessing = true;
                try
                {
                    await ProcessQueue();
                }
                finally { isProcessing = false; }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAnalytics\..\win8.videoanalytics\logging\QueueManager.cs
private async Task ProcessQueue()
        {
            IBatch batchToSend = null;
            try
            {
                if (BatchToRetry != null)
                {
                    // we have a batch that need to be resent, try again
                    batchToSend = BatchToRetry;
                    BatchToRetry = null; // this will get reset if there's a problem
                }
                else
                {
                    RetryCount = 0;
                    if (logAgent.HasLogs())
                    {
                        var batch = await CreateBatch();
                        // apply mappings. If mappings are defined, it will create new instance of the batch and the logs using different keys and dropping come elements.
                        batchToSend = logAgent.MapBatchAndLogs(batch);
                    }
                }
                if (batchToSend != null)
                {
                    await SendBatch(batchToSend);
                }
            }
            catch (Exception ex)
            {
                FailedSendCount++;
                if (!logAgent.Configuration.MaxRetries.HasValue || RetryCount < logAgent.Configuration.MaxRetries.Value)
                {
                    BatchToRetry = batchToSend;
                    RetryCount++;
                }
                else // we exceeded the max number of retries, time to move on
                {
                    BatchToRetry = null;
                    RetryCount = 0;
                    logAgent.IncrementTotalLogsDropped(batchToSend.Logs.Count());
                }
                logAgent.BroadcastException(ex);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAnalytics\..\win8.videoanalytics\logging\QueueManager.cs
private async Task<Batch> CreateBatch()
        {
            var batch = new Batch();
            batch.ApplicationName = logAgent.Configuration.ApplicationName;
            batch.ApplicationVersion = logAgent.Configuration.ApplicationVersion;
            batch.ApplicationId = logAgent.Configuration.ApplicationId;
            batch.SessionId = logAgent.SessionId;
            batch.InstanceId = await InstanceDataClient.GetInstanceId();

            batch.TotalFailures = FailedSendCount;
            batch.LogsDropped = logAgent.TotalLogsDropped;
            batch.LogsSent = logAgent.TotalLogsSent;

            return batch;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAnalytics\..\win8.videoanalytics\logging\QueueManager.cs
private async Task SendBatch(IBatch batch)
        {
            if (batch != null && batch.Logs != null && batch.Logs.Count() > 0)
            {
                try
                {
                    if (BatchSending != null) BatchSending(this, new BatchEventArgs(batch));
                }
                catch { /* swallow */ }

                SendCount++;

                // the data client does the work of actually sending the info to the server
                try
                {
#if SILVERLIGHT
                    var result = await dataClient.SendBatchAsync(batch, CancellationToken.None);
#else
                    var result = await dataClient.SendBatchAsync(batch);
#endif

                    logAgent.IncrementTotalLogsSent(batch.Logs.Count());
                    logAgent.IncrementTotalBatchesSent(1);

                    if (result != null)
                    {
                        if (result.IsEnabled.HasValue)
                            logAgent.State = result.IsEnabled.Value ? BatchingLogAgentStates.Enabled : BatchingLogAgentStates.Disabled;
                        if (result.QueuePollingInterval.HasValue && !IsThrottled)
                            QueuePollingInterval = result.QueuePollingInterval.Value;
                        if (result.ServerTime.HasValue)
                        {
                            if (!logAgent.ServerTimeOffset.HasValue)
                            {
                                logAgent.ServerTimeOffset = result.ServerTime.Value.Subtract(batch.TimeStamp);
                            }
                        }
                    }

                    // decrement the FailedSendCount
                    FailedSendCount = Math.Max(FailedSendCount - 1, 0);
                    try
                    {
                        if (BatchSendSuccess != null) BatchSendSuccess(this, new BatchEventArgs(batch));
                    }
                    catch { /* swallow */ }
                }
                catch
                {
                    logAgent.IncrementTotalBatchesFailed(1);
                    try
                    {
                        if (BatchSendFailed != null) BatchSendFailed(this, new BatchEventArgs(batch));
                    }
                    catch { /* swallow */ }
                    throw;
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAnalytics\Compatibility\HttpClient.cs
public async Task<Stream> GetStreamAsync(Uri address)
        {
            var request = WebRequest.CreateHttp(address);
            foreach (var header in DefaultRequestHeaders)
            {
                request.Headers[header.Key] = header.Value;
            }
            request.AllowReadStreamBuffering = true;
            var response = await Task.Factory.FromAsync<WebResponse>(request.BeginGetResponse, request.EndGetResponse, null);
            return response.GetResponseStream();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAnalytics\Compatibility\HttpClient.cs
public async Task<HttpResponseMessage> PostAsync(Uri address, StreamContent content, CancellationToken c)
        {
            using (var cts = CancellationTokenSource.CreateLinkedTokenSource(c))
            {
                cts.CancelAfter(Timeout);
                var request = WebRequest.CreateHttp(address);
                request.Method = "POST";
                foreach (var header in DefaultRequestHeaders)
                {
                    request.Headers[header.Key] = header.Value;
                }
                request.AllowReadStreamBuffering = true;
                using (var stream = await Task.Factory.FromAsync<Stream>(request.BeginGetRequestStream, request.EndGetRequestStream, null))
                {
                    await content.Stream.CopyToAsync(stream);
                }

                return new HttpResponseMessage((HttpWebResponse)await Task.Factory.FromAsync<WebResponse>(request.BeginGetResponse, request.EndGetResponse, null));
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\CFF\CffDownloaderPlugin.cs
protected virtual async Task<Stream> DownloadManifestAsync(Uri source, CancellationToken c)
        {
            await this.parser.Parse(source);
            c.ThrowIfCancellationRequested();

            var manifestStream = this.parser.GenerateClientManifestStream();

#if DEBUG
            var reader = new System.IO.StreamReader(manifestStream);
            Debug.WriteLine(reader.ReadToEnd());
            manifestStream.Seek(0, SeekOrigin.Begin);
#endif
            parser.Boxes.Clear();

            return manifestStream;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\CFF\CffDownloaderPlugin.cs
protected virtual async Task<WebRequestorResponse> DownloadChunkAsync(Uri source, CancellationToken c)
        {
            Regex regex = new Regex(RegexFragmentRequest, RegexOptions.IgnoreCase);
            var match = regex.Match(source.AbsolutePath);

            if (match != null)
            {
                var trackType = match.Groups["trackType"].Value;
                var timeOffset = ulong.Parse(match.Groups["timeOffset"].Value);
                var bitrate = uint.Parse(match.Groups["bitrate"].Value);
                var language = match.Groups["language"].Value;
                var manifestTrackType = (ManifestTrackType)Enum.Parse(typeof(ManifestTrackType), trackType, true);

                var fragmentStream = await this.parser.GetTrackFragmentStream(manifestTrackType, bitrate, timeOffset, language);
                c.ThrowIfCancellationRequested();

                return fragmentStream;
            }
            else
            {
                return null;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\CFF\Progressive\ProgressiveCffFileParser.cs
public override async Task Parse(Uri path)
        {
            fileOffset = 0;
            fileUri = path;

            await this.ReadMovieHeaderBoxes();
            await this.ReadMovieFragmentRandomAccess();
            InitializeTrackRegistry();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\CFF\Progressive\ProgressiveCffFileParser.cs
public override async Task<WebRequestorResponse> GetTrackFragmentStream(ManifestTrackType trackType, uint bitrate, ulong timeOffset, string language)
        {
            if (language == string.Empty) language = null;

            var track = this.ManifestTracks
                .Where(t => t.Type == trackType && t.Bitrate == bitrate && t.Language == language)
                .SingleOrDefault();

            if (track != null)
            {
                var entry = track.Fragments.TrackFragmentRandomAccessEntries.FirstOrDefault(e => e.Time == timeOffset);

                if (entry != null)
                {
                    return await DownloadFragment(this.fileUri, (long)entry.MoofOffset, (long)entry.SampleSize);
                }
            }
            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\CFF\Progressive\ProgressiveCffFileParser.cs
private static async Task<WebRequestorResponse> DownloadFragment(Uri uri, long offset, long size)
        {
            return await WebRequestor.GetResponseAsync(uri, offset, offset + size - 1);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\CFF\Progressive\ProgressiveCffFileParser.cs
private async Task ReadMovieHeaderBoxes()
        {
            var moov = await this.GetBox(BoxType.Moov);
            this.Boxes.Add(moov);

            // See if we have an mdat next and grab it if we do
            var stream = await WebRequestor.GetStreamRangeAsync(this.fileUri, this.fileOffset, this.fileOffset + 8);
            using (var reader = new BoxBinaryReader(stream))
            {
                if (reader.PeekNextBoxType() == BoxType.Mdat)
                {
                    var mdat = await this.GetNextBox();
                    this.Boxes.Add(mdat);
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\CFF\Progressive\ProgressiveCffFileParser.cs
private async Task ReadMovieFragmentRandomAccess()
        {
#if !RANGESUFFIXSUPPORTED // not all backend services support range suffixes. For example, Azure Blobs. Here is a way around this but it requires an extra request to get the length and therefore does not perform as well.
            var fileSize = await WebRequestor.GetFileSizeAsync(this.fileUri);
#endif

            // grab the mfra offset
#if RANGESUFFIXSUPPORTED
            var offsetStream = await WebRequestor.GetStreamRangeAsync(this.fileUri, -4);
#else
            var offsetStream = await WebRequestor.GetStreamRangeNoSuffixAsync(this.fileUri, -4, fileSize);
#endif
            uint mfraOffset = 0;

            using (var reader = new BoxBinaryReader(offsetStream))
            {
                mfraOffset = reader.ReadUInt32();
            }

            // grab the mfra data
#if RANGESUFFIXSUPPORTED
            var mfraStream = await WebRequestor.GetStreamRangeAsync(this.fileUri, -mfraOffset);
#else
            var mfraStream = await WebRequestor.GetStreamRangeNoSuffixAsync(this.fileUri, -mfraOffset, fileSize);
#endif
            // Write the bytes to our TOC file
            using (var reader = new BoxBinaryReader(mfraStream))
            {
                reader.GotoPosition(0);

                Box box = null;

                do
                {
                    box = reader.ReadNextBox();
                    if (box != null)
                    {
                        this.Boxes.Add(box);
                    }
                } while (box != null);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\CFF\Progressive\ProgressiveCffFileParser.cs
private async Task<Box> GetNextBox()
        {
            var size = await this.GetBoxSize(this.fileOffset);
            var boxStream = await WebRequestor.GetStreamRangeAsync(this.fileUri, this.fileOffset, this.fileOffset + (long)size);
            Box box = null;

            using (var boxReader = new BoxBinaryReader(boxStream))
            {
                box = boxReader.ReadNextBox();
                this.fileOffset += (long)size;
            }

            return box;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\CFF\Progressive\ProgressiveCffFileParser.cs
private async Task<Box> GetBox(BoxType boxType)
        {
            // get the box size
            var size = await this.GetBoxSize(this.fileOffset);
            // gets the box
            var stream = await WebRequestor.GetStreamRangeAsync(this.fileUri, this.fileOffset, this.fileOffset + (long)size);
            Box box = null;

            using (var boxReader = new BoxBinaryReader(stream))
            {
                box = boxReader.ReadNextBox();
                this.fileOffset += (long)size;
            }

            if (box.Type == boxType)
            {
                return box;
            }
            else
            {
                return await this.GetBox(boxType);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\CFF\Progressive\ProgressiveCffFileParser.cs
private async Task<ulong> GetBoxSize(long position)
        {
            var stream = await WebRequestor.GetStreamRangeAsync(this.fileUri, position, position + 16);
            using (var reader = new BoxBinaryReader(stream))
            {
                var size = this.ReadBoxSize(reader);
                return size;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\Dash\DashDownloaderPlugin.cs
private async Task<WebRequestorResponse> DownloadChunkAsync(Uri source, CancellationToken c)
        {
            var response = await GetChunkAsync(source, c);
            c.ThrowIfCancellationRequested();
#if SILVERLIGHT
            if (response != null)
            {
                // SSME for Silverlight requires some additional changes to the chunk for DASH WAMS to work.
                response.Stream = HackFragment(response.Stream);
            }
#endif
            return response;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\Dash\DashDownloaderPlugin.cs
private async Task<WebRequestorResponse> GetChunkAsync(Uri source, CancellationToken c)
        {
            if (ChunkLookup.Any())
            {
                var key = source.AbsolutePath;

                if (ChunkLookup.ContainsKey(key))
                {
                    ChunkLocation chunkLocation = ChunkLookup[key];
                    if (ChunkRequested != null) ChunkRequested(this, new ChunkRequestedEventArgs(source, chunkLocation.Uri, string.Format("{0}-{1}", chunkLocation.From, chunkLocation.To)));
                    return await DownloadResolvedChunkAsync(source, chunkLocation, c);
                }
            }
            if (ChunkRequested != null) ChunkRequested(this, new ChunkRequestedEventArgs(source, source, null));
#if SILVERLIGHT // SILVERLIGHT requires that we download the chunk
            return await WebRequestor.GetResponseAsync(source);
#else
            return null;
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\Dash\DashDownloaderPlugin.cs
private static async Task<WebRequestorResponse> DownloadResolvedChunkAsync(Uri source, ChunkLocation chunkLocation, CancellationToken c)
        {
            // download the chunk and keep the stream open
            return await WebRequestor.GetResponseAsync(chunkLocation.Uri, (long)chunkLocation.From, (long)chunkLocation.To);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\Dash\DashDownloaderPlugin.cs
private async Task<WebRequestorResponse> DownloadManifestAsync(Uri source, CancellationToken c)
        {
            // download and convert the manifest
            var response = await WebRequestor.GetResponseAsync(source);
            c.ThrowIfCancellationRequested();
            // convert the DASH stream to Smooth Streaming format
            XDocument sourceXml = XDocument.Load(response.Stream);
            Stream destStream;
            switch (sourceXml.Root.Name.LocalName)
            {
                case "SmoothStreamingMedia":
                    destStream = response.Stream;
                    break;
                case "MPD":
                    response.Stream.Dispose(); // we don't need it anymore
                    var conversionResult = await DashManifestConverter.ConvertToSmoothManifest(sourceXml, source);
                    destStream = conversionResult.Manifest.ToStream();
                    ChunkLookup = conversionResult.ChunkLookup;
                    break;
                default:
                    throw new NotImplementedException();
            }

            if (ManifestRequested != null)
            {
                var destXml = new StreamReader(destStream).ReadToEnd();
                ManifestRequested(this, new ManifestRequestedEventArgs(source, sourceXml.ToString(), destXml));
            }

            destStream.Seek(0, SeekOrigin.Begin);
            response.Stream = destStream;
            return response;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\Dash\DashManifestConverter.cs
public static async Task<DashManifestConversionResult> ConvertToSmoothManifest(XDocument source, Uri rootUri)
        {
            var result = new DashManifestConversionResult();

            SmoothStreamingMedia manifest = new SmoothStreamingMedia();
            result.Manifest = manifest;

            var mpd = MPDFactory.LoadMPD(source.Root);

            // Get Duration
            if (mpd.MediaPresentationDuration.HasValue)
            {
                manifest.Duration = (ulong)mpd.MediaPresentationDuration.Value.Ticks;
            }
            manifest.IsLive = (mpd.Type == Presentation.Dynamic);
            //manifest.LookaheadCount = 2;
            if (mpd.AvailabilityEndTime.HasValue && mpd.AvailabilityStartTime.HasValue)
            {
                manifest.DVRWindowLength = (ulong)mpd.AvailabilityEndTime.Value.Subtract(mpd.AvailabilityStartTime.Value).Ticks;
            }

            foreach (var period in mpd.Period)
            {
                foreach (var adaptationSet in period.AdaptationSet)
                {
                    SmoothStreamingMediaStreamIndex streamIndex = null;
                    int representationIndex = 0;
                    foreach (var representation in adaptationSet.Representation)
                    {
                        string mediaUrl = null;
                        Uri initializationUri = null;
                        WebRequestor.Range initializationRange = null;
                        if (adaptationSet.SegmentTemplate != null)
                        {
                            var segmentTemplate = adaptationSet.SegmentTemplate;
                            var initializationTemplateUrl = segmentTemplate.InitializationValue;

                            initializationTemplateUrl = initializationTemplateUrl
                                .Replace("$$", "$")
                                .Replace("$RepresentationId$", representation.Id)
                                .Replace("$Number$", representationIndex.ToString())
                                .Replace("$Bandwidth$", representation.Bandwidth.ToString());
                            initializationUri = new Uri(rootUri, initializationTemplateUrl);
                            mediaUrl = segmentTemplate.Media
                                .Replace("$$", "$")
                                .Replace("$Bandwidth$", "{bitrate}")
                                .Replace("$Time$", "{start time}");
                        }
                        else if (representation.SegmentBase != null)
                        {
                            var baseUrl = representation.BaseURL.First().Value;
                            var segmentBase = representation.SegmentBase;
                            if (segmentBase.Initialization != null)
                            {
                                if (!string.IsNullOrEmpty(segmentBase.Initialization.SourceURL))
                                {
                                    initializationUri = new Uri(rootUri, segmentBase.Initialization.SourceURL);
                                }
                                initializationRange = WebRequestor.Range.FromString(segmentBase.Initialization.Range);
                            }
                            if (initializationUri == null)
                            {
                                initializationUri = new Uri(rootUri, baseUrl);
                            }
                        }
                        else throw new NotImplementedException();

                        var initializationBoxes = await GetBoxesAsync(initializationUri, initializationRange);

                        if (manifest.Protection == null) // support for CENC encryption
                        {
                            var moov = initializationBoxes.SingleOrDefault(b => b.Type == BoxType.Moov);
                            if (moov != null)
                            {
                                manifest.Protection = SmoothFactory.GetProtectionHeader(moov);
                            }
                        }

                        var trackStreamIndex = SmoothFactory.GenerateClientManifestStreamIndex(initializationBoxes);
                        var track = trackStreamIndex.QualityLevel.First();
                        if (streamIndex != null)
                        {
                            track.Index = (uint)streamIndex.QualityLevel.Count; // index is zero based so this is always equal to the current count
                            streamIndex.QualityLevel.Add(track);
                            streamIndex.MaxWidth = Math.Max(trackStreamIndex.MaxWidth, streamIndex.MaxWidth);
                            streamIndex.MaxHeight = Math.Max(trackStreamIndex.MaxHeight, streamIndex.MaxHeight);
                            streamIndex.DisplayWidth = streamIndex.MaxWidth;
                            streamIndex.DisplayHeight = streamIndex.MaxHeight;
                        }
                        else
                        {
                            streamIndex = trackStreamIndex;
                            if (mediaUrl != null) streamIndex.Url = mediaUrl;
                        }

                        track.Bitrate = representation.Bandwidth;

                        // create chunks
                        if (adaptationSet.SegmentTemplate != null)
                        {
                            if (adaptationSet.SegmentTemplate.SegmentTimeline != null)
                            {
                                if (!streamIndex.c.Any())
                                {
                                    streamIndex.c.AddRange(CreateChunks(adaptationSet.SegmentTemplate.SegmentTimeline));
                                    if (!manifest.IsLive) streamIndex.Chunks = (uint)streamIndex.c.Count;
                                }
                            }
                            else throw new NotImplementedException();
                        }
                        else if (representation.SegmentBase != null)
                        {
                            // TODO:/OPTIMIZE: request at the same time as initialization header
                            var segmentBase = representation.SegmentBase;
                            var indexRange = segmentBase.IndexRange.Split('-').Select(r => long.Parse(r)).ToArray();
                            var baseUrl = representation.BaseURL.First().Value;
                            var segmentIndexUri = new Uri(rootUri, baseUrl);
                            var segmentIndexRange = WebRequestor.Range.FromString(segmentBase.IndexRange);
                            var segmentIndexBoxes = await GetBoxesAsync(segmentIndexUri, segmentIndexRange);
                            var sidx = segmentIndexBoxes.OfType<SegmentIndexBox>().First();

                            // remove the track if the sidx durations don't match the chunk durations.
                            //if (streamIndex.c.Any() && sidx.Subsegments.First().Duration != streamIndex.c.First().d)
                            //{
                            //    streamIndex.QualityLevel.Remove(track);
                            //    break;
                            //}

                            track.Bitrate = CalculateBitrate(sidx);

                            if (!streamIndex.c.Any())
                            {
                                streamIndex.c.AddRange(CreateChunks(sidx));
                                if (!manifest.IsLive) streamIndex.Chunks = (uint)streamIndex.c.Count;
                            }
                            foreach (var kvp in GetChunkLookups(streamIndex, track, segmentIndexUri, sidx))
                            {
                                result.ChunkLookup.Add(kvp.Key, kvp.Value);
                            }
                        }
                        else throw new NotImplementedException();

                        representationIndex++;
                    }
                    
                    manifest.StreamIndex.Add(streamIndex);
                }
            }

            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\Dash\DashManifestConverter.cs
private static async Task<IList<Box>> GetBoxesAsync(Uri uri, WebRequestor.Range range)
        {
            using (var stream = await WebRequestor.GetStreamRangeAsync(uri, range))
            {
                using (var reader = new BoxBinaryReader(stream))
                {
                    return reader.GetAllBoxes();
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\CFF\CffDownloaderPlugin.SL.cs
public async Task<CacheResponse> RequestAsync(CacheRequest request)
        {
            try
            {
                if (request.CanonicalUri == manifestUri)
                {
                    var stream = await DownloadManifestAsync(request.CanonicalUri, cts.Token);
                    cts.Token.ThrowIfCancellationRequested();
                    return new CacheResponse(stream.Length, "text/xml", null, stream, HttpStatusCode.OK, "OK", DateTime.UtcNow);
                }
                else
                {
                    var response = await DownloadChunkAsync(request.CanonicalUri, cts.Token);
                    cts.Token.ThrowIfCancellationRequested();
                    return new CacheResponse(response.Stream.Length, response.ContentType, response.Headers, response.Stream, response.HttpStatusCode, response.HttpStatusCode.ToString(), DateTime.UtcNow);
                }
            }
            catch (WebRequestorFailure ex)
            {
                return new CacheResponse(0, null, ex.Headers, null, ex.HttpStatusCode, ex.HttpStatusCode.ToString(), DateTime.UtcNow);
            }
            catch
            {
                return new CacheResponse(0, null, null, null, HttpStatusCode.BadRequest, "BadRequest", DateTime.UtcNow);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\CFF\Progressive\CffProgressiveDownloaderPlugin.cs
public async Task<CacheResponse> RequestAsync(CacheRequest request)
        {
            return await downloaderPluginBase.RequestAsync(request);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\Dash\DashDownloaderPlugin.SL.cs
public async Task<CacheResponse> RequestAsync(CacheRequest request)
        {
            try
            {
                if (request.CanonicalUri == manifestUri)
                {
                    var response = await DownloadManifestAsync(request.CanonicalUri, cts.Token);
                    cts.Token.ThrowIfCancellationRequested();
                    return new CacheResponse(response.Stream.Length, "text/xml", response.Headers, response.Stream, response.HttpStatusCode, response.HttpStatusCode.ToString(), DateTime.UtcNow);
                }
                else
                {
                    var response = await DownloadChunkAsync(request.CanonicalUri, cts.Token);
                    cts.Token.ThrowIfCancellationRequested();
                    return new CacheResponse(response.Stream.Length, response.ContentType, response.Headers, response.Stream, response.HttpStatusCode, response.HttpStatusCode.ToString(), DateTime.UtcNow);
                }
            }
            catch (WebRequestorFailure ex)
            {
                return new CacheResponse(0, null, ex.Headers, null, ex.HttpStatusCode, ex.HttpStatusCode.ToString(), DateTime.UtcNow);
            }
            catch
            {
                return new CacheResponse(0, null, null, null, HttpStatusCode.BadRequest, "BadRequest", DateTime.UtcNow);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\Helpers\WebRequestExtensions.cs
public static async Task<HttpWebResponse> GetResponseAsync(this HttpWebRequest request)
        {
            var tcs = new TaskCompletionSource<HttpWebResponse>();

            request.BeginGetResponse(ar =>
            {
                try
                {
                    var response = (HttpWebResponse)request.EndGetResponse(ar);
                    tcs.SetResult(response);
                }
                catch (WebException ex)
                {
                    HttpWebResponse response = (HttpWebResponse)ex.Response;
                    tcs.SetException(new WebRequestorFailure(response.StatusCode, response.Headers));
                }
                catch (Exception ex)
                {
                    tcs.SetException(ex);
                }
            }, null);

            return await tcs.Task;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\Helpers\WebRequestor.cs
public static async Task<long> GetFileSizeAsync(Uri uri)
        {
            var request = (HttpWebRequest)WebRequestCreator.ClientHttp.Create(uri);
            request.Method = "HEAD";
            using (var response = await request.GetResponseAsync())
            {
                long contentLength;
                long.TryParse(response.Headers["Content-Length"], out contentLength);
                return contentLength;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\Helpers\WebRequestor.cs
public static async Task<Stream> GetStreamRangeAsync(Uri uri, Range range)
        {
            var request = (HttpWebRequest)WebRequestCreator.ClientHttp.Create(uri);
            request.Method = "GET";
            if (range != null)
            {
                if (range.From.HasValue)
                {
                    request.AddRange((long)range.From.Value, (long)range.To.Value);
                }
                else if (range.To.HasValue)
                {
                    request.AddRange((long)range.To.Value);
                }
            }
            using (var response = await request.GetResponseAsync())
            {
                return GetStream(response);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\Helpers\WebRequestor.cs
public static async Task<Stream> GetStreamRangeAsync(Uri uri, long from, long to)
        {
            var request = (HttpWebRequest)WebRequestCreator.ClientHttp.Create(uri);
            request.Method = "GET";
            request.AddRange(from, to);
            using (var response = await request.GetResponseAsync())
            {
                return GetStream(response);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\Helpers\WebRequestor.cs
public static async Task<Stream> GetStreamRangeNoSuffixAsync(Uri uri, long range, long fileSize)
        {
            var request = (HttpWebRequest)WebRequestCreator.ClientHttp.Create(uri);
            request.Method = "GET";
            if (range < 0)
            {
                request.AddRange(fileSize + range, fileSize);
            }
            else
            {
                request.AddRange(range);
            }
            using (var response = await request.GetResponseAsync())
            {
                return GetStream(response);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\Helpers\WebRequestor.cs
public static async Task<Stream> GetStreamRangeAsync(Uri uri, long range)
        {
            var request = (HttpWebRequest)WebRequestCreator.ClientHttp.Create(uri);
            request.Method = "GET";
            request.AddRange(range);
            using (var response = await request.GetResponseAsync())
            {
                return GetStream(response);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\Helpers\WebRequestor.cs
public static async Task<WebRequestorResponse> GetResponseAsync(Uri uri)
        {
            var request = (HttpWebRequest)WebRequestCreator.ClientHttp.Create(uri);
            request.Method = "GET";
            using (var response = await request.GetResponseAsync())
            {
                return GetWebRequestorResponse(response);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\Helpers\WebRequestor.cs
public static async Task<WebRequestorResponse> GetResponseAsync(Uri uri, long from, long to)
        {
            var request = (HttpWebRequest)WebRequestCreator.ClientHttp.Create(uri);
            request.Method = "GET";
            request.AddRange(from, to);
            using (var response = await request.GetResponseAsync())
            {
                return GetWebRequestorResponse(response);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL\..\Win8.xaml\controls\MediaPlayer.TemplateDefinitions.cs
private async void OnAfterApplyTemplate()
#else
        private void OnAfterApplyTemplate()
#endif
        {
#if SILVERLIGHT
            if (mediaElement != null) // The SSME needs to complete template loading before we should start setting properties
            {
                await mediaElement.TemplateAppliedTask;
            }
#endif
            while (OnApplyTemplateActions.Any())
            {
                var action = OnApplyTemplateActions.Dequeue();
                action();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\Compatibility\HttpClient.cs
public async Task<Stream> GetStreamAsync(Uri address)
        {
            var request = WebRequest.CreateHttp(address);
            if (UserAgent != null) request.UserAgent = UserAgent;
            request.AllowReadStreamBuffering = true;
            var response = await Task.Factory.FromAsync<WebResponse>(request.BeginGetResponse, request.EndGetResponse, null);
            return response.GetResponseStream();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\AdHandlerController.cs
public async Task PreloadAdAsync(IAdSource adSource, CancellationToken cancellationToken)
#else
        public IAsyncAction PreloadAdAsync(IAdSource adSource)
        {
            return AsyncInfo.Run(c => PreloadAdAsync(adSource, c));
        }

        internal async Task PreloadAdAsync(IAdSource adSource, CancellationToken cancellationToken)
#endif
        {
            var handler = AdPayloadHandlers.Where(h => h.SupportedTypes.Contains(adSource.Type)).FirstOrDefault();
            if (handler == null) throw new ArgumentException("No suitable handler was found to play this ad", "source");

            // resolve the source
            if (adSource is IResolveableAdSource)
            {
                var resolveableAdSource = adSource as IResolveableAdSource;
#if SILVERLIGHT
                await resolveableAdSource.LoadPayload(cancellationToken);
#else
                await (resolveableAdSource.LoadPayload().AsTask(cancellationToken));
#endif
                cancellationToken.ThrowIfCancellationRequested();
            }
#if SILVERLIGHT
            await handler.PreloadAdAsync(adSource, cancellationToken);
#else
            await handler.PreloadAdAsync(adSource).AsTask(cancellationToken);
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\AdHandlerController.cs
public async Task PlayAdAsync(IAdSource adSource, CancellationToken cancellationToken, IProgress<AdStatus> progress)
#else
        public IAsyncActionWithProgress<AdStatus> PlayAdAsync(IAdSource adSource)
        {
            return AsyncInfo.Run<AdStatus>((c, p) => PlayAdAsync(adSource, c, p));
        }

        internal async Task PlayAdAsync(IAdSource adSource, CancellationToken cancellationToken, IProgress<AdStatus> progress)
#endif
        {
            try
            {
                if (ActiveHandler != null)
                {
                    if (!await ActiveHandler.CancelAd(false))
                    {
                        throw new Exception("Ad in progress and cannot be canceled.");
                    }
                }

                DateTime startTime = DateTime.Now;

                using (var timeoutTokenSource = new CancellationTokenSource())
                {
                    if (StartTimeout.HasValue)
                    {
                        timeoutTokenSource.CancelAfter(StartTimeout.Value);
                    }
                    var timeoutToken = timeoutTokenSource.Token;
                    using (var cancellationTokenSource = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, timeoutToken))
                    {
                        IsAdvertising = true;
                        var adContext = activeAdContext = new object();

                        progress.Report(AdStatus.Loading);

                        try
                        {
                            ActiveHandler = AdPayloadHandlers.Where(h => h.SupportedTypes.Contains(adSource.Type)).FirstOrDefault();
                            if (ActiveHandler == null) throw new ArgumentException("No suitable handler was found to play this ad", "source");

                            // resolve the source
                            if (adSource is IResolveableAdSource)
                            {
                                var resolveableAdSource = adSource as IResolveableAdSource;
                                try
                                {
#if SILVERLIGHT
                                    await resolveableAdSource.LoadPayload(cancellationTokenSource.Token);
#else
                                    await resolveableAdSource.LoadPayload().AsTask(cancellationTokenSource.Token);
#endif
                                }
                                catch (OperationCanceledException)
                                {
                                    if (timeoutToken.IsCancellationRequested) throw new TimeoutException(); else throw;
                                }
                            }

                            TimeSpan? timeRemaining = null;
                            if (StartTimeout.HasValue)
                            {
                                var timeElapsed = DateTime.Now.Subtract(startTime);
                                timeRemaining = StartTimeout.Value.Subtract(timeElapsed);
                            }

                            //var handlerProgress = new Progress<AdStatus>();
                            //handlerProgress.ProgressChanged += (s, e) => Progress_Handle(adContext, progress, e);
                            var handlerProgress = new Progress<AdStatus>(s => Progress_Handle(adContext, progress, s));
#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
                            await ActiveHandler.PlayAdAsync(adSource, timeRemaining, cancellationToken, handlerProgress);
                            await TaskEx.Yield(); // let evertyhing complete before finishing
#elif WINDOWS_PHONE
                            await ActiveHandler.PlayAdAsync(adSource, timeRemaining, cancellationToken, handlerProgress);
                            await Task.Yield(); // let evertyhing complete before finishing
#else
                            await ActiveHandler.PlayAdAsync(adSource, timeRemaining).AsTask(cancellationToken, handlerProgress);
                            await Task.Yield(); // let evertyhing complete before finishing
#endif
                            // leave the progress handler alone, it reports on secondary task which could still be running.
                        }
                        catch
                        {
                            TeardownAd();
                            progress.Report(AdStatus.Unloaded);
                            throw;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                if (AdFailure != null) AdFailure(this, new AdFailureEventArgs(adSource, ex));
                throw;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\AdHandlerController.cs
public async Task CancelActiveAds()
#else
        public IAsyncAction CancelActiveAds()
        {
            return CancelActiveAdsInternal().AsAsyncAction();
        }

        internal async Task CancelActiveAdsInternal()
#endif
        {
            // cancel any active ads
            foreach (var handler in AdPayloadHandlers)
            {
                await handler.CancelAd(true);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\AdTracking.cs
public async void FireTrackingUri(Uri trackingUri)
        {
            if (trackingUri != null)
            {
                try
                {
#if DEBUG
                    System.Diagnostics.Debug.WriteLine(trackingUri);
#endif
                    await Extensions.PingAsync(trackingUri);
                }
                catch (Exception ex)
                {
                    if (TrackingFailed != null) TrackingFailed(this, new TrackingFailureEventArgs(trackingUri.OriginalString, ex));
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\clips\ClipAdPayloadHandler.cs
public async Task PreloadAdAsync(IAdSource adSource, CancellationToken cancellationToken)
#else
        public IAsyncAction PreloadAdAsync(IAdSource adSource)
        {
            return AsyncInfo.Run(c => PreloadAdAsync(adSource, c));
        }

        internal async Task PreloadAdAsync(IAdSource adSource, CancellationToken cancellationToken)
#endif
        {
            ProcessPayload(adSource);
            await adHandlerBase.PreloadAdAsync(adSource, cancellationToken);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\clips\ClipAdPayloadHandler.cs
public async Task PlayAdAsync(IAdSource adSource, TimeSpan? startTimeout, CancellationToken cancellationToken, IProgress<AdStatus> progress)
#else
        public IAsyncActionWithProgress<AdStatus> PlayAdAsync(IAdSource adSource, TimeSpan? startTimeout)
        {
            return AsyncInfo.Run<AdStatus>((c, p) => PlayAdAsync(adSource, startTimeout, c, p));
        }

        internal async Task PlayAdAsync(IAdSource adSource, TimeSpan? startTimeout, CancellationToken cancellationToken, IProgress<AdStatus> progress)
#endif
        {
            ProcessPayload(adSource);
            if (!cancellationToken.IsCancellationRequested)
            {
                await adHandlerBase.PlayAdAsync(adSource, startTimeout, cancellationToken, progress);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\DocumentAdPayloadHandler.cs
public async Task<bool> CancelAd(bool force)
#else
        public IAsyncOperation<bool> CancelAd(bool force)
        {
            return AsyncInfo.Run(c => CancelActiveAd(force));
        }

        internal async Task<bool> CancelActiveAd(bool force)
#endif
        {
            // if there is a linear ad playing, return false.
            if (activeAd != null && !force && activeAd.Player.AdLinear) return false;
            if (activeOperation != null)
            {
                var cancelingOperation = activeOperation;
                try
                {
                    // there are active ads still. Force them to close.
                    await cancelingOperation.CancelAsync();
                }
                catch { /* ignore */ }
            }
            if (loadOperation != null && force)
            {
                try
                {
                    // there are preloads happening, force them to stop.
                    await loadOperation.CancelAsync();
                }
                catch { /* ignore */ }
                finally
                {
                    loadOperation = null;
                }
            }
            return true;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\DocumentAdPayloadHandler.cs
public async Task PlayAdAsync(IAdSource adSource, TimeSpan? startTimeout, CancellationToken cancellationToken, IProgress<AdStatus> progress)
#else
        public IAsyncActionWithProgress<AdStatus> PlayAdAsync(IAdSource adSource, TimeSpan? startTimeout)
        {
            return AsyncInfo.Run<AdStatus>((c, p) => PlayAdAsync(adSource, startTimeout, c, p));
        }

        internal async Task PlayAdAsync(IAdSource adSource, TimeSpan? startTimeout, CancellationToken cancellationToken, IProgress<AdStatus> progress)
#endif
        {
            if (!(adSource.Payload is AdDocumentPayload)) throw new ArgumentException("adSource must contain a payload of type AdDocumentPayload", "adPayload");
            var adDoc = (AdDocumentPayload)adSource.Payload;

            // create a new token that we can cancel independently
            var masterCancellationToken = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken);
            var playTasks = PlayAdAsync(adDoc, adSource, startTimeout, masterCancellationToken.Token, progress);
            try
            {
                activeOperation = new ActiveOperation(playTasks.Secondary, masterCancellationToken);
                await playTasks.Primary;
            }
            catch (PlayException)
            {
                activeOperation = null;
                throw;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\DocumentAdPayloadHandler.cs
async Task StartAdUnitAsync(ActiveAdUnit adUnit, Ad ad, CancellationToken cancellationToken)
        {
            // start the ad
            await VpaidController.StartAdAsync(adUnit, cancellationToken);

            // fire the impression beacon
            foreach (var url in ad.Impressions)
            {
                VpaidController.TrackUrl(url, adUnit.CreativeSource);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\DocumentAdPayloadHandler.cs
async Task<Task> PlayAdUnitAsync(ActiveAdUnit adUnit, CancellationToken cancellationToken)
        {
#if WINDOWS_PHONE7
            // WP doesn't support 3 MediaElements all with a source loaded. Instead of preloading, just wait until we finish the ad.
            await VpaidController.FinishAdAsync(activeAd, cancellationToken);
            var finished = true;
#else
            var finished = await VpaidController.PlayAdAsync(adUnit, cancellationToken);
#endif
            if (!finished)
            {
                // if approaching end has happened, retain a new task that will run to completion
                return TaskHelpers.Create<Task>(async () =>
                {
                    await VpaidController.FinishAdAsync(adUnit, cancellationToken);
                    CleanupAd(adUnit);
                });
            }
            else
            {
                CleanupAd(adUnit);
                return null;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\DocumentAdPayloadHandler.cs
public async Task PreloadAdAsync(IAdSource adSource, CancellationToken cancellationToken)
#else
        public IAsyncAction PreloadAdAsync(IAdSource adSource)
        {
            return AsyncInfo.Run(c => PreloadAdAsync(adSource, c));
        }

        internal async Task PreloadAdAsync(IAdSource adSource, CancellationToken cancellationToken)
#endif
        {
            if (!(adSource.Payload is AdDocumentPayload)) throw new ArgumentException("adSource must contain a payload of type AdDocumentPayload", "adPayload");
            var adDoc = (AdDocumentPayload)adSource.Payload;

            if (loadOperation != null && loadOperation.Task.IsRunning())
            {
                return;
            }

            await PreloadAdAsync(adDoc, adSource, cancellationToken);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\DocumentAdPayloadHandler.cs
async Task<ActiveAdUnit> GetInitializationTask(ActiveAdUnit adUnit, CancellationToken cancellationToken)
        {
            try
            {
                await VpaidController.InitAdAsync(adUnit, cancellationToken);
                cancellationToken.ThrowIfCancellationRequested();
            }
            catch
            {
                OnUnloadPlayer(adUnit.Player);
                throw;
            }
            return adUnit;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\DocumentAdPayloadHandler.cs
public async Task CancelAsync()
            {
                if (Task.IsRunning())
                {
                    if (!cts.IsCancellationRequested)
                    {
                        cts.Cancel();
                    }
                    try
                    {
                        await Task;
                    }
                    catch { /* ignore */ }
                }
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\Freewheel\FreewheelFactory.cs
public static async Task<FWAdResponse> LoadSource(Uri source, CancellationToken cancellationToken)
#else
        public static IAsyncOperation<FWAdResponse> LoadSource(Uri source)
        {
            return AsyncInfo.Run(c => InternalLoadSource(source, c));
        }

        static async Task<FWAdResponse> InternalLoadSource(Uri source, CancellationToken cancellationToken)
#endif
        {
            using (var stream = await Extensions.LoadStreamAsync(source))
            {
#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
                return await TaskEx.Run(() => CreateFromSmartXml(stream), cancellationToken);
#else
                return await Task.Run(() => CreateFromSmartXml(stream), cancellationToken);
#endif
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\Freewheel\FreewheelFactory.cs
public static async Task<AdDocumentPayload> GetAdDocumentPayload(FWTemporalAdSlot adSlot, FWAdResponse adResponse, CancellationToken c)
#endif
        {
            var payload = new AdDocumentPayload();
            var adPod = new AdPod();
            payload.AdPods.Add(adPod);
            foreach (var adReference in adSlot.SelectedAds)
            {
                var ad = await CreateAd(adResponse, adReference);
                adPod.Ads.Add(ad);

                foreach (var fallbackAdReference in adReference.FallbackAds)
                {
                    var fallbackAd = await CreateAd(adResponse, fallbackAdReference);
                    ad.FallbackAds.Add(fallbackAd);
                }
            }
            return payload;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\Freewheel\FreewheelFactory.cs
private static async Task<Ad> CreateAd(FWAdResponse adResponse, FWAdReference adReference)
        {
            var ad = adResponse.Ads.FirstOrDefault(a => a.Id == adReference.AdId);
            if (ad != null)
            {
                var linearCreative = await CreateLinearAd(ad, adReference);

                foreach (var companionAdReference in adReference.CompanionAds)
                {
                    var companionAd = adResponse.Ads.FirstOrDefault(a => a.Id == companionAdReference.AdId);
                    var companionCreative = CreateCompanionAds(companionAd, companionAdReference);
                    companionCreative.Sequence = 1;
                    linearCreative.Creatives.Add(companionCreative);
                }

                return linearCreative;
            }
            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\Freewheel\FreewheelFactory.cs
static async Task<Ad> CreateLinearAd(FWAd source, FWAdReference reference)
        {
            var ad = new Ad();

            var allCallbacks = reference.EventCallbacks;
            foreach (var url in allCallbacks.Where(ec => ec.Type == FWCallbackType.Impression && ec.Name == FWEventCallback.DefaultImpression).SelectMany(ec => ec.GetUrls()))
            {
                ad.Impressions.Add(url);
            }

            int index = 0;
            IEnumerable<FWCreative> creatives = source.Creatives;
            if (reference.CreativeId != null)
            {
                creatives = creatives.Where(c => c.Id == reference.CreativeId);
            }
            foreach (var creative in creatives)
            {
                index++;
                var wrappedAds = new List<Ad>();
                var linear = new CreativeLinear();
                linear.Duration = creative.Duration;
                linear.Sequence = index;

                IEnumerable<FWCreativeRendition> creativeRenditions = creative.CreativeRenditions;
                if (reference.CreativeRenditionId != null)
                {
                    creativeRenditions = creativeRenditions.Where(cr => cr.Id == reference.CreativeRenditionId).DefaultIfEmpty(creativeRenditions);
                    if (reference.ReplicaId != null)
                    {
                        creativeRenditions = creativeRenditions.Where(cr => cr.AdReplicaId == reference.ReplicaId).DefaultIfEmpty(creativeRenditions);
                    }
                }

                foreach (var rendition in creativeRenditions)
                {
                    if (!string.IsNullOrEmpty(rendition.WrapperType))
                    {
                        switch (rendition.WrapperType.ToLowerInvariant())
                        {
                            case "external/vast-2":
                                try
                                {
                                    var vastAdUri = new Uri(rendition.WrapperUrl);
                                    // load the stream from the web
                                    using (var s = await Extensions.LoadStreamAsync(vastAdUri))
                                    {
                                        var wrappedVastDoc = await AdModelFactory.CreateFromVast(s, null, true);
                                        if (wrappedVastDoc != null)
                                        {
                                            // use the first ad
                                            var wrappedAd = wrappedVastDoc.AdPods.SelectMany(pod => pod.Ads).FirstOrDefault();
                                            if (wrappedAd != null)
                                            {
                                                wrappedAds.Add(wrappedAd);
                                            }
                                        }
                                    }
                                }
                                catch { /* swallow */ }
                                break;
                        }
                    }
                    else
                    {
                        // TODO: FreeWheel assets can contain Content instead of Url. This could be supported someday; for now it is ignored.
                        if (rendition.Asset != null)
                        {
                            var mediaFile = CreateMediaFile(creative, rendition, rendition.Asset);
                            if (mediaFile != null)
                            {
                                mediaFile.Ranking = (int)rendition.Preference + 1; // add one to indicate this is preferred over "OtherAssets"
                                linear.MediaFiles.Add(mediaFile);
                            }
                        }

                        foreach (var asset in rendition.OtherAssets)
                        {
                            var mediaFile = CreateMediaFile(creative, rendition, asset);
                            if (mediaFile != null)
                            {
                                mediaFile.Ranking = (int)rendition.Preference;
                                linear.MediaFiles.Add(mediaFile);
                            }
                        }
                    }
                }

                // generate callback urls from one base url
                foreach (var eventCallback in allCallbacks.Where(ec => ec.Type == FWCallbackType.Impression))
                {
                    foreach (var url in eventCallback.GetUrls())
                    {
                        switch (eventCallback.Name.ToLower())
                        {
                            case "start":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Start, Value = url });
                                break;
                            case "firstquartile":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.FirstQuartile, Value = url });
                                break;
                            case "midpoint":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Midpoint, Value = url });
                                break;
                            case "thirdquartile":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.ThirdQuartile, Value = url });
                                break;
                            case "complete":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Complete, Value = url });
                                break;
                        }
                    }
                }

                // generate callback urls from one base url
                foreach (var eventCallback in allCallbacks.Where(ec => ec.Type == FWCallbackType.Standard))
                {
                    foreach (var url in eventCallback.GetUrls())
                    {
                        switch (eventCallback.Name.Replace("-", "").ToLower())
                        {
                            case "_creativeview":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.CreativeView, Value = url });
                                break;
                            case "_mute":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Mute, Value = url });
                                break;
                            case "_unmute":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Unmute, Value = url });
                                break;
                            case "_pause":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Pause, Value = url });
                                break;
                            case "_rewind":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Rewind, Value = url });
                                break;
                            case "_resume":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Resume, Value = url });
                                break;
                            case "_fullscreen":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Fullscreen, Value = url });
                                break;
                            case "_exitfullscreen":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.ExitFullscreen, Value = url });
                                break;
                            case "_expand":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Expand, Value = url });
                                break;
                            case "_collapse":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Collapse, Value = url });
                                break;
                            case "_acceptinvitation":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.AcceptInvitation, Value = url });
                                break;
                            case "_close":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Close, Value = url });
                                break;
                            case "_skip":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Skip, Value = url });
                                break;
                            case "_progress":
                                linear.TrackingEvents.Add(new TrackingEvent() { Type = TrackingType.Progress, Value = url });
                                break;
                        }
                    }
                }

                foreach (var url in allCallbacks.Where(ec => ec.Type == FWCallbackType.Click && !ec.ShowBrowser).SelectMany(ec => ec.GetUrls()))
                {
                    linear.ClickTracking.Add(url);
                }

                var clickUrl = allCallbacks.Where(ec => ec.Type == FWCallbackType.Click && ec.ShowBrowser).SelectMany(ec => ec.GetUrls()).FirstOrDefault();
                if (clickUrl != null)
                {
                    linear.ClickThrough = new Uri(clickUrl);
                }

                // generate callback urls from one base url ONLY when the callback does not already exist
                foreach (var eventCallback in allCallbacks.Where(ec => ec.Type == FWCallbackType.Generic))
                {
                    foreach (var url in eventCallback.GetUrls())
                    {
                        var baseUrl = url + string.Format("&metr={0}", FreeWheelFactory.GetSupportedMetrics());

                        // quartile events
                        var quartileUrl = baseUrl + "&ct=[LASTQUARTILE]&et=i"; // [LASTQUARTILE] will get replaced by the VPAID controller
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.FirstQuartile, Value = quartileUrl + "&cn=firstQuartile" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Midpoint, Value = quartileUrl + "&cn=midPoint" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.ThirdQuartile, Value = quartileUrl + "&cn=thirdQuartile" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Complete, Value = quartileUrl + "&cn=complete" });

                        // advanced metrics
                        var advancedUrl = baseUrl + "&et=s";
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Mute, Value = advancedUrl + "&cn=_mute" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Unmute, Value = advancedUrl + "&cn=_un-mute" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Collapse, Value = advancedUrl + "&cn=_collapse" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Expand, Value = advancedUrl + "&cn=_expand" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Pause, Value = advancedUrl + "&cn=_pause" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Resume, Value = advancedUrl + "&cn=_resume" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Rewind, Value = advancedUrl + "&cn=_rewind" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.AcceptInvitation, Value = advancedUrl + "&cn=_accept-invitation" });
                        AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Close, Value = advancedUrl + "&cn=_close" });
                        //AddSecondaryCallback(linear.TrackingEvents, new TrackingEvent() { Type = TrackingType.Minimize, Value = advancedUrl + "&cn=_minimize" });
                    }
                }

                ad.Creatives.Add(linear);

                foreach (var wrappedAd in wrappedAds)
                {
                    AdModelFactory.MergeWrappedAdBeacons(wrappedAd, ad);
                    var wrappedCreative = AdModelFactory.FindMatchingCreative(linear, wrappedAd);
                    AdModelFactory.MergeWrappedCreative(wrappedCreative, linear);
                }
            }

            return ad;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\helpers\Extensions.cs
internal static async Task<Stream> LoadStreamAsync(Uri source)
        {
#if NETFX_CORE || (WINDOWS_PHONE && !WINDOWS_PHONE7)
            switch (source.Scheme.ToLowerInvariant())
            {
                case "ms-appx":
                case "ms-appdata":
                    var file = await Windows.Storage.StorageFile.GetFileFromApplicationUriAsync(source);
                    return await file.OpenStreamForReadAsync();
                default:
                    return await DownloadStreamAsync(source);
            }
#else
            return await DownloadStreamAsync(source);
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\helpers\Extensions.cs
internal static async Task PingAsync(Uri source)
        {
#if SILVERLIGHT
            using (var client = new HttpClient())
            {
                client.UserAgent = DefaultUserAgent;
                await client.GetStreamAsync(source);
            }
#else
            using (var client = new HttpClient())
            {
                using (HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, source))
                {
                    if (DefaultUserAgent != null)
                    {
                        request.Headers.UserAgent.ParseAdd(DefaultUserAgent);
                    }
                    using (var response = await client.SendAsync(request))
                    {
                        response.EnsureSuccessStatusCode();
                    }
                }
            }
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\helpers\Extensions.cs
internal static async Task<Stream> DownloadStreamAsync(Uri source)
        {
#if SILVERLIGHT
            using (var client = new HttpClient())
            {
                client.UserAgent = DefaultUserAgent;
                return await client.GetStreamAsync(source);
            }
#else
            using (var client = new HttpClient())
            {
                using (HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, source))
                {
                    if (DefaultUserAgent != null)
                    {
                        request.Headers.UserAgent.ParseAdd(DefaultUserAgent);
                    }
                    using (var response = await client.SendAsync(request))
                    {
                        response.EnsureSuccessStatusCode();
                        using (var stream = await response.Content.ReadAsStreamAsync())
                        {
                            var result = new MemoryStream();
                            await stream.CopyToAsync(result);
                            result.Seek(0, SeekOrigin.Begin);
                            return result;
                        }
                    }
                }
            }
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\helpers\VpaidExtensions.cs
public static async Task InitAdAsync(this IVpaid vpaid, double width, double height, string viewMode, int desiredBitrate, string creativeData, string environmentVariables, CancellationToken cancellationToken)
#else
        internal static async Task InitAdAsync(this IVpaid vpaid, double width, double height, string viewMode, int desiredBitrate, string creativeData, string environmentVariables, CancellationToken cancellationToken)
#endif
        {
            var errorTask = vpaid.GetErrorTask(cancellationToken);
            var loadedTask = vpaid.GetLoadedTask(cancellationToken);
            var cancellationTask = cancellationToken.AsTask();

            vpaid.InitAd(width, height, viewMode, desiredBitrate, creativeData, environmentVariables);

#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
            var completedTask = await TaskEx.WhenAny(loadedTask, errorTask, cancellationTask);
#else
            var completedTask = await Task.WhenAny(loadedTask, errorTask, cancellationTask);
#endif
            if (completedTask == errorTask)
            {
                throw errorTask.Result;
            }
            else if (completedTask == cancellationTask)
            {
                vpaid.StopAd();
            }
            cancellationToken.ThrowIfCancellationRequested();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\helpers\VpaidExtensions.cs
public static async Task StartAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
#else
        internal static async Task StartAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
#endif
        {
            var errorTask = vpaid.GetErrorTask(cancellationToken);
            var startedTask = vpaid.GetStartedTask(cancellationToken);
            var cancellationTask = cancellationToken.AsTask();

            vpaid.StartAd();

#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
            var completedTask = await TaskEx.WhenAny(startedTask, errorTask, cancellationTask);
#else
            var completedTask = await Task.WhenAny(startedTask, errorTask, cancellationTask);
#endif
            if (completedTask == errorTask)
            {
                throw errorTask.Result;
            }
            else if (completedTask == cancellationTask)
            {
                vpaid.StopAd();
            }
            cancellationToken.ThrowIfCancellationRequested();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\helpers\VpaidExtensions.cs
public static async Task<bool> PlayAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
#else
        internal static async Task<bool> PlayAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
#endif
        {
            var errorTask = vpaid.GetErrorTask(cancellationToken);
            var stoppedTask = vpaid.GetStoppedTask(cancellationToken);
            var approachingEndTask = vpaid.GetApproachingEndTask(cancellationToken);
            var cancellationTask = cancellationToken.AsTask();

#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
            var completedTask = await TaskEx.WhenAny(stoppedTask, approachingEndTask, errorTask, cancellationTask);
#else
            var completedTask = await Task.WhenAny(stoppedTask, approachingEndTask, errorTask, cancellationTask);
#endif
            bool result = true;
            if (completedTask == errorTask)
            {
                throw errorTask.Result;
            }
            else if (completedTask == cancellationTask)
            {
                vpaid.StopAd();
            }
            else if (completedTask == approachingEndTask)
            {
                result = false;
            }
            cancellationToken.ThrowIfCancellationRequested();
            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\helpers\VpaidExtensions.cs
public static async Task FinishAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
#else
        internal static async Task FinishAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
#endif
        {
            var errorTask = vpaid.GetErrorTask(cancellationToken);
            var stoppedTask = vpaid.GetStoppedTask(cancellationToken);
            var cancellationTask = cancellationToken.AsTask();

#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
            var completedTask = await TaskEx.WhenAny(stoppedTask, errorTask, cancellationTask);
#else
            var completedTask = await Task.WhenAny(stoppedTask, errorTask, cancellationTask);
#endif
            if (completedTask == errorTask)
            {
                throw errorTask.Result;
            }
            else if (completedTask == cancellationTask)
            {
                vpaid.StopAd();
            }
            cancellationToken.ThrowIfCancellationRequested();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\helpers\VpaidExtensions.cs
public static async Task StopAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
#else
        internal static async Task StopAdAsync(this IVpaid vpaid, CancellationToken cancellationToken)
#endif
        {
            var errorTask = vpaid.GetErrorTask(cancellationToken);
            var stoppedTask = vpaid.GetStoppedTask(cancellationToken);
            var cancellationTask = cancellationToken.AsTask();

            vpaid.StopAd();
#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
            var completedTask = await TaskEx.WhenAny(stoppedTask, errorTask, cancellationTask);
#else
            var completedTask = await Task.WhenAny(stoppedTask, errorTask, cancellationTask);
#endif
            if (completedTask == errorTask)
            {
                throw errorTask.Result;
            }
            cancellationToken.ThrowIfCancellationRequested();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\mast\Mainsail.cs
public async Task LoadSource(Uri source, CancellationToken cancellationToken)
#else
        public IAsyncAction LoadSource(Uri source)
        {
            return AsyncInfo.Run(c => InternalLoadSource(source, c));
        }

        internal async Task InternalLoadSource(Uri source, CancellationToken cancellationToken)
#endif
        {
            using (var stream = await Extensions.LoadStreamAsync(source))
            {
#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
                await TaskEx.Run(() => AddMastDoc(stream), cancellationToken);
#elif WINDOWS_PHONE
                await Task.Run(() => AddMastDoc(stream), cancellationToken);
#else
                await Task.Run(() => AddMastDoc(stream.AsInputStream()), cancellationToken);
#endif
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\vast\AdModelFactory.cs
public static async Task<AdDocumentPayload> LoadSource(Uri source, int? maxRedirectDepth, bool allowMultipleAds, CancellationToken cancellationToken)
#else
        public static IAsyncOperation<AdDocumentPayload> LoadSource(Uri source, int? maxRedirectDepth, bool allowMultipleAds)
        {
            return AsyncInfo.Run(c => InternalLoadSource(source, maxRedirectDepth, allowMultipleAds, c));
        }

        static async Task<AdDocumentPayload> InternalLoadSource(Uri source, int? maxRedirectDepth, bool allowMultipleAds, CancellationToken cancellationToken)
#endif
        {
            using (var stream = await Extensions.LoadStreamAsync(source))
            {
#if SILVERLIGHT
                return await CreateFromVast(stream, maxRedirectDepth, allowMultipleAds);
#else
                return await Task.Run(() => CreateFromVast(stream, maxRedirectDepth, allowMultipleAds), cancellationToken);
#endif
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\vast\AdModelFactory.cs
public static async Task<AdDocumentPayload> CreateFromVast(Stream stream, int? maxRedirectDepth, bool allowMultipleAds)
#else
        public static IAsyncOperation<AdDocumentPayload> CreateFromVast(IInputStream stream, int? maxRedirectDepth, bool allowMultipleAds)
        {
            return AsyncInfo.Run(c => CreateFromVast(stream.AsStreamForRead(), maxRedirectDepth, allowMultipleAds));
        }

        internal static async Task<AdDocumentPayload> CreateFromVast(Stream stream, int? maxRedirectDepth, bool allowMultipleAds)
#endif
        {
            XDocument xDoc = XDocument.Load(stream);
            XElement vastRoot = xDoc.Element("VAST");
            if (vastRoot == null)
            {
                vastRoot = xDoc.Element("VideoAdServingTemplate");
                if (vastRoot == null) throw new NotImplementedException();
                return await CreateFromVast1(vastRoot, maxRedirectDepth, allowMultipleAds);
            }
            else
            {
                var result = new AdDocumentPayload();
                result.Version = (string)vastRoot.Attribute("version");
                result.Error = (string)vastRoot.Element("Error");

                var eligableAds = vastRoot.Elements("Ad");
                if (!allowMultipleAds)
                {
                    eligableAds = eligableAds.Where(va => string.IsNullOrEmpty((string)va.Attribute("sequence")));
                }
                foreach (var vastAdPod in eligableAds.GroupBy(va => va.Attribute("sequence") != null ? 1 : int.MaxValue).OrderBy(vap => vap.Key))
                {
                    var adPod = new AdPod();
                    foreach (var vastAd in vastAdPod.OrderBy(va => ToNullableInt((string)va.Attribute("sequence")).GetValueOrDefault(0)))
                    {
                        var ad = new Ad();
                        ad.Id = (string)vastAd.Attribute("id");

                        if (vastAd.Elements("InLine").Any())
                        {
                            var vastAdInline = vastAd.Element("InLine");

                            ad.AdSystem = GetAdSystem(vastAdInline.Element("AdSystem"));

                            ad.Advertiser = (string)vastAdInline.Element("Advertiser");
                            ad.Description = (string)vastAdInline.Element("Description");
                            var error = (string)vastAdInline.Element("Error");
                            if (error != null) ad.Errors.Add(error);
                            ad.Title = (string)vastAdInline.Element("AdTitle");
                            ad.Survey = GetUriValue(vastAdInline.Element("Survey"));

                            ad.Pricing = new Pricing();
                            var pricing = vastAdInline.Element("Pricing");
                            if (pricing != null)
                            {
                                ad.Pricing.Currency = (string)pricing.Attribute("currency");
                                ad.Pricing.Model = (PricingModel)Enum.Parse(typeof(PricingModel), (string)pricing.Attribute("model"), true);
                                ad.Pricing.Value = Convert.ToDouble((string)pricing);
                            }

                            foreach (var vastImpression in vastAdInline.Elements("Impression"))
                            {
                                ad.Impressions.Add((string)vastImpression);
                            }

                            if (vastAdInline.Elements("Extensions").Any())
                            {
                                foreach (var vastExtension in vastAdInline.Element("Extensions").Elements("Extension"))
                                {
                                    ad.Extensions.Add(new Extension()); // TODO
                                }
                            }

                            LoadCreatives(vastAdInline, ad);

                            adPod.Ads.Add(ad);
                        }
                        else if (vastAd.Elements("Wrapper").Any())
                        {
                            Ad wrapper = new Ad();
                            var vastAdWrapper = vastAd.Element("Wrapper");

                            // parse the wrapper itself
                            wrapper.AdSystem = GetAdSystem(vastAdWrapper.Element("AdSystem"));
                            var error = (string)vastAdWrapper.Element("Error");
                            if (error != null) wrapper.Errors.Add(error);

                            foreach (var vastImpression in vastAdWrapper.Elements("Impression"))
                            {
                                wrapper.Impressions.Add((string)vastImpression);
                            }

                            LoadCreatives(vastAdWrapper, wrapper);

                            if (vastAdWrapper.Elements("Extensions").Any())
                            {
                                foreach (var vastExtension in vastAdWrapper.Element("Extensions").Elements("Extension"))
                                {
                                    ad.Extensions.Add(new Extension()); // TODO
                                }
                            }

                            AdDocumentPayload wrappedVastDoc = null;
                            var vastAdUri = GetUriValue(vastAdWrapper.Element("VASTAdTagURI"));
                            if (vastAdUri != null && (!maxRedirectDepth.HasValue || maxRedirectDepth.Value > 0))
                            {
                                try
                                {
                                    // load the stream from the web
                                    using (var s = await Extensions.LoadStreamAsync(vastAdUri))
                                    {
                                        var newAllowMultipleAds = vastAdWrapper.GetBoolAttribute("allowMultipleAds", allowMultipleAds);
                                        var followAdditionalWrappers = vastAdWrapper.GetBoolAttribute("followAdditionalWrappers", true);
                                        int? nextMaxRedirectDepth = followAdditionalWrappers ? (maxRedirectDepth.HasValue ? maxRedirectDepth.Value - 1 : maxRedirectDepth) : 0;
                                        wrappedVastDoc = await CreateFromVast(s, nextMaxRedirectDepth, newAllowMultipleAds);
                                    }
                                }
                                catch { /* swallow */ }
                            }

                            AdPod wrappedAdPod = null;
                            if (wrappedVastDoc != null)
                            {
                                wrappedAdPod = wrappedVastDoc.AdPods.FirstOrDefault();
                            }

                            if (wrappedAdPod == null || !wrappedAdPod.Ads.Any())
                            {
                                // no ads were returned
                                var fallbackOnNoAd = vastAdWrapper.GetBoolAttribute("fallbackOnNoAd", true);
                                if (fallbackOnNoAd)
                                {
                                    wrappedAdPod = FallbackAdPod;
                                }
                            }

                            if (wrappedAdPod != null)
                            {
                                // merge tracking info from this wrapper to every ad in the first adpod in the child
                                foreach (Ad inlineAd in wrappedAdPod.Ads)
                                    MergeWrappedAd(wrapper, inlineAd);

                                // add each ad from the first adpod in the child to the current adpod
                                foreach (Ad inlineAd in wrappedAdPod.Ads)
                                    adPod.Ads.Add(inlineAd);
                            }
                        }
                    }
                    result.AdPods.Add(adPod);
                }
                return result;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\Vast\AdModelFactory_Vast1.cs
internal static async Task<AdDocumentPayload> CreateFromVast1(XElement vastRoot, int? maxRedirectDepth, bool allowMultipleAds)
        {
            var result = new AdDocumentPayload();
            result.Version = (string)vastRoot.Attribute("version");

            foreach (var vastAdPod in vastRoot.Elements("Ad").GroupBy(va => va.Attribute("sequence") != null ? 1 : int.MaxValue).OrderBy(vap => vap.Key))
            {
                var adPod = new AdPod();
                foreach (var vastAd in vastAdPod.OrderBy(va => ToNullableInt((string)va.Attribute("sequence")).GetValueOrDefault(0)))
                {
                    var ad = new Ad();
                    ad.Id = (string)vastAd.Attribute("id");

                    if (vastAd.Elements("InLine").Any())
                    {
                        throw new NotImplementedException();
                    }
                    else if (vastAd.Elements("Wrapper").Any())
                    {
                        Ad wrapper = new Ad();
                        var vastAdWrapper = vastAd.Element("Wrapper");

                        // parse the wrapper itself
                        wrapper.AdSystem = GetAdSystem(vastAdWrapper.Element("AdSystem"));
                        var error = (string)vastAdWrapper.Element("Error");
                        if (error == null) wrapper.Errors.Add(error);

                        var linearCreative = new CreativeLinear();

                        foreach (var trackingEvent in GetTrackingEvents(vastAdWrapper))
                            linearCreative.TrackingEvents.Add(trackingEvent);

                        LoadVideoClicks(vastAdWrapper, linearCreative);

                        wrapper.Creatives.Add(linearCreative);

                        var vastAdUri = GetUriValue(vastAdWrapper.Element("VASTAdTagURL"));
                        if (vastAdUri != null)
                        {
                            // load the stream from the web
                            using (var s = await Extensions.LoadStreamAsync(vastAdUri))
                            {
                                int? nextMaxRedirectDepth = maxRedirectDepth.HasValue ? maxRedirectDepth.Value - 1 : maxRedirectDepth;
                                var vastDoc = await CreateFromVast(s, nextMaxRedirectDepth, allowMultipleAds);

                                var firstAdPodInChild = vastDoc.AdPods.FirstOrDefault();

                                if (firstAdPodInChild != null)
                                {
                                    // merge tracking info from this wrapper to every ad in the first adpod in the child
                                    foreach (Ad inlineAd in firstAdPodInChild.Ads)
                                        MergeWrappedAd(wrapper, inlineAd);

                                    // add each ad from the first adpod in the child to the current adpod
                                    foreach (Ad inlineAd in firstAdPodInChild.Ads)
                                        adPod.Ads.Add(inlineAd);
                                }
                            }
                        }
                    }
                }
                result.AdPods.Add(adPod);
            }
            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\vast\VastAdPayloadHandler.cs
public async Task PreloadAdAsync(IAdSource adSource, CancellationToken cancellationToken)
#else
        public IAsyncAction PreloadAdAsync(IAdSource adSource)
        {
            return AsyncInfo.Run(c => PreloadAdAsync(adSource, c));
        }

        internal async Task PreloadAdAsync(IAdSource adSource, CancellationToken cancellationToken)
#endif
        {
            await ProcessPayload(adSource);
            await adHandlerBase.PreloadAdAsync(adSource, cancellationToken);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\vast\VastAdPayloadHandler.cs
public async Task PlayAdAsync(IAdSource adSource, TimeSpan? startTimeout, CancellationToken cancellationToken, IProgress<AdStatus> progress)
#else
        public IAsyncActionWithProgress<AdStatus> PlayAdAsync(IAdSource adSource, TimeSpan? startTimeout)
        {
            return AsyncInfo.Run<AdStatus>((c, p) => PlayAdAsync(adSource, startTimeout, c, p));
        }

        internal async Task PlayAdAsync(IAdSource adSource, TimeSpan? startTimeout, CancellationToken cancellationToken, IProgress<AdStatus> progress)
#endif
        {
            await ProcessPayload(adSource);
            if (!cancellationToken.IsCancellationRequested)
            {
                await adHandlerBase.PlayAdAsync(adSource, startTimeout, cancellationToken, progress);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.videoadvertising\vast\VastAdPayloadHandler.cs
static async Task ProcessPayload(IAdSource adSource)
        {
            if (adSource.Payload is Stream)
            {
                using (var stream = (Stream)adSource.Payload)
                {
                    adSource.Payload = await AdModelFactory.CreateFromVast(stream, adSource.MaxRedirectDepth, adSource.AllowMultipleAds);
                }
            }
            else if (adSource.Payload is string)
            {
                using (var stream = new MemoryStream(System.Text.Encoding.UTF8.GetBytes((string)adSource.Payload)))
                {
                    adSource.Payload = await AdModelFactory.CreateFromVast(stream, adSource.MaxRedirectDepth, adSource.AllowMultipleAds);
                }
            }
            if (!(adSource.Payload is AdDocumentPayload))
            {
                throw new ArgumentException("adSource must contain a payload of type Stream", "adPayload");
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\Vmap\VmapFactory.cs
public static async Task<Vmap> LoadSource(Uri source, CancellationToken cancellationToken)
#else
        public static IAsyncOperation<Vmap> LoadSource(Uri source)
        {
            return AsyncInfo.Run(c => InternalLoadSource(source, c));
        }

        static async Task<Vmap> InternalLoadSource(Uri source, CancellationToken cancellationToken)
#endif
        {
            using (var stream = await Extensions.LoadStreamAsync(source))
            {
#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
                return await TaskEx.Run(() => CreateFromVmap(stream), cancellationToken);
#else
                return await Task.Run(() => CreateFromVmap(stream), cancellationToken);
#endif
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\VpaidController.cs
public async Task StartAdAsync(ActiveAdUnit ad, double defaultVolume, CancellationToken cancellationToken)
        {
            try
            {
                ad.Player.AdVolume = defaultVolume;
                await ad.Player.StartAdAsync(cancellationToken);
            }
            catch (Exception ex)
            {
                OnLog(new ActiveAdUnitLogEventArgs(ad, "VPAID.StartAd Exception: " + ex.Message));
                throw ex;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\VpaidController.cs
public async Task<bool> PlayAdAsync(ActiveAdUnit ad, CancellationToken cancellationToken)
        {
            try
            {
                return await ad.Player.PlayAdAsync(cancellationToken);
            }
            catch (Exception ex)
            {
                OnLog(new ActiveAdUnitLogEventArgs(ad, "VPAID.StartAd Exception: " + ex.Message));
                throw ex;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\VpaidController.cs
public async Task FinishAdAsync(ActiveAdUnit ad, CancellationToken cancellationToken)
        {
            try
            {
                await ad.Player.FinishAdAsync(cancellationToken);
            }
            catch (Exception ex)
            {
                OnLog(new ActiveAdUnitLogEventArgs(ad, "VPAID.StartAd Exception: " + ex.Message));
                throw ex;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAdvertising\..\Win8.VideoAdvertising\VpaidController.cs
public async Task StopAdAsync(ActiveAdUnit ad, CancellationToken cancellationToken)
        {
            try
            {
                await ad.Player.StopAdAsync(cancellationToken);
            }
            catch (Exception ex)
            {
                OnLog(new ActiveAdUnitLogEventArgs(ad, "VPAID.StopAd Exception: " + ex.Message));
                throw ex;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Phone.VideoAdvertising\Compatibility\HttpClient.cs
public async Task<Stream> GetStreamAsync(Uri address)
        {
            var request = WebRequest.CreateHttp(address);
            if (UserAgent != null) request.UserAgent = UserAgent;
            request.AllowReadStreamBuffering = true;
            var response = await Task.Factory.FromAsync<WebResponse>(request.BeginGetResponse, request.EndGetResponse, null);
            return response.GetResponseStream();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\AdHandlerBase.cs
public async Task CancelActiveAds()
        {
            await controller.CancelActiveAds();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\AdSchedulerPlugin.cs
async Task SetOrReplaceActivePreloadOperation(PreloadOperation value)
        {
            if (activePreloadOperation != null)
            {
                await activePreloadOperation.CancelAsync();
            }
            activePreloadOperation = value;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\AdSchedulerPlugin.cs
async void MediaPlayer_ScrubbingStarted(object sender, ScrubRoutedEventArgs e)
        {
            if (activePreloadOperation != null)
            {
                await activePreloadOperation.CancelAsync();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\AdSchedulerPlugin.cs
async void MediaPlayer_MediaEnding(object sender, MediaPlayerDeferrableEventArgs e)
        {
            if (EligableAds.OfType<PostrollAdvertisement>().Any(a => a.Source != null))
            {
                var deferral = e.DeferrableOperation.GetDeferral();
                try
                {
                    await PlayAdsOfType<PostrollAdvertisement>(CancellationTokenSource.CreateLinkedTokenSource(deferral.CancellationToken, cts.Token).Token);
                }
                catch { /* ignore */ }
                finally
                {
                    deferral.Complete();
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\AdSchedulerPlugin.cs
async void MediaPlayer_MediaStarting(object sender, MediaPlayerDeferrableEventArgs e)
#endif
        {
            if (MediaPlayer.AllowMediaStartingDeferrals)
            {
                IList<Advertisement> startupAds;
                if (MediaPlayer.StartupPosition.HasValue)
                {
                    startupAds = EligableAds
                        .OfType<MidrollAdvertisement>()
                        .Where(a => a.Source != null && a.Time == MediaPlayer.StartupPosition.Value)
                        .Cast<Advertisement>()
                        .ToList();
                }
                else
                {
                    startupAds = EligableAds
                        .OfType<PrerollAdvertisement>()
                        .Where(a => a.Source != null)
                        .Cast<Advertisement>()
                        .ToList();
                }


                if (startupAds.Any())
                {
                    var deferral = e.DeferrableOperation.GetDeferral();
                    try
                    {
                        using (var adCts = CancellationTokenSource.CreateLinkedTokenSource(deferral.CancellationToken, cts.Token))
                        {
                            HandledAds.AddRange(startupAds);
                            await PlayAds(startupAds, adCts.Token);
                        }
                    }
                    catch { /* ignore */ }
                    finally
                    {
                        deferral.Complete();
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\AdSchedulerPlugin.cs
async Task PlayAdsOfType<T>(CancellationToken cancellationToken) where T : Advertisement
        {
            var adsToPlay = EligableAds.OfType<T>().Where(a => a.Source != null).ToList();
            HandledAds.AddRange(adsToPlay.Cast<Advertisement>());
            if (adsToPlay.Any())
            {
                await PlayAds(adsToPlay.Cast<Advertisement>(), cancellationToken);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\AdSchedulerPlugin.cs
async Task PlayAds(IEnumerable<Advertisement> advertisements, CancellationToken cancellationToken)
        {
            foreach (var advertisement in advertisements)
            {
                try
                {
                    await PlayAdAsync(advertisement, cancellationToken);
                }
                catch { /* swallow */ }
                if (cancellationToken.IsCancellationRequested) break;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\AdSchedulerPlugin.cs
public async Task CancelAsync()
            {
                if (Task.IsRunning())
                {
                    if (!cts.IsCancellationRequested)
                    {
                        cts.Cancel();
                    }
                    try
                    {
                        await Task;
                    }
                    catch { /* ignore */ }
                }
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\FreewheelPlugin.cs
private async void mediaPlayer_MediaLoading(object sender, MediaPlayerDeferrableEventArgs e)
        {
            if (IsEnabled)
            {
                if (Source != null)
                {
                    var deferral = e.DeferrableOperation.GetDeferral();
                    try
                    {
                        await LoadAds(Source, deferral.CancellationToken);
                    }
                    catch { /* ignore */ }
                    finally
                    {
                        deferral.Complete();
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\FreewheelPlugin.cs
public async Task LoadAds(Uri source, CancellationToken c)
        {
            adSlots.Clear();
            var cancellationToken = CancellationTokenSource.CreateLinkedTokenSource(c, cts.Token).Token;

#if SILVERLIGHT
            adResponse = await FreeWheelFactory.LoadSource(source, cancellationToken);
#else
            adResponse = await FreeWheelFactory.LoadSource(source).AsTask(cancellationToken);
#endif

            var videoTracking = adResponse.SiteSection.VideoPlayer.VideoAsset.EventCallbacks.FirstOrDefault(ec => ec.Name == FWEventCallback.VideoView);
            if (videoTracking != null)
            {
                // use the tracking plugins to help with tracking markers. Create it if it doesn't exist.
                var positionTrackingPlugin = MediaPlayer.Plugins.OfType<PositionTrackingPlugin>().FirstOrDefault();
                if (positionTrackingPlugin == null)
                {
                    positionTrackingPlugin = new PositionTrackingPlugin();
                    MediaPlayer.Plugins.Add(positionTrackingPlugin);
                }
                positionTrackingPlugin.EventTracked += trackingPlugin_EventTracked;
                lastTrackingEvent = null; // reset
                trackingEnded = false;
                positionTrackingPlugin.TrackingEvents.Add(new PositionTrackingEvent() { PositionPercentage = 1, Data = videoTracking, Area = TrackingEventArea });

                var playTimeTrackingPlugin = MediaPlayer.Plugins.OfType<PlayTimeTrackingPlugin>().FirstOrDefault();
                if (playTimeTrackingPlugin == null)
                {
                    playTimeTrackingPlugin = new PlayTimeTrackingPlugin();
                    MediaPlayer.Plugins.Add(playTimeTrackingPlugin);
                }
                playTimeTrackingPlugin.EventTracked += trackingPlugin_EventTracked;
                for (int i = 0; i < 60; i = i + 15)
                    playTimeTrackingPlugin.TrackingEvents.Add(new PlayTimeTrackingEvent() { PlayTime = TimeSpan.FromSeconds(i), Data = videoTracking, Area = TrackingEventArea });
                for (int i = 60; i < 60 * 3; i = i + 30)
                    playTimeTrackingPlugin.TrackingEvents.Add(new PlayTimeTrackingEvent() { PlayTime = TimeSpan.FromSeconds(i), Data = videoTracking, Area = TrackingEventArea });
                for (int i = 60 * 3; i < 60 * 10; i = i + 60)
                    playTimeTrackingPlugin.TrackingEvents.Add(new PlayTimeTrackingEvent() { PlayTime = TimeSpan.FromSeconds(i), Data = videoTracking, Area = TrackingEventArea });
                for (int i = 60 * 10; i < 60 * 30; i = i + 120)
                    playTimeTrackingPlugin.TrackingEvents.Add(new PlayTimeTrackingEvent() { PlayTime = TimeSpan.FromSeconds(i), Data = videoTracking, Area = TrackingEventArea });
                for (int i = 60 * 30; i < 60 * 60; i = i + 300)
                    playTimeTrackingPlugin.TrackingEvents.Add(new PlayTimeTrackingEvent() { PlayTime = TimeSpan.FromSeconds(i), Data = videoTracking, Area = TrackingEventArea });
                for (int i = 60 * 60; i < 60 * 180; i = i + 600)
                    playTimeTrackingPlugin.TrackingEvents.Add(new PlayTimeTrackingEvent() { PlayTime = TimeSpan.FromSeconds(i), Data = videoTracking, Area = TrackingEventArea });
            }

            var videoAsset = adResponse.SiteSection.VideoPlayer.VideoAsset;
            if (videoAsset != null)
            {
                foreach (var adSlot in videoAsset.AdSlots)
                {
                    Advertisement ad = null;
                    switch (adSlot.TimePositionClass)
                    {
                        case "preroll":
                            ad = new PrerollAdvertisement();
                            break;
                        case "postroll":
                            ad = new PostrollAdvertisement();
                            break;
                        default:
                            var midroll = new MidrollAdvertisement();
                            midroll.Time = adSlot.TimePosition;
                            ad = midroll;
                            break;
                    }

#if SILVERLIGHT
                    var payload = await FreeWheelFactory.GetAdDocumentPayload(adSlot, adResponse, cancellationToken);
#else
                    var payload = await FreeWheelFactory.GetAdDocumentPayload(adSlot, adResponse).AsTask(cancellationToken);
#endif
                    ad.Source = new AdSource(payload, DocumentAdPayloadHandler.AdType);

                    Advertisements.Add(ad);
                    adSlots.Add(ad, adSlot);
                }
            }

            ShowCompanions();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\FreewheelPlugin.cs
protected override async Task PlayAdAsync(Advertisement ad, CancellationToken cancellationToken)
        {
            if (adSlots.ContainsKey(ad)) // app could have manually added ads besides those from FreeWheel
            {
                var adSlot = adSlots[ad];
                try
                {
                    var slotImpression = adSlot.EventCallbacks.FirstOrDefault(ec => ec.Type == FWCallbackType.Impression && ec.Name == FWEventCallback.SlotImpression);
                    if (slotImpression != null)
                    {
                        foreach (var url in slotImpression.GetUrls())
                        {
                            AdTracking.Current.FireTracking(url);
                        }
                    }
                    if (ad.Source != null)
                    {
                        await base.PlayAdAsync(ad, cancellationToken);
                    }
                }
                catch { /* swallow */ }
            }
            else
            {
                await base.PlayAdAsync(ad, cancellationToken);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.xaml.advertising\helpers\Extensions.cs
public static async Task<Stream> GetStreamAsync(this WebRequest request)
        {
            var response = await Task.Factory.FromAsync<WebResponse>(request.BeginGetResponse, request.EndGetResponse, null);
            return response.GetResponseStream();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.xaml.advertising\helpers\Extensions.cs
public static async Task<Stream> LoadStreamAsync(Uri source)
        {
#if NETFX_CORE || (WINDOWS_PHONE && !WINDOWS_PHONE7)
            switch (source.Scheme.ToLowerInvariant())
            {
                case "ms-appx":
                case "ms-appdata":
                    var file = await Windows.Storage.StorageFile.GetFileFromApplicationUriAsync(source);
                    return await file.OpenStreamForReadAsync();
                default:
                    return await DownloadStreamAsync(source);
            }
#else
            return await DownloadStreamAsync(source);
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.xaml.advertising\helpers\Extensions.cs
public static async Task<Stream> DownloadStreamAsync(Uri source)
        {
#if SILVERLIGHT
            using (var client = new HttpClient())
            {
                client.UserAgent = Microsoft.VideoAdvertising.Extensions.DefaultUserAgent;
                return await client.GetStreamAsync(source);
            }
#else
            using (var client = new HttpClient())
            {
                using (HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, source))
                {
                    if (Microsoft.VideoAdvertising.Extensions.DefaultUserAgent != null)
                    {
                        request.Headers.UserAgent.ParseAdd(Microsoft.VideoAdvertising.Extensions.DefaultUserAgent);
                    }
                    using (var response = await client.SendAsync(request))
                    {
                        response.EnsureSuccessStatusCode();
                        using (var stream = await response.Content.ReadAsStreamAsync())
                        {
                            var result = new MemoryStream();
                            await stream.CopyToAsync(result);
                            result.Seek(0, SeekOrigin.Begin);
                            return result;
                        }
                    }
                }
            }
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.xaml.advertising\helpers\MediaPlayerExtensions.cs
public static async Task<bool> PlayAd(this MediaPlayer mediaPlayer, IAdSource adSource, IProgress<AdStatus> progress, CancellationToken cancellationToken)
        {
            var adPlugin = mediaPlayer.Plugins.OfType<AdHandlerPlugin>().FirstOrDefault();
            if (adPlugin != null)
            {
                await adPlugin.PlayAd(adSource, cancellationToken, progress);
                return true;
            }
            else
            {
                return false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\MastSchedulerPlugin.cs
async void mediaPlayer_MediaStarting(object sender, MediaPlayerDeferrableEventArgs e)
        {
            // we need to do a little trickery to find out if there is a preroll.
            capturetriggerTask = true;
            try
            {
                triggerTask = null;
                mastAdapter.InvokeMediaStarting(); // tell the adapter to fire the OnItemStarting event. This will cause the ActivateTrigger event to fire before we return.
                if (MediaPlayer.AllowMediaStartingDeferrals)
                {
                    if (triggerTask != null)
                    {
                        var deferral = e.DeferrableOperation.GetDeferral();
                        try
                        {
                            await triggerTask;
                        }
                        catch { /* ignore */ }
                        finally
                        {
                            deferral.Complete();
                            triggerTask = null;
                        }
                    }
                }
            }
            finally
            {
                capturetriggerTask = false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\MastSchedulerPlugin.cs
async void mediaPlayer_MediaEnding(object sender, MediaPlayerDeferrableEventArgs e)
        {
            // we need to do a little trickery to get the post roll to play and await its completion before allowing MediaEnded to fire.
            // otherwise MediaEnded will fire during the ad and the next playlistitem will start.
            capturetriggerTask = true;
            try
            {
                triggerTask = null;
                mastAdapter.InvokeMediaEnded(); // tell the adapter to fire the OnItemEnd event. This will cause the ActivateTrigger event to fire before we return.
                if (triggerTask != null)
                {
                    var deferral = e.DeferrableOperation.GetDeferral();
                    try
                    {
                        await triggerTask;
                    }
                    catch { /* ignore */ }
                    finally
                    {
                        deferral.Complete();
                        triggerTask = null;
                    }
                }
            }
            finally
            {
                capturetriggerTask = false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\MastSchedulerPlugin.cs
async void mediaPlayer_MediaLoading(object sender, MediaPlayerDeferrableEventArgs e)
        {
            if (IsEnabled)
            {
                if (Source != null)
                {
                    var deferral = e.DeferrableOperation.GetDeferral();
                    try
                    {
                        await LoadAds(Source, deferral.CancellationToken);
                    }
                    catch { /* ignore */ }
                    finally
                    {
                        deferral.Complete();
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\MastSchedulerPlugin.cs
public async Task LoadAds(Uri source, CancellationToken c)
        {
            mainsail.Clear();
            var cancellationToken = CancellationTokenSource.CreateLinkedTokenSource(c, cts.Token).Token;
#if SILVERLIGHT
            await mainsail.LoadSource(source, cancellationToken);
#else
            await mainsail.LoadSource(source).AsTask(cancellationToken);
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\RemoteAdSource.cs
public async Task LoadPayload(CancellationToken cancellationToken)
#else
        public IAsyncAction LoadPayload()
        {
            return AsyncInfo.Run(c => LoadPayload(c));
        }

        internal async Task LoadPayload(CancellationToken cancellationToken)
#endif
        {
            if (IsLoaded) return;
            if (loadingTask == null)
            {
#if SILVERLIGHT
                if (WebRequest != null)
                {
                    loadingTask = WebRequest.GetStreamAsync();
                }
#else
                if (HttpClient != null)
                {
                    loadingTask = HttpClient.GetStreamAsync(Uri);
                }
#endif
                else
                {
                    loadingTask = Extensions.LoadStreamAsync(Uri);
                }
                try
                {
                    payload = await loadingTask;
                    IsLoaded = true;
                }
                finally
                {
                    loadingTask = null;
                }
            }
            else
            {
                await loadingTask;
            }
            cancellationToken.ThrowIfCancellationRequested();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\VmapSchedulerPlugin.cs
async void timer_Tick(object sender, object e)
        {
            try
            {
#if SILVERLIGHT
                var vmap = await VmapFactory.LoadSource(Source, cts.Token);
#else
                var vmap = await VmapFactory.LoadSource(Source).AsTask(cts.Token);
#endif
                // remove all ads that were not found new info
                foreach (var adBreak in adBreaks.Where(existingBreak => !vmap.AdBreaks.Any(newBreak => newBreak.BreakId == existingBreak.Value.BreakId)))
                {
                    Advertisements.Remove(adBreak.Key);
                }
                // create new ads for those that do not already exist
                foreach (var adBreak in vmap.AdBreaks.Where(newBreak => !adBreaks.Values.Any(existingBreak => existingBreak.BreakId == newBreak.BreakId)))
                {
                    CreateAdvertisement(adBreak);
                }
            }
            catch { /* ignore */ }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\VmapSchedulerPlugin.cs
async void mediaPlayer_MediaLoading(object sender, MediaPlayerDeferrableEventArgs e)
        {
            if (IsEnabled)
            {
                if (Source != null)
                {
                    var deferral = e.DeferrableOperation.GetDeferral();
                    try
                    {
                        await LoadAds(Source, deferral.CancellationToken);
                    }
                    catch { /* ignore */ }
                    finally
                    {
                        deferral.Complete();
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\VmapSchedulerPlugin.cs
public async Task LoadAds(Uri source, CancellationToken c)
        {
            adBreaks.Clear();
            var cancellationToken = CancellationTokenSource.CreateLinkedTokenSource(c, cts.Token).Token;
#if SILVERLIGHT
            var vmap = await VmapFactory.LoadSource(source, cancellationToken);
#else
            var vmap = await VmapFactory.LoadSource(source).AsTask(cancellationToken);
#endif
            foreach (var adBreak in vmap.AdBreaks)
            {
                CreateAdvertisement(adBreak);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Advertising\..\Win8.Xaml.Advertising\VmapSchedulerPlugin.cs
protected override async Task PlayAdAsync(Advertisement ad, CancellationToken cancellationToken)
        {
            if (adBreaks.ContainsKey(ad)) // app could have manually added ads besides those in vmap
            {
                VmapAdBreak adBreak = adBreaks[ad];
                try
                {
                    TrackEvent(adBreak.TrackingEvents.Where(te => te.EventType == VmapTrackingEventType.BreakStart));
                    await base.PlayAdAsync(ad, cancellationToken);
                    TrackEvent(adBreak.TrackingEvents.Where(te => te.EventType == VmapTrackingEventType.BreakEnd));
                }
                catch
                {
                    TrackEvent(adBreak.TrackingEvents.Where(te => te.EventType == VmapTrackingEventType.Error));
                }
            }
            else
            {
                await base.PlayAdAsync(ad, cancellationToken);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.TimedText\Compatibility\HttpClient.cs
public async Task<Stream> GetStreamAsync(Uri address)
        {
            var request = WebRequest.CreateHttp(address);
            request.AllowReadStreamBuffering = true;
            var response = await Task.Factory.FromAsync<WebResponse>(request.BeginGetResponse, request.EndGetResponse, null);
            return response.GetResponseStream();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.TimedText\Compatibility\HttpClient.cs
public async Task<byte[]> GetByteArrayAsync(string address)
        {
            using (var stream = await GetStreamAsync(new Uri(address)))
            {
                var buffer = new byte[stream.Length];
                stream.Read(buffer, 0, buffer.Length);
                return buffer;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.TimedText\..\Win8.TimedText\TimedTextCaptions.cs
public async Task AugmentTtml(string ttml, TimeSpan startTime, TimeSpan endTime)
        {
            // parse on a background thread
#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
            var markers = await TaskEx.Run(() => factory.ParseTtml(ttml, startTime, endTime));       
#else
            var markers = await Task.Run(() => factory.ParseTtml(ttml, startTime, endTime));
#endif
            if (CaptionParsed != null)
            {
                foreach (var marker in markers)
                {
                    CaptionParsed(this, new CaptionParsedEventArgs(marker));
                }
            }

            factory.MergeMarkers(markers);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.TimedText\..\Win8.TimedText\TimedTextCaptions.cs
public async Task ParseTtml(string ttml, bool forceRefresh)
        {
            // parse on a background thread
#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
            var markers = await TaskEx.Run(() => factory.ParseTtml(ttml, TimeSpan.Zero, TimeSpan.MaxValue));       
#else
            var markers = await Task.Run(() => factory.ParseTtml(ttml, TimeSpan.Zero, TimeSpan.MaxValue));
#endif
            if (CaptionParsed != null)
            {
                foreach (var marker in markers)
                {
                    CaptionParsed(this, new CaptionParsedEventArgs(marker));
                }
            }
            
            factory.UpdateMarkers(markers, forceRefresh);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.TimedText\..\Win8.Xaml.TimedText\CaptionsPlugin.cs
private async void AugmentCaption(Caption caption, object payload, TimeSpan startTime, TimeSpan endTime)
        {
            if (caption != null)
            {
                string result = null;
                if (payload is byte[])
                {
                    var byteArray = (byte[])payload;
#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
                    result = await TaskEx.Run(() => System.Text.Encoding.UTF8.GetString(byteArray, 0, byteArray.Length));
#else
                    result = await Task.Run(() => System.Text.Encoding.UTF8.GetString(byteArray, 0, byteArray.Length));
#endif
                    //result = System.Text.Encoding.UTF8.GetString(byteArray, 0, byteArray.Length);
                }
                else if (payload is string)
                {
                    result = (string)payload;
                }
                if (result != null)
                {
                    allTasks = EnqueueTask(() => captionsPanel.AugmentTtml(result, startTime, endTime), allTasks);
                    await allTasks;
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.TimedText\..\Win8.Xaml.TimedText\CaptionsPlugin.cs
private async void RefreshCaption(Caption caption, bool forceRefresh)
        {
            if (caption != null)
            {
                string result = null;
                if (caption.Payload is Uri)
                {
                    try
                    {
                        result = await ((Uri)caption.Payload).LoadToString();
                    }
                    catch
                    {
                        // TODO: expose event to log errors
                        return;
                    }
                }
                else if (caption.Payload is byte[])
                {
                    var byteArray = (byte[])caption.Payload;
#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
                    result = await TaskEx.Run(() => System.Text.Encoding.UTF8.GetString(byteArray, 0, byteArray.Length));
#else
                    result = await Task.Run(() => System.Text.Encoding.UTF8.GetString(byteArray, 0, byteArray.Length));
#endif
                    //result = System.Text.Encoding.UTF8.GetString(byteArray, 0, byteArray.Length);
                }
                else if (caption.Payload is string)
                {
                    result = (string)caption.Payload;
                }

                if (result != null)
                {
                    allTasks = EnqueueTask(() => captionsPanel.ParseTtml(result, forceRefresh), allTasks);
                    await allTasks;
                    IsSourceLoaded = true;

                    // refresh the caption based on the current position. Fixes issue where caption is changed while paused.
                    if (IsLoaded) // make sure we didn't get unloaded by the time this completed.
                    {
                        captionsPanel.UpdateCaptions(MediaPlayer.Position);
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.TimedText\..\Win8.Xaml.TimedText\CaptionsPlugin.cs
static async Task EnqueueTask(Func<Task> newTask, Task taskQueue)
        {
            if (taskQueue != null) await taskQueue;
            await newTask();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.TimedText\..\Win8.Xaml.TimedText\Helpers\Extensions.cs
public static async Task<Stream> LoadToStream(this Uri source)
        {
#if NETFX_CORE || (WINDOWS_PHONE && !WINDOWS_PHONE7)
            switch (source.Scheme.ToLowerInvariant())
            {
                case "ms-appx":
                case "ms-appdata":
                    var file = await Windows.Storage.StorageFile.GetFileFromApplicationUriAsync(source);
                    return await file.OpenStreamForReadAsync();
                default:
                    using (var client = new HttpClient())
                    {
                        using (var stream = await client.GetStreamAsync(source))
                        {
                            var result = new MemoryStream();
                            await stream.CopyToAsync(result);
                            result.Seek(0, SeekOrigin.Begin);
                            return result;
                        }
                    }
            }
#else
            using (var client = new HttpClient())
            {
                return await client.GetStreamAsync(source);
            }
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.TimedText\..\Win8.Xaml.TimedText\Helpers\Extensions.cs
public static async Task<string> LoadToString(this Uri source)
        {
            using (var stream = await source.LoadToStream())
            {
                return new StreamReader(stream).ReadToEnd();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.TimedText\Helpers\HttpClient.cs
public async Task<Stream> GetStreamAsync(Uri address)
        {
            var request = WebRequest.CreateHttp(address);
            var response = await Task.Factory.FromAsync<WebResponse>(request.BeginGetResponse, request.EndGetResponse, null);
            var stream = ((HttpWebResponse)response).GetResponseStream();
            var result = new MemoryStream();
            await stream.CopyToAsync(result);
            result.Seek(0, SeekOrigin.Begin);
            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAnalytics\..\Win8.VideoAnalytics\AnalyticsCollector.cs
public async void SendLog(ILog log)
        {
            // add all the extra info to the log
            log.ExtraData.Add("VideoSessionId", VideoSessionId);
            log.ExtraData.Add("VideoSessionDuration", VideoSessionDuration);
            log.ExtraData.Add("IsLive", isLive);
            foreach (var kvp in AddtionalData.ToList())
            {
                log.ExtraData.Add(kvp);
            }

            // add additional info about the stream (which may require us to wait until it's finished).
            StreamLoadedLog streamLoadedLog = null;
            if (streamLoadTask != null)
            {
                streamLoadedLog = await streamLoadTask.Task;
            }
            if (streamLoadedLog != null)
            {
                log.ExtraData.Add("EdgeIP", streamLoadedLog.EdgeServer);
                log.ExtraData.Add("RelatedLogId", streamLoadedLog.Id);
                log.ExtraData.Add("VideoUrl", streamLoadedLog.Source);
            }

            // notify that the log is ready
            if (LogCreated != null) LogCreated(this, new LogEventArgs(log));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAnalytics\..\Win8.VideoAnalytics\AnalyticsCollector.cs
async void Player_StreamLoaded(object sender, object e)
        {
            isPaused = true;
            AddLog(new StreamEventLog(StreamEventType.Loaded, TimeSpan.Zero, Player.Duration));

            var loadedLog = new StreamLoadedLog(Player.Source);
            if (AdaptiveMonitor != null)
            {
                loadedLog.MaxBitrate = AdaptiveMonitor.MaxBitrate;
                loadedLog.MinBitrate = AdaptiveMonitor.MinBitrate;
            }

            EdgeServerResult edgeResult = EdgeServerResult.Empty;
            if (Player.Source.IsAbsoluteUri)
            {
                var sourceRoot = GetUrlWithoutQueryString(Player.Source);
                try
                {
                    edgeResult = await GetEdgeServerAsync(new Uri(sourceRoot, UriKind.Absolute));
                }
                catch (OperationCanceledException) { /* ignore */ }
            }

            loadedLog.EdgeServer = edgeResult.EdgeServer;
            loadedLog.ClientIp = edgeResult.ClientIP;
            AddLog(loadedLog);
            streamLoadTask.SetResult(loadedLog);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAnalytics\..\Win8.VideoAnalytics\AnalyticsCollector.cs
async Task<EdgeServerResult> GetEdgeServerAsync(Uri currentStreamUri)
        {
            EdgeServerResult result = null;
            if (EdgeServerMonitor != null)
            {
                try
                {
#if SILVERLIGHT
                    result = await EdgeServerMonitor.GetEdgeServerAsync(currentStreamUri, cts.Token);
#else
                    result = await EdgeServerMonitor.GetEdgeServerAsync(currentStreamUri).AsTask(cts.Token);
#endif
                }
                catch (OperationCanceledException) { throw; }
                catch { /* unable to get edge server info, nothing we can do but continue */}
            }

            return result ?? EdgeServerResult.Empty;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAnalytics\..\Win8.VideoAnalytics\AudienceInsight\RESTDataClient.cs
public async Task<LogBatchResult> SendBatchAsync(IBatch batch, CancellationToken c)
#endif
        {
            if (batch.Logs != null)
            {
                using (HttpClient httpClient = new HttpClient())
                {
                    httpClient.Timeout = Timeout;
                    httpClient.DefaultRequestHeaders.Add("Ver", Version.ToString());

                    using (var stream = new MemoryStream())
                    {
                        batch.SerializeCompressed(stream);
                        stream.Seek(0, SeekOrigin.Begin);
                        using (var content = new StreamContent(stream))
                        {
                            using (var response = await httpClient.PostAsync(ServiceUrl, content, c))
                            {
                                response.EnsureSuccessStatusCode();

                                using (var responseStream = await response.Content.ReadAsStreamAsync())
                                {
                                    c.ThrowIfCancellationRequested();
                                    return ResponseDeserializer.Deserialize(responseStream);
                                }
                            }
                        }
                    }
                }
            }
            else return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAnalytics\..\Win8.VideoAnalytics\DataClients\EdgeServerMonitor.cs
public async Task<EdgeServerResult> GetEdgeServerAsync(Uri currentStreamUri, CancellationToken cancellationToken)
#endif
        {
            if (EdgeServerRuleCollection != null)
            {
                var edgeServerRules = EdgeServerRuleCollection.FirstOrDefault(ai => ai.Domain != null && currentStreamUri.Host.EndsWith(ai.Domain, StringComparison.OrdinalIgnoreCase));
                // fallback on the address rules without a domain
                if (edgeServerRules == null)
                {
                    edgeServerRules = EdgeServerRuleCollection.FirstOrDefault(ai => ai.Domain == null);
                }
                if (edgeServerRules != null)
                {
                    Uri ipRequestUri;
                    if (currentStreamUri != null)
                        ipRequestUri = new Uri(string.Format(CultureInfo.InvariantCulture, edgeServerRules.EdgeResolverUrlPattern, currentStreamUri.Host, currentStreamUri.Port), UriKind.Absolute);
                    else
                        ipRequestUri = new Uri(edgeServerRules.EdgeResolverUrlPattern, UriKind.Absolute);

                    // use the client networking stack so we can read headers
#if SILVERLIGHT
                    var request = (HttpWebRequest)System.Net.Browser.WebRequestCreator.ClientHttp.Create(ipRequestUri);
#else
                    var request = WebRequest.CreateHttp(ipRequestUri);
#endif
                    for (int i = 0; i < edgeServerRules.EdgeResolverHeaders.Count; i = i + 2)
                    {
                        string key = edgeServerRules.EdgeResolverHeaders[i];
                        string value = edgeServerRules.EdgeResolverHeaders[i + 1];
                        request.Headers[key] = value;
                    }
                    request.Method = "GET";
                    var response = await Task.Factory.FromAsync<WebResponse>(request.BeginGetResponse, request.EndGetResponse, null);
                    cancellationToken.ThrowIfCancellationRequested();

                    string result;
                    using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                    {
                        result = reader.ReadToEnd();
                    }
                    string thingToParse;

                    // get the edge server
                    string edgeServer = "";
                    thingToParse = result;
                    if (edgeServerRules.EdgeHeader != null)
                    {
                        if (response.SupportsHeaders)
                            thingToParse = response.Headers[edgeServerRules.EdgeHeader].Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries).FirstOrDefault();
                    }
                    if (edgeServerRules.EdgeRegex != null && thingToParse != null)
                    {
                        Regex regex = new Regex(edgeServerRules.EdgeRegex);
                        if (regex.IsMatch(thingToParse))
                        {
                            var matches = regex.Matches(thingToParse);
                            edgeServer = matches[0].Value;
                        }
                    }

                    // get the client IP
                    string clientIP = EdgeServerResult.IpNA;
                    thingToParse = result;
                    if (edgeServerRules.ClientIPHeader != null)
                    {
                        if (response.SupportsHeaders)
                            thingToParse = response.Headers[edgeServerRules.ClientIPHeader];
                    }
                    if (edgeServerRules.ClientIPRegex != null && thingToParse != null)
                    {
                        Regex regex = new Regex(edgeServerRules.ClientIPRegex);
                        if (regex.IsMatch(thingToParse))
                        {
                            var matches = regex.Matches(thingToParse);
                            clientIP = matches[0].Value;
                        }
                    }

                    return new EdgeServerResult(edgeServer, clientIP);
                }
            }
            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAnalytics\..\Win8.VideoAnalytics\Logging\QueueManager.cs
async void pollingTimer_Tick(object sender)
        {
            if (!isProcessing) // ignore reentrance
            {
                isProcessing = true;
                try
                {
                    await ProcessQueue();
                }
                finally { isProcessing = false; }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAnalytics\..\Win8.VideoAnalytics\Logging\QueueManager.cs
private async Task ProcessQueue()
        {
            IBatch batchToSend = null;
            try
            {
                if (BatchToRetry != null)
                {
                    // we have a batch that need to be resent, try again
                    batchToSend = BatchToRetry;
                    BatchToRetry = null; // this will get reset if there's a problem
                }
                else
                {
                    RetryCount = 0;
                    if (logAgent.HasLogs())
                    {
                        var batch = await CreateBatch();
                        // apply mappings. If mappings are defined, it will create new instance of the batch and the logs using different keys and dropping come elements.
                        batchToSend = logAgent.MapBatchAndLogs(batch);
                    }
                }
                if (batchToSend != null)
                {
                    await SendBatch(batchToSend);
                }
            }
            catch (Exception ex)
            {
                FailedSendCount++;
                if (!logAgent.Configuration.MaxRetries.HasValue || RetryCount < logAgent.Configuration.MaxRetries.Value)
                {
                    BatchToRetry = batchToSend;
                    RetryCount++;
                }
                else // we exceeded the max number of retries, time to move on
                {
                    BatchToRetry = null;
                    RetryCount = 0;
                    logAgent.IncrementTotalLogsDropped(batchToSend.Logs.Count());
                }
                logAgent.BroadcastException(ex);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAnalytics\..\Win8.VideoAnalytics\Logging\QueueManager.cs
private async Task<Batch> CreateBatch()
        {
            var batch = new Batch();
            batch.ApplicationName = logAgent.Configuration.ApplicationName;
            batch.ApplicationVersion = logAgent.Configuration.ApplicationVersion;
            batch.ApplicationId = logAgent.Configuration.ApplicationId;
            batch.SessionId = logAgent.SessionId;
            batch.InstanceId = await InstanceDataClient.GetInstanceId();

            batch.TotalFailures = FailedSendCount;
            batch.LogsDropped = logAgent.TotalLogsDropped;
            batch.LogsSent = logAgent.TotalLogsSent;

            return batch;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAnalytics\..\Win8.VideoAnalytics\Logging\QueueManager.cs
private async Task SendBatch(IBatch batch)
        {
            if (batch != null && batch.Logs != null && batch.Logs.Count() > 0)
            {
                try
                {
                    if (BatchSending != null) BatchSending(this, new BatchEventArgs(batch));
                }
                catch { /* swallow */ }

                SendCount++;

                // the data client does the work of actually sending the info to the server
                try
                {
#if SILVERLIGHT
                    var result = await dataClient.SendBatchAsync(batch, CancellationToken.None);
#else
                    var result = await dataClient.SendBatchAsync(batch);
#endif

                    logAgent.IncrementTotalLogsSent(batch.Logs.Count());
                    logAgent.IncrementTotalBatchesSent(1);

                    if (result != null)
                    {
                        if (result.IsEnabled.HasValue)
                            logAgent.State = result.IsEnabled.Value ? BatchingLogAgentStates.Enabled : BatchingLogAgentStates.Disabled;
                        if (result.QueuePollingInterval.HasValue && !IsThrottled)
                            QueuePollingInterval = result.QueuePollingInterval.Value;
                        if (result.ServerTime.HasValue)
                        {
                            if (!logAgent.ServerTimeOffset.HasValue)
                            {
                                logAgent.ServerTimeOffset = result.ServerTime.Value.Subtract(batch.TimeStamp);
                            }
                        }
                    }

                    // decrement the FailedSendCount
                    FailedSendCount = Math.Max(FailedSendCount - 1, 0);
                    try
                    {
                        if (BatchSendSuccess != null) BatchSendSuccess(this, new BatchEventArgs(batch));
                    }
                    catch { /* swallow */ }
                }
                catch
                {
                    logAgent.IncrementTotalBatchesFailed(1);
                    try
                    {
                        if (BatchSendFailed != null) BatchSendFailed(this, new BatchEventArgs(batch));
                    }
                    catch { /* swallow */ }
                    throw;
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAnalytics\Compatibility\HttpClient.cs
public async Task<Stream> GetStreamAsync(Uri address)
        {
            var request = WebRequest.CreateHttp(address);
            foreach (var header in DefaultRequestHeaders)
            {
                request.Headers[header.Key] = header.Value;
            }
            request.AllowReadStreamBuffering = true;
            var response = await Task.Factory.FromAsync<WebResponse>(request.BeginGetResponse, request.EndGetResponse, null);
            return response.GetResponseStream();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.VideoAnalytics\Compatibility\HttpClient.cs
public async Task<HttpResponseMessage> PostAsync(Uri address, StreamContent content, CancellationToken c)
        {
            using (var cts = CancellationTokenSource.CreateLinkedTokenSource(c))
            {
                cts.CancelAfter(Timeout);
                var request = WebRequest.CreateHttp(address);
                request.Method = "POST";
                foreach (var header in DefaultRequestHeaders)
                {
                    request.Headers[header.Key] = header.Value;
                }
                request.AllowReadStreamBuffering = true;
                using (var stream = await Task.Factory.FromAsync<Stream>(request.BeginGetRequestStream, request.EndGetRequestStream, null))
                {
                    await content.Stream.CopyToAsync(stream);
                }

                return new HttpResponseMessage((HttpWebResponse)await Task.Factory.FromAsync<WebResponse>(request.BeginGetResponse, request.EndGetResponse, null));
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.WebVTT\..\Win8.Xaml.WebVTT\Helpers\Extensions.cs
public static async Task<Stream> LoadToStream(this Uri source)
        {
#if NETFX_CORE || (WINDOWS_PHONE && !WINDOWS_PHONE7)
            switch (source.Scheme.ToLowerInvariant())
            {
                case "ms-appx":
                case "ms-appdata":
                    var file = await Windows.Storage.StorageFile.GetFileFromApplicationUriAsync(source);
                    return await file.OpenStreamForReadAsync();
                default:
                    using (var client = new HttpClient())
                    {
                        using (var stream = await client.GetStreamAsync(source))
                        {
                            var result = new MemoryStream();
                            await stream.CopyToAsync(result);
                            result.Seek(0, SeekOrigin.Begin);
                            return result;
                        }
                    }
            }
#else
            using (var client = new HttpClient())
            {
                return await client.GetStreamAsync(source);
            }
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.WebVTT\..\Win8.Xaml.WebVTT\Helpers\Extensions.cs
public static async Task<string> LoadToString(this Uri source)
        {
            using (var stream = await source.LoadToStream())
            {
                return new StreamReader(stream).ReadToEnd();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.WebVTT\..\Win8.Xaml.WebVTT\WebVTTPlugin.cs
private async void AugmentCaption(Caption caption, object payload, TimeSpan startTime, TimeSpan endTime)
        {
            if (caption != null)
            {
                string result = null;
                if (payload is byte[])
                {
                    var byteArray = (byte[])payload;
#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
                    result = await TaskEx.Run(() => System.Text.Encoding.UTF8.GetString(byteArray, 0, byteArray.Length));
#else
                    result = await Task.Run(() => System.Text.Encoding.UTF8.GetString(byteArray, 0, byteArray.Length));
#endif
                    //result = System.Text.Encoding.UTF8.GetString(byteArray, 0, byteArray.Length);
                }
                else if (payload is string)
                {
                    result = (string)payload;
                }
                if (result != null)
                {
                    allTasks = EnqueueTask(() => AugmentWebVTT(result, startTime, endTime), allTasks);
                    await allTasks;
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.WebVTT\..\Win8.Xaml.WebVTT\WebVTTPlugin.cs
private async Task<WebVTTDocument> LoadWebVTTDocument(string webvtt, TimeSpan startTime, TimeSpan endTime)
        {
            // parse on a background thread
#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
            return await TaskEx.Run(() => WebVTTParser.ParseDocument(webvtt, startTime, endTime));       
#else
            return await Task.Run(() => WebVTTParser.ParseDocument(webvtt, startTime, endTime));
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.WebVTT\..\Win8.Xaml.WebVTT\WebVTTPlugin.cs
private async Task AugmentWebVTT(string webvtt, TimeSpan startTime, TimeSpan endTime)
        {
            var doc = await LoadWebVTTDocument(webvtt, startTime, endTime);
            // merge
            foreach (var cue in doc.Cues)
            {
                bool found = false;
                foreach (var marker in markerManager.MediaMarkers)
                {
                    if (marker.Begin == cue.Begin && marker.End == cue.End) // assume its the same one if begin and end match.
                    {
                        found = true;
                        break;
                    }
                }
                if (!found)
                {
                    markerManager.MediaMarkers.Add(new MediaMarker() { Begin = cue.Begin, End = cue.End, Content = cue });
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.WebVTT\..\Win8.Xaml.WebVTT\WebVTTPlugin.cs
private async Task LoadWebVTT(string webvtt)
        {
            var doc = await LoadWebVTTDocument(webvtt, TimeSpan.Zero, TimeSpan.MaxValue);
            foreach (var cue in doc.Cues)
            {
                markerManager.MediaMarkers.Add(new MediaMarker() { Begin = cue.Begin, End = cue.End, Content = cue });
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.WebVTT\..\Win8.Xaml.WebVTT\WebVTTPlugin.cs
private async void RefreshCaption(Caption caption)
        {
            if (caption != null)
            {
                string result = null;
                if (caption.Payload is Uri)
                {
                    try
                    {
                        result = await ((Uri)caption.Payload).LoadToString();
                    }
                    catch
                    {
                        // TODO: expose event to log errors
                        return;
                    }
                }
                else if (caption.Payload is byte[])
                {
                    var byteArray = (byte[])caption.Payload;
#if SILVERLIGHT && !WINDOWS_PHONE || WINDOWS_PHONE7
                    result = await TaskEx.Run(() => System.Text.Encoding.UTF8.GetString(byteArray, 0, byteArray.Length));
#else
                    result = await Task.Run(() => System.Text.Encoding.UTF8.GetString(byteArray, 0, byteArray.Length));
#endif
                    //result = System.Text.Encoding.UTF8.GetString(byteArray, 0, byteArray.Length);
                }
                else if (caption.Payload is string)
                {
                    result = (string)caption.Payload;
                }

                if (result != null)
                {
                    allTasks = EnqueueTask(() => LoadWebVTT(result), allTasks);
                    await allTasks;
                    IsSourceLoaded = true;

                    // refresh the caption based on the current position. Fixes issue where caption is changed while paused.
                    if (IsLoaded) // make sure we didn't get unloaded by the time this completed.
                    {
                        captionsPanel.UpdatePosition(MediaPlayer.Position);
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.WebVTT\..\Win8.Xaml.WebVTT\WebVTTPlugin.cs
static async Task EnqueueTask(Func<Task> newTask, Task taskQueue)
        {
            if (taskQueue != null) await taskQueue;
            await newTask();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.WebVTT\Helpers\HttpClient.cs
public async Task<Stream> GetStreamAsync(Uri address)
        {
            var request = WebRequest.CreateHttp(address);
            var response = await Task.Factory.FromAsync<WebResponse>(request.BeginGetResponse, request.EndGetResponse, null);
            var stream = ((HttpWebResponse)response).GetResponseStream();
            var result = new MemoryStream();
            await stream.CopyToAsync(result);
            result.Seek(0, SeekOrigin.Begin);
            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\CFF\CffDownloaderPlugin.cs
protected virtual async Task<Stream> DownloadManifestAsync(Uri source, CancellationToken c)
        {
            await this.parser.Parse(source);
            c.ThrowIfCancellationRequested();

            var manifestStream = this.parser.GenerateClientManifestStream();

#if DEBUG
            var reader = new System.IO.StreamReader(manifestStream);
            Debug.WriteLine(reader.ReadToEnd());
            manifestStream.Seek(0, SeekOrigin.Begin);
#endif
            parser.Boxes.Clear();

            return manifestStream;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\CFF\CffDownloaderPlugin.cs
protected virtual async Task<WebRequestorResponse> DownloadChunkAsync(Uri source, CancellationToken c)
        {
            Regex regex = new Regex(RegexFragmentRequest, RegexOptions.IgnoreCase);
            var match = regex.Match(source.AbsolutePath);

            if (match != null)
            {
                var trackType = match.Groups["trackType"].Value;
                var timeOffset = ulong.Parse(match.Groups["timeOffset"].Value);
                var bitrate = uint.Parse(match.Groups["bitrate"].Value);
                var language = match.Groups["language"].Value;
                var manifestTrackType = (ManifestTrackType)Enum.Parse(typeof(ManifestTrackType), trackType, true);

                var fragmentStream = await this.parser.GetTrackFragmentStream(manifestTrackType, bitrate, timeOffset, language);
                c.ThrowIfCancellationRequested();

                return fragmentStream;
            }
            else
            {
                return null;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\CFF\Offline\OfflineCffFileParser.cs
public override async Task Parse(Uri path)
        {
            if (StorageFile == null)
            {
                StorageFile = await Windows.Storage.StorageFile.GetFileFromApplicationUriAsync(path);
            }

            using (var fileStream = await StorageFile.OpenStreamForReadAsync())
            {
                var reader = new BoxBinaryReader(fileStream);
                Box box = null;

                do
                {
                    box = reader.ReadNextBox();

                    if (box != null)
                    {
                        this.Boxes.Add(box);

                        if (box.Type == BoxType.Moov)
                        {
                            // There may be an mdat after the moov, if so parse it
                            if (reader.PeekNextBoxType() == BoxType.Mdat)
                            {
                                box = reader.ReadNextBox();
                                this.Boxes.Add(box);
                            }

                            // After parsing the moov and optional mdat after it, skip to the mfra
                            // this will jump past the moof and mdats which we don't need to process
                            reader.GotoMovieFragmentRandomAccess();
                        }
                    }
                } while (box != null);
            }

            this.InitializeTrackRegistry();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\CFF\Offline\OfflineCffFileParser.cs
public override async Task<WebRequestorResponse> GetTrackFragmentStream(ManifestTrackType trackType, uint bitrate, ulong timeOffset, string language)
        {
            if (language == string.Empty) language = null;

            var track = this.ManifestTracks
                    .Where(t => t.Type == trackType && t.Bitrate == bitrate && t.Language == language)
                    .SingleOrDefault();

            if (track != null)
            {
                var entry = track.Fragments.TrackFragmentRandomAccessEntries.FirstOrDefault(e => e.Time == timeOffset);

                if (entry != null)
                {
                    ulong moofSize = 0;
                    ulong mdatSize = 0;
                    long moofOffset = 0;

                    using (var fileStream = await StorageFile.OpenStreamForReadAsync())
                    {
                        var reader = new BoxBinaryReader(fileStream);
                        moofOffset = (long)entry.MoofOffset;
                        reader.BaseStream.Seek(moofOffset, SeekOrigin.Begin);

                        moofSize = this.ReadBoxSize(reader);

                        // Run to the end of the moof to get to its mdat box
                        reader.BaseStream.Seek(moofOffset + (long)moofSize, SeekOrigin.Begin);

                        mdatSize = this.ReadBoxSize(reader);

                        // And back to the beginning of the moof so we can read both boxes into the stream
                        reader.BaseStream.Seek(moofOffset, SeekOrigin.Begin);

                        var size = moofSize + mdatSize;
                        var fragment = reader.ReadBytes((int)size);

                        var stream = new MemoryStream(fragment);
                        return new WebRequestorResponse(stream, System.Net.HttpStatusCode.OK, null, string.Empty);
                    }
                }
            }
            throw new WebRequestorFailure(System.Net.HttpStatusCode.NotFound, null);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\CFF\Progressive\ProgressiveCffFileParser.cs
public override async Task Parse(Uri path)
        {
            fileOffset = 0;
            fileUri = path;

            await this.ReadMovieHeaderBoxes();
            await this.ReadMovieFragmentRandomAccess();
            InitializeTrackRegistry();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\CFF\Progressive\ProgressiveCffFileParser.cs
public override async Task<WebRequestorResponse> GetTrackFragmentStream(ManifestTrackType trackType, uint bitrate, ulong timeOffset, string language)
        {
            if (language == string.Empty) language = null;

            var track = this.ManifestTracks
                .Where(t => t.Type == trackType && t.Bitrate == bitrate && t.Language == language)
                .SingleOrDefault();

            if (track != null)
            {
                var entry = track.Fragments.TrackFragmentRandomAccessEntries.FirstOrDefault(e => e.Time == timeOffset);

                if (entry != null)
                {
                    return await DownloadFragment(this.fileUri, (long)entry.MoofOffset, (long)entry.SampleSize);
                }
            }
            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\CFF\Progressive\ProgressiveCffFileParser.cs
private static async Task<WebRequestorResponse> DownloadFragment(Uri uri, long offset, long size)
        {
            return await WebRequestor.GetResponseAsync(uri, offset, offset + size - 1);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\CFF\Progressive\ProgressiveCffFileParser.cs
private async Task ReadMovieHeaderBoxes()
        {
            var moov = await this.GetBox(BoxType.Moov);
            this.Boxes.Add(moov);

            // See if we have an mdat next and grab it if we do
            var stream = await WebRequestor.GetStreamRangeAsync(this.fileUri, this.fileOffset, this.fileOffset + 8);
            using (var reader = new BoxBinaryReader(stream))
            {
                if (reader.PeekNextBoxType() == BoxType.Mdat)
                {
                    var mdat = await this.GetNextBox();
                    this.Boxes.Add(mdat);
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\CFF\Progressive\ProgressiveCffFileParser.cs
private async Task ReadMovieFragmentRandomAccess()
        {
#if !RANGESUFFIXSUPPORTED // not all backend services support range suffixes. For example, Azure Blobs. Here is a way around this but it requires an extra request to get the length and therefore does not perform as well.
            var fileSize = await WebRequestor.GetFileSizeAsync(this.fileUri);
#endif

            // grab the mfra offset
#if RANGESUFFIXSUPPORTED
            var offsetStream = await WebRequestor.GetStreamRangeAsync(this.fileUri, -4);
#else
            var offsetStream = await WebRequestor.GetStreamRangeNoSuffixAsync(this.fileUri, -4, fileSize);
#endif
            uint mfraOffset = 0;

            using (var reader = new BoxBinaryReader(offsetStream))
            {
                mfraOffset = reader.ReadUInt32();
            }

            // grab the mfra data
#if RANGESUFFIXSUPPORTED
            var mfraStream = await WebRequestor.GetStreamRangeAsync(this.fileUri, -mfraOffset);
#else
            var mfraStream = await WebRequestor.GetStreamRangeNoSuffixAsync(this.fileUri, -mfraOffset, fileSize);
#endif
            // Write the bytes to our TOC file
            using (var reader = new BoxBinaryReader(mfraStream))
            {
                reader.GotoPosition(0);

                Box box = null;

                do
                {
                    box = reader.ReadNextBox();
                    if (box != null)
                    {
                        this.Boxes.Add(box);
                    }
                } while (box != null);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\CFF\Progressive\ProgressiveCffFileParser.cs
private async Task<Box> GetNextBox()
        {
            var size = await this.GetBoxSize(this.fileOffset);
            var boxStream = await WebRequestor.GetStreamRangeAsync(this.fileUri, this.fileOffset, this.fileOffset + (long)size);
            Box box = null;

            using (var boxReader = new BoxBinaryReader(boxStream))
            {
                box = boxReader.ReadNextBox();
                this.fileOffset += (long)size;
            }

            return box;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\CFF\Progressive\ProgressiveCffFileParser.cs
private async Task<Box> GetBox(BoxType boxType)
        {
            // get the box size
            var size = await this.GetBoxSize(this.fileOffset);
            // gets the box
            var stream = await WebRequestor.GetStreamRangeAsync(this.fileUri, this.fileOffset, this.fileOffset + (long)size);
            Box box = null;

            using (var boxReader = new BoxBinaryReader(stream))
            {
                box = boxReader.ReadNextBox();
                this.fileOffset += (long)size;
            }

            if (box.Type == boxType)
            {
                return box;
            }
            else
            {
                return await this.GetBox(boxType);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\CFF\Progressive\ProgressiveCffFileParser.cs
private async Task<ulong> GetBoxSize(long position)
        {
            var stream = await WebRequestor.GetStreamRangeAsync(this.fileUri, position, position + 16);
            using (var reader = new BoxBinaryReader(stream))
            {
                var size = this.ReadBoxSize(reader);
                return size;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\Dash\DashDownloaderPlugin.cs
private async Task<WebRequestorResponse> DownloadChunkAsync(Uri source, CancellationToken c)
        {
            var response = await GetChunkAsync(source, c);
            c.ThrowIfCancellationRequested();
#if SILVERLIGHT
            if (response != null)
            {
                // SSME for Silverlight requires some additional changes to the chunk for DASH WAMS to work.
                response.Stream = HackFragment(response.Stream);
            }
#endif
            return response;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\Dash\DashDownloaderPlugin.cs
private async Task<WebRequestorResponse> GetChunkAsync(Uri source, CancellationToken c)
        {
            if (ChunkLookup.Any())
            {
                var key = source.AbsolutePath;

                if (ChunkLookup.ContainsKey(key))
                {
                    ChunkLocation chunkLocation = ChunkLookup[key];
                    if (ChunkRequested != null) ChunkRequested(this, new ChunkRequestedEventArgs(source, chunkLocation.Uri, string.Format("{0}-{1}", chunkLocation.From, chunkLocation.To)));
                    return await DownloadResolvedChunkAsync(source, chunkLocation, c);
                }
            }
            if (ChunkRequested != null) ChunkRequested(this, new ChunkRequestedEventArgs(source, source, null));
#if SILVERLIGHT // SILVERLIGHT requires that we download the chunk
            return await WebRequestor.GetResponseAsync(source);
#else
            return null;
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\Dash\DashDownloaderPlugin.cs
private static async Task<WebRequestorResponse> DownloadResolvedChunkAsync(Uri source, ChunkLocation chunkLocation, CancellationToken c)
        {
            // download the chunk and keep the stream open
            return await WebRequestor.GetResponseAsync(chunkLocation.Uri, (long)chunkLocation.From, (long)chunkLocation.To);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\Dash\DashDownloaderPlugin.cs
private async Task<WebRequestorResponse> DownloadManifestAsync(Uri source, CancellationToken c)
        {
            // download and convert the manifest
            var response = await WebRequestor.GetResponseAsync(source);
            c.ThrowIfCancellationRequested();
            // convert the DASH stream to Smooth Streaming format
            XDocument sourceXml = XDocument.Load(response.Stream);
            Stream destStream;
            switch (sourceXml.Root.Name.LocalName)
            {
                case "SmoothStreamingMedia":
                    destStream = response.Stream;
                    break;
                case "MPD":
                    response.Stream.Dispose(); // we don't need it anymore
                    var conversionResult = await DashManifestConverter.ConvertToSmoothManifest(sourceXml, source);
                    destStream = conversionResult.Manifest.ToStream();
                    ChunkLookup = conversionResult.ChunkLookup;
                    break;
                default:
                    throw new NotImplementedException();
            }

            if (ManifestRequested != null)
            {
                var destXml = new StreamReader(destStream).ReadToEnd();
                ManifestRequested(this, new ManifestRequestedEventArgs(source, sourceXml.ToString(), destXml));
            }

            destStream.Seek(0, SeekOrigin.Begin);
            response.Stream = destStream;
            return response;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\Dash\DashManifestConverter.cs
public static async Task<DashManifestConversionResult> ConvertToSmoothManifest(XDocument source, Uri rootUri)
        {
            var result = new DashManifestConversionResult();

            SmoothStreamingMedia manifest = new SmoothStreamingMedia();
            result.Manifest = manifest;

            var mpd = MPDFactory.LoadMPD(source.Root);

            // Get Duration
            if (mpd.MediaPresentationDuration.HasValue)
            {
                manifest.Duration = (ulong)mpd.MediaPresentationDuration.Value.Ticks;
            }
            manifest.IsLive = (mpd.Type == Presentation.Dynamic);
            //manifest.LookaheadCount = 2;
            if (mpd.AvailabilityEndTime.HasValue && mpd.AvailabilityStartTime.HasValue)
            {
                manifest.DVRWindowLength = (ulong)mpd.AvailabilityEndTime.Value.Subtract(mpd.AvailabilityStartTime.Value).Ticks;
            }

            foreach (var period in mpd.Period)
            {
                foreach (var adaptationSet in period.AdaptationSet)
                {
                    SmoothStreamingMediaStreamIndex streamIndex = null;
                    int representationIndex = 0;
                    foreach (var representation in adaptationSet.Representation)
                    {
                        string mediaUrl = null;
                        Uri initializationUri = null;
                        WebRequestor.Range initializationRange = null;
                        if (adaptationSet.SegmentTemplate != null)
                        {
                            var segmentTemplate = adaptationSet.SegmentTemplate;
                            var initializationTemplateUrl = segmentTemplate.InitializationValue;

                            initializationTemplateUrl = initializationTemplateUrl
                                .Replace("$$", "$")
                                .Replace("$RepresentationId$", representation.Id)
                                .Replace("$Number$", representationIndex.ToString())
                                .Replace("$Bandwidth$", representation.Bandwidth.ToString());
                            initializationUri = new Uri(rootUri, initializationTemplateUrl);
                            mediaUrl = segmentTemplate.Media
                                .Replace("$$", "$")
                                .Replace("$Bandwidth$", "{bitrate}")
                                .Replace("$Time$", "{start time}");
                        }
                        else if (representation.SegmentBase != null)
                        {
                            var baseUrl = representation.BaseURL.First().Value;
                            var segmentBase = representation.SegmentBase;
                            if (segmentBase.Initialization != null)
                            {
                                if (!string.IsNullOrEmpty(segmentBase.Initialization.SourceURL))
                                {
                                    initializationUri = new Uri(rootUri, segmentBase.Initialization.SourceURL);
                                }
                                initializationRange = WebRequestor.Range.FromString(segmentBase.Initialization.Range);
                            }
                            if (initializationUri == null)
                            {
                                initializationUri = new Uri(rootUri, baseUrl);
                            }
                        }
                        else throw new NotImplementedException();

                        var initializationBoxes = await GetBoxesAsync(initializationUri, initializationRange);

                        if (manifest.Protection == null) // support for CENC encryption
                        {
                            var moov = initializationBoxes.SingleOrDefault(b => b.Type == BoxType.Moov);
                            if (moov != null)
                            {
                                manifest.Protection = SmoothFactory.GetProtectionHeader(moov);
                            }
                        }

                        var trackStreamIndex = SmoothFactory.GenerateClientManifestStreamIndex(initializationBoxes);
                        var track = trackStreamIndex.QualityLevel.First();
                        if (streamIndex != null)
                        {
                            track.Index = (uint)streamIndex.QualityLevel.Count; // index is zero based so this is always equal to the current count
                            streamIndex.QualityLevel.Add(track);
                            streamIndex.MaxWidth = Math.Max(trackStreamIndex.MaxWidth, streamIndex.MaxWidth);
                            streamIndex.MaxHeight = Math.Max(trackStreamIndex.MaxHeight, streamIndex.MaxHeight);
                            streamIndex.DisplayWidth = streamIndex.MaxWidth;
                            streamIndex.DisplayHeight = streamIndex.MaxHeight;
                        }
                        else
                        {
                            streamIndex = trackStreamIndex;
                            if (mediaUrl != null) streamIndex.Url = mediaUrl;
                        }

                        track.Bitrate = representation.Bandwidth;

                        // create chunks
                        if (adaptationSet.SegmentTemplate != null)
                        {
                            if (adaptationSet.SegmentTemplate.SegmentTimeline != null)
                            {
                                if (!streamIndex.c.Any())
                                {
                                    streamIndex.c.AddRange(CreateChunks(adaptationSet.SegmentTemplate.SegmentTimeline));
                                    if (!manifest.IsLive) streamIndex.Chunks = (uint)streamIndex.c.Count;
                                }
                            }
                            else throw new NotImplementedException();
                        }
                        else if (representation.SegmentBase != null)
                        {
                            // TODO:/OPTIMIZE: request at the same time as initialization header
                            var segmentBase = representation.SegmentBase;
                            var indexRange = segmentBase.IndexRange.Split('-').Select(r => long.Parse(r)).ToArray();
                            var baseUrl = representation.BaseURL.First().Value;
                            var segmentIndexUri = new Uri(rootUri, baseUrl);
                            var segmentIndexRange = WebRequestor.Range.FromString(segmentBase.IndexRange);
                            var segmentIndexBoxes = await GetBoxesAsync(segmentIndexUri, segmentIndexRange);
                            var sidx = segmentIndexBoxes.OfType<SegmentIndexBox>().First();

                            // remove the track if the sidx durations don't match the chunk durations.
                            //if (streamIndex.c.Any() && sidx.Subsegments.First().Duration != streamIndex.c.First().d)
                            //{
                            //    streamIndex.QualityLevel.Remove(track);
                            //    break;
                            //}

                            track.Bitrate = CalculateBitrate(sidx);

                            if (!streamIndex.c.Any())
                            {
                                streamIndex.c.AddRange(CreateChunks(sidx));
                                if (!manifest.IsLive) streamIndex.Chunks = (uint)streamIndex.c.Count;
                            }
                            foreach (var kvp in GetChunkLookups(streamIndex, track, segmentIndexUri, sidx))
                            {
                                result.ChunkLookup.Add(kvp.Key, kvp.Value);
                            }
                        }
                        else throw new NotImplementedException();

                        representationIndex++;
                    }
                    
                    manifest.StreamIndex.Add(streamIndex);
                }
            }

            return result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\..\Win8.AdaptiveStreaming.Dash\Dash\DashManifestConverter.cs
private static async Task<IList<Box>> GetBoxesAsync(Uri uri, WebRequestor.Range range)
        {
            using (var stream = await WebRequestor.GetStreamRangeAsync(uri, range))
            {
                using (var reader = new BoxBinaryReader(stream))
                {
                    return reader.GetAllBoxes();
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\CFF\CffDownloaderPlugin.SL.cs
public async Task<CacheResponse> RequestAsync(CacheRequest request)
        {
            try
            {
                if (request.CanonicalUri == manifestUri)
                {
                    var stream = await DownloadManifestAsync(request.CanonicalUri, cts.Token);
                    cts.Token.ThrowIfCancellationRequested();
                    return new CacheResponse(stream.Length, "text/xml", null, stream, HttpStatusCode.OK, "OK", DateTime.UtcNow);
                }
                else
                {
                    var response = await DownloadChunkAsync(request.CanonicalUri, cts.Token);
                    cts.Token.ThrowIfCancellationRequested();
                    return new CacheResponse(response.Stream.Length, response.ContentType, response.Headers, response.Stream, response.HttpStatusCode, response.HttpStatusCode.ToString(), DateTime.UtcNow);
                }
            }
            catch (WebRequestorFailure ex)
            {
                return new CacheResponse(0, null, ex.Headers, null, ex.HttpStatusCode, ex.HttpStatusCode.ToString(), DateTime.UtcNow);
            }
            catch
            {
                return new CacheResponse(0, null, null, null, HttpStatusCode.BadRequest, "BadRequest", DateTime.UtcNow);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\CFF\Offline\CffOfflineDownloaderPlugin.cs
public async Task<CacheResponse> RequestAsync(CacheRequest request)
        {
            return await downloaderPluginBase.RequestAsync(request);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\CFF\Progressive\CffProgressiveDownloaderPlugin.cs
public async Task<CacheResponse> RequestAsync(CacheRequest request)
        {
            return await downloaderPluginBase.RequestAsync(request);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\Dash\DashDownloaderPlugin.SL.cs
public async Task<CacheResponse> RequestAsync(CacheRequest request)
        {
            try
            {
                if (request.CanonicalUri == manifestUri)
                {
                    var response = await DownloadManifestAsync(request.CanonicalUri, cts.Token);
                    cts.Token.ThrowIfCancellationRequested();
                    return new CacheResponse(response.Stream.Length, "text/xml", response.Headers, response.Stream, response.HttpStatusCode, response.HttpStatusCode.ToString(), DateTime.UtcNow);
                }
                else
                {
                    var response = await DownloadChunkAsync(request.CanonicalUri, cts.Token);
                    cts.Token.ThrowIfCancellationRequested();
                    return new CacheResponse(response.Stream.Length, response.ContentType, response.Headers, response.Stream, response.HttpStatusCode, response.HttpStatusCode.ToString(), DateTime.UtcNow);
                }
            }
            catch (WebRequestorFailure ex)
            {
                return new CacheResponse(0, null, ex.Headers, null, ex.HttpStatusCode, ex.HttpStatusCode.ToString(), DateTime.UtcNow);
            }
            catch
            {
                return new CacheResponse(0, null, null, null, HttpStatusCode.BadRequest, "BadRequest", DateTime.UtcNow);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\Helpers\WebRequestExtensions.cs
public static async Task<HttpWebResponse> GetResponseAsync(this HttpWebRequest request)
        {
            var tcs = new TaskCompletionSource<HttpWebResponse>();

            request.BeginGetResponse(ar =>
            {
                try
                {
                    var response = (HttpWebResponse)request.EndGetResponse(ar);
                    tcs.SetResult(response);
                }
                catch (WebException ex)
                {
                    HttpWebResponse response = (HttpWebResponse)ex.Response;
                    tcs.SetException(new WebRequestorFailure(response.StatusCode, response.Headers));
                }
                catch (Exception ex)
                {
                    tcs.SetException(ex);
                }
            }, null);

            return await tcs.Task;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\Helpers\WebRequestor.cs
public static async Task<long> GetFileSizeAsync(Uri uri)
        {
            var request = (HttpWebRequest)WebRequestCreator.ClientHttp.Create(uri);
            request.Method = "HEAD";
            using (var response = await request.GetResponseAsync())
            {
                long contentLength;
                long.TryParse(response.Headers["Content-Length"], out contentLength);
                return contentLength;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\Helpers\WebRequestor.cs
public static async Task<Stream> GetStreamRangeAsync(Uri uri, Range range)
        {
            var request = (HttpWebRequest)WebRequestCreator.ClientHttp.Create(uri);
            request.Method = "GET";
            if (range != null)
            {
                if (range.From.HasValue)
                {
                    request.AddRange((long)range.From.Value, (long)range.To.Value);
                }
                else if (range.To.HasValue)
                {
                    request.AddRange((long)range.To.Value);
                }
            }
            using (var response = await request.GetResponseAsync())
            {
                return GetStream(response);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\Helpers\WebRequestor.cs
public static async Task<Stream> GetStreamRangeAsync(Uri uri, long from, long to)
        {
            var request = (HttpWebRequest)WebRequestCreator.ClientHttp.Create(uri);
            request.Method = "GET";
            request.AddRange(from, to);
            using (var response = await request.GetResponseAsync())
            {
                return GetStream(response);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\Helpers\WebRequestor.cs
public static async Task<Stream> GetStreamRangeNoSuffixAsync(Uri uri, long range, long fileSize)
        {
            var request = (HttpWebRequest)WebRequestCreator.ClientHttp.Create(uri);
            request.Method = "GET";
            if (range < 0)
            {
                request.AddRange(fileSize + range, fileSize);
            }
            else
            {
                request.AddRange(range);
            }
            using (var response = await request.GetResponseAsync())
            {
                return GetStream(response);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\Helpers\WebRequestor.cs
public static async Task<Stream> GetStreamRangeAsync(Uri uri, long range)
        {
            var request = (HttpWebRequest)WebRequestCreator.ClientHttp.Create(uri);
            request.Method = "GET";
            request.AddRange(range);
            using (var response = await request.GetResponseAsync())
            {
                return GetStream(response);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\Helpers\WebRequestor.cs
public static async Task<WebRequestorResponse> GetResponseAsync(Uri uri)
        {
            var request = (HttpWebRequest)WebRequestCreator.ClientHttp.Create(uri);
            request.Method = "GET";
            using (var response = await request.GetResponseAsync())
            {
                return GetWebRequestorResponse(response);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\playerframework\Phone.SL.Adaptive.Dash\Helpers\WebRequestor.cs
public static async Task<WebRequestorResponse> GetResponseAsync(Uri uri, long from, long to)
        {
            var request = (HttpWebRequest)WebRequestCreator.ClientHttp.Create(uri);
            request.Method = "GET";
            request.AddRange(from, to);
            using (var response = await request.GetResponseAsync())
            {
                return GetWebRequestorResponse(response);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCore.cs
public async Task<HttpWebResponse> DispatchRequest(string httpMethod, string apiUrl, Dictionary<string, string> parameters)
        {
            HttpWebRequest request;
            if (httpMethod == "GET" || httpMethod == "HEAD" || httpMethod == "DELETE")
            {
                if (parameters != null)
                {
                    // Concat an url string
                    if (apiUrl.Contains("?"))
                        apiUrl += "&";
                    else
                        apiUrl += "?";

                    apiUrl += this.FormatQueryString(parameters);
                }

                request = (HttpWebRequest)WebRequest.Create(apiUrl);
                request.Method = httpMethod;
            }
            else
            {
                request = (HttpWebRequest)WebRequest.Create(apiUrl);
                request.Method = httpMethod;
                request.ContentType = "application/x-www-form-urlencoded;charset=utf-8";
                if (parameters != null)
                {
                    using (Stream stream = await request.GetRequestStreamAsync())
                    {
                        using (StreamWriter writer = new StreamWriter(stream))
                        {
                            writer.Write(this.FormatQueryString(parameters));
                        }
                    }
                }
            }

            // Invoke the API
            try
            {
                HttpWebResponse response = (HttpWebResponse)await request.GetResponseAsync();
                return response;
                //using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                //{
                //    string jsonString = reader.ReadToEnd();
                //    Debug.WriteLine(jsonString);
                //}
            }
            catch (Exception e)
            {
                var we = e.InnerException as WebException;
                if (we != null)
                {
                    var resp = we.Response as HttpWebResponse;
                    var code = resp.StatusCode;                    
                    Debug.WriteLine("Status:{0}", we.Status);

                    return resp;
                }
                else
                    throw;
            }

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreDiscoveryExtension.cs
public async void GetDiscoveryStreamAsync(Dictionary<string, string> parameters = null)
        {
            IsLoadingDiscoveryStream = true;

            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            Dictionary<string, string> paramDict = new Dictionary<string, string>();
            paramDict["method"] = "flickr.interestingness.getList";
            paramDict["format"] = "json";
            paramDict["nojsoncallback"] = "1";
            paramDict["oauth_consumer_key"] = consumerKey;
            paramDict["oauth_nonce"] = nonce;
            paramDict["oauth_signature_method"] = "HMAC-SHA1";
            paramDict["oauth_timestamp"] = timestamp;
            paramDict["oauth_token"] = AccessToken;
            paramDict["oauth_version"] = "1.0";

            if (parameters != null)
            {
                foreach (var entry in parameters)
                {
                    paramDict[entry.Key] = entry.Value;
                }
            }

            paramDict["extras"] = UrlHelper.Encode(commonExtraParameters);
            string paramString = GenerateParamString(paramDict);
            string signature = GenerateSignature("GET", AccessTokenSecret, "http://api.flickr.com/services/rest", paramString);
            string requestUrl = "http://api.flickr.com/services/rest?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                IsLoadingDiscoveryStream = false;

                if (response.StatusCode != HttpStatusCode.OK)
                {
                    HandleHTTPException(response);
                    return;
                }

                string jsonString = reader.ReadToEnd();
                if (!TryHandleResponseException(jsonString, () => { GetDiscoveryStreamAsync(parameters); }))
                    return;


                GetDiscoveryStreamEventArgs args = new GetDiscoveryStreamEventArgs();
                args.Response = jsonString;
                DiscoveryStreamReturned.DispatchEvent(this, args);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreGroupExtension.cs
public async void GetGroupInfoAsync(string groupId, Dictionary<string, string> parameters = null)
        {
            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            Dictionary<string, string> paramDict = new Dictionary<string, string>();
            paramDict["method"] = "flickr.groups.getInfo";
            paramDict["format"] = "json";
            paramDict["nojsoncallback"] = "1";
            paramDict["oauth_consumer_key"] = consumerKey;
            paramDict["oauth_nonce"] = nonce;
            paramDict["oauth_signature_method"] = "HMAC-SHA1";
            paramDict["oauth_timestamp"] = timestamp;
            paramDict["oauth_token"] = AccessToken;
            paramDict["oauth_version"] = "1.0";
            paramDict["group_id"] = groupId;

            if (parameters != null)
            {
                foreach (var entry in parameters)
                {
                    paramDict[entry.Key] = entry.Value;
                }
            }

            string paramString = GenerateParamString(paramDict);
            string signature = GenerateSignature("GET", AccessTokenSecret, "http://api.flickr.com/services/rest", paramString);
            string requestUrl = "http://api.flickr.com/services/rest?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                if (response.StatusCode != HttpStatusCode.OK)
                {
                    HandleHTTPException(response);
                    return;
                }

                string jsonString = reader.ReadToEnd();
                if (!TryHandleResponseException(jsonString, () => { GetGroupInfoAsync(groupId, parameters); }))
                    return;

                GetGroupInfoEventArgs evt = new GetGroupInfoEventArgs();
                evt.GroupId = groupId;
                evt.Response = jsonString;
                GroupInfoReturned.DispatchEvent(this, evt);

            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreGroupExtension.cs
public async void GetGroupPhotosAsync(string groupId, Dictionary<string, string> parameters = null)
        {
            if (groupPhotoFetchingQueue.Contains(groupId))
                return;

            groupPhotoFetchingQueue.Add(groupId);

            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            Dictionary<string, string> paramDict = new Dictionary<string, string>();
            paramDict["method"] = "flickr.groups.pools.getPhotos";
            paramDict["format"] = "json";
            paramDict["nojsoncallback"] = "1";
            paramDict["oauth_consumer_key"] = consumerKey;
            paramDict["oauth_nonce"] = nonce;
            paramDict["oauth_signature_method"] = "HMAC-SHA1";
            paramDict["oauth_timestamp"] = timestamp;
            paramDict["oauth_token"] = AccessToken;
            paramDict["oauth_version"] = "1.0";
            paramDict["group_id"] = groupId;
            
            if (parameters != null)
            {
                foreach (var entry in parameters)
                {
                    paramDict[entry.Key] = entry.Value;
                }
            }

            paramDict["extras"] = UrlHelper.Encode(commonExtraParameters);

            string paramString = GenerateParamString(paramDict);
            string signature = GenerateSignature("GET", AccessTokenSecret, "http://api.flickr.com/services/rest", paramString);
            string requestUrl = "http://api.flickr.com/services/rest?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                groupPhotoFetchingQueue.Remove(groupId);

                if (response.StatusCode != HttpStatusCode.OK)
                {
                    HandleHTTPException(response);
                    return;
                }

                string jsonString = reader.ReadToEnd();
                if (!TryHandleResponseException(jsonString, () => { GetGroupPhotosAsync(groupId, parameters); }))
                    return;

                GetGroupPhotosEventArgs args = new GetGroupPhotosEventArgs();
                args.GroupId = groupId;
                args.Response = jsonString;
                GroupPhotoReturned.DispatchEvent(this, args);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreOAuthExtension.cs
public async void GetRequestTokenAsync()
        {
            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            // Encode the request string
            string paramString = "oauth_callback=" + UrlHelper.Encode(callbackUrl);
            paramString += "&oauth_consumer_key=" + consumerKey;
            paramString += "&oauth_nonce=" + nonce;
            paramString += "&oauth_signature_method=HMAC-SHA1";
            paramString += "&oauth_timestamp=" + timestamp;
            paramString += "&oauth_version=1.0";

            string signature = GenerateSignature("GET", null, "http://www.flickr.com/services/oauth/request_token", paramString);

            // Create the http request
            string requestUrl = "http://www.flickr.com/services/oauth/request_token?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                string jsonString = reader.ReadToEnd();
                System.Diagnostics.Debug.WriteLine(jsonString);
                // Dispatch an event
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    if (jsonString.StartsWith("oauth_callback_confirmed=true"))
                    {
                        // Parse out the request token and secret
                        string[] parts = jsonString.Split('&');
                        string tokenString = parts[1];
                        RequestToken = tokenString.Split('=')[1];

                        string secretString = parts[2];
                        RequestTokenSecret = secretString.Split('=')[1];
                            
                        // Dispatch event
                        RequestTokenGranted(this, null);
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreOAuthExtension.cs
public async void GetAccessTokenAsync()
        {
            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            // Encode the request string
            string paramString = "oauth_consumer_key=" + consumerKey;
            paramString += "&oauth_nonce=" + nonce;
            paramString += "&oauth_signature_method=HMAC-SHA1";
            paramString += "&oauth_timestamp=" + timestamp;
            paramString += "&oauth_token=" + RequestToken;
            paramString += "&oauth_verifier=" + RequestTokenVerifier;
            paramString += "&oauth_version=1.0";

            string signature = GenerateSignature("GET", RequestTokenSecret, "http://www.flickr.com/services/oauth/access_token", paramString);

            // Create the http request
            string requestUrl = "http://www.flickr.com/services/oauth/access_token?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                string jsonString = reader.ReadToEnd();
                System.Diagnostics.Debug.WriteLine(jsonString);
                // Dispatch an event
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    if (jsonString.StartsWith("fullname="))
                    {
                        var dict = jsonString.ParseQueryString();
                        AccessToken = dict["oauth_token"];
                        AccessTokenSecret = dict["oauth_token_secret"];

                        // Store access token
                        this.SaveAccessCredentials();

                        // Construct current user object
                        User currentUser = new User();
                        currentUser.ResourceId = dict["user_nsid"];
                        currentUser.Name = dict["fullname"];
                        currentUser.UserName = dict["username"];

                        Cinderella.Cinderella.CinderellaCore.UserCache[currentUser.ResourceId] = currentUser;
                        Cinderella.Cinderella.CinderellaCore.CurrentUser = currentUser;
                        Cinderella.Cinderella.CinderellaCore.SaveCurrentUserInfo();

                        // Dispatch a login-success event
                        AccessTokenGranted(this, null);
                    }
                }
                else
                {
                    AccessTokenFailed(this, null);
                }
            }

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCorePhotoExtension.cs
public async void GetEXIFAsync(string photoId)
        {
            if (IsGettingEXIFInfo(photoId))
                return;

            exifQueue.Add(photoId);

            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            Dictionary<string, string> paramDict = new Dictionary<string, string>();
            paramDict["method"] = "flickr.photos.getExif";
            paramDict["format"] = "json";
            paramDict["nojsoncallback"] = "1";
            paramDict["oauth_consumer_key"] = consumerKey;
            paramDict["oauth_nonce"] = nonce;
            paramDict["oauth_signature_method"] = "HMAC-SHA1";
            paramDict["oauth_timestamp"] = timestamp;
            paramDict["oauth_token"] = AccessToken;
            paramDict["oauth_version"] = "1.0";
            paramDict["photo_id"] = photoId;
            paramDict["extras"] = UrlHelper.Encode(commonExtraParameters);

            string paramString = GenerateParamString(paramDict);
            string signature = GenerateSignature("GET", AccessTokenSecret, "http://api.flickr.com/services/rest", paramString);
            string requestUrl = "http://api.flickr.com/services/rest?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                exifQueue.Remove(photoId);

                GetEXIFExceptionEventArgs exceptionArgs = null;
                if (response.StatusCode != HttpStatusCode.OK)
                {
                    exceptionArgs = new GetEXIFExceptionEventArgs();
                    exceptionArgs.PhotoId = photoId;
                    EXIFException.DispatchEvent(this, exceptionArgs);

                    return;
                }

                string jsonString = reader.ReadToEnd();
                if (!IsResponseSuccess(jsonString))
                {
                    exceptionArgs = new GetEXIFExceptionEventArgs();
                    exceptionArgs.PhotoId = photoId;
                    EXIFException.DispatchEvent(this, exceptionArgs);

                    return;
                }


                GetEXIFEventArgs args = new GetEXIFEventArgs();
                args.PhotoId = photoId;
                args.Response = jsonString;
                EXIFReturned.DispatchEvent(this, args);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreSearchExtension.cs
public async void SearchPhotoAsync(string searchSessionId, string query = null, string tags = null, Dictionary<string, string> parameters = null)
        {
            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            Dictionary<string, string> paramDict = new Dictionary<string, string>();
            paramDict["method"] = "flickr.photos.search";
            paramDict["format"] = "json";
            paramDict["nojsoncallback"] = "1";
            paramDict["oauth_consumer_key"] = consumerKey;
            paramDict["oauth_nonce"] = nonce;
            paramDict["oauth_signature_method"] = "HMAC-SHA1";
            paramDict["oauth_timestamp"] = timestamp;
            paramDict["oauth_token"] = AccessToken;
            paramDict["oauth_version"] = "1.0";
            paramDict["extras"] = UrlHelper.Encode(commonExtraParameters);

            if (query != null)
                paramDict["text"] = UrlHelper.Encode(query);

            if (tags != null)
                paramDict["tags"] = UrlHelper.Encode(tags);

            if (parameters != null)
            {
                foreach (var entry in parameters)
                {
                    paramDict[entry.Key] = entry.Value;
                }
            }

            string paramString = GenerateParamString(paramDict);
            string signature = GenerateSignature("GET", AccessTokenSecret, "http://api.flickr.com/services/rest", paramString);
            string requestUrl = "http://api.flickr.com/services/rest?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                if (response.StatusCode != HttpStatusCode.OK)
                {
                    HandleHTTPException(response);
                    return;
                }

                string jsonString = reader.ReadToEnd();
                if (!TryHandleResponseException(jsonString, () => { SearchPhotoAsync(searchSessionId, query, tags, parameters); }))
                    return;

                PhotoSearchEventArgs evt = new PhotoSearchEventArgs();
                evt.SearchSessionId = searchSessionId;
                evt.Response = jsonString;
                PhotoSearchReturned.DispatchEvent(this, evt);

            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreSearchExtension.cs
public async void SearchGroupsAsync(string searchSessionId, string query = null, Dictionary<string, string> parameters = null)
        {
            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            Dictionary<string, string> paramDict = new Dictionary<string, string>();
            paramDict["method"] = "flickr.groups.search";
            paramDict["format"] = "json";
            paramDict["nojsoncallback"] = "1";
            paramDict["oauth_consumer_key"] = consumerKey;
            paramDict["oauth_nonce"] = nonce;
            paramDict["oauth_signature_method"] = "HMAC-SHA1";
            paramDict["oauth_timestamp"] = timestamp;
            paramDict["oauth_token"] = AccessToken;
            paramDict["oauth_version"] = "1.0";
            paramDict["text"] = UrlHelper.Encode(query);

            if (parameters != null)
            {
                foreach (var entry in parameters)
                {
                    paramDict[entry.Key] = entry.Value;
                }
            }

            string paramString = GenerateParamString(paramDict);
            string signature = GenerateSignature("GET", AccessTokenSecret, "http://api.flickr.com/services/rest", paramString);
            string requestUrl = "http://api.flickr.com/services/rest?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                if (response.StatusCode != HttpStatusCode.OK)
                {
                    HandleHTTPException(response);
                    return;
                }

                string jsonString = reader.ReadToEnd();
                if (!TryHandleResponseException(jsonString, () => { SearchGroupsAsync(searchSessionId, query, parameters); }))
                    return;

                GroupSearchEventArgs evt = new GroupSearchEventArgs();
                evt.SearchSessionId = searchSessionId;
                evt.Response = jsonString;
                GroupSearchReturned.DispatchEvent(this, evt);

            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCorePhotoSetExtension.cs
public async void GetPhotoSetListAsync(string userId)
        {
            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            string paramString = "oauth_nonce=" + nonce;
            paramString += "&oauth_consumer_key=" + consumerKey;
            paramString += "&oauth_signature_method=HMAC-SHA1";
            paramString += "&oauth_timestamp=" + timestamp;
            paramString += "&oauth_version=1.0";
            paramString += "&oauth_token=" + AccessToken;
            paramString += "&format=json&nojsoncallback=1";
            paramString += "&user_id=" + userId;
            paramString += "&method=flickr.photosets.getList";

            string signature = GenerateSignature("GET", AccessTokenSecret, "http://api.flickr.com/services/rest/", paramString);
            string requestUrl = "http://api.flickr.com/services/rest/?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                if (response.StatusCode != HttpStatusCode.OK)
                {
                    HandleHTTPException(response);
                    return;
                }

                string jsonString = reader.ReadToEnd();
                if (!TryHandleResponseException(jsonString, () => { GetPhotoSetListAsync(userId); }))
                    return;

                PhotoSetListEventArgs evt = new PhotoSetListEventArgs();
                evt.UserId = userId;
                evt.Response = jsonString;
                PhotoSetListReturned.DispatchEvent(this, evt);
            }

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCorePhotoSetExtension.cs
public async void GetPhotoSetPhotosAsync(string setId, Dictionary<string, string> parameters = null)
        {
            if (setPhotoFetchingQueue.Contains(setId))
                return;

            setPhotoFetchingQueue.Add(setId);

            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            Dictionary<string, string> paramDict = new Dictionary<string, string>();
            paramDict["method"] = "flickr.photosets.getPhotos";
            paramDict["format"] = "json";
            paramDict["nojsoncallback"] = "1";
            paramDict["oauth_consumer_key"] = consumerKey;
            paramDict["oauth_nonce"] = nonce;
            paramDict["oauth_signature_method"] = "HMAC-SHA1";
            paramDict["oauth_timestamp"] = timestamp;
            paramDict["oauth_token"] = AccessToken;
            paramDict["oauth_version"] = "1.0";
            paramDict["photoset_id"] = setId;

            if (parameters != null)
            {
                foreach (var entry in parameters)
                {
                    paramDict[entry.Key] = entry.Value;
                }
            }

            paramDict["extras"] = UrlHelper.Encode(commonExtraParameters);

            string paramString = GenerateParamString(paramDict);
            string signature = GenerateSignature("GET", AccessTokenSecret, "http://api.flickr.com/services/rest", paramString);
            string requestUrl = "http://api.flickr.com/services/rest?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                setPhotoFetchingQueue.Remove(setId);

                if (response.StatusCode != HttpStatusCode.OK)
                {
                    HandleHTTPException(response);
                    return;
                }

                string jsonString = reader.ReadToEnd();
                if (!TryHandleResponseException(jsonString, () => { GetPhotoSetPhotosAsync(setId, parameters); }))
                    return;

                GetPhotoSetPhotosEventArgs args = new GetPhotoSetPhotosEventArgs();
                args.PhotoSetId = setId;
                args.Response = jsonString;
                PhotoSetPhotosReturned.DispatchEvent(this, args);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreTagExtension.cs
public async void GetPopularTagListAsync()
        {
            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            string paramString = "oauth_nonce=" + nonce;
            paramString += "&oauth_consumer_key=" + consumerKey;
            paramString += "&oauth_signature_method=HMAC-SHA1";
            paramString += "&oauth_timestamp=" + timestamp;
            paramString += "&oauth_version=1.0";
            paramString += "&oauth_token=" + AccessToken;
            paramString += "&format=json&nojsoncallback=1";
            paramString += "&method=flickr.tags.getHotList";

            string signature = GenerateSignature("GET", AccessTokenSecret, "http://api.flickr.com/services/rest/", paramString);
            string requestUrl = "http://api.flickr.com/services/rest/?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                if (response.StatusCode != HttpStatusCode.OK)
                {
                    HandleHTTPException(response);
                    return;
                }

                string jsonString = reader.ReadToEnd();
                if (!IsResponseSuccess(jsonString))
                    return;

                GetPopularTagListEventArgs args = new GetPopularTagListEventArgs();
                args.Response = jsonString;
                PopularTagListReturned.DispatchEvent(this, args);
            }

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreUploadExtension.cs
public async void UploadPhoto(string sessionId, string fileName, Stream stream, Dictionary<string, string> parameters = null)
        {
            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            Dictionary<string, string> paramDict = new Dictionary<string, string>();
            paramDict["oauth_consumer_key"] = consumerKey;
            paramDict["oauth_nonce"] = nonce;
            paramDict["oauth_signature_method"] = "HMAC-SHA1";
            paramDict["oauth_timestamp"] = timestamp;
            paramDict["oauth_token"] = AccessToken;
            paramDict["oauth_version"] = "1.0";

            if (parameters != null)
            {
                foreach (var entry in parameters)
                {
                    paramDict[entry.Key] = entry.Value;
                }
            }

            string signature = OAuthCalculateSignature("POST", "http://api.flickr.com/services/upload/", paramDict, AccessTokenSecret);

            paramDict["oauth_signature"] = signature;

            HttpWebResponse response = await UploadDataAsync(fileName, stream, paramDict);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                if (response.StatusCode != HttpStatusCode.OK)
                {
                    HandleHTTPException(response);
                    return;
                }

                string xmlString = reader.ReadToEnd();
                XDocument xmlDoc = XDocument.Parse(xmlString);
                if (xmlDoc.Element("rsp").Attribute("stat").Value == "fail")
                {
                    if (PhotoUploadError != null)
                    {
                        var errorEvt = new UploadPhotoErrorEventArgs();
                        errorEvt.SessionId = sessionId;
                        PhotoUploadError(this, errorEvt);
                    }
                    return;
                }
                else
                {
                    string photoId = (from x in XDocument.Parse(xmlString).Element("rsp").Descendants().ToList()
                                                 select x).First().Value;

                    if (PhotoUploaded != null)
                    {
                        var evt = new UploadPhotoEventArgs();
                        evt.SessionId = sessionId;
                        evt.PhotoId = photoId;

                        PhotoUploaded(this, evt);
                    }


                }
                
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreUploadExtension.cs
private async Task<HttpWebResponse> UploadDataAsync(string fileName, Stream imageStream, Dictionary<string, string> parameters)
        {
            string boundary = "FLICKR_MIME_" + DateTime.Now.ToString("yyyyMMddhhmmss", System.Globalization.DateTimeFormatInfo.InvariantInfo);

            string authHeader = AnacondaCore.OAuthCalculateAuthHeader(parameters);
            byte[] dataBuffer = CreateUploadData(imageStream, fileName, parameters, boundary);

            HttpWebRequest req = (HttpWebRequest)HttpWebRequest.Create(new Uri("http://api.flickr.com/services/upload/"));
            req.Method = "POST";
            req.ContentType = "multipart/form-data; boundary=" + boundary;           
            if (!String.IsNullOrEmpty(authHeader))
            {
                req.Headers["Authorization"] = authHeader;
            }

            req.ContentLength = dataBuffer.Length;

            using (Stream reqStream = await req.GetRequestStreamAsync())
            {
                int bufferSize = 32 * 1024;
                if (dataBuffer.Length / 100 > bufferSize) bufferSize = bufferSize * 2;

                int uploadedSoFar = 0;

                while (uploadedSoFar < dataBuffer.Length)
                {
                    reqStream.Write(dataBuffer, uploadedSoFar, Math.Min(bufferSize, dataBuffer.Length - uploadedSoFar));
                    uploadedSoFar += bufferSize;

                    if (PhotoUploadProgress != null)
                    {
                        UploadProgressEventArgs args = new UploadProgressEventArgs(uploadedSoFar, dataBuffer.Length);
                        PhotoUploadProgress(this, args);
                    }
                }
                reqStream.Close();
            }

            // Invoke the API
            try
            {
                HttpWebResponse response = (HttpWebResponse)await req.GetResponseAsync();
                return response;
            }
            catch (Exception e)
            {
                var we = e.InnerException as WebException;
                if (we != null)
                {
                    var resp = we.Response as HttpWebResponse;
                    var code = resp.StatusCode;
                    Debug.WriteLine("Status:{0}", we.Status);

                    return resp;
                }
                else
                    throw;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreUserExtension.cs
public async void GetPhotoStreamAsync(string userId, Dictionary<string, string> parameters = null)
        {
            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            Dictionary<string, string> paramDict = new Dictionary<string, string>();
            paramDict["method"] = "flickr.people.getPhotos";
            paramDict["format"] = "json";
            paramDict["nojsoncallback"] = "1";
            paramDict["oauth_consumer_key"] = consumerKey;
            paramDict["oauth_nonce"] = nonce;
            paramDict["oauth_signature_method"] = "HMAC-SHA1";
            paramDict["oauth_timestamp"] = timestamp;
            paramDict["oauth_token"] = AccessToken;
            paramDict["oauth_version"] = "1.0";

            if (parameters != null)
            {
                foreach (var entry in parameters)
                {
                    paramDict[entry.Key] = entry.Value;
                }
            }

            if (userId == Cinderella.Cinderella.CinderellaCore.CurrentUser.ResourceId)
                paramDict["user_id"] = "me";
            else
                paramDict["user_id"] = Cinderella.Cinderella.CinderellaCore.CurrentUser.ResourceId;

            paramDict["extras"] = UrlHelper.Encode(commonExtraParameters);

            User user = null;
            if (Cinderella.Cinderella.CinderellaCore.UserCache.ContainsKey(userId))
            {
                user = Cinderella.Cinderella.CinderellaCore.UserCache[userId];
                user.IsLoadingPhotoStream = true;
            }

            string paramString = GenerateParamString(paramDict);
            string signature = GenerateSignature("GET", AccessTokenSecret, "http://api.flickr.com/services/rest", paramString);
            string requestUrl = "http://api.flickr.com/services/rest?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                if (user != null)
                {
                    user.IsLoadingPhotoStream = false;
                }

                if (response.StatusCode != HttpStatusCode.OK)
                {
                    HandleHTTPException(response);
                    return;
                }

                string jsonString = reader.ReadToEnd();
                if (!TryHandleResponseException(jsonString, () => { GetPhotoStreamAsync(userId, parameters); }))
                    return;

                GetPhotoStreamEventArgs args = new GetPhotoStreamEventArgs();
                args.UserId = userId;
                args.Response = jsonString;
                PhotoStreamReturned.DispatchEvent(this, args);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\powerytg+indulged-flickr\powerytg-indulged-flickr-545f7ab\Indulged\Indulged.API\Anaconda\AnacondaCoreUserExtension.cs
public async void GetGroupListAsync(string userId, Dictionary<string, string> parameters = null)
        {
            if (groupListFetchingQueue.Contains(userId))
                return;

            groupListFetchingQueue.Add(userId);

            string timestamp = DateTimeUtils.GetTimestamp();
            string nonce = Guid.NewGuid().ToString().Replace("-", null);

            Dictionary<string, string> paramDict = new Dictionary<string, string>();
            paramDict["method"] = "flickr.people.getGroups";
            paramDict["format"] = "json";
            paramDict["nojsoncallback"] = "1";
            paramDict["oauth_consumer_key"] = consumerKey;
            paramDict["oauth_nonce"] = nonce;
            paramDict["oauth_signature_method"] = "HMAC-SHA1";
            paramDict["oauth_timestamp"] = timestamp;
            paramDict["oauth_token"] = AccessToken;
            paramDict["oauth_version"] = "1.0";

            if (parameters != null)
            {
                foreach (var entry in parameters)
                {
                    paramDict[entry.Key] = entry.Value;
                }
            }

            paramDict["user_id"] = userId;
            paramDict["extras"] = UrlHelper.Encode("privacy,throttle,restrictions");

            string paramString = GenerateParamString(paramDict);
            string signature = GenerateSignature("GET", AccessTokenSecret, "http://api.flickr.com/services/rest", paramString);
            string requestUrl = "http://api.flickr.com/services/rest?" + paramString + "&oauth_signature=" + signature;
            HttpWebResponse response = await DispatchRequest("GET", requestUrl, null);
            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
            {
                groupListFetchingQueue.Remove(userId);
                if (response.StatusCode != HttpStatusCode.OK)
                {
                    HandleHTTPException(response);
                    return;
                }

                string jsonString = reader.ReadToEnd();
                if (!TryHandleResponseException(jsonString, () => { GetGroupListAsync(userId, parameters); }))
                    return;

                GetGroupListEventArgs args = new GetGroupListEventArgs();
                args.UserId = userId;
                args.Response = jsonString;
                GroupListReturned.DispatchEvent(this, args);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\qdfeed\qdfeed_ad3fd8792e56\QDFeedParser.Mobile (WP8)\..\QDFeedParser (NET45)\BaseFeedFactory.async.cs
public async Task<IFeed> CreateFeedAsync(Uri feeduri)
        {
            var feedXml = await DownloadXmlAsync(feeduri);

            var feedtype = CheckFeedType(feedXml);
            return CreateFeed(feeduri, feedtype, feedXml);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\qdfeed\qdfeed_ad3fd8792e56\QDFeedParser.Mobile (WP8)\..\QDFeedParser (NET45)\BaseFeedFactory.async.cs
public async Task<IFeed> CreateFeedAsync(Uri feeduri, FeedType feedtype)
        {
            var feedXml = await DownloadXmlAsync(feeduri);

            return CreateFeed(feeduri, feedtype, feedXml);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\qdfeed\qdfeed_ad3fd8792e56\QDFeedParser.Mobile (WP8)\..\QDFeedParser (NET45)\BaseFeedFactory.async.cs
public async Task<FeedType> CheckFeedTypeAsync(Uri feeduri)
        {
            var feedXml = await DownloadXmlAsync(feeduri);
            return CheckFeedType(feedXml);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\qdfeed\qdfeed_ad3fd8792e56\QDFeedParser.Mobile (WP8)\..\QDFeedParser (NET45)\HttpFeedFactory.async.cs
public override async Task<bool> PingFeedAsync(Uri feeduri)
        {
            try
            {
                var request = WebRequest.Create(feeduri) as HttpWebRequest;
                var response = await request.GetResponseAsync() as HttpWebResponse;

                return IsValidXmlReponse(response);
            }
            catch (WebException)
            {
                return false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\qdfeed\qdfeed_ad3fd8792e56\QDFeedParser.Mobile (WP8)\..\QDFeedParser (NET45)\HttpFeedFactory.async.cs
public override async Task<string> DownloadXmlAsync(Uri feeduri)
        {
            try
            {
                var request = WebRequest.Create(feeduri) as HttpWebRequest;

                using (var response = await request.GetResponseAsync() as HttpWebResponse)
                {
                    return GetResponseXml(response);
                }
            }
            /* Usually this means we encountered a 404 / 501 error of some sort. */
            catch (WebException ex)
            {
                throw new MissingFeedException(string.Format("Was unable to open web-hosted file {0}", feeduri.LocalPath), ex);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\RallySoftware+Flowdock.NET\RallySoftware-Flowdock.NET-b80137d\Flowdock\Flowdock\ViewModels\LobbyViewModel.cs
private async void GetFlows() {
            _progressService.Show("");
            try {
                IEnumerable<Flow> flows = await _context.GetCurrentFlows();

                if (flows != null) {
                    Flows = new ObservableCollection<LobbyFlowViewModel>(flows
                        .Where(f => f.Open)// && f.Name.Contains("Testing"))
                        .Select(f => new LobbyFlowViewModel(f, _navigationManager))
                        //.Take(1)
                    );
                }
            } finally {
                _progressService.Hide();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\RallySoftware+Flowdock.NET\RallySoftware-Flowdock.NET-b80137d\Flowdock\Flowdock\ViewModels\FlowViewModel.cs
private async void LoadFlow() {
            _progressService.Show("");

            try {
                // load the flow to grab the users
                Flow flow = await _context.GetFlow(FlowId);
                Users = new ObservableCollection<User>(flow.Users);

                IEnumerable<Message> messages = await _context.GetMessagesForFlow(FlowId);

                if (messages != null) {
                    Messages = new ObservableCollection<MessageViewModel>(
                        messages.Where(m => m.Displayable).Select(m => new MessageViewModel(m, FlowId, GetThreadColor(m), _navigationManager))
                    );
                }

                TrimMessages();

                AssociateAvatarsToMessages();
                AssignThreadStartersTheirColor();

                StartStream();
            } finally {
                _progressService.Hide();
                NotifyOfPropertyChange(() => CanSendMessageToFlow);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\RallySoftware+Flowdock.NET\RallySoftware-Flowdock.NET-b80137d\Flowdock\Flowdock\Commands\LoginCommand.cs
public async void Execute(object parameter) {
            if (CanExecute(null)) {
                var loginResult = await _context.Login(_source.Username, _source.Password);

                if (LoggedIn != null) {
                    LoggedIn(this, new LoggedInEventArgs(loginResult));
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\RallySoftware+Flowdock.NET\RallySoftware-Flowdock.NET-b80137d\Flowdock\Flowdock\ViewModels\MessageThreadViewModel.cs
private async void LoadMessageThread() {
            _progressService.Show("");

            try {
                Flow flow = await _context.GetFlow(FlowId);
                FlowName = flow.Name;
                
                IEnumerable<Message> messages = await _context.GetMessagesForThread(FlowId, ThreadId);

                if (messages != null) {
                    Messages = new ObservableCollection<MessageViewModel>(
                        messages.Where(m => m.Displayable).Select(m => new MessageViewModel(m, FlowId, null, _navigationManager))
                    );
                }
            } finally {
                _progressService.Hide();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\RallySoftware+Flowdock.NET\RallySoftware-Flowdock.NET-b80137d\Flowdock\Flowdock\ViewModels\UsersViewModel.cs
public async void Activate() {
            _progressService.Show("");

            try {
                Flow flow = await _context.GetFlow(FlowId);
                FlowName = flow.Name;
                OnlineUsers = new ObservableCollection<User>(flow.Users.OrderBy((u) => u.Nick)); // TODO: separate online and offline users
            } finally {
                _progressService.Hide();

                if (Activated != null) {
                    Activated(this, new ActivationEventArgs { WasInitialized = true });
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\ramhemasri+Pusher\ramhemasri-Pusher-b8de89e\Pusher.KhanApi\Models\LocalStorage.cs
public static async Task<VideoItem> GetLastViewedAsync()
        {
#if !WINDOWS_PHONE
            var folder = ApplicationData.Current.LocalFolder;
            if (await FileExists(LAST_VIDEO_FILENAME))
            {
                return null;
            }

            var readtask = await folder.OpenStreamForReadAsync(LAST_VIDEO_FILENAME);
                        
            using (var stream = readtask)
            {
                DataContractSerializer serializer = new DataContractSerializer(typeof(VideoItem));
                var deserializedVid = serializer.ReadObject(stream) as VideoItem;
                return deserializedVid;
            }
#else
            using (var store = IsolatedStorageFile.GetUserStoreForApplication())
            {
                if (!store.FileExists(LAST_VIDEO_FILENAME))
                {
                    return null;
                }

                using (var stream = store.OpenFile(LAST_VIDEO_FILENAME, FileMode.Open))
                {
                    DataContractSerializer serializer = new DataContractSerializer(typeof(VideoItem));
                    var deserializedVid = serializer.ReadObject(stream) as VideoItem;
                    return deserializedVid;
                }
            }
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\realworldstocks\realworldstocks_ccd229479a49\CodeSharingSample\RealWorldStocks.UI.Phone\Views\HomeView.xaml.cs
protected override async void OnNavigatedTo(NavigationEventArgs e)
        {
            base.OnNavigatedTo(e);
            await ViewModel.LoadAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\realworldstocks\realworldstocks_ccd229479a49\CodeSharingSample\RealWorldStocks.UI.Phone\ViewModels\HomeViewModel.cs
public override async Task LoadAsync()
        {
            if (IsBusy)
                return;

            IsBusy = true;
            await WatchList.InitializeAsync();

            WatchListItems.Repopulate(await WatchList.Current.RefreshSnapshotsAsync());
            News.Repopulate(await WatchList.Current.RefreshNewsAsync());
            IsBusy = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\MessageExchange\RequestAsyncExtensions.cs
public static async Task<IResponse> GetResponseAsync(this IRequest request)
        {
            if (request is Request)
            {
                return new Response((HttpWebResponse)await ((Request)request).internalRequest.GetResponseAsync());
            }

            return await Task<IResponse>.Factory.FromAsync(request.BeginGetResponse, request.EndGetResponse, null);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\MessageExchange\RequestAsyncExtensions.cs
public static async Task<Stream> GetRequestStreamAsync(this IRequest request)
        {
            if (request is Request)
            {
                return await ((Request) request).internalRequest.GetRequestStreamAsync();
            }

            return await Task<Stream>.Factory.FromAsync(request.BeginGetRequestStream, request.EndGetRequestStream, null);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task PostAsync(string url)
        {
            await this.PostAsync(url, new Parameters());
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task PostAsync<T>(string url, T parameter)
        {
            var parameters = new Parameters { { string.Empty, parameter } };
            await this.PostAsync(url, parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task PostAsync(string url, Parameters parameters)
        {
            await this.FetchAsync(Method.Post, url, parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task GetAsync(string url)
        {
            await this.GetAsync(url, new Parameters());
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task GetAsync<T>(string url, T parameter)
        {
            var parameters = new Parameters { { string.Empty, parameter } };
            await this.GetAsync(url, parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task GetAsync(string url, Parameters parameters)
        {
            await this.FetchAsync(Method.Get, url, parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task PutAsync(string url)
        {
            await this.PutAsync(url, new Parameters());
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task PutAsync<T>(string url, T parameter)
        {
            var parameters = new Parameters { { string.Empty, parameter } };
            await this.PutAsync(url, parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task PutAsync(string url, Parameters parameters)
        {
            await this.FetchAsync(Method.Put, url, parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task DeleteAsync(string url)
        {
            await this.DeleteAsync(url, new Parameters());
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task DeleteAsync<T>(string url, T parameter)
        {
            var parameters = new Parameters { { string.Empty, parameter } };
            await this.DeleteAsync(url, parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task DeleteAsync(string url, Parameters parameters)
        {
            await this.FetchAsync(Method.Delete, url, parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task<IList<T>> PostListAsync<T>(string url)
        {
            return await this.PostListAsync<T>(url, new Parameters());
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task<IList<T>> PostListAsync<T, S>(string url, S parameter)
        {
            var parameters = new Parameters { { string.Empty, parameter } };
            return await this.PostListAsync<T>(url, parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task<IList<T>> PostListAsync<T>(string url, Parameters parameters)
        {
            return await this.FetchListAsync<T>(Method.Post, url, parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task<IList<T>> GetListAsync<T>(string url)
        {
            return await this.GetListAsync<T>(url, new Parameters());
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task<IList<T>> GetListAsync<T, S>(string url, S parameter)
        {
            var parameters = new Parameters { { string.Empty, parameter } };
            return await this.GetListAsync<T>(url, parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task<IList<T>> GetListAsync<T>(string url, Parameters parameters)
        {
            return await this.FetchListAsync<T>(Method.Get, url, parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task<IList<T>> PutListAsync<T>(string url)
        {
            return await this.PutListAsync<T>(url, new Parameters());
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task<IList<T>> PutListAsync<T, S>(string url, S parameter)
        {
            var parameters = new Parameters { { string.Empty, parameter } };
            return await this.PutListAsync<T>(url, parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task<IList<T>> PutListAsync<T>(string url, Parameters parameters)
        {
            return await this.FetchListAsync<T>(Method.Put, url, parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task<IList<T>> DeleteListAsync<T>(string url)
        {
            return await this.DeleteListAsync<T>(url, new Parameters());
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task<IList<T>> DeleteListAsync<T, S>(string url, S parameter)
        {
            var parameters = new Parameters { { string.Empty, parameter } };
            return await this.DeleteListAsync<T>(url, parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task<IList<T>> DeleteListAsync<T>(string url, Parameters parameters)
        {
            return await this.FetchListAsync<T>(Method.Delete, url, parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task<T> PostAsync<T>(string url)
        {
            return await this.PostAsync<T>(url, new Parameters());
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task<T> PostAsync<T, S>(string url, S parameter)
        {
            var parameters = new Parameters { { string.Empty, parameter } };
            return await this.PostAsync<T>(url, parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task<T> PostAsync<T>(string url, Parameters parameters)
        {
            return await this.FetchAsync<T>(Method.Post, url, parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task<T> GetAsync<T>(string url)
        {
            return await this.GetAsync<T>(url, new Parameters());
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task<T> GetAsync<T, S>(string url, S parameter)
        {
            var parameters = new Parameters { { string.Empty, parameter } };
            return await this.GetAsync<T>(url, parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task<T> GetAsync<T>(string url, Parameters parameters)
        {
            return await this.FetchAsync<T>(Method.Get, url, parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task<T> PutAsync<T>(string url)
        {
            return await this.PutAsync<T>(url, new Parameters());
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task<T> PutAsync<T, S>(string url, S parameter)
        {
            var parameters = new Parameters { { string.Empty, parameter } };
            return await this.PutAsync<T>(url, parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task<T> PutAsync<T>(string url, Parameters parameters)
        {
            return await this.FetchAsync<T>(Method.Put, url, parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task<T> DeleteAsync<T>(string url)
        {
            return await this.DeleteAsync<T>(url, new Parameters());
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task<T> DeleteAsync<T, S>(string url, S parameter)
        {
            var parameters = new Parameters { { string.Empty, parameter } };
            return await this.DeleteAsync<T>(url, parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
protected async Task<T> DeleteAsync<T>(string url, Parameters parameters)
        {
            return await this.FetchAsync<T>(Method.Delete, url, parameters);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
private async Task<IList<T>> FetchListAsync<T>(Method method, string url, Parameters parameters)
        {

            string responseString;

            using (var reader = new StreamReader(await this.FetchStreamAsync(method, url, parameters)))
            {
                responseString = reader.ReadToEnd();
            }

            var temporary = DeserializationContext.Value.Deserialize<T[]>(this.ContentType, responseString);
            return new List<T>(temporary);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
private async Task<T> FetchAsync<T>(Method method, string url, Parameters parameters)
        {

            string responseString;

            using (var reader = new StreamReader(await this.FetchStreamAsync(method, url, parameters)))
            {
                responseString = reader.ReadToEnd();
            }

            var temporary = DeserializationContext.Value.Deserialize<T>(this.ContentType, responseString);
            return temporary;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
private async Task<Stream> FetchStreamAsync(Method method, string url, Parameters parameters)
        {
            try
            {
                var request = await this.CreateRequestAsync(method, url, parameters);
                var response = await request.GetResponseAsync();
                return response.GetResponseStream();
            }
            catch (WebException ex)
            {
                throw CreateRestException(ex);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
private async Task FetchAsync(Method method, string url, Parameters parameters)
        {
            try
            {
                var request = await this.CreateRequestAsync(method, url, parameters);
                var response = await request.GetResponseAsync();
            }
            catch (WebException ex)
            {
                throw CreateRestException(ex);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
private async Task<IRequest> CreateRequestAsync(Method method, string url, Parameters parameters)
        {
            byte[] byteArray;
            var request = this.CreateRequest(method, url, parameters, out byteArray);

            if (byteArray != null)
            {
                await WriteBodyAsync(request, byteArray);
            }

            return request;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\restafari\main\Restafari.WindowsPhone\..\Restafari\RestClientBase.async.await.cs
private async Task WriteBodyAsync(IRequest request, byte[] byteArray)
        {
            using (var dataStream = await request.GetRequestStreamAsync())
            {
                await dataStream.WriteAsync(byteArray, 0, byteArray.Length);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\richhildebrand+TimerApp_WP8\richhildebrand-TimerApp_WP8-c228aa7\PhoneApp1\Voice\VoiceCommander.cs
public async void ListenForStartCommand(object sender)
        {
            Speech.RecognizerUI.Recognizer.Grammars["Stop"].Enabled = false;
            Speech.RecognizerUI.Recognizer.Grammars["Start"].Enabled = true;

            Speech.RecognizerUI.Settings.ListenText = @"Say 'Start' to start the stopwatch.";
            SpeechRecognitionUIResult result = await Speech.RecognizerUI.RecognizeWithUIAsync();
            if (result.ResultStatus == SpeechRecognitionUIStatus.Succeeded && result.RecognitionResult.Text.Contains("Start"))
            {
                _stopWatch.Start();
                await Speech.Synthesizer.SpeakTextAsync("Timer Started");
                ListenForStopCommand(sender);
            }
            else { ListenForStartCommand(sender); }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\richhildebrand+TimerApp_WP8\richhildebrand-TimerApp_WP8-c228aa7\PhoneApp1\Voice\VoiceCommander.cs
public async void ListenForStopCommand(object sender)
        {
            Speech.RecognizerUI.Recognizer.Grammars["Stop"].Enabled = true;
            Speech.RecognizerUI.Recognizer.Grammars["Start"].Enabled = false;

            Speech.RecognizerUI.Settings.ListenText = @"Say 'Stop' to stop the stopwatch.";
            SpeechRecognitionUIResult result = await Speech.RecognizerUI.RecognizeWithUIAsync();
            if (result.ResultStatus == SpeechRecognitionUIStatus.Succeeded && result.RecognitionResult.Text.Contains("Stop"))
            {
                _stopWatch.Stop();
                await Speech.Synthesizer.SpeakTextAsync("Timer stopped at " + _stopWatch.Milliseconds + " seconds.");
            }
            else { ListenForStopCommand(sender); }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\rubone+wp.photodisplay\rubone-wp.photodisplay-614eb8c\src\PhotoDisplay\PhotoDisplay\Views\MainPage.xaml.cs
private async void ValidarPermiso()
        {
            bool isProvider = LockScreenManager.IsProvidedByCurrentApplication;
            if (!isProvider)
            {
                LockScreenRequestResult op = await LockScreenManager.RequestAccessAsync();
                isProvider = op == LockScreenRequestResult.Granted;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\rubone+wp.photodisplay\rubone-wp.photodisplay-614eb8c\src\PhotoDisplay\LockerScreenAgent\ScheduledAgent.cs
private async void LockScreenChange(string filePathOfTheImage)
        {
            if (!LockScreenManager.IsProvidedByCurrentApplication)
            {
                
                await LockScreenManager.RequestAccessAsync();
            }            
            if (LockScreenManager.IsProvidedByCurrentApplication)
            {
                
               
                var uri = new Uri("ms-appdata:///Local/Shared/ShellContent/"+ filePathOfTheImage, UriKind.Absolute);
                
                LockScreen.SetImageUri(uri);
                  
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\ScottIsAFool+StoreCardBuddy\ScottIsAFool-StoreCardBuddy-c13bc86\StoreCardBuddy.WindowsPhone7\ViewModel\BackupRestoreViewModel.cs
private async Task DoTheRestore()
        {
            ProgressIsVisible = true;
            ProgressText = "Restoring...";
#if !WP8
            _client.GetAsync(MeDetails.TopLevelSkyDriveFolder, "restorefiles");
#else
            var result = await _client.GetAsync(MeDetails.TopLevelSkyDriveFolder);
            ProcessFiles(result.RawResult);
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\ScottIsAFool+StoreCardBuddy\ScottIsAFool-StoreCardBuddy-c13bc86\StoreCardBuddy.WindowsPhone7\ViewModel\BackupRestoreViewModel.cs
private async void ProcessFiles(string result)
        {
            var folder = JsonConvert.DeserializeObject<FolderDetails>(result);

            if (folder.Items == null || !folder.Items.Any())
            {
                App.ShowMessage("No backup could be found");
                ProgressText = string.Empty;
                ProgressIsVisible = false;
                return;
            }

            var fileId = folder.Items
                               .Where(item => item.Name == StoreCardBuddyFile)
                               .Select(x => x.Id)
                               .SingleOrDefault();
            
            if (!string.IsNullOrEmpty(fileId))
            {
                if (!_navigationService.IsNetworkAvailable) return;
#if !WP8
                _client.DownloadCompleted += ClientOnDownloadCompleted;
                _client.DownloadAsync(SkyDriveHelper.GetFile(fileId));
#else
                try
                {
                    var file = await _client.DownloadAsync(SkyDriveHelper.GetFile(fileId));
                    ParseFileContent(file.Stream);
                }
                catch
                {
                    App.ShowMessage("There was an error getting the file");
                }
#endif
            }
            else
            {
                App.ShowMessage("No backup could be found");
                ProgressText = string.Empty;
                ProgressIsVisible = false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\ScottIsAFool+StoreCardBuddy\ScottIsAFool-StoreCardBuddy-c13bc86\StoreCardBuddy.WindowsPhone7\ViewModel\BackupRestoreViewModel.cs
private async void EncryptAndUploadCards(ObservableCollection<Card> cards)
        {
            if (!_navigationService.IsNetworkAvailable) return;

            if (_client == null || !IsLoggedIn)
            {
                App.ShowMessage("You must be logged in to be able to backup");
                return;
            }

            if (!cards.Any())
            {
                App.ShowMessage("No cards to backup");
                return;
            }

            ProgressText = "Backing up...";
            ProgressIsVisible = true;

            var cardString = JsonConvert.SerializeObject(cards);
            var bytes = Encoding.UTF8.GetBytes(cardString);
            var encodedString = Convert.ToBase64String(bytes);
            
            try
            {
                using (var stream = encodedString.ToStream())
                {
#if !WP8
                    _client.UploadAsync(MeDetails.TopLevelSkyDriveFolder, StoreCardBuddyFile, stream, OverwriteOption.Overwrite);
#else
                    var result = await _client.UploadAsync(MeDetails.TopLevelSkyDriveFolder, StoreCardBuddyFile, stream, OverwriteOption.Overwrite);

                    App.ShowMessage("Backup completed successfully.");
                    ProgressText = string.Empty;
                    ProgressIsVisible = false;
#endif
                }
            }
            catch (Exception ex)
            {
                var v = "";
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\ScottIsAFool+StoreCardBuddy\ScottIsAFool-StoreCardBuddy-c13bc86\StoreCardBuddy.WindowsPhone8\..\StoreCardBuddy.WindowsPhone7\ViewModel\BackupRestoreViewModel.cs
private async Task DoTheRestore()
        {
            ProgressIsVisible = true;
            ProgressText = "Restoring...";
#if !WP8
            _client.GetAsync(MeDetails.TopLevelSkyDriveFolder, "restorefiles");
#else
            var result = await _client.GetAsync(MeDetails.TopLevelSkyDriveFolder);
            ProcessFiles(result.RawResult);
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\ScottIsAFool+StoreCardBuddy\ScottIsAFool-StoreCardBuddy-c13bc86\StoreCardBuddy.WindowsPhone8\..\StoreCardBuddy.WindowsPhone7\ViewModel\BackupRestoreViewModel.cs
private async void ProcessFiles(string result)
        {
            var folder = JsonConvert.DeserializeObject<FolderDetails>(result);

            if (folder.Items == null || !folder.Items.Any())
            {
                App.ShowMessage("No backup could be found");
                ProgressText = string.Empty;
                ProgressIsVisible = false;
                return;
            }

            var fileId = folder.Items
                               .Where(item => item.Name == StoreCardBuddyFile)
                               .Select(x => x.Id)
                               .SingleOrDefault();
            
            if (!string.IsNullOrEmpty(fileId))
            {
                if (!_navigationService.IsNetworkAvailable) return;
#if !WP8
                _client.DownloadCompleted += ClientOnDownloadCompleted;
                _client.DownloadAsync(SkyDriveHelper.GetFile(fileId));
#else
                try
                {
                    var file = await _client.DownloadAsync(SkyDriveHelper.GetFile(fileId));
                    ParseFileContent(file.Stream);
                }
                catch
                {
                    App.ShowMessage("There was an error getting the file");
                }
#endif
            }
            else
            {
                App.ShowMessage("No backup could be found");
                ProgressText = string.Empty;
                ProgressIsVisible = false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\ScottIsAFool+StoreCardBuddy\ScottIsAFool-StoreCardBuddy-c13bc86\StoreCardBuddy.WindowsPhone8\..\StoreCardBuddy.WindowsPhone7\ViewModel\BackupRestoreViewModel.cs
private async void EncryptAndUploadCards(ObservableCollection<Card> cards)
        {
            if (!_navigationService.IsNetworkAvailable) return;

            if (_client == null || !IsLoggedIn)
            {
                App.ShowMessage("You must be logged in to be able to backup");
                return;
            }

            if (!cards.Any())
            {
                App.ShowMessage("No cards to backup");
                return;
            }

            ProgressText = "Backing up...";
            ProgressIsVisible = true;

            var cardString = JsonConvert.SerializeObject(cards);
            var bytes = Encoding.UTF8.GetBytes(cardString);
            var encodedString = Convert.ToBase64String(bytes);
            
            try
            {
                using (var stream = encodedString.ToStream())
                {
#if !WP8
                    _client.UploadAsync(MeDetails.TopLevelSkyDriveFolder, StoreCardBuddyFile, stream, OverwriteOption.Overwrite);
#else
                    var result = await _client.UploadAsync(MeDetails.TopLevelSkyDriveFolder, StoreCardBuddyFile, stream, OverwriteOption.Overwrite);

                    App.ShowMessage("Backup completed successfully.");
                    ProgressText = string.Empty;
                    ProgressIsVisible = false;
#endif
                }
            }
            catch (Exception ex)
            {
                var v = "";
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\selbekk+inspire\selbekk-inspire-843b072\Inspire\Controller\QuoteController.cs
public async Task<Quote> GetRandomQuote()
        {
            return await RestService.Get<Quote>();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\selbekk+inspire\selbekk-inspire-843b072\Inspire\Service\RestService.cs
public static async Task<T> Get<T>(RestParameters parameters = null) {

            var url = RestUtility.CreateUrl(parameters);

            HttpWebRequest request = (HttpWebRequest) WebRequest.Create(url);
            request.Method = HttpMethod.Get;
            request.Accept = "application/json;odata=verbose";

            try
            {
                HttpWebResponse response = (HttpWebResponse) await request.GetResponseAsync();

                

                // Read the response into a Stream object.
                System.IO.Stream responseStream = response.GetResponseStream();
                string data;
                using (var reader = new System.IO.StreamReader(responseStream))
                {
                    data = await reader.ReadToEndAsync();
                    //Debug.WriteLine(data);
                }
                responseStream.Close();

                using (var ms = new MemoryStream(Encoding.Unicode.GetBytes(data)))
                {
                    var serializer = new DataContractJsonSerializer(typeof(T));
                    var finishedObject = (T)serializer.ReadObject(ms);
                    return finishedObject;
                }

            }
            catch (Exception ex)
            {
                var we = ex.InnerException as WebException;
                if (we != null)
                {
                    var resp = we.Response as HttpWebResponse;
                    var code = resp.StatusCode;
                    Debug.WriteLine("Status:{0}", we.Status);
                }
                return default(T);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\selbekk+inspire\selbekk-inspire-843b072\Inspire\ViewModel\MainPageViewModel.cs
public async Task UpdateQuote()
        {
            if (newQuotes.Count > 0)
            {
                oldQuotes.Push(Quote);
                Quote = newQuotes.Pop();
                return;
            }

            if( Quote != null )
                oldQuotes.Push(Quote);
            IsLoading = true;
            Quote = await controller.GetRandomQuote();
            IsLoading = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\shairai+Cordova-Plugins\shairai-Cordova-Plugins-30688a1\Facebook\FacebookConnectDemo\FacebookConnectDemo\cordovalib\Commands\Connect.cs
private async Task PerformLogin()
        {
            session = await FacebookSessionClient.LoginAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Sheepsteak+EchoesJS\Sheepsteak-EchoesJS-7bfd7f1\Sheepsteak.EchoesJS.UI\Features\Articles\CommentsPageViewModel.cs
protected async override void OnInitialize()
        {
            base.OnInitialize();

            await this.GetComments();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Sheepsteak+EchoesJS\Sheepsteak-EchoesJS-7bfd7f1\Sheepsteak.EchoesJS.UI\Features\Articles\CommentsPageViewModel.cs
private async Task GetComments()
        {
            this.IsBusy = true;

            IEnumerable<Comment> comments = null;
            bool showFailMessage = false;
            try
            {
                comments = await this.echoJsClient.GetCommentsForArticle(this.ArticleId);
                comments = this.FlattenComments(comments);
            }
            catch (HttpRequestException)
            {
                showFailMessage = true;
            }
            catch (UnsupportedMediaTypeException)
            {
                showFailMessage = true;
            }

            this.IsBusy = false;

            if (showFailMessage)
            {
                await Task.Delay(50);

                var showMessageBoxResult = new ShowMessageBoxResult(
                    "There was an error trying to get the comments.",
                    AppResources.NetworkErrorMessageBoxCaption);

                await showMessageBoxResult.ExecuteAsync();
            }
            else
            {
                this.Comments.AddRange(comments);
            }

            this.NotifyOfPropertyChange(() => this.ShowNoCommentsMessage);
            this.NotifyOfPropertyChange(() => this.ShowComments);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Sheepsteak+EchoesJS\Sheepsteak-EchoesJS-7bfd7f1\Sheepsteak.EchoesJS.UI\Features\Main\LatestViewModel.cs
public async Task LoadMore()
        {
            if (this.IsRefreshing)
            {
                return;
            }

            this.IsRefreshing = true;

            IEnumerable<Article> articles = null;
            bool showFailMessage = false;
            try
            {
                articles = await this.echoJsClient.GetLatestNews(this.Articles.Count);
            }
            catch (HttpRequestException)
            {
                showFailMessage = true;
            }
            catch (UnsupportedMediaTypeException)
            {
                showFailMessage = true;
            }

            this.IsRefreshing = false;

            if (showFailMessage)
            {
                await Task.Delay(50);

                var showMessageBoxResult = new ShowMessageBoxResult(
                    "There was an error trying to get the top articles.",
                    AppResources.NetworkErrorMessageBoxCaption);

                await showMessageBoxResult.ExecuteAsync();
            }
            else
            {
                foreach (var article in articles)
                {
                    this.Articles.Add(article);
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Sheepsteak+EchoesJS\Sheepsteak-EchoesJS-7bfd7f1\Sheepsteak.EchoesJS.UI\Features\Main\LatestViewModel.cs
public async Task RefreshArticles()
        {
            if (this.IsRefreshing)
            {
                return;
            }

            this.ShowFailureMessage = false;
            this.Articles.Clear();
            this.IsRefreshing = true;

            IEnumerable<Article> articles = null;

            bool showFailMessage = false;
            try
            {
                articles = await this.echoJsClient.GetLatestNews();
            }
            catch (HttpRequestException)
            {
                showFailMessage = true;
            }
            catch (UnsupportedMediaTypeException)
            {
                showFailMessage = true;
            }

            this.IsRefreshing = false;

            if (showFailMessage)
            {
                await Task.Delay(50);

                var showMessageBoxResult = new ShowMessageBoxResult(
                    "There was an error trying to get the top articles.",
                    AppResources.NetworkErrorMessageBoxCaption);

                await showMessageBoxResult.ExecuteAsync();
                this.ShowFailureMessage = true;
            }
            else
            {
                this.Articles.AddRange(articles.ToList());
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Sheepsteak+EchoesJS\Sheepsteak-EchoesJS-7bfd7f1\Sheepsteak.EchoesJS.UI\Features\Main\LatestViewModel.cs
protected async override void OnInitialize()
        {
            base.OnInitialize();

            await this.RefreshArticles();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Sheepsteak+EchoesJS\Sheepsteak-EchoesJS-7bfd7f1\Sheepsteak.EchoesJS.UI\Features\Main\MainPageViewModel.cs
public async Task RefreshArticles()
        {
            var selectedItem = this.ActiveItem;

            if (selectedItem != null)
            {
                await selectedItem.RefreshArticles();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Sheepsteak+EchoesJS\Sheepsteak-EchoesJS-7bfd7f1\Sheepsteak.EchoesJS.UI\Features\Main\TopViewModel.cs
public async Task LoadMore()
        {
            if (this.IsRefreshing)
            {
                return;
            }

            this.IsRefreshing = true;

            IEnumerable<Article> articles = null;
            bool showFailMessage = false;
            try
            {
                articles = await this.echoJsClient.GetTopNews(this.Articles.Count);
            }
            catch (HttpRequestException)
            {
                showFailMessage = true;
            }
            catch (UnsupportedMediaTypeException)
            {
                showFailMessage = true;
            }

            this.IsRefreshing = false;

            if (showFailMessage)
            {
                await Task.Delay(50);

                var showMessageBoxResult = new ShowMessageBoxResult(
                    "There was an error trying to get the top articles.",
                    AppResources.NetworkErrorMessageBoxCaption);

                await showMessageBoxResult.ExecuteAsync();
            }
            else
            {
                foreach (var article in articles)
                {
                    this.Articles.Add(article);
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Sheepsteak+EchoesJS\Sheepsteak-EchoesJS-7bfd7f1\Sheepsteak.EchoesJS.UI\Features\Main\TopViewModel.cs
public async Task RefreshArticles()
        {
            if (this.IsRefreshing)
            {
                return;
            }

            this.ShowFailureMessage = false;
            this.Articles.Clear();
            this.IsRefreshing = true;

            IEnumerable<Article> articles = null;

            bool showFailMessage = false;
            try
            {
                articles = await this.echoJsClient.GetTopNews();
            }
            catch (HttpRequestException)
            {
                showFailMessage = true;
            }
            catch (UnsupportedMediaTypeException)
            {
                showFailMessage = true;
            }

            this.IsRefreshing = false;

            if (showFailMessage)
            {
                await Task.Delay(50);

                var showMessageBoxResult = new ShowMessageBoxResult(
                    "There was an error trying to get the top articles.",
                    AppResources.NetworkErrorMessageBoxCaption);

                await showMessageBoxResult.ExecuteAsync();
                this.ShowFailureMessage = true;
            }
            else
            {
                this.Articles.AddRange(articles.ToList());
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\Sheepsteak+EchoesJS\Sheepsteak-EchoesJS-7bfd7f1\Sheepsteak.EchoesJS.UI\Features\Main\TopViewModel.cs
protected async override void OnInitialize()
        {
            base.OnInitialize();

            if (this.Articles.Count == 0)
            {
                await this.RefreshArticles();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\skitracker\source\SkiTracker\App.xaml.cs
private async void LoadDeviceDataAsync()
        {
            if (IsolatedStorageSettings.ApplicationSettings.Contains("Id"))
            {

                //await Task.Delay(500);

                try
                {
                    var id = (int)IsolatedStorageSettings.ApplicationSettings["Id"];
                    CurrentDevice = await _deviceTable.LookupAsync(id);
                }
                catch (MobileServiceInvalidOperationException)
                {
                    IsolatedStorageSettings.ApplicationSettings.Remove("Id");
                    CurrentDevice = new Device { Platform = PlatformType.WP8 };
                }
            }
            else
            {
                CurrentDevice = new Device { Platform = PlatformType.WP8 };
            }

            RegisterPushNotificatons();

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\skitracker\source\SkiTracker\ViewModel\ConversationViewModel.cs
private async void GetLatestMessages()
        {
            var lastMessage = Messages.OrderByDescending(m => m.CreatedAt).FirstOrDefault();

            if (lastMessage == null)
            {
                DispatcherHelper.CheckBeginInvokeOnUI(GetMessages);
                return;
            }

            var newMessages = await _messageTable
                                        .Where(m => m.GroupName == App.CurrentApp.CurrentDevice.GroupName 
                                               && m.CreatedAt > lastMessage.CreatedAt)
                                        .OrderBy(m => m.CreatedAt)
                                        .ToListAsync();
            
            foreach (var newMessage in newMessages)
            {
                var message = newMessage;
                DispatcherHelper.CheckBeginInvokeOnUI(() => Messages.Add(message));
            }

            DispatcherHelper.CheckBeginInvokeOnUI(() => SortedMessages.View.MoveCurrentToLast());

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\skitracker\source\SkiTracker\ViewModel\ConversationViewModel.cs
private async void Send(string messageText)
        {
            Message = string.Empty;

            var geolocator = new Geolocator
            {
                DesiredAccuracyInMeters = 30,
            };

            var currentLocation = await geolocator.GetGeopositionAsync(TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(15));

            var message = new Message
            {
                Text = messageText,
                DeviceId = App.CurrentApp.CurrentDevice.Id,
                GroupName = App.CurrentApp.CurrentDevice.GroupName,
                Coordinate = new GeoCoordinate(currentLocation.Coordinate.Latitude, currentLocation.Coordinate.Longitude),
            };

            await _messageTable.InsertAsync(message);

            //Messages.Add(message);
            GetLatestMessages();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\skitracker\source\SkiTracker\ViewModel\MainViewModel.cs
private async void InsertOrUpdateDeviceDataAsync()
        {
            Device.Color = App.CurrentApp.AccentColor;

            if (!IsDeviceRegisterd)
            {
                // insert

                try
                {
                    await _deviceTable.InsertAsync(Device);

                    IsolatedStorageSettings.ApplicationSettings.Add("Id", Device.Id);
                    IsolatedStorageSettings.ApplicationSettings.Save();

                }
                catch
                {
                    Device.Id = 999;
                }
            }
            else
            {
                // update

                await _deviceTable.UpdateAsync(Device);
            }

            RaisePropertyChanged(() => Device);
            IsDeviceRegisterdChanged();

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\skitracker\source\SkiTracker\ViewModel\ReadMessageViewModel.cs
private async void LoadLastMessage()
        {
            var device = App.CurrentApp.CurrentDevice;

            var messageQuery = _messageTable.OrderByDescending(m => m.CreatedAt).Where(m => m.GroupName == device.GroupName).Take(1);

            var messages = await messageQuery.ToListAsync();

            if (messages.Count > 0)
            {
                Message = messages[0];
            }

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\skitracker\source\SkiTracker\ViewModel\ReadMessageViewModel.cs
private async void LoadMessage(int id)
        {
            Message = await _messageTable.LookupAsync(id);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\skitracker\source\SkiTracker\ViewModel\ReadMessageViewModel.cs
protected async void GetCurrentPosition()
        {
            Geolocator = new Geolocator
            {
                DesiredAccuracy = PositionAccuracy.High,
            };

            var geoposition = await Geolocator.GetGeopositionAsync(TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(15));
            CurrentLocation = new GeoCoordinate(geoposition.Coordinate.Latitude, geoposition.Coordinate.Longitude);

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\skitracker\source\SkiTracker\ViewModel\SendMessageViewModel.cs
private async void Send(string messageText)
        {
            Message = string.Empty;

            var geolocator = new Geolocator
                {
                    DesiredAccuracyInMeters = 30,
                };

            var currentLocation = await geolocator.GetGeopositionAsync(TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(15));

            var message = new Message
                {
                    Text = messageText,
                    DeviceId = App.CurrentApp.CurrentDevice.Id,
                    //SenderName = App.CurrentApp.CurrentDevice.Name,
                    GroupName = App.CurrentApp.CurrentDevice.GroupName,
                    Coordinate = new GeoCoordinate(currentLocation.Coordinate.Latitude, currentLocation.Coordinate.Longitude),
                };

          await _messageTable.InsertAsync(message);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\skitracker\source\SkiTracker\ViewModel\ShowFriendsViewModel.cs
private async void GetCurrentPosition()
        {
            _geolocator = new Geolocator
            {
                DesiredAccuracy = PositionAccuracy.High,
            };

            var geoposition = await _geolocator.GetGeopositionAsync(TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(15));
            CurrentLocation = new GeoCoordinate(geoposition.Coordinate.Latitude, geoposition.Coordinate.Longitude);

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\SlidePay+WindowsPhoneSDK\SlidePay-WindowsPhoneSDK-ab41c5e\WindowsPhoneSDK\sdk\APIs\endpoint\sp_find_endpoint.cs
public async Task<bool> sp_find_endpoint()
        {
            #region Check-for-Null-Values

            if (string_null_or_empty(_email) || string_null_or_empty(_password))
            {
                log("sp_find_endpoint null value detected for either email or password", true);
                return false;
            }

            #endregion

            #region Variables

            rest_response rest_resp = new rest_response();
            response resp = new response();

            #endregion

            #region Process-Request

            rest_resp = await rest_client(
                _endpoint_discovery_url,
                "GET",
                null);

            if (rest_resp == null)
            {
                log("sp_find_endpoint null response from rest_client", true);
                return false;
            }

            if (rest_resp.status_code != 200)
            {
                log("sp_find_endpoint rest_client returned status other than 200", true);
                return false;
            }

            try
            {
                resp = deserialize_json<response>(rest_resp.output_body_string);
            }
            catch (Exception)
            {
                log("sp_find_endpoint unable to deserialize response from server", true);
                return false;
            }

            if (!resp.success)
            {
                log("sp_find_endpoint success false returned from server", true);
                return false;
            }

            _endpoint_url = resp.data.ToString();
            log("sp_find_endpoint endpoint URL found: " + _endpoint_url);
            return true;

            #endregion
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\SlidePay+WindowsPhoneSDK\SlidePay-WindowsPhoneSDK-ab41c5e\WindowsPhoneSDK\sdk\APIs\login\sp_login.cs
public async Task<bool> sp_login()
        {
            #region Check-for-Null-Values

            if (string_null_or_empty(_email) || string_null_or_empty(_password))
            {
                log("sp_login null value detected for either email or password", true);
                return false;
            }

            if (string_null_or_empty(_endpoint_url))
            {
                log("sp_login null value detected for endpoint URL", true);
                return false;
            }

            #endregion

            #region Variables

            rest_response login_rest_resp = new rest_response();
            response login_resp = new response();

            rest_response detail_rest_resp = new rest_response();
            response detail_resp = new response();

            #endregion

            #region Process-Login

            login_rest_resp = await rest_client(
                _endpoint_url + "login",
                "GET",
                null);

            if (login_rest_resp == null)
            {
                log("sp_login null response from rest_client for login call", true);
                return false;
            }

            if (login_rest_resp.status_code != 200)
            {
                log("sp_login rest_client returned status other than 200 for login call", true);
                return false;
            }

            try
            {
                login_resp = deserialize_json<response>(login_rest_resp.output_body_string);
            }
            catch (Exception)
            {
                log("sp_login unable to deserialize response from server for login call", true);
                return false;
            }

            if (!login_resp.success)
            {
                log("sp_login success false returned from server for login call", true);
                return false;
            }

            _token_string = login_resp.data.ToString();
            log("sp_login token retrieved: " + _token_string);

            #endregion

            #region Retrieve-Token-Details

            detail_rest_resp = await rest_client(
                _endpoint_url + "token/detail",
                "GET",
                null);

            if (detail_rest_resp == null)
            {
                log("sp_login null response from rest_client for token detail call", true);
                return false;
            }

            if (detail_rest_resp.status_code != 200)
            {
                log("sp_login rest_client returned status other than 200 for token detail call", true);
                return false;
            }

            try
            {
                detail_resp = deserialize_json<response>(detail_rest_resp.output_body_string);
            }
            catch (Exception)
            {
                log("sp_login unable to deserialize response from server for token detail call", true);
                return false;
            }

            if (!detail_resp.success)
            {
                log("sp_login success false returned from server for token detail call", true);
                return false;
            }

            try
            {
                log("sp_login retrieved token detail: " + detail_resp.data.ToString());
                _token = deserialize_json<token>(detail_resp.data.ToString());
                log("sp_login token detail retrieved");
            }
            catch (Exception)
            {
                log("sp_login unable to deserialize token detail", true);
                return false;
            }

            #endregion

            log("sp_login login successful for email " + _email);
            return true;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\SlidePay+WindowsPhoneSDK\SlidePay-WindowsPhoneSDK-ab41c5e\WindowsPhoneSDK\sdk\APIs\payments\sp_get_all_payments.cs
public async Task<List<payment>> sp_get_all_payments()
        {
            #region Check-for-Null-Values

            if (string_null_or_empty(_token_string))
            {
                log("sp_get_all_payments null value detected for token, please authenticate", true);
                return null;
            }

            #endregion

            #region Variables

            rest_response get_payment_rest_resp = new rest_response();
            response get_payment_resp = new response();
            List<payment> curr_payment_list = new List<payment>();

            #endregion

            #region Process-Request

            get_payment_rest_resp = await rest_client(
                _endpoint_url + "payment/",
                "GET",
                null);

            if (get_payment_rest_resp == null)
            {
                log("sp_get_all_payments null response from rest_client for payment retrieval call", true);
                return null;
            }

            if (get_payment_rest_resp.status_code != 200)
            {
                log("sp_get_all_payments rest_client returned status other than 200 for payment retrieval call", true);
                return null;
            }

            try
            {
                get_payment_resp = deserialize_json<response>(get_payment_rest_resp.output_body_string);
            }
            catch (Exception)
            {
                log("sp_get_all_payments unable to deserialize response from server for payment retrieval call", true);
                return null;
            }

            if (!get_payment_resp.success)
            {
                log("sp_get_all_payments success false returned from server for payment retrieval call", true);
                return null;
            }

            try
            {
                curr_payment_list = deserialize_json<List<payment>>(get_payment_resp.data.ToString());
                log("sp_get_all_payments response retrieved");
            }
            catch (Exception)
            {
                log("sp_get_all_payments unable to deserialize payment list object", true);
                return null;
            }

            if (curr_payment_list == null)
            {
                log("sp_get_all_payments null payment list retrieved", true);
                return null;
            }

            if (curr_payment_list.Count < 1)
            {
                log("sp_get_all_payments no payments retrieved", true);
                return null;
            }

            #endregion

            #region Enumerate

            foreach (payment curr_payment in curr_payment_list)
            {
                log("===============================================================================");
                log("Payment retrieved: " + curr_payment.payment_id);
                log("  " + curr_payment.method + " " + curr_payment.cc_type + " " + curr_payment.cc_redacted_number + " " + curr_payment.cc_expiry_month + "/" + curr_payment.cc_expiry_year + " " + decimal_tostring(curr_payment.amount));
                log("  Approval " + curr_payment.provider_approval_code + " Status " + curr_payment.provider_status_code + " " + curr_payment.provider_status_message + " " + curr_payment.provider_transaction_state);
                log("  Response time " + curr_payment.processor_time_ms + "ms");
                log("  Stored Payment GUID " + curr_payment.stored_payment_guid);
                log("===============================================================================");
            }

            #endregion

            return curr_payment_list;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\SlidePay+WindowsPhoneSDK\SlidePay-WindowsPhoneSDK-ab41c5e\WindowsPhoneSDK\sdk\APIs\payments\sp_get_payment.cs
public async Task<List<payment>> sp_get_payment(int payment_id)
        {
            #region Check-for-Null-Values

            if (string_null_or_empty(_token_string))
            {
                log("sp_get_payment null value detected for token, please authenticate", true);
                return null;
            }

            if (payment_id <= 0)
            {
                log("sp_get_payment payment_id must be greater than zero", true);
                return null;
            }

            #endregion

            #region Variables

            rest_response get_payment_rest_resp = new rest_response();
            response get_payment_resp = new response();
            List<payment> curr_payment_list = new List<payment>();

            #endregion

            #region Process-Request

            get_payment_rest_resp = await rest_client(
                _endpoint_url + "payment/" + payment_id,
                "GET",
                null);

            if (get_payment_rest_resp == null)
            {
                log("sp_get_payment null response from rest_client for payment retrieval call", true);
                return null;
            }

            if (get_payment_rest_resp.status_code != 200)
            {
                log("sp_get_payment rest_client returned status other than 200 for payment retrieval call", true);
                return null;
            }

            try
            {
                get_payment_resp = deserialize_json<response>(get_payment_rest_resp.output_body_string);
            }
            catch (Exception)
            {
                log("sp_get_payment unable to deserialize response from server for payment retrieval call", true);
                return null;
            }

            if (!get_payment_resp.success)
            {
                log("sp_get_payment success false returned from server for payment retrieval call", true);
                return null;
            }

            try
            {
                curr_payment_list = deserialize_json<List<payment>>(get_payment_resp.data.ToString());
                log("sp_get_payment response retrieved");
            }
            catch (Exception)
            {
                log("sp_get_payment unable to deserialize payment list object", true);
                return null;
            }

            if (curr_payment_list == null)
            {
                log("sp_get_payment null payment list retrieved", true);
                return null;
            }

            if (curr_payment_list.Count < 1)
            {
                log("sp_get_payment no payments retrieved", true);
                return null;
            }

            #endregion

            #region Enumerate

            foreach (payment curr_payment in curr_payment_list)
            {
                log("===============================================================================");
                log("Payment retrieved: " + curr_payment.payment_id);
                log("  " + curr_payment.method + " " + curr_payment.cc_type + " " + curr_payment.cc_redacted_number + " " + curr_payment.cc_expiry_month + "/" + curr_payment.cc_expiry_year + " " + decimal_tostring(curr_payment.amount));
                log("  Approval " + curr_payment.provider_approval_code + " Status " + curr_payment.provider_status_code + " " + curr_payment.provider_status_message + " " + curr_payment.provider_transaction_state);
                log("  Response time " + curr_payment.processor_time_ms + "ms");
                log("  Stored Payment GUID " + curr_payment.stored_payment_guid);
                log("===============================================================================");
            }

            #endregion

            return curr_payment_list;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\SlidePay+WindowsPhoneSDK\SlidePay-WindowsPhoneSDK-ab41c5e\WindowsPhoneSDK\sdk\APIs\payments\sp_key_payment.cs
public async Task<processor_cc_txn_response> sp_key_payment(
            string ccn,
            string exp_mo,
            string exp_yr,
            string cvv2,
            string zip,
            string notes,
            decimal amount)
        {
            #region Check-for-Null-Values

            if (string_null_or_empty(_token_string))
            {
                log("sp_key_payment null value detected for token, please authenticate", true);
                return null;
            }

            if (string_null_or_empty(ccn) ||
                string_null_or_empty(exp_mo) ||
                string_null_or_empty(exp_yr) ||
                string_null_or_empty(cvv2) ||
                string_null_or_empty(zip) ||
                string_null_or_empty(notes))
            {
                log("sp_key_payment null value detected in one of the input values", true);
                return null;
            }

            if (amount <= 0)
            {
                log("sp_key_payment amount must be greater than zero", true);
                return null;
            }

            #endregion

            #region Variables

            rest_response key_payment_rest_resp = new rest_response();
            response key_payment_resp = new response();
            processor_cc_txn_response curr_resp = new processor_cc_txn_response();

            #endregion

            #region Create-Request-Body

            simple_payment curr = new simple_payment();
            curr.cc_number = ccn;
            curr.cc_expiry_month = exp_mo;
            curr.cc_expiry_year = exp_yr;
            curr.notes = notes;
            curr.cc_cvv2 = cvv2;
            curr.cc_billing_zip = zip;
            curr.amount = amount;
            curr.method = "CreditCard";

            #endregion

            #region Process-Request

            key_payment_rest_resp = await rest_client(
                _endpoint_url + "payment/simple",
                "POST",
                curr);

            if (key_payment_rest_resp == null)
            {
                log("sp_key_payment null response from rest_client for simple payment call", true);
                return null;
            }

            if (key_payment_rest_resp.status_code != 200 &&
                key_payment_rest_resp.status_code != 201)
            {
                log("sp_key_payment rest_client returned status other than 200/201 for simple payment call", true);
                return null;
            }

            try
            {
                key_payment_resp = deserialize_json<response>(key_payment_rest_resp.output_body_string);
            }
            catch (Exception)
            {
                log("sp_key_payment unable to deserialize response from server for simple payment call", true);
                return null;
            }

            if (!key_payment_resp.success)
            {
                log("sp_key_payment success false returned from server for simple payment call", true);
                return null;
            }

            try
            {
                curr_resp = deserialize_json<processor_cc_txn_response>(key_payment_resp.data.ToString());
                log("sp_key_payment response retrieved");
            }
            catch (Exception)
            {
                log("sp_key_payment unable to deserialize processor response", true);
                return null;
            }

            #endregion

            #region Enumerate

            log("===============================================================================");
            log("Payment response received: " + curr_resp.is_approved);
            log("  " + curr_resp.cc_type + " " + curr_resp.cc_redacted_number + " " + curr_resp.cc_expiry_month + "/" + curr_resp.cc_expiry_year + " " + decimal_tostring(curr_resp.amount));
            log("  Approval " + curr_resp.approval_code + " Status " + curr_resp.status_code + " " + curr_resp.status_message + " " + curr_resp.transaction_state);
            log("  Response time " + curr_resp.processor_time_ms + "ms");
            log("  Card present " + curr_resp.cc_present);

            if (curr_resp.is_approved)
            {
                log("  Payment ID " + curr_resp.payment_id);
                log("  Stored Payment GUID " + curr_resp.stored_payment_guid);
            }

            log("===============================================================================");

            #endregion

            return curr_resp;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\SlidePay+WindowsPhoneSDK\SlidePay-WindowsPhoneSDK-ab41c5e\WindowsPhoneSDK\sdk\APIs\payments\sp_put_payment.cs
public async Task<List<payment>> sp_put_payment(List<search_filter> sf_list)
        {
            #region Check-for-Null-Values

            if (string_null_or_empty(_token_string))
            {
                log("sp_put_payment null value detected for token, please authenticate", true);
                return null;
            }

            if (sf_list == null)
            {
                log("sp_put_payment null value detected for search filter list", true);
                return null;
            }

            #endregion

            #region Variables

            rest_response put_payment_rest_resp = new rest_response();
            response put_payment_resp = new response();
            List<payment> curr_payment_list = new List<payment>();

            #endregion

            #region Process-Request

            put_payment_rest_resp = await rest_client(
                _endpoint_url + "payment/",
                "PUT",
                sf_list);

            if (put_payment_rest_resp == null)
            {
                log("sp_put_payment null response from rest_client for payment search call", true);
                return null;
            }

            if (put_payment_rest_resp.status_code != 200)
            {
                log("sp_put_payment rest_client returned status other than 200 for payment search call", true);
                return null;
            }

            try
            {
                put_payment_resp = deserialize_json<response>(put_payment_rest_resp.output_body_string);
            }
            catch (Exception)
            {
                log("sp_put_payment unable to deserialize response from server for payment search call", true);
                return null;
            }

            if (!put_payment_resp.success)
            {
                log("sp_put_payment success false returned from server for payment search call", true);
                return null;
            }

            try
            {
                curr_payment_list = deserialize_json<List<payment>>(put_payment_resp.data.ToString());
                log("sp_put_payment response retrieved");
            }
            catch (Exception)
            {
                log("sp_put_payment unable to deserialize payment list object", true);
                return null;
            }

            if (curr_payment_list == null)
            {
                log("sp_put_payment null payment list retrieved", true);
                return null;
            }

            if (curr_payment_list.Count < 1)
            {
                log("sp_put_payment no payments retrieved", true);
                return null;
            }

            #endregion

            #region Enumerate

            foreach (payment curr_payment in curr_payment_list)
            {
                log("===============================================================================");
                log("Payment retrieved: " + curr_payment.payment_id);
                log("  " + curr_payment.method + " " + curr_payment.cc_type + " " + curr_payment.cc_redacted_number + " " + curr_payment.cc_expiry_month + "/" + curr_payment.cc_expiry_year + " " + decimal_tostring(curr_payment.amount));
                log("  Approval " + curr_payment.provider_approval_code + " Status " + curr_payment.provider_status_code + " " + curr_payment.provider_status_message + " " + curr_payment.provider_transaction_state);
                log("  Response time " + curr_payment.processor_time_ms + "ms");
                log("  Stored Payment GUID " + curr_payment.stored_payment_guid);
                log("===============================================================================");
            }

            #endregion

            return curr_payment_list;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\SlidePay+WindowsPhoneSDK\SlidePay-WindowsPhoneSDK-ab41c5e\WindowsPhoneSDK\sdk\APIs\payments\sp_rambler_payment.cs
public async Task<processor_cc_txn_response> sp_rambler_payment(
            string rambler_track_data,
            string rambler_ksn,
            string notes,
            decimal amount)
        {
            #region Check-for-Null-Values

            if (string_null_or_empty(_token_string))
            {
                log("sp_rambler_payment null value detected for token, please authenticate", true);
                return null;
            }

            if (string_null_or_empty(rambler_track_data))
            {
                log("sp_rambler_payment null value detected in one of the input values", true);
                return null;
            }

            if (string_null_or_empty(rambler_ksn))
            {
                log("sp_rambler_payment null value detected in one of the input values", true);
                return null;
            }

            if (amount <= 0)
            {
                log("sp_rambler_payment amount must be greater than zero", true);
                return null;
            }

            #endregion

            #region Variables

            rest_response track_payment_rest_resp = new rest_response();
            response track_payment_resp = new response();
            processor_cc_txn_response curr_resp = new processor_cc_txn_response();

            #endregion

            #region Create-Request-Body

            simple_payment curr = new simple_payment();
            curr.cc_track1data = rambler_track_data;
            curr.encryption_vendor = "rambler";
            curr.encryption_ksn = rambler_ksn;
            curr.notes = notes;
            curr.amount = amount;
            curr.method = "CreditCard";

            #endregion

            #region Process-Request

            track_payment_rest_resp = await rest_client(
                _endpoint_url + "payment/simple",
                "POST",
                curr);

            if (track_payment_rest_resp == null)
            {
                log("sp_rambler_payment null response from rest_client for simple payment call", true);
                return null;
            }

            if (track_payment_rest_resp.status_code != 200 &&
                track_payment_rest_resp.status_code != 201)
            {
                log("sp_rambler_payment rest_client returned status other than 200/201 for simple payment call", true);
                return null;
            }

            try
            {
                track_payment_resp = deserialize_json<response>(track_payment_rest_resp.output_body_string);
            }
            catch (Exception)
            {
                log("sp_rambler_payment unable to deserialize response from server for simple payment call", true);
                return null;
            }

            if (!track_payment_resp.success)
            {
                log("sp_rambler_payment success false returned from server for simple payment call", true);
                return null;
            }

            try
            {
                curr_resp = deserialize_json<processor_cc_txn_response>(track_payment_resp.data.ToString());
                log("sp_rambler_payment response retrieved");
            }
            catch (Exception)
            {
                log("sp_rambler_payment unable to deserialize processor response", true);
                return null;
            }

            #endregion

            #region Enumerate

            log("===============================================================================");
            log("Payment response received: " + curr_resp.is_approved);
            log("  " + curr_resp.cc_type + " " + curr_resp.cc_redacted_number + " " + curr_resp.cc_expiry_month + "/" + curr_resp.cc_expiry_year + " " + decimal_tostring(curr_resp.amount));
            log("  Approval " + curr_resp.approval_code + " Status " + curr_resp.status_code + " " + curr_resp.status_message + " " + curr_resp.transaction_state);
            log("  Response time " + curr_resp.processor_time_ms + "ms");
            log("  Card present " + curr_resp.cc_present);

            if (curr_resp.is_approved)
            {
                log("  Payment ID " + curr_resp.payment_id);
                log("  Stored Payment GUID " + curr_resp.stored_payment_guid);
            }

            log("===============================================================================");

            #endregion

            return curr_resp;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\SlidePay+WindowsPhoneSDK\SlidePay-WindowsPhoneSDK-ab41c5e\WindowsPhoneSDK\sdk\APIs\payments\sp_refund_payment.cs
public async Task<processor_cc_txn_response> sp_refund_payment(int payment_id)
        {
            #region Check-for-Null-Values

            if (string_null_or_empty(_token_string))
            {
                log("sp_refund_payment null value detected for token, please authenticate", true);
                return null;
            }

            if (payment_id <= 0)
            {
                log("sp_refund_payment payment_id must be greater than zero", true);
                return null;
            }

            #endregion

            #region Variables

            rest_response refund_payment_rest_resp = new rest_response();
            response refund_payment_resp = new response();
            processor_cc_txn_response curr_resp = new processor_cc_txn_response();

            #endregion

            #region Process-Request

            refund_payment_rest_resp = await rest_client(
                _endpoint_url + "payment/refund/" + payment_id,
                "POST",
                null);

            if (refund_payment_rest_resp == null)
            {
                log("sp_refund_payment null response from rest_client for refund call", true);
                return null;
            }

            if (refund_payment_rest_resp.status_code != 200 &&
                refund_payment_rest_resp.status_code != 201)
            {
                log("sp_refund_payment rest_client returned status other than 200/201 for refund call", true);
                return null;
            }

            try
            {
                refund_payment_resp = deserialize_json<response>(refund_payment_rest_resp.output_body_string);
            }
            catch (Exception)
            {
                log("sp_refund_payment unable to deserialize response from server for refund call", true);
                return null;
            }

            if (!refund_payment_resp.success)
            {
                log("sp_refund_payment success false returned from server for refund call", true);
                return null;
            }

            try
            {
                curr_resp = deserialize_json<processor_cc_txn_response>(refund_payment_resp.data.ToString());
                log("sp_refund_payment response retrieved");
            }
            catch (Exception)
            {
                log("sp_refund_payment unable to deserialize processor response", true);
                return null;
            }

            #endregion

            #region Enumerate

            log("===============================================================================");
            log("Refund response received: " + curr_resp.is_approved);
            log("  " + curr_resp.cc_type + " " + curr_resp.cc_redacted_number + " " + curr_resp.cc_expiry_month + "/" + curr_resp.cc_expiry_year + " " + decimal_tostring(curr_resp.amount));
            log("  Approval " + curr_resp.approval_code + " Status " + curr_resp.status_code + " " + curr_resp.status_message + " " + curr_resp.transaction_state);
            log("  Response time " + curr_resp.processor_time_ms + "ms");

            if (curr_resp.is_approved)
            {
                log("  Payment ID " + curr_resp.payment_id);
                log("  Stored Payment GUID " + curr_resp.stored_payment_guid);
            }

            log("===============================================================================");

            #endregion

            return curr_resp;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\SlidePay+WindowsPhoneSDK\SlidePay-WindowsPhoneSDK-ab41c5e\WindowsPhoneSDK\sdk\support\rest\rest_client.cs
public async static Task<rest_response> rest_client(
            string url,
            string method,
            object body)
        {
            log("rest_client " + method + " to " + url);
            DateTime start_time = DateTime.Now;

            #region Check-Method

            if (string_null_or_empty(method))
            {
                log("rest_client null value supplied for method, please use GET, PUT, POST, or DELETE", true);
                return null;
            }

            if ((String.Compare(method, "GET") != 0) &&
                (String.Compare(method, "POST") != 0) &&
                (String.Compare(method, "PUT") != 0) &&
                (String.Compare(method, "DELETE") != 0))
            {
                log("rest_client invalid value supplied for method, please use GET, PUT, POST, or DELETE", true);
                return null;
            }

            #endregion

            #region Variables

            HttpClient client = new HttpClient();
            string response_text = "";
            HttpResponseMessage response = null;
            string serialized_body = "";
            StringContent content = null;
            rest_response resp = new rest_response();
            client.CancelPendingRequests();

            #endregion

            #region Add-Custom-Headers

            if (!string_null_or_empty(_token_string))
            {
                client.DefaultRequestHeaders.Add("x-cube-token", _token_string.Trim().TrimEnd('\r', '\n'));
            }
            else if (!string_null_or_empty(_email) && !string_null_or_empty(_password))
            {
                client.DefaultRequestHeaders.Add("x-cube-email", _email.Trim().TrimEnd('\r', '\n'));
                client.DefaultRequestHeaders.Add("x-cube-password", _password.Trim().TrimEnd('\r', '\n'));
            }
            else
            {
                log("rest_client no token supplied, and no credentials supplied", true);
                return null;
            }

            #endregion

            #region Package-Payload

            if ((String.Compare(method, "PUT") == 0) ||
                (String.Compare(method, "POST") == 0))
            {
                try
                {
                    serialized_body = serialize_json(body);
                    if (!string_null_or_empty(serialized_body))
                    {
                        log("rest_client packaging JSON string body: " + serialized_body.Length + " bytes: " + serialized_body);
                    }
                }
                catch (Exception)
                {
                    log("rest_client unable to serialize body into JSON, exiting", true);
                    return null;
                }
            }

            #endregion

            #region Process

            switch (method)
            {
                case "GET":
                    response = await client.GetAsync(url);
                    break;

                case "POST":
                    content = new StringContent(serialized_body, Encoding.UTF8, "application/json");
                    client.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                    response = await client.PostAsync(url, content);
                    break;

                case "PUT":
                    content = new StringContent(serialized_body, Encoding.UTF8, "application/json");
                    client.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                    response = await client.PutAsync(url, content);
                    break;

                case "DELETE":
                    content = new StringContent(serialized_body, Encoding.UTF8, "application/json");
                    client.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                    response = await client.DeleteAsync(url);
                    break;

                default:
                    log("rest_client invalid method supplied, use GET, PUT, POST, or DELETE", true);
                    return null;
            }

            response_text = await response.Content.ReadAsStringAsync();

            #endregion

            #region Build-Response-Object

            if (!string_null_or_empty(response_text)) resp.content_length = response_text.Length;
            else resp.content_length = 0;

            resp.content_type = "application/json";
            resp.output_body_string = response_text;
            resp.status_code = (int)response.StatusCode;

            #endregion

            #region Enumerate-Response

            log("rest_client " + method + " " + resp.response_uri + " completed " + decimal_tostring(get_total_ms(start_time)) + "ms, response: " + resp.content_length + "B " + resp.content_type + " status " + resp.status_code + " " + resp.status_description);
            log("response body: " + resp.output_body_string);

            #endregion

            client.Dispose();
            return resp;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\snapchatreplacement\SnapChatReplacement\SnapChatReplacement\newSnap.xaml.cs
private async void cam_CaptureImageAvailable(object sender, Microsoft.Devices.ContentReadyEventArgs e)
        {
            byte[] buffer = new byte[e.ImageStream.Length];
            await e.ImageStream.ReadAsync(buffer,0, (int)e.ImageStream.Length);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\ClientCommon\CacheControllerAsync.cs
internal async Task<CacheRefreshStatistics> SynchronizeAsync()
        {
            return await SynchronizeAsync(CancellationToken.None);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\ClientCommon\CacheControllerAsync.cs
internal async Task<CacheRefreshStatistics> SynchronizeAsync(CancellationToken cancellationToken)
        {
            CacheRefreshStatistics statistics = new CacheRefreshStatistics();
              
            try
            {
                // Check if cancellation has occured
                if (cancellationToken.IsCancellationRequested)
                    cancellationToken.ThrowIfCancellationRequested();
          
                // set start time
                statistics.StartTime = DateTime.Now;

                // First create the CacheRequestHandler
                this.cacheRequestHandler = new HttpCacheRequestHandler(this.serviceUri, this.controllerBehavior);

                // Then fire the BeginSession call on the local provider.
                this.localProvider.BeginSession();

                // Set the flag to indicate BeginSession was successful
                this.beginSessionComplete = true;

                // Do uploads first
                statistics = await this.EnqueueUploadRequest(statistics, cancellationToken);

                // Set end time
                statistics.EndTime = DateTime.Now;

                // Call EndSession only if BeginSession was successful.
                if (this.beginSessionComplete)
                    this.localProvider.EndSession();
            }
            catch (OperationCanceledException ex)
            {
                statistics.EndTime = DateTime.Now;
                statistics.Cancelled = true;
                statistics.Error = ex;
                
                this.localProvider.EndSession();
            }
            catch (Exception ex)
            {
                statistics.EndTime = DateTime.Now;
                statistics.Error = ex;

                this.localProvider.EndSession();
            }
            finally
            {
                // Reset the state
                this.ResetAsyncWorkerManager();
            }

            return statistics;

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\ClientCommon\CacheControllerAsync.cs
private async Task<CacheRefreshStatistics> EnqueueUploadRequest(CacheRefreshStatistics statistics, CancellationToken cancellationToken)
        {
            this.changeSetId = Guid.NewGuid();

            try
            {
                // Check if cancellation has occured
                if (cancellationToken.IsCancellationRequested)
                    cancellationToken.ThrowIfCancellationRequested();

                ChangeSet changeSet = this.localProvider.GetChangeSet(this.changeSetId);

                if (changeSet == null || changeSet.Data == null || changeSet.Data.Count == 0)
                {
                    // No data to upload. Skip upload phase.
                    statistics = await this.EnqueueDownloadRequest(statistics, cancellationToken);
                }
                else
                {
                    // Create a SyncRequest out of this.
                    CacheRequest request = new CacheRequest
                    {
                        RequestId = this.changeSetId,
                        Format = this.ControllerBehavior.SerializationFormat,
                        RequestType = CacheRequestType.UploadChanges,
                        Changes = changeSet.Data,
                        KnowledgeBlob = changeSet.ServerBlob,
                        IsLastBatch = changeSet.IsLastBatch
                    };

                    var args = await this.cacheRequestHandler.ProcessCacheRequestAsync(request, changeSet.IsLastBatch, cancellationToken);

                    statistics = await this.ProcessCacheRequestResults(statistics, args, cancellationToken);
                }

            }
            catch (OperationCanceledException)
            {
                // Re throw the operation cancelled
                throw;
            }
            catch (Exception e)
            {
                if (ExceptionUtility.IsFatal(e))
                    throw;

                statistics.Error = e;
            }


            return statistics;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\ClientCommon\CacheControllerAsync.cs
private async Task<CacheRefreshStatistics> EnqueueDownloadRequest(CacheRefreshStatistics statistics, CancellationToken cancellationToken)
        {
            try
            {
                if (cancellationToken.IsCancellationRequested)
                    cancellationToken.ThrowIfCancellationRequested();

                // Create a SyncRequest for download.
                CacheRequest request = new CacheRequest
                {
                    Format = this.ControllerBehavior.SerializationFormat,
                    RequestType = CacheRequestType.DownloadChanges,
                    KnowledgeBlob = this.localProvider.GetServerBlob()
                };

                var args = await this.cacheRequestHandler.ProcessCacheRequestAsync(request, null , cancellationToken);

                statistics = await this.ProcessCacheRequestResults(statistics, args, cancellationToken);
            }
            catch (OperationCanceledException)
            {
                // Re throw the operation cancelled
                throw;
            }
            catch (Exception e)
            {
                if (ExceptionUtility.IsFatal(e))
                    throw;

                statistics.Error = e;
            }

            return statistics;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\ClientCommon\CacheControllerAsync.cs
private async Task<CacheRefreshStatistics> ProcessCacheRequestResults(CacheRefreshStatistics statistics, CacheRequestResult e, CancellationToken cancellationToken)
        {
            try
            {
                if (cancellationToken.IsCancellationRequested)
                    cancellationToken.ThrowIfCancellationRequested();

                if (e.Error != null)
                {
                    // Check to see if it was a UploadRequest in which case we will have to call OnChangeSetUploaded
                    // with error to reset the dirty bits.
                    if (e.ChangeSetResponse != null)
                    {
                        // its an response to a upload
                        this.localProvider.OnChangeSetUploaded(e.Id, e.ChangeSetResponse);
                    }

                    // Finally complete Refresh with error.
                    statistics.Error = e.Error;
                }
                else if (e.ChangeSetResponse != null)
                {
                    // its an response to a upload
                    this.localProvider.OnChangeSetUploaded(e.Id, e.ChangeSetResponse);

                    if (e.ChangeSetResponse.Error != null)
                    {
                        statistics.Error = e.ChangeSetResponse.Error;
                        return statistics;
                    }

                    // Increment the ChangeSets uploaded count
                    statistics.TotalChangeSetsUploaded++;
                    statistics.TotalUploads += e.BatchUploadCount;

                    // Update refresh stats
                    foreach (var e1 in e.ChangeSetResponse.ConflictsInternal)
                    {
                        if (e1 is SyncConflict)
                            statistics.TotalSyncConflicts++;
                        else
                            statistics.TotalSyncErrors++;
                    }

                    // Dont enqueue another request if its been cancelled
                    if (!cancellationToken.IsCancellationRequested)
                    {
                        if (!((bool)e.State))
                        {
                            // Check to see if this was the last batch or else enqueue another pending Upload request
                            statistics = await this.EnqueueUploadRequest(statistics, cancellationToken);
                        }
                        else
                        {
                            // That was the last batch. Issue an Download request
                            statistics = await this.EnqueueDownloadRequest(statistics, cancellationToken);
                        }
                    }
                    else
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                    }

                }
                else // It means its an Download response
                {
                    Debug.Assert(e.ChangeSet != null, "Completion is not for a download request.");

                    // Increment the refresh stats
                    if (e.ChangeSet != null)
                    {
                        statistics.TotalChangeSetsDownloaded++;
                        statistics.TotalDownloads += (uint)e.ChangeSet.Data.Count;

                        await this.localProvider.SaveChangeSet(e.ChangeSet);

                        // Dont enqueue another request if its been cancelled
                        if (!cancellationToken.IsCancellationRequested)
                        {
                            if (!e.ChangeSet.IsLastBatch)
                            {
                                // Enqueue the next download
                                statistics = await this.EnqueueDownloadRequest(statistics, cancellationToken);
                            }
                        }
                        else
                        {
                            cancellationToken.ThrowIfCancellationRequested();
                        }
                    }
                }
            }
            catch (OperationCanceledException)
            {
                // Re throw the operation cancelled
                throw;
            }
            catch (Exception exp)
            {
                if (ExceptionUtility.IsFatal(exp))
                    throw;
                statistics.Error = exp;
            }

            return statistics;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\ClientCommon\HttpCacheRequestHandlerAsync.cs
public async Task<CacheRequestResult> ProcessCacheRequestAsync(CacheRequest request, object state,
                                                                       CancellationToken cancellationToken)
        {
            if (cancellationToken.IsCancellationRequested)
                cancellationToken.ThrowIfCancellationRequested();

            var wrapper = new AsyncArgsWrapper
                              {
                                  UserPassedState = state,
                                  CacheRequest = request
                              };

            wrapper = await ProcessRequest(wrapper, cancellationToken);

            CacheRequestResult cacheRequestResult;

            if (wrapper.CacheRequest.RequestType == CacheRequestType.UploadChanges)
            {
                cacheRequestResult =
                    new CacheRequestResult(
                        wrapper.CacheRequest.RequestId,
                        wrapper.UploadResponse,
                        wrapper.CacheRequest.Changes.Count,
                        wrapper.Error,
                        wrapper.UserPassedState);
            }
            else
            {
                cacheRequestResult =
                    new CacheRequestResult(
                        wrapper.CacheRequest.RequestId,
                        wrapper.DownloadResponse,
                        wrapper.Error,
                        wrapper.UserPassedState);
            }
            return cacheRequestResult;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\ClientCommon\HttpCacheRequestHandlerAsync.cs
private async Task<AsyncArgsWrapper> ProcessRequest(AsyncArgsWrapper wrapper,
                                                            CancellationToken cancellationToken)
        {
            try
            {
                if (cancellationToken.IsCancellationRequested)
                    cancellationToken.ThrowIfCancellationRequested();

                var requestUri = new StringBuilder();
                requestUri.AppendFormat("{0}{1}{2}/{3}",
                                        BaseUri,
                                        (BaseUri.ToString().EndsWith("/")) ? string.Empty : "/",
                                        Uri.EscapeUriString(ScopeName),
                                        wrapper.CacheRequest.RequestType.ToString());

                string prefix = "?";
                // Add the scope params if any
                foreach (var kvp in scopeParameters)
                {
                    requestUri.AppendFormat("{0}{1}={2}", prefix, Uri.EscapeUriString(kvp.Key),
                                            Uri.EscapeUriString(kvp.Value));
                    if (prefix.Equals("?"))
                        prefix = "&";
                }

                // Create the WebRequest
                HttpWebRequest webRequest;

                if (credentials != null)
                {
                    // Create the Client Http request
                    webRequest = WebRequest.CreateHttp(new Uri(requestUri.ToString()));
                    // Add credentials
                    webRequest.Credentials = credentials;
                }
                else
                {
                    // Use WebRequest.Create the request. This uses any user defined prefix preferences for certain paths
                    webRequest = (HttpWebRequest) WebRequest.Create(requestUri.ToString());
                }

                // Set the method type
                webRequest.Method = "POST";
                webRequest.Accept = (SerializationFormat == SerializationFormat.ODataAtom)
                                        ? "application/atom+xml"
                                        : "application/json";
                webRequest.ContentType = (SerializationFormat == SerializationFormat.ODataAtom)
                                             ? "application/atom+xml"
                                             : "application/json";


                // Write on the stream
                using (Stream stream = await webRequest.GetRequestStreamAsync())
                {
                    if (wrapper.CacheRequest.RequestType == CacheRequestType.UploadChanges)
                        WriteUploadRequestStream(stream, wrapper);
                    else
                        WriteDownloadRequestStream(stream, wrapper);
                }

                // If error, return wrapper with error
                if (wrapper.Error != null)
                    return wrapper;

                // Get Response
                if (wrapper.CacheRequest.RequestType == CacheRequestType.UploadChanges)
                    wrapper.UploadResponse = new ChangeSetResponse();
                else
                    wrapper.DownloadResponse = new ChangeSet();

                HttpWebResponse webResponse;
                try
                {
                    webResponse = (HttpWebResponse) (await webRequest.GetResponseAsync());
                }
                catch (WebException we)
                {
                    if (wrapper.CacheRequest.RequestType == CacheRequestType.UploadChanges)
                        wrapper.UploadResponse.Error = we;
                    else
                        wrapper.Error = we;

                    return wrapper;
                }
                catch (SecurityException se)
                {
                    if (wrapper.CacheRequest.RequestType == CacheRequestType.UploadChanges)
                        wrapper.UploadResponse.Error = se;
                    else
                        wrapper.Error = se;

                    return wrapper;
                }

                if (wrapper.Error != null)
                    return wrapper;

                if (wrapper.CacheRequest.RequestType == CacheRequestType.UploadChanges)
                    await ReadUploadResponse(webResponse, wrapper);
                else
                    await ReadDownloadResponse(webResponse, wrapper);

                if (wrapper.Error != null)
                    return wrapper;
            }
            catch (OperationCanceledException)
            {
                // Re throw the operation cancelled
                throw;
            }
            catch (Exception e)
            {
                if (ExceptionUtility.IsFatal(e))
                    throw;

                wrapper.Error = e;
                return wrapper;
            }

            return wrapper;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\ClientCommon\HttpCacheRequestHandlerAsync.cs
private async Task ReadUploadResponse(HttpWebResponse response, AsyncArgsWrapper wrapper)
        {
            try
            {
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    Stream responseStream = response.GetResponseStream();

                    this.syncReader = (SerializationFormat == SerializationFormat.ODataAtom)
                        ? new ODataAtomReader(responseStream, this.knownTypes)
                        : (SyncReader)new ODataJsonReader(responseStream, this.knownTypes);

                    // Read the response
                    await Task.Factory.StartNew(() =>
                    {
                        while (syncReader.Next())
                        {
                            switch (syncReader.ItemType)
                            {
                                case ReaderItemType.Entry:
                                    IOfflineEntity entity = syncReader.GetItem();
                                    IOfflineEntity ackedEntity = entity;
                                    string tempId = null;

                                    // If conflict only one temp ID should be set
                                    if (syncReader.HasTempId() && syncReader.HasConflictTempId())
                                    {
                                        throw new CacheControllerException(
                                            string.Format(
                                                "Service returned a TempId '{0}' in both live and conflicting entities.",
                                                syncReader.GetTempId()));
                                    }

                                    // Validate the live temp ID if any, before adding anything to the offline context
                                    if (syncReader.HasTempId())
                                    {
                                        tempId = syncReader.GetTempId();
                                        CheckEntityServiceMetadataAndTempIds(wrapper, entity, tempId);
                                    }

                                    //  If conflict 
                                    if (syncReader.HasConflict())
                                    {
                                        Conflict conflict = syncReader.GetConflict();
                                        IOfflineEntity conflictEntity = (conflict is SyncConflict)
                                                                            ? ((SyncConflict)conflict).LosingEntity
                                                                            : ((SyncError)conflict).ErrorEntity;

                                        // Validate conflict temp ID if any
                                        if (syncReader.HasConflictTempId())
                                        {
                                            tempId = syncReader.GetConflictTempId();
                                            CheckEntityServiceMetadataAndTempIds(wrapper, conflictEntity, tempId);
                                        }

                                        // Add conflict                                    
                                        wrapper.UploadResponse.AddConflict(conflict);

                                        //
                                        // If there is a conflict and the tempId is set in the conflict entity then the client version lost the 
                                        // conflict and the live entity is the server version (ServerWins)
                                        //
                                        if (syncReader.HasConflictTempId() && entity.ServiceMetadata.IsTombstone)
                                        {
                                            //
                                            // This is a ServerWins conflict, or conflict error. The winning version is a tombstone without temp Id
                                            // so there is no way to map the winning entity with a temp Id. The temp Id is in the conflict so we are
                                            // using the conflict entity, which has the PK, to build a tombstone entity used to update the offline context
                                            //
                                            // In theory, we should copy the service metadata but it is the same end result as the service fills in
                                            // all the properties in the conflict entity
                                            //

                                            // Add the conflict entity                                              
                                            conflictEntity.ServiceMetadata.IsTombstone = true;
                                            ackedEntity = conflictEntity;
                                        }
                                    }

                                    // Add ackedEntity to storage. If ackedEntity is still equal to entity then add non-conflict entity. 
                                    if (!String.IsNullOrEmpty(tempId))
                                    {
                                        wrapper.UploadResponse.AddUpdatedItem(ackedEntity);
                                    }
                                    break;

                                case ReaderItemType.SyncBlob:
                                    wrapper.UploadResponse.ServerBlob = syncReader.GetServerBlob();
                                    break;
                            }
                        }
                    });

                    
                    if (wrapper.TempIdToEntityMapping != null && wrapper.TempIdToEntityMapping.Count != 0)
                    {
                        // The client sent some inserts which werent ack'd by the service. Throw.
                        var builder =
                            new StringBuilder(
                                "Server did not acknowledge with a permanent Id for the following tempId's: ");
                        builder.Append(string.Join(",", wrapper.TempIdToEntityMapping.Keys.ToArray()));
                        throw new CacheControllerException(builder.ToString());
                    }
                }
                else
                {
                    wrapper.UploadResponse.Error = new CacheControllerException(
                        string.Format("Remote service returned error status. Status: {0}, Description: {1}",
                                      response.StatusCode,
                                      response.StatusDescription));
                }
            }
            catch (Exception e)
            {
                if (ExceptionUtility.IsFatal(e))
                    throw;

                wrapper.Error = e;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\ClientCommon\HttpCacheRequestHandlerAsync.cs
private async Task ReadDownloadResponse(HttpWebResponse response, AsyncArgsWrapper wrapper)
        {
            try
            {
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    Stream responseStream = response.GetResponseStream();

                    // Create the SyncReader
                    this.syncReader = (SerializationFormat == SerializationFormat.ODataAtom)
                        ? new ODataAtomReader(responseStream, this.knownTypes)
                        : (SyncReader)new ODataJsonReader(responseStream, this.knownTypes);

                    await Task.Factory.StartNew(() =>
                    {
                        // Read the response
                        while (syncReader.Next())
                        {
                            switch (syncReader.ItemType)
                            {
                                case ReaderItemType.Entry:
                                    wrapper.DownloadResponse.AddItem(syncReader.GetItem());
                                    break;
                                case ReaderItemType.SyncBlob:
                                    wrapper.DownloadResponse.ServerBlob = syncReader.GetServerBlob();
                                    break;
                                case ReaderItemType.HasMoreChanges:
                                    wrapper.DownloadResponse.IsLastBatch = !syncReader.GetHasMoreChangesValue();
                                    break;
                            }
                        }

                    });

                }
                else
                {
                    wrapper.Error = new CacheControllerException(
                        string.Format("Remote service returned error status. Status: {0}, Description: {1}",
                                      response.StatusCode,
                                      response.StatusDescription));
                }
            }
            catch (Exception e)
            {
                if (ExceptionUtility.IsFatal(e))
                {
                    throw;
                }
                wrapper.Error = e;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\Common\StorageExtensions.cs
public async static Task<bool> FileExistsAsync(this StorageFolder folder, string name)
        {
            try
            {
                var files = await folder.GetFilesAsync();
                return files.Any(f => f.Name == name);

            }
            catch (Exception)
            {

                throw;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\Common\StorageExtensions.cs
public async static Task<bool> FolderExistsAsync(this StorageFolder folder, string name)
        {
            var folders = await folder.GetFoldersAsync();

            return folders.Any(f => f.Name == name);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\CacheData.cs
private async void ClearSyncConflict(SyncConflict syncConflict, WinEightContext context)
        {
            RemoveSyncConflict(syncConflict);
            await context.ClearSyncConflict(syncConflict);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\CacheData.cs
private async void ClearSyncError(SyncError syncError, WinEightContext context)
        {
            RemoveSyncError(syncError);
            await context.ClearSyncError(syncError);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\OfflineSyncErrorInfo.cs
public async Task ClearSyncConflict()
        {
            if (syncConflict != null)
            {
                await context.ClearSyncConflict(syncConflict);
                syncConflict = null;

                OnPropertyChanged("SyncConflict");
                OnPropertyChanged("HasSyncConflict");
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\OfflineSyncErrorInfo.cs
public async void ClearSyncError()
        {
            if (syncError != null)
            {
                await context.ClearSyncError(syncError);
                syncError = null;

                OnPropertyChanged("SyncError");
                OnPropertyChanged("HasSyncError");
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
public async Task<CacheData> Load(WinEightContext context)
        {
            ThrowIfDisposed();

            StorageFolder isoFolder = ApplicationData.Current.LocalFolder;

            // V곩fication que le folder exist
            var exist = await isoFolder.FolderExistsAsync(cachePath);

            // Crꢴion
            if (!exist)
                await isoFolder.CreateFolderAsync(cachePath);

            // Crꢴion du cache data
            CacheData cacheData = new CacheData(schema);

            // Lecture des fichiers
            await ReadFiles(cacheData, context);

            // Rꤵp곡tion de l'ancre

            // Start the cleanup timer
            cleanupTimer = new DispatcherTimer { Interval = new TimeSpan(0, Constants.TIMER_MINUTES_INTERVAL, 0) };
            cleanupTimer.Tick += CleanupTimerCallback;
            cleanupTimer.Start();

            return cacheData;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
public async Task SaveChanges(IEnumerable<OfflineEntity> entitiesChanges)
        {
            ThrowIfDisposed();

            // Add entitiesChanges to list
            AddChanges(entitiesChanges, false);

            string fileName = GetFileName(CacheFileType.SaveChanges);

            var isoFolder = ApplicationData.Current.LocalFolder;

            using (Stream fileStream = await OpenWriteFile(isoFolder, fileName))
            using (Stream writeStream = OpenWriteCryptoStream(fileStream))
            {
                var serializer = GetSerializer(typeof(IEnumerable<OfflineEntity>));
                serializer.WriteObject(writeStream, entitiesChanges);
            }

            filesSinceArchive++;

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
public async Task<IEnumerable<Conflict>> UploadSucceeded(Guid state, byte[] bAnchor, 
                            IEnumerable<Conflict> conflicts, IEnumerable<OfflineEntity> entities)
        {
            List<Conflict> returnConflicts = new List<Conflict>();


            // Don't need the sent entitiesChanges anymore
            sentChangesAwaitingResponse.Remove(state);

            string fileName = GetFileName(CacheFileType.UploadResponse);

            var isoFolder = ApplicationData.Current.LocalFolder;


            ResponseData responseData = new ResponseData();
            responseData.Anchor = bAnchor;

            // This approach assumes that there are not duplicates between the conflicts and the updated entities (there shouldn't be)
            responseData.Entities = (from c in conflicts
                                     select (OfflineEntity)c.LiveEntity).Concat(entities);

            using (Stream fileStream = await OpenWriteFile(isoFolder, fileName))
            using (Stream writeStream = OpenWriteCryptoStream(fileStream))
            {
                var serializer = GetSerializer(typeof(ResponseData));

                serializer.WriteObject(writeStream, responseData);
            }

            foreach (Conflict conflict in conflicts)
                returnConflicts.Add(await WriteConflictFile(isoFolder, conflict));

            // Increment creation of a new recent file since the last Archive
            filesSinceArchive++;

            return returnConflicts;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
public async Task SaveDownloadedChanges(byte[] bAnchor, IEnumerable<OfflineEntity> entities)
        {
            ThrowIfDisposed();

            ResponseData downloadData = new ResponseData();
            downloadData.Anchor = bAnchor;
            downloadData.Entities = entities;
            string fileName = GetFileName(CacheFileType.DownloadResponse);

            var isoFolder = ApplicationData.Current.LocalFolder;
            using (Stream fileStream = await OpenWriteFile(isoFolder, fileName))
            using (Stream writeStream = OpenWriteCryptoStream(fileStream))
            {
                var serializer = GetSerializer(typeof(ResponseData));

                serializer.WriteObject(writeStream, downloadData);
            }

            // Increment creation of a new recent file since the last Archive
            filesSinceArchive++;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
public async Task ClearSyncConflict(WinEightSyncConflict conflict)
        {
            ThrowIfDisposed();

            var isoFolder = ApplicationData.Current.LocalFolder;

            if (await isoFolder.FileExistsAsync(conflict.FileName))
            {
                var fileToDelete = await isoFolder.GetFileAsync(conflict.FileName);

                await DeleteFile(fileToDelete);
            }

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
public async Task ClearSyncError(WinEightSyncError error)
        {
            ThrowIfDisposed();

            var isoFolder = ApplicationData.Current.LocalFolder;
            if (await isoFolder.FileExistsAsync(error.FileName))
            {

                var fileToDelete = await isoFolder.GetFileAsync(error.FileName);

                await DeleteFile(fileToDelete);
            }

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
private async Task ReadFiles(CacheData cacheData, WinEightContext context)
        {
            StorageFolder isoFolder = ApplicationData.Current.LocalFolder;

            var cacheFolder = await isoFolder.GetFolderAsync(cachePath);

            var files = await cacheFolder.GetFilesAsync();

            files.OrderBy(sf => sf.Name);

            var arrayFiles = files.ToArray();

            bool exceptionCaught = false;

            List<FileInfo> conflictFiles = new List<FileInfo>();

            foreach (StorageFile file in arrayFiles)
            {
                try
                {
                    if (Constants.SpecialFile(file.Name) || !Constants.IsCacheFile(file.Name)) continue;

                    if (exceptionCaught)
                    {
                        await DeleteFile(file);
                    }
                    else
                    {
                        CacheFileType fileType = GetFileType(file.Name);
                        var fc = GetFileCount(file.Name);

                        fileCount = fc >= fileCount ? fc : fileCount;

                        switch (fileType)
                        {
                            case CacheFileType.DownloadResponse:
                                await ReadDownloadResponseFile(file.Name, cachePath, cacheData);
                                filesSinceArchive++;
                                break;

                            case CacheFileType.SaveChanges:
                                await ReadSaveChangesFile(file.Name, cachePath, cacheData);
                                filesSinceArchive++;
                                break;

                            case CacheFileType.UploadResponse:
                                await ReadUploadResponseFile(file.Name, cachePath, cacheData);
                                filesSinceArchive++;
                                break;

                            case CacheFileType.Conflicts:
                            case CacheFileType.Errors:

                                conflictFiles.Add(new FileInfo
                                {
                                    FileName = file.Name,
                                    FileType = fileType
                                });

                                break;

                            case CacheFileType.Archive:
                                await ReadArchiveFile(file.Name, cacheData);
                                filesSinceArchive = 0;
                                break;
                        }
                    }
                }
                catch (SerializationException)
                {
                    // if there's a serialization exception set a flag to remove the subsequent files
                    exceptionCaught = true;

                    DeleteFile(file);

                }
                catch (Exception)
                {
                    // this can happen for a variety of reasons.  The
                    exceptionCaught = true;
                }
            }

            foreach (FileInfo fi in conflictFiles)
            {
                try
                {
                    int count = GetFileCount(fi.FileName);

                    if (exceptionCaught && count > this.fileCount)
                    {
                        var deleteFile = await isoFolder.GetFileAsync(fi.FileName);

                        await DeleteFile(deleteFile);
                    }
                    else
                    {
                        if (fi.FileType == CacheFileType.Conflicts)
                            await ReadConflictFile(fi.FileName, cachePath, cacheData, context);
                        else if (fi.FileType == CacheFileType.Errors)
                            await ReadErrorFile(fi.FileName, cachePath, cacheData, context);
                    }
                }
                catch (SerializationException)
                {
                    // Drop this exception...if reading a conflict fails, it's not the worst thing.
                }
                catch (Exception)
                {
                    // Drop this exception...this will likely happen if a file can't be deleted.
                }
            }

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
private async Task ReadDownloadResponseFile(string fileName, string folderName, CacheData cacheData)
        {
            ResponseData downloadResponse = await ReadFile<ResponseData>(fileName, folderName);

            ;

            cacheData.AddSerializedDownloadResponse(downloadResponse.Anchor, downloadResponse.Entities.Cast<OfflineEntity>());
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
private async Task ReadSaveChangesFile(string fileName, string folderName, CacheData cacheData)
        {
            OfflineEntity[] entities = await ReadFile<OfflineEntity[]>(fileName, folderName);
            if (entities != null)
            {
                cacheData.AddSerializedLocalChanges(entities);
                AddChanges(entities, false);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
private async Task ReadUploadResponseFile(string fileName, String folderName, CacheData cacheData)
        {
            ResponseData uploadResponse = await ReadFile<ResponseData>(fileName, folderName);

            cacheData.AddSerializedUploadResponse(uploadResponse.Anchor, uploadResponse.Entities.Cast<OfflineEntity>());
            changes.Clear();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
private async Task ReadConflictFile(string fileName, string folderName, CacheData cacheData, WinEightContext context)
        {
            WinEightSyncConflict conflict = await ReadFile<WinEightSyncConflict>(fileName, folderName);
            WinEightSyncConflict syncConflict = new WinEightSyncConflict(conflict)
            {
                FileName = fileName
            };

            cacheData.AddSerializedConflict(syncConflict, context);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
private async Task ReadErrorFile(string fileName, string folderName, CacheData cacheData, WinEightContext context)
        {
            WinEightSyncError error = await ReadFile<WinEightSyncError>(fileName, folderName);

            WinEightSyncError syncError = new WinEightSyncError(error)
            {
                FileName = fileName
            };

            cacheData.AddSerializedError(syncError, context);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
private async Task<T> ReadFile<T>(string fileName, string directory)
        {
            var folder = await ApplicationData.Current.LocalFolder.GetFolderAsync(directory);

            return await ReadFile<T>(fileName, folder);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
private async Task<T> ReadFile<T>(string fileName, StorageFolder isoFolder)
        {
            T t;
            using (var readStream = await isoFolder.OpenStreamForReadAsync(fileName))
            {
                t = ReadObject<T>(readStream);
            }

            return t;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
private async Task<Conflict> WriteConflictFile(StorageFolder isoFolder, Conflict conflict)
        {
            Conflict returnConflict;

            OfflineEntityKey key = (OfflineEntityKey)((OfflineEntity)conflict.LiveEntity).GetIdentity();
            // Use the type name so it's included in the hash code.
            key.TypeName = conflict.LiveEntity.GetType().FullName;


            string fileName;
            if (conflict is WinEightSyncConflict)
            {
                fileName = GetFileName(CacheFileType.Conflicts, string.Format("{0}", key.GetHashCode()));

                returnConflict = new WinEightSyncConflict((SyncConflict)conflict)
                {
                    FileName = fileName
                };
            }
            else if (conflict is WinEightSyncError)
            {
                fileName = GetFileName(CacheFileType.Errors, string.Format("{0}", key.GetHashCode()));
                returnConflict = new WinEightSyncError((SyncError)conflict)
                {
                    FileName = fileName
                };

            }
            else
            {
                // This should never happen, but we need to keep the compiler happy.
                throw new ArgumentException("Unknown conflict type: " + conflict.GetType().FullName);
            }

            using (Stream fileStream = await OpenWriteFile(isoFolder, fileName))
            using (Stream writeStream = OpenWriteCryptoStream(fileStream))
            {
                WriteObject(writeStream, conflict);
            }

            return returnConflict;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
public async Task ClearConflicts()
        {
            await DeleteFiles(".C");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
public async Task ClearErrors()
        {
            await DeleteFiles(".E");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
public async Task ClearCacheFiles()
        {
            await DeleteFiles("*");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
public async Task ClearCache()
        {
            changes.Clear();
            await ClearCacheFiles();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
private async Task DeleteFiles(string searchPattern)
        {
            var isoFolder = ApplicationData.Current.LocalFolder;

            var cacheFolder = await isoFolder.GetFolderAsync(cachePath);
            IReadOnlyList<StorageFile> files= null;

            if (searchPattern == "*")
            {
                files = await cacheFolder.GetFilesAsync();
            }
            else
            {
                var options = new QueryOptions(CommonFileQuery.DefaultQuery, new[] { searchPattern });

                if (isoFolder.AreQueryOptionsSupported(options))
                {
                    var query = cacheFolder.CreateFileQueryWithOptions(options);
                    files = await query.GetFilesAsync();
                }
            }

            if (files != null)
                foreach (var file in files)
                    if (file.Name != Constants.LOCKFILE)
                        await DeleteFile(file);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
private static async Task DeleteFile(string fileName, StorageFolder folder)
        {
            if (await folder.FileExistsAsync(fileName))
            {
                var isoFile = await folder.GetFileAsync(fileName);
                await DeleteFile(isoFile);
            }

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
private static async Task DeleteFile(StorageFile isoFile)
        {
            int failCount = 0;
            bool retry;


            do
            {
                retry = false;
                try
                {
                    await isoFile.DeleteAsync(StorageDeleteOption.PermanentDelete);

                }
                catch (Exception)
                {
                    failCount++;

                    if (failCount <= 1)
                        retry = true;
                }
            } while (retry);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
private async void CleanupTimerCallback(Object sender, object o)
        {
            int tickCount;

            int originalFilesSyncArchive;

            // The point of lock here is to let any other write operation clear out
            // once that is done, we'll have the tick count and will only be dealing
            // with previously written files, so we don't need the lock anymore, and
            // we want to allow other operations to continue.
            // Releasing the lock as soon as we get the filesSinceArchive is Ok, 
            // since the other operations are not dependant on the Archive file to get written.
            // Anyways if another archive thread kicks in it will be blocked by the _archiveLock.
            lock (syncRoot)
            {
                // Make sure enough files were written so we don't just keep copying
                // archive files
                if (filesSinceArchive < ARCHIVE_FILE_THRESHOLD)
                    return;

                originalFilesSyncArchive = filesSinceArchive;
                filesSinceArchive = 0;
                tickCount = GetNextFileCount();
            }


            var isoFolder = ApplicationData.Current.LocalFolder;
            StorageFolder folder = null;
            bool caughtException = false;

            // The actual files we can do something about
            List<FileInfo> actualFiles = new List<FileInfo>();
            string fileName = null;

            try
            {
                byte[] archiveAnchor = null;
                // Get all the files under the cache path

                folder = await isoFolder.GetFolderAsync(cachePath);

                var fileList = await folder.GetFilesAsync();

                // Tri
                var listOrdered = fileList.OrderByDescending(file => file.Name);

                // reverse so that we can avoid duplicates better
                //fileList.Reverse();

                // Id manager for items that have been saved
                ArchiveIdManager serializedItems = new ArchiveIdManager();

                bool encounteredUpload = false;

                // Preprocess the list files to pick the ones we want.
                foreach (StorageFile file in listOrdered)
                {
                    if (Constants.IsCacheFile(file.Name))
                    {
                        int getFileCount = GetFileCount(file.Name);
                        if (getFileCount > tickCount)
                            continue;

                        CacheFileType fileType = GetFileType(file.Name);

                        if (fileType != CacheFileType.Conflicts && fileType != CacheFileType.Errors)
                        {
                            FileInfo fileInfo = new FileInfo
                            {
                                FileType = fileType,
                                FileName = file.Name,
                                HasUploadFile = false
                            };

                            actualFiles.Add(fileInfo);

                            // If the file is a SaveChanges file, we want to see if we should put
                            // a dirty flag in the archive file or not
                            if (fileType == CacheFileType.SaveChanges && encounteredUpload)
                            {
                                fileInfo.HasUploadFile = true;
                            }
                            // if there's an upload file, make sure we note it so that we can mark future
                            // save entitiesChanges files correctly.
                            else if (fileType == CacheFileType.UploadResponse)
                            {
                                encounteredUpload = true;
                            }
                        }
                    }
                }

                fileName = GetFileName(CacheFileType.Archive, null, tickCount);

                // Go through the files we parsed and handle correctly.
                using (Stream fileStream = await OpenWriteFile(isoFolder, fileName))
                using (Stream writeStream = OpenWriteCryptoStream(fileStream))
                {
                    bool encounteredArchive = false;
                    foreach (FileInfo fi in actualFiles)
                    {
                        byte[] currentAnchor = null;
                        switch (fi.FileType)
                        {
                            case CacheFileType.DownloadResponse:
                                ResponseData drd = await ReadFile<ResponseData>(fi.FileName, folder);
                                currentAnchor = drd.Anchor;
                                WriteArchiveEntities(drd.Entities.Cast<OfflineEntity>(), false, writeStream, serializedItems);
                                break;

                            case CacheFileType.UploadResponse:
                                ResponseData responseData = await ReadFile<ResponseData>(fi.FileName, folder);
                                currentAnchor = responseData.Anchor;
                                WriteArchiveEntities(responseData.Entities.Cast<OfflineEntity>(), false, writeStream, serializedItems);
                                break;

                            case CacheFileType.SaveChanges:
                                OfflineEntity[] entities = await ReadFile<OfflineEntity[]>(fi.FileName, folder);
                                WriteArchiveEntities(entities.Cast<OfflineEntity>(), !fi.HasUploadFile, writeStream, serializedItems);
                                break;

                            case CacheFileType.Archive:
                                currentAnchor = await TransferArchiveFile(folder, fi.FileName, writeStream, serializedItems);
                                encounteredArchive = true;
                                break;

                        }

                        // Since reading is happening from the end, only need to set the anchor if the
                        // last oe was null
                        if (archiveAnchor == null)
                            archiveAnchor = currentAnchor;

                        // Since reading is happening from the end, once an archive file is read, we
                        // can skip everything else.
                        if (encounteredArchive)
                            break;
                    }

                    // At the end write the anchor
                    DataContractJsonSerializer serializer = new DataContractJsonSerializer(typeof(byte[]));
                    serializer.WriteObject(writeStream, archiveAnchor);

                }
            }
            catch (Exception e)
            {
                if (e is SerializationException)
                {
                    caughtException = true;

                    // delete the archive file
                    if (fileName != null)
                        DeleteFile(fileName, folder);

                    // if something failed, restore the files synce archive count
                    lock (syncRoot)
                    {
                        // Do an add here because it could have been incremented.
                        filesSinceArchive += originalFilesSyncArchive;
                    }
                }
                else
                {
                    throw;
                }
            }

            if (caughtException) return;

            // If all of this completed successfully, delete the files. This is outside of the try-catch above
            // because we want to avoid doing a rearchive if the only failure was deleting a file.
            foreach (FileInfo fi in actualFiles)
            {
                await DeleteFile(fi.FileName, folder);
            }

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
private async Task ReadArchiveFile(string file, CacheData cacheData)
        {
            byte[] anchorBlob = null;
            List<ArchiveEntity> entities = new List<ArchiveEntity>();
            bool validFile = false;


            var isoFolder = ApplicationData.Current.LocalFolder;
            var cacheFolder = await isoFolder.GetFolderAsync(cachePath);

            using (Stream fileStream = await OpenReadFile(cacheFolder, file))
            using (Stream readStream = OpenReadCryptoStream(fileStream))
            using (StreamReader reader = new StreamReader(readStream))
            {
                // Create the serializer
                DataContractJsonSerializer serializer = new DataContractJsonSerializer(typeof(ArchiveEntity), knownTypes);

                // The approach here is to use a stream reader to read out each line, then convert that line to bytes
                // and use the json serializer.

                // If it's a curly brace, we're reading an entity
                while (!reader.EndOfStream && reader.Peek() == '{')
                {
                    string line = reader.ReadLine();
                    using (MemoryStream memStream = new MemoryStream(Encoding.UTF8.GetBytes(line)))
                    {
                        ArchiveEntity entity = (ArchiveEntity)serializer.ReadObject(memStream);
                        entities.Add(entity);
                    }
                }

                // If it's a square bracket, we're reading the anchor
                if (!reader.EndOfStream && reader.Peek() == '[')
                {
                    string line = reader.ReadLine();
                    using (MemoryStream memStream = new MemoryStream(Encoding.UTF8.GetBytes(line)))
                    {
                        anchorBlob = (byte[])(new DataContractJsonSerializer(typeof(byte[]))).ReadObject(memStream);

                        // The file is only valid if the anchor is read successfully.
                        validFile = true;
                    }
                }
            }

            // If the file was valid, we can use the data
            if (validFile)
            {
                // Clear existing data out
                cacheData.ClearCollections();
                changes.Clear();

                foreach (ArchiveEntity archiveEntity in entities)
                {
                    OfflineEntity isoEntity = archiveEntity.Entity;

                    // Determine whether the change was local or downloaded
                    if (archiveEntity.IsDirty)
                    {
                        cacheData.AddSerializedLocalChange(isoEntity);
                        changes.Add((OfflineEntityKey)isoEntity.GetIdentity(), isoEntity);
                    }
                    else
                    {
                        cacheData.AddSerializedDownloadItem(isoEntity);
                    }
                }

                // Set the anchor with the one read from the file.
                cacheData.AnchorBlob = anchorBlob;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
private async Task<Stream> OpenReadFile(StorageFolder isoFolder, string path)
        {
            var stream = await isoFolder.OpenStreamForReadAsync(path);

            return stream;

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
private async Task<Stream> OpenWriteFile(StorageFolder isoFolder, string path)
        {
            var stream = await isoFolder.OpenStreamForWriteAsync(path, CreationCollisionOption.ReplaceExisting);
            return stream;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\StorageHandler.cs
private async Task<byte[]> TransferArchiveFile(StorageFolder isoFolder, string fileName, Stream stream, ArchiveIdManager serializedItems)
        {
            byte[] currentAnchor = null;

            // Flush the stream
            stream.Flush();

            // Record the position.  If reading the source archive file fails, we want to reset the length to the current position.
            long position = stream.Position;

            byte[] eolBuffer = Encoding.UTF8.GetBytes("\r\n");

            using (Stream inputStream = await OpenReadFile(isoFolder, fileName))
            using (Stream readStream = OpenReadCryptoStream(inputStream))
            {
                bool validFile = false;

                using (StreamReader reader = new StreamReader(readStream))
                {
                    DataContractJsonSerializer serializer = new DataContractJsonSerializer(typeof(ArchiveEntity), knownTypes);
                    while (!reader.EndOfStream)
                    {
                        string line = reader.ReadLine();

                        if (line.StartsWith("{"))
                        {

                            byte[] lineBuffer = Encoding.UTF8.GetBytes(line);
                            using (MemoryStream memStream = new MemoryStream(lineBuffer))
                            {
                                ArchiveEntity entity = (ArchiveEntity)serializer.ReadObject(memStream);

                                if (!serializedItems.ContainsEntity(entity.Entity))
                                {
                                    stream.Write(lineBuffer, 0, lineBuffer.Length);
                                    stream.Write(eolBuffer, 0, eolBuffer.Length);
                                }

                                serializedItems.ProcessedEntity(entity.Entity);
                            }
                        }
                        else if (line.StartsWith("["))
                        {
                            using (MemoryStream memStream = new MemoryStream(Encoding.UTF8.GetBytes(line)))
                            {
                                currentAnchor = (byte[])(new DataContractJsonSerializer(typeof(byte[]))).ReadObject(memStream);
                                validFile = true;
                                break;
                            }
                        }

                    }

                }

                // if the file wasn't valid, undo everything we just wrote by setting the length back to our original position
                if (!validFile)
                {
                    stream.SetLength(position);

                    // Throw an exception so the anchor doesn't get used and the archive file is scrapped (previously read files
                    // will be worthless anyway
                    throw new SerializationException("Transferring archive file failed");
                }
            }


            return currentAnchor;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\SyncErrorInfo.cs
public async Task ClearSyncConflict()
        {
            if (syncConflict != null)
            {
                await context.ClearSyncConflict(syncConflict);
                syncConflict = null;

                OnPropertyChanged("SyncConflict");
                OnPropertyChanged("HasSyncConflict");
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\SyncErrorInfo.cs
public async void ClearSyncError()
        {
            if (syncError != null)
            {
                await context.ClearSyncError(syncError);
                syncError = null;

                OnPropertyChanged("SyncError");
                OnPropertyChanged("HasSyncError");
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\WinEightContext.cs
public async Task LoadAsync()
        {
            ThrowIfDisposed();

            // Use the ThreadPool to queue our load.  This will happen regardless of whether the cache is already loaded
            if (loaded)
                return;
           
            Exception exception = null;

            try
            {
                if (!loaded)
                {
                    // Verify the isolatedStorageSchema and uri match was was previously used for the cache path.
                    await CheckSchemaAndUri(cachePath, schema, scopeUri, scopeName);

                    // Load the data.
                    // cacheData may be not null if we made a sync after a clearcache action
                    if (cacheData == null)
                        cacheData = await StorageHandler.Load(this);

                    loaded = true;
                }
            }
            catch (Exception e)
            {
                if (ExceptionUtility.IsFatal(e))
                    throw;

                // Catch the exception and store it.
                exception = e;
            }

            // Pass the event args (including the exception to the callback).
            EventHandler<LoadCompletedEventArgs> loadCompleted = LoadCompleted;
            
            if (loadCompleted != null)
                loadCompleted(this, new LoadCompletedEventArgs(exception));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\WinEightContext.cs
public async Task<OfflineCollection<Object, T>> GetCollection<T>()
            where T : OfflineEntity
        {
            ThrowIfDisposed();
            await LoadAsync();

            return (OfflineCollection<Object, T>)cacheData.Collections[typeof(T)];
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\WinEightContext.cs
public async Task SaveChangesAsync()
        {
            ThrowIfDisposed();

            // If the cache is not loaded, this is a no-op
            if (!loaded)
                return;

            if (syncActive)
                throw new SyncActiveException("SaveChanges is not permitted while sync is active");

            using (saveSyncLock.LockObject())
            {
                // Don't allow SaveChanges to execute if there are unhandled conflicts from a previous
                // save attempt
                if (offlineConflicts != null && offlineConflicts.Count != 0)
                {
                    throw new SaveFailedException(offlineConflicts,
                                                  "Existing store conflicts must be resolved or have items rejected before " +
                                                  "SaveChanges can be called");
                }

                // Determine if there are any items that can't be saved
                ICollection<OfflineEntity> failures = cacheData.GetSaveFailures();

                if (failures.Count != 0)
                {
                    // Generate store conflicts for the items.
                    offlineConflicts = (from f in failures
                                      select new OfflineConflict(this)
                                                 {
                                                     ModifiedEntity = f,
                                                     LiveEntity = f.GetOriginal()
                                                 }).ToList();

                    // Make sure the modified entities point to their store conflicts
                    foreach (OfflineConflict sc in offlineConflicts)
                    {
                        sc.ModifiedEntity.OfflineConflict = sc;
                    }

                    // Throw an exception and let the user know which items are in conflict
                    // They will also be able to be retrieved from the c later.
                    throw new SaveFailedException(offlineConflicts,
                                                  "One or more modified items has had an update received from the service. The conflicts must be resolved before SaveChanges can complete successfully.");
                }

                // Everything is ok, so actually save changes.
                IEnumerable<OfflineEntity> changes = cacheData.CommitChanges();

                if (changes != null && changes.Any())
                    await StorageHandler.SaveChanges(changes);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\WinEightContext.cs
public async Task<CacheRefreshStatistics> SynchronizeAsync()
        {
            if (!loaded)
                await LoadAsync();

            return await this.cacheController.SynchronizeAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\WinEightContext.cs
public async Task<CacheRefreshStatistics> SynchronizeAsync(CancellationToken cancellationToken)
        {
            if (!loaded)
                await LoadAsync();

            return await this.cacheController.SynchronizeAsync(cancellationToken);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\WinEightContext.cs
public async Task DeleteItem<T>(T entity) where T : OfflineEntity
        {
            ThrowIfDisposed();
            if (entity == null)
                throw new ArgumentNullException("entity");

            // Call load before doing any work.  This is a no-op if the data is already loaded.
            await LoadAsync();


            // Lock so nothing changes while adding the entity
            if (syncActive)
                throw new SyncActiveException("Deleting changes is not permitted while sync is active");

            using (saveSyncLock.LockObject())
            {
                // Make sure the c has been synchronized once
                if (cacheData.AnchorBlob == null)
                {
                    throw new InvalidOperationException(
                        "Anchor is null.  Items cannot be deleted before an initial sync has occurred");
                }

                // Find the corresponding collection and throw
                ((OfflineCollection<Object, T>)cacheData.Collections[typeof(T)]).DeleteItem(entity);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\WinEightContext.cs
public async Task AddItem<T>(T entity) where T : OfflineEntity
        {
            ThrowIfDisposed();
            
            if (entity == null)
                throw new ArgumentNullException("entity");

            // Make sure the c is loaded.
            await LoadAsync();

            // Lock so nothing changes while adding the entity
            if (syncActive)
                throw new SyncActiveException("Adding changes is not permitted while sync is active");

            using (saveSyncLock.LockObject())
            {
                // Make sure sync has happened.
                if (cacheData.AnchorBlob == null)
                {
                    throw new InvalidOperationException(
                        "Anchor is null.  Items cannot be added before an initial sync has occurred");
                }

                // Add the item
                ((OfflineCollection<Object, T>)cacheData.Collections[typeof(T)]).Add(entity);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\WinEightContext.cs
public async Task ClearSyncConflicts()
        {
            ThrowIfDisposed();

            await LoadAsync();

            using (saveSyncLock.LockObject())
            {
                cacheData.ClearSyncConflicts();
                await StorageHandler.ClearConflicts();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\WinEightContext.cs
public async Task ClearSyncErrors()
        {
            ThrowIfDisposed();

            await LoadAsync();

            using (saveSyncLock.LockObject())
            {
                cacheData.ClearSyncErrors();
                await StorageHandler.ClearErrors();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\WinEightContext.cs
public async Task ClearCache()
        {
            ThrowIfDisposed();


            // If loaded, clear the in-memory data.
            if (loaded)
                cacheData.Clear();

            // Delete storage internal changes cache and the files.
            await StorageHandler.ClearCache();

            // Make loaded to false to refresh Schema on last Sync
            this.loaded = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\WinEightContext.cs
private async void InternalBeginSession()
        {
            //Reset IsFirst Sync. This will be set only when the server blob is null;
            isFirstSync = false;

            // Load the cache if it is not already loaded.
            await LoadAsync();

            // Lock everything else out while sync is happening.
            saveSyncLock.Lock();
            syncActive = true;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\WinEightContext.cs
public override async void OnChangeSetUploaded(Guid state, ChangeSetResponse response)
        {
            ThrowIfDisposed();

            if (response == null)
                throw new ArgumentNullException("response");

            if (!syncActive)
                throw new InvalidOperationException("OnChangeSetUploaded cannot be called without calling BeginSession");

            if (response.Error == null)
            {
                IEnumerable<OfflineEntity> updatedItems =
                    response.UpdatedItems.Cast<OfflineEntity>();

                // Notify the disk management that changes uploaded successfully.
                IEnumerable<Conflict> conflicts =
                    await StorageHandler.UploadSucceeded(state, response.ServerBlob, response.Conflicts, updatedItems);

                // Update the in-memory representation.
                cacheData.AddUploadChanges(response.ServerBlob, conflicts, updatedItems, this);
            }
            else
            {
                StorageHandler.UploadFailed(state);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\WinEightContext.cs
public override async Task SaveChangeSet(ChangeSet changeSet)
        {
            ThrowIfDisposed();

            if (changeSet == null)
                throw new ArgumentNullException("changeSet");

            if (!syncActive)
                throw new InvalidOperationException("SaveChangeSet cannot be called without calling BeginSession");

            if (changeSet.Data.Count == 0 && !isFirstSync)
                return;

            //// Because i cant be async and must be void (override base class method)
            //// Use of Task.Run(async () => ....
            ////
            //Task task = Task.Run(async () => { await SaveChangeSetInternal(changeSet); });

            //// Wait for task to finish
            //task.Wait();

            await SaveChangeSetInternal(changeSet);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\WinEightContext.cs
private async Task SaveChangeSetInternal(ChangeSet changeSet)
        {
            // Cast to the isolated storage-specific entity.
            IEnumerable<OfflineEntity> entities = changeSet.Data.Cast<OfflineEntity>();

            // Store the downloaded changes to disk.
            if (entities == null) return;

            await StorageHandler.SaveDownloadedChanges(changeSet.ServerBlob, entities);

            // Update in-memory representation.
            cacheData.DownloadedChanges(changeSet.ServerBlob, entities);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\WinEightContext.cs
private async Task CheckSchemaAndUri(string path, OfflineSchema isolatedStorageSchema, Uri uri,
                                             string scope)
        {
            // Get the isolated storage file for the application.
            StorageFolder isoFolder = ApplicationData.Current.LocalFolder;

            bool cachePathExist = await isoFolder.FolderExistsAsync(path);

            if (!cachePathExist)
                await isoFolder.CreateFolderAsync(path);

            StorageFolder cacheFolder = await isoFolder.GetFolderAsync(path);

            // Generate the path to the scope info file.
            string infoPath = Constants.SCOPE_INFO;

            bool fileExist = await cacheFolder.FileExistsAsync(infoPath);

            // If the file exists, read it, otherwise, everything is fine.
            if (fileExist)
            {
                // Open the scope file.
                using (Stream stream = await cacheFolder.OpenStreamForReadAsync(infoPath))
                {
                    Stream readStream = stream;

                    try
                    {
                        List<string> fileTypes;
                        string fileUri;
                        string fileScopeName;

                        // Read the file types and uri from the file.
                        ReadSchemaAndUri(readStream, out fileUri, out fileScopeName, out fileTypes);

                        // Verify the scope uri.
                        if (fileUri != uri.AbsoluteUri)
                            throw new ArgumentException(
                                "Specified uri does not match uri previously used for the specified cache path");

                        if (fileScopeName != scope)
                            throw new ArgumentException(
                                "Specified scope name does not match scope name previously used for the specified cache path");

                        // Verify the types.
                        List<Type> userTypes = isolatedStorageSchema.Collections.ToList();

                        // Sort by name (the class Type isn't sortable)
                        userTypes.Sort((x, y) => String.Compare(x.FullName, y.FullName, StringComparison.Ordinal));

                        if (userTypes.Count != fileTypes.Count)
                            throw new ArgumentException(
                                "Specified isolatedStorageSchema does not match isolatedStorageSchema previously used for cache path");

                        if (userTypes.Where((t, i) => t.FullName != fileTypes[i]).Any())
                            throw new ArgumentException(
                                "Specified isolatedStorageSchema does not match isolatedStorageSchema previously used for cache path");
                    }
                    finally
                    {
                        readStream.Dispose();
                    }
                }
            }
            else
            {
                // If the file doesn't exist, write the new info.
                using (
                    Stream stream =
                        await cacheFolder.OpenStreamForWriteAsync(infoPath, CreationCollisionOption.ReplaceExisting))
                {
                    Stream writeStream = stream;

                    try
                    {
                        WriteSchemaFile(writeStream, uri, scope, isolatedStorageSchema);
                    }
                    finally
                    {
                        writeStream.Dispose();
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\WinEightContext.cs
internal  async Task ClearSyncConflict(SyncConflict conflict)
        {
            using (saveSyncLock.LockObject())
            {
                WinEightSyncConflict winEightSyncConflict = conflict as WinEightSyncConflict;

                if (winEightSyncConflict == null)
                    return;

                cacheData.RemoveSyncConflict(conflict);
                await StorageHandler.ClearSyncConflict(winEightSyncConflict);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\IsolatedStorage\WinEightContext.cs
internal async Task ClearSyncError(SyncError error)
        {
            using (saveSyncLock.LockObject())
            {
                WinEightSyncError winEightSyncError = error as WinEightSyncError;

                if (winEightSyncError == null)
                    return;

                cacheData.RemoveSyncError(error);
                await StorageHandler.ClearSyncError(winEightSyncError);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\SQLite\SQLiteContext.cs
public async Task LoadSchema()
        {
            ThrowIfDisposed();

            if (loaded)
                return;

            await CheckSchemaAndUri(schema, scopeUri, scopeName);

            loaded = true;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\SQLite\SQLiteContext.cs
public async Task<CacheRefreshStatistics> SynchronizeAsync()
        {
            if (!loaded)
                await LoadSchema();

            return await this.cacheController.SynchronizeAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\SQLite\SQLiteContext.cs
public async Task<CacheRefreshStatistics> SynchronizeAsync(CancellationToken cancellationToken)
        {
            if (!loaded)
                await LoadSchema();

            return await this.cacheController.SynchronizeAsync(cancellationToken);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\SQLite\SQLiteContext.cs
private async void InternalBeginSession()
        {
            //Reset IsFirst Sync. This will be set only when the server blob is null;
            isFirstSync = false;

            syncActive = true;

            // Read Schema if not already readed.
            if (!loaded)
                await LoadSchema();

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\SQLite\SQLiteContext.cs
public override async Task SaveChangeSet(ChangeSet changeSet)
        {
            ThrowIfDisposed();

            if (changeSet == null)
                throw new ArgumentNullException("changeSet");

            if (!syncActive)
                throw new InvalidOperationException("SaveChangeSet cannot be called without calling BeginSession");

            // Cast to the specific entity.
            IEnumerable<SQLiteOfflineEntity> entities = changeSet.Data.Cast<SQLiteOfflineEntity>();

            // Save the configuration (Blob and LastSyncDate) and all Entitites.
            await Task.Factory.StartNew(async () =>
            {
                Manager.SaveDownloadedChanges(entities);

                // Set the new Last Sync Date
                this.Configuration.LastSyncDate = DateTime.UtcNow;
                this.Configuration.AnchorBlob = changeSet.ServerBlob;

                await Manager.SaveConfiguration(this.Configuration);
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\SQLite\SQLiteContext.cs
private async Task CheckSchemaAndUri(OfflineSchema offlineSchema, Uri uri, string scope)
        {
            var databaseExist = true; // await this.Manager.DatabaseExist();

            this.Configuration = await this.Manager.ReadConfiguration(scope);

            if (databaseExist && this.Configuration != null)
            {

                // Verify the scope uri.
                if (this.Configuration.ServiceUri.AbsoluteUri != uri.AbsoluteUri)
                    throw new ArgumentException(
                        "Specified uri does not match uri previously used for the specified database");

                // Verify the types.
                List<Type> userTypes = offlineSchema.Collections.ToList();

                // Sort by name (the class Type isn't sortable)
                userTypes.Sort((x, y) => String.Compare(x.FullName, y.FullName, StringComparison.Ordinal));

                if (userTypes.Count != this.Configuration.Types.Count)
                    throw new ArgumentException(
                        "Specified offlineSchema does not match database Offline schema previously used for cache path");

                if (userTypes.Where((t, i) => t.FullName != this.Configuration.Types[i]).Any())
                    throw new ArgumentException(
                        "Specified offlineSchema does not match database Offline schema previously used for cache path");

            }
            else
            {
                if (!await this.Manager.ScopeTableExist())
                    await this.Manager.CreateScopeTable();

                // Get the list of types as strings and sort to make comparison
                // faster when reading.
                List<string> types = (from type in offlineSchema.Collections
                                      select type.FullName).ToList();
                types.Sort();

                // Create the initial configuration
                this.Configuration = new SQLiteConfiguration
                {
                    AnchorBlob = null,
                    LastSyncDate = new DateTime(1900, 01, 01),
                    ScopeName = scope,
                    ServiceUri = uri,
                    Types = types
                };

                await this.Manager.SaveConfiguration(this.Configuration);
            }

            // Try to save tables if not exists
            await this.Manager.CreateTables();

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\SQLite\SQLiteManager.cs
public async Task<bool> DatabaseExist()
        {
            // Get the isolated storage file for the application.
            StorageFolder applicationFolder = ApplicationData.Current.LocalFolder;

            var files = await applicationFolder.GetFilesAsync();
            return files.Any(f => f.Name == DatabaseName);


            //return await applicationFolder.FileExistsAsync(DatabaseName);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\SQLite\SQLiteManager.cs
internal async Task<bool> ScopeTableExist()
        {
            return await Task<Boolean>.Factory.StartNew(() =>
            {

                using (SQLiteConnection connection = new SQLiteConnection(this.DatabasePath))
                {
                    try
                    {
                        SQLiteCommand sqlCommand = new SQLiteCommand(connection);

                        sqlCommand.CommandText = SQLiteConstants.ScopeExist;

                        var tableScope = sqlCommand.ExecuteScalar<String>();

                        return tableScope == "ScopeInfoTable";
                    }
                    catch (Exception)
                    {
                        return false;
                    }

                }
            });

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\SQLite\SQLiteManager.cs
internal async Task CreateTables()
        {
            await Task.Factory.StartNew(() =>
             {

                 if (schema == null || schema.Collections == null || schema.Collections.Count == 0)
                     return;

                 foreach (var table in schema.Collections.Where(table => table.Name != SQLiteConstants.ScopeInfo))
                     this.sqliteHelper.CreateTable(table);
             });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\SQLite\SQLiteManager.cs
internal async Task CreateScopeTable()
        {
            await Task.Factory.StartNew(() =>
            {


                using (SQLiteConnection connection = new SQLiteConnection(this.DatabasePath))
                {
                    try
                    {
                        connection.CreateTable<ScopeInfoTable>();
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine(ex.Message);
                    }


                }
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\SQLite\SQLiteManager.cs
internal async Task<SQLiteConfiguration> ReadConfiguration(string databaseScopeName)
        {

            return await Task<SQLiteConfiguration>.Factory.StartNew((() =>
            {
                SQLiteConfiguration configuration = new SQLiteConfiguration();

                using (SQLiteConnection connection = new SQLiteConnection(this.DatabasePath, SQLiteOpenFlags.Create | SQLiteOpenFlags.ReadWrite))
                {
                    string s = null;
                    List<String> t = new List<string>();
                    bool scopeInfoTableFounded = false;
                    DateTime d = new DateTime(1900, 1, 1);
                    Byte[] blob = null;
                    try
                    {
                        string name = databaseScopeName;

                        connection.RunInTransaction(() =>
                            {
                                var scopeInfoTable = connection.Find<ScopeInfoTable>(name);

                                if (scopeInfoTable == null)
                                {
                                    scopeInfoTableFounded = false;
                                    return;
                                }
                                XDocument document = XDocument.Parse(scopeInfoTable.Configuration);

                                s = scopeInfoTable.ServiceUri;

                                t = (from tt in document.Descendants()
                                     where tt.Name == "Types"
                                     select tt.Value).ToList();

                                d = scopeInfoTable.LastSyncDate;

                                blob = scopeInfoTable.AnchorBlob;

                                scopeInfoTableFounded = true;

                            });
                    }
                    catch
                    {
                        scopeInfoTableFounded = false;
                    }

                    if (!scopeInfoTableFounded)
                        return null;

                    // Configure Configuration en return it
                    configuration.ScopeName = databaseScopeName;
                    configuration.ServiceUri = new Uri(s);
                    configuration.Types = t;
                    configuration.LastSyncDate = d;
                    configuration.AnchorBlob = blob;


                }

                return configuration;
            }));


        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sqlitesync4winphone8\SyncClient.WindowsPhone8\SQLite\SQLiteManager.cs
internal async Task SaveConfiguration(SQLiteConfiguration configuration)
        {
            XElement xScopeInfoTable = new XElement("ScopeInfoTable");

            // Create Types xml doc.
            foreach (var t in configuration.Types)
                xScopeInfoTable.Add(new XElement("Types", t));

            XDocument doc = new XDocument(xScopeInfoTable);

            var scopeInfoTable = new ScopeInfoTable
            {
                ScopeName = configuration.ScopeName,
                ServiceUri = configuration.ServiceUri.AbsoluteUri,
                Configuration = doc.ToString(),
                AnchorBlob = configuration.AnchorBlob,
                LastSyncDate = configuration.LastSyncDate
            };

            await Task.Factory.StartNew(() =>
            {

                // Saving Configuration
                using (SQLiteConnection connection = new SQLiteConnection(this.DatabasePath))
                {
                    try
                    {
                        connection.RunInTransaction(() =>
                        {
                            if (connection.Find<ScopeInfoTable>(configuration.ScopeName) != null)
                                connection.Update(scopeInfoTable);
                            else
                                connection.Insert(scopeInfoTable);
                        });

                    }
                    catch (Exception ex)
                    {

                        throw new Exception("Impossible to save Sync Configuration", ex);
                    }
                }
            });

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\IO\SugarSyncDirectoryInfo.cs
public async Task<SugarSyncDirectoryInfo> CreateDirectoryInfo(string folderName)
        {
            /*
            <folder>
                <displayName>subFolder</displayName>
            </folder>
            */

            if(string.IsNullOrEmpty(folderName))
            {
                return null;
            }

            XElement folder = XElement.Parse("<folder/>");
            XElement displayName = XElement.Parse("<displayName/>");

            displayName.Value = folderName;

            folder.Add(displayName);

            IsBusy = true;

            var webClient = await Account.GetWebClientAsync();

            using (var stream = await webClient.OpenWriteTaskAsync(RefUri, "POST"))
            {
                byte[] buffer = Encoding.UTF8.GetBytes(folder.ToString());

                stream.Write(buffer, 0, buffer.Length);
                stream.Flush();
                stream.Close();
            }

            await RefreshAsync();

            var directory = (from d in Contents.OfType<SugarSyncDirectoryInfo>()
                            where d.Name.Equals(folderName, StringComparison.InvariantCultureIgnoreCase)
                            select d).SingleOrDefault();

            IsBusy = false;

            return directory;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\IO\SugarSyncDirectoryInfo.cs
public async Task<SugarSyncFileInfo> CreateFileInfo(string fileName, string contentType)
        {
            /*
            <file>
                <displayName>mypicture</displayName>
                <mediaType>image/jpeg</mediaType>
            </file>
            */

            XElement file = XElement.Parse("<file/>");
            XElement displayName = XElement.Parse("<displayName/>");
            XElement mediaType = XElement.Parse("<mediaType/>");

            displayName.Value = fileName;
            mediaType.Value = contentType;

            file.Add(displayName);
            file.Add(mediaType);

            IsBusy = true;

            var webClient = await Account.GetWebClientAsync();

            var result = webClient.UploadStringTaskAsync(RefUri, "POST", file.ToString());

            var refUri = new Uri(webClient.ResponseHeaders["Location"], UriKind.Absolute);

            var fileInfo = new SugarSyncFileInfo(fileName, Account, refUri);

            IsBusy = false;

            return fileInfo;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\IO\SugarSyncDirectoryInfo.cs
public async Task Delete()
        {
            IsBusy = true;

            var webClient = await Account.GetWebClientAsync();

            using (var stream = await webClient.OpenWriteTaskAsync(RefUri, "DELETE"))
            {
                stream.Close();
            }

            IsBusy = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\IO\SugarSyncDirectoryInfo.cs
public async Task UpdateInfo(string newName)
        {
            /*
            <folder>
                <displayName>newFolderName</displayName>
            </folder>
            */

            IsBusy = true;

            var webClient = await Account.GetWebClientAsync();

            var file = XElement.Parse("<folder/>");

            var displayName = XElement.Parse("<displayName/>");

            displayName.Value = newName;

            file.Add(displayName);

            using (var stream = await webClient.OpenWriteTaskAsync(RefUri, "PUT"))
            {
                var buffer = Encoding.UTF8.GetBytes(file.ToString());
                stream.Write(buffer, 0, buffer.Length);
                stream.Flush();
                stream.Close();
            }

            IsBusy = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\IO\SugarSyncDirectoryInfo.cs
public async override Task RefreshAsync()
        {
            Contents = null;
            
            IsBusy = true;

            if(RefUri != null)
            {
                await RefreshRef();
            }

            if (ContentsUri != null)
            {
                await RefreshContents();   
            }

            IsBusy = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\IO\SugarSyncDirectoryInfo.cs
private async Task RefreshRef()
        {
            var result = await Account.GetXmlAsync(RefUri);

            /*
                <folder>
                   <displayName>folder1</displayName>
                   <timeCreated>2009-06-25T11:31:05.000-07:00</timeCreated>
                   <parent>https://api.sugarsync.com/folder/myfolderId</parent>
                   <collections>https://api.sugarsync.com/folder/myfolderId/contents?type=folder
                   </collections>
                   <files>https://api.sugarsync.com/folder/myfolderId/contents?type=file</files>
                   <contents>https://api.sugarsync.com/folder/myfolderId/contents</contents>
                </folder>
                */

            Name = result.Element("displayName").Value;

            var dateCreatedElement = result.Element("timeCreated");

            if (dateCreatedElement != null)
            {
                DateCreated = DateTimeOffset.ParseExact(dateCreatedElement.Value, "yyyy-MM-ddTHH:mm:ss.fffzzz", CultureInfo.InvariantCulture);
            }

            var parentElement = result.Element("parent");

            if (parentElement != null)
            {
                ParentRefUri = new Uri(parentElement.Value, UriKind.Absolute);
            }

            ContentsUri = new Uri(result.Element("contents").Value, UriKind.Absolute);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\IO\SugarSyncDirectoryInfo.cs
private async Task RefreshContents()
        {
            var result = await Account.GetXmlAsync(ContentsUri);

            /*
                <collectionContents start="0" hasMore="true" end="1">
                   <collection type="syncFolder">
                     <displayName>folder1</displayName>
                     <ref>https://api.sugarsync.com/folder/asdf/ref>
                     <contents>https://api.sugarsync.com/folder/asdf/contents</contents>
                   </collection>
                   <collection type="syncFolder">
                     <displayName>folder2</displayName>
                     <ref>https://api.sugarsync.com/folder/foobar/ref>
                     <contents>https://api.sugarsync.com/folder/foobar/contents</contents>
                   </collection>
                </collectionContents>
                */
            var contents = new List<SugarSyncPathInfo>();

            var directories = from e in result.Elements()
                              where e.Name.LocalName == "collection"
                              select new SugarSyncDirectoryInfo(e.Element("displayName").Value, Account, new Uri(e.Element("ref").Value, UriKind.Absolute), null);

            var files = from e in result.Elements()
                        where e.Name.LocalName == "file"
                        select new SugarSyncFileInfo(e.Element("displayName").Value, Account, new Uri(e.Element("ref").Value, UriKind.Absolute));

            contents.AddRange(directories.Cast<SugarSyncPathInfo>());
            contents.AddRange(files.Cast<SugarSyncPathInfo>());

            Contents = contents;

            LastUpdated = DateTimeOffset.Now;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\IO\SugarSyncDirectoryInfo.cs
public static async Task<SugarSyncDirectoryInfo> FindDirectory(string path, SugarSyncAccount account)
        {
            return await InternalCreateDirectory(path, false, account);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\IO\SugarSyncDirectoryInfo.cs
public static async Task<SugarSyncDirectoryInfo> CreateDirectory(string path, bool recursive, SugarSyncAccount account)
        {
            return await InternalCreateDirectory(path, recursive, account);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\IO\SugarSyncDirectoryInfo.cs
private static async Task<SugarSyncDirectoryInfo> InternalCreateDirectory(string path, bool recursive, SugarSyncAccount account)
        {
            /*
             * example path...
             * /Sync Folders/Magic Briefcase/Application Data/Appology
             * 
             */

            // TODO: inspect path for read-only directories...

            var pathParts = new Queue<string>(path.Split(new []{'/','\\'}));

            bool rootProcessed = false;
            SugarSyncDirectoryInfo currentDirectoryInfo = null;

            while (pathParts.Count > 0)
            {
                var pathPart = pathParts.Dequeue();

                if (!rootProcessed && pathPart != null && pathPart.Trim() == string.Empty)
                {
                    #region Process Root and Immediate Child
                    var root = new SugarSyncStorageRoot("root", account);

                    await root.RefreshAsync();

                    // root is read-only, so attempt to match next
                    // path part to an existing path in the root

                    var nextPathPart = pathParts.Dequeue();

                    foreach (var directoryInfo in root.Contents.OfType<SugarSyncDirectoryInfo>())
                    {
                        if (directoryInfo.Name.Equals(nextPathPart, StringComparison.InvariantCultureIgnoreCase))
                        {
                            currentDirectoryInfo = directoryInfo;
                            rootProcessed = true;
                            break;
                        }
                    }

                    if (currentDirectoryInfo == null)
                    {
                        throw new Exception(string.Format("Could not find directory named \"{0}\" under account root.", nextPathPart));
                    }
                    #endregion
                }
                else if (!rootProcessed)
                {
                    throw new Exception(string.Format("Relative paths are not supported. [Path=\"{0}\"]", path));
                }
                else if (pathPart != null && pathPart.Trim() != string.Empty)
                {
                    #region Process Current Directory

                    SugarSyncDirectoryInfo nextDirectoryInfo = null;

                    await currentDirectoryInfo.RefreshAsync();

                    foreach (var pathInfo in currentDirectoryInfo.Contents.OfType<SugarSyncDirectoryInfo>())
                    {
                        if (pathInfo.Name.Equals(pathPart, StringComparison.InvariantCultureIgnoreCase))
                        {
                            nextDirectoryInfo = pathInfo;
                            break;
                        }
                    }

                    if (nextDirectoryInfo == null)
                    {
                        if (recursive || pathParts.Count == 0)
                        {
                            // create directory
                            currentDirectoryInfo = await currentDirectoryInfo.CreateDirectoryInfo(pathPart);
                        }
                        else
                        {
                            throw new Exception(string.Format("Could not find part of path \"{0}\".", path));
                        }
                    }
                    else
                    {
                        currentDirectoryInfo = nextDirectoryInfo;
                    }

                    #endregion
                }
            }

            return currentDirectoryInfo;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\IO\SugarSyncFileInfo.cs
public async Task<Stream> OpenReadAsync()
        {
            IsBusy = true;

            var webClient = await Account.GetWebClientAsync();

            var stream = await webClient.OpenReadTaskAsync(DataUri);

            IsBusy = false;

            return stream;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\IO\SugarSyncFileInfo.cs
public async Task<Stream> OpenWriteAsync()
        {
            IsBusy = true;

            var webClient = await Account.GetWebClientAsync();

            var stream = await webClient.OpenWriteTaskAsync(DataUri, "PUT");

            IsBusy = false;

            return stream;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\IO\SugarSyncFileInfo.cs
public async Task ReadStringAsync()
        {
            IsBusy = true;

            using (var sr = new StreamReader(await OpenReadAsync()))
            {
                string result = sr.ReadToEnd();
                sr.Close();
            }

            IsBusy = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\IO\SugarSyncFileInfo.cs
public async Task WriteStringAsync(string content)
        {
            IsBusy = true;

            using (var sw = new StreamWriter(await OpenWriteAsync()))
            {
                sw.Write(content);
                sw.Flush();
                sw.Close();
            }

            IsBusy = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\IO\SugarSyncFileInfo.cs
public async Task<Stream> OpenPreviewImageAsync(int maxWidth, int maxHeight, bool square, int numClockwiseRotations)
        {
            Stream stream = null;

            IsBusy = true;

            var webClient = await Account.GetWebClientAsync();

            webClient.Headers["Accept"] = string.Format("image/jpeg; pxmax={0};pymax={1};sq=({2});r=({3});", maxWidth, maxHeight, square ? 1 : 0, numClockwiseRotations);

            stream = await webClient.OpenReadTaskAsync(DataUri);

            IsBusy = false;

            return stream;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\IO\SugarSyncFileInfo.cs
public async Task MakePublic()
        {
            /*
            <?xml version="1.0" encoding="UTF-8"?>
            <file>
                <publicLink enabled="true"/>
            </file>
            */

            if (IsPublicUriEnabled)
            {
                return;
            }

            IsBusy = true;

            var webClient = await Account.GetWebClientAsync();

            XElement file = XElement.Parse("<file/>");

            XElement publicLink = XElement.Parse("<publicLink/>");
            publicLink.Add(new XAttribute("enabled", "true"));

            file.Add(publicLink);

            using (Stream stream = await webClient.OpenWriteTaskAsync(RefUri, "PUT"))
            {
                byte[] buffer = Encoding.UTF8.GetBytes(file.ToString());
                stream.Write(buffer, 0, buffer.Length);
                stream.Flush();
                stream.Close();
            }

            IsBusy = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\IO\SugarSyncFileInfo.cs
public async Task MakePrivate()
        {
            /*
            <?xml version="1.0" encoding="UTF-8"?>
            <file>
                <publicLink enabled="false"/>
            </file>
            */

            if (!IsPublicUriEnabled)
            {
                return;
            }

            IsBusy = true;

            var webClient = await Account.GetWebClientAsync();

            XElement file = XElement.Parse("<file/>");

            XElement publicLink = XElement.Parse("<publicLink/>");
            publicLink.Add(new XAttribute("enabled", "false"));

            file.Add(publicLink);

            using (Stream stream = await webClient.OpenWriteTaskAsync(RefUri, "PUT"))
            {
                byte[] buffer = Encoding.UTF8.GetBytes(file.ToString());
                stream.Write(buffer, 0, buffer.Length);
                stream.Flush();
                stream.Close();
            }

            IsBusy = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\IO\SugarSyncFileInfo.cs
public async Task UpdateInfo(string newName, string newContentType)
        {
            /*
            <file>
                <displayName>newFileName</displayName>
                <mediaType>image/jpeg</mediaType>
            </file>
            */

            IsBusy = true;

            var webClient = await Account.GetWebClientAsync();

            XElement file = XElement.Parse("<file/>");

            XElement displayName = XElement.Parse("<displayName/>");
            XElement mediaType = XElement.Parse("<mediaType/>");

            displayName.Value = newName;
            mediaType.Value = newContentType;

            file.Add(displayName);
            file.Add(mediaType);

            using (var stream = await webClient.OpenWriteTaskAsync(RefUri, "PUT"))
            {
                byte[] buffer = Encoding.UTF8.GetBytes(file.ToString());
                stream.Write(buffer, 0, buffer.Length);
                stream.Flush();
                stream.Close();
            }

            IsBusy = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\IO\SugarSyncFileInfo.cs
public async Task Delete()
        {
            IsBusy = true;

            var webClient = await Account.GetWebClientAsync();

            using (var stream = await webClient.OpenWriteTaskAsync(RefUri, "DELETE"))
            {
                stream.Close();
            }

            IsBusy = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\IO\SugarSyncFileInfo.cs
public async override Task RefreshAsync()
        {
            IsBusy = true;

            var result = await Account.GetXmlAsync(RefUri);

            /*
                                                <file>
                                                    <displayName>ExpressionStudio_Dspk_Ultimate4_en.iso</displayName>
                                                    <dsid>/sc/877921/1813437_11165</dsid>
                                                    <timeCreated>2011-01-30T18:13:21.000-08:00</timeCreated>
                                                    <parent>https://api.sugarsync.com/folder/:sc:877921:1813437_11159</parent>
                                                    <size>297947136</size>
                                                    <lastModified>2010-07-21T21:07:26.000-07:00</lastModified>
                                                    <mediaType>application/octet-stream</mediaType>
                                                    <presentOnServer>true</presentOnServer>
                                                    <fileData>https://api.sugarsync.com/file/:sc:877921:1813437_11165/data</fileData>
                                                    <versions>https://api.sugarsync.com/file/:sc:877921:1813437_11165/version</versions>
                                                    <publicLink enabled="false"/>
                                                </file>
                                                */

            Name = result.Element("displayName").Value;
            ContentType = result.Element("mediaType").Value;
            Length = Convert.ToInt64(result.Element("size").Value);
            DateModified = DateTimeOffset.ParseExact(result.Element("lastModified").Value, "yyyy-MM-ddTHH:mm:ss.fffzzz", CultureInfo.InvariantCulture);
            DateCreated = DateTimeOffset.ParseExact(result.Element("timeCreated").Value, "yyyy-MM-ddTHH:mm:ss.fffzzz", CultureInfo.InvariantCulture);

            ParentRefUri = new Uri(result.Element("parent").Value, UriKind.Absolute);

            LastUpdated = DateTimeOffset.Now;

            XElement publicLinkElement = result.Element("publicLink");

            if (publicLinkElement != null && publicLinkElement.Attribute("enabled").Value == "true")
            {
                PublicUri = new Uri(publicLinkElement.Value, UriKind.Absolute);
            }
            else
            {
                PublicUri = null;
            }

            XElement fileData = result.Element("fileData");
            if (fileData != null)
            {
                DataUri = new Uri(fileData.Value, UriKind.Absolute);
            }
            
            IsBusy = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\IO\SugarSyncFileInfo.cs
public static async Task<SugarSyncFileInfo> FindFile(string path, SugarSyncAccount account)
        {
            var directory = Path.GetDirectoryName(path);
            var filename = Path.GetFileName(path);

            var directoryInfo = await SugarSyncDirectoryInfo.FindDirectory(directory, account);

            await directoryInfo.RefreshAsync();

            var fileInfo = (from f in directoryInfo.Contents.OfType<SugarSyncFileInfo>()
                            where f.Name.Equals(filename, StringComparison.InvariantCultureIgnoreCase)
                            select f).SingleOrDefault();

            if (fileInfo == null)
            {
                throw new Exception(string.Format("Could not find part of path \"{0}\".", path));
            }

            return fileInfo;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\IO\SugarSyncFileInfo.cs
public static async Task<SugarSyncFileInfo> CreateFile(string path, string contentType, bool ensureDirectoriesExist, bool overwrite, SugarSyncAccount account)
        {
            var directory = Path.GetDirectoryName(path);
            var filename = Path.GetFileName(path);

            SugarSyncDirectoryInfo directoryInfo = null;

            if (ensureDirectoriesExist)
            {
                directoryInfo = await SugarSyncDirectoryInfo.CreateDirectory(directory, true, account);
            }
            else
            {
                directoryInfo = await SugarSyncDirectoryInfo.FindDirectory(directory, account);
            }

            await directoryInfo.RefreshAsync();

            var fileInfo = (from f in directoryInfo.Contents.OfType<SugarSyncFileInfo>()
                            where f.Name.Equals(filename, StringComparison.InvariantCultureIgnoreCase)
                            select f).SingleOrDefault();

            if (fileInfo != null)
            {
                if (overwrite)
                {
                    await fileInfo.Delete();
                }
                else
                {
                    throw new Exception(string.Format("File \"{0}\" already exists.", path));
                }
            }

            fileInfo = await directoryInfo.CreateFileInfo(filename, contentType);

            return fileInfo;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\IO\SugarSyncStorageRoot.cs
public async override Task RefreshAsync()
        {
            IsBusy = true;

            var result = await Account.GetXmlAsync(new Uri("https://api.sugarsync.com/user"));

            var rootDirectoryList = new List<SugarSyncPathInfo>();

            var workspaces = new SugarSyncDirectoryInfo("Workspaces", Account, null, new Uri(result.Element("workspaces").Value, UriKind.Absolute));
            var syncFolders = new SugarSyncDirectoryInfo("Sync Folders", Account, null, new Uri(result.Element("syncfolders").Value, UriKind.Absolute));
            var deleted = new SugarSyncDirectoryInfo("Deleted", Account, new Uri(result.Element("deleted").Value, UriKind.Absolute), null);
            var magicBriefcase = new SugarSyncDirectoryInfo("Magic Briefcase", Account, new Uri(result.Element("magicBriefcase").Value, UriKind.Absolute), null);
            var webArchive = new SugarSyncDirectoryInfo("Web Archive", Account, new Uri(result.Element("webArchive").Value, UriKind.Absolute), null);
            var mobilePhotos = new SugarSyncDirectoryInfo("Mobile Photos", Account, new Uri(result.Element("mobilePhotos").Value, UriKind.Absolute), null);
            var albums = new SugarSyncDirectoryInfo("Albums", Account, null, new Uri(result.Element("albums").Value, UriKind.Absolute));
            var recentActivities = new SugarSyncDirectoryInfo("Recent Activities", Account, null, new Uri(result.Element("recentActivities").Value, UriKind.Absolute));
            var receivedShares = new SugarSyncDirectoryInfo("Received Shares", Account, null, new Uri(result.Element("receivedShares").Value, UriKind.Absolute));
            var publicLinks = new SugarSyncDirectoryInfo("Public Links", Account, null, new Uri(result.Element("publicLinks").Value, UriKind.Absolute));

            rootDirectoryList.Add(workspaces);
            rootDirectoryList.Add(syncFolders);
            rootDirectoryList.Add(deleted);
            rootDirectoryList.Add(magicBriefcase);
            rootDirectoryList.Add(webArchive);
            rootDirectoryList.Add(mobilePhotos);
            rootDirectoryList.Add(albums);
            rootDirectoryList.Add(recentActivities);
            rootDirectoryList.Add(receivedShares);
            rootDirectoryList.Add(publicLinks);

            Contents = rootDirectoryList;

            IsBusy = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\SugarSyncAccount.cs
public async Task<bool> AuthenticateAsync()
        {
            await RefreshTokenAsync();
            return _token != null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\SugarSyncAccount.cs
public async Task RefreshAsync()
        {
            var result = await GetXmlAsync(new Uri("https://api.sugarsync.com/user"));

            TotalBytes = Convert.ToInt64(result.Element("quota").Element("limit").Value);
            UsedBytes = Convert.ToInt64(result.Element("quota").Element("usage").Value);
            FreeBytes = TotalBytes - UsedBytes;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\SugarSyncAccount.cs
internal async Task<XElement> GetXmlAsync(Uri uri)
        {
            var webClient = await GetWebClientAsync();

            var result = await webClient.DownloadStringTaskAsync(uri);

            var xElement = XElement.Parse(result);

            return xElement;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\SugarSyncAccount.cs
internal async Task<WebClient> GetWebClientAsync()
        {
            if (_lastTokenRefresh == null || DateTime.Now.AddMinutes(-5.0) > _lastTokenRefresh.Value)
            {
                await RefreshTokenAsync();
            }

            var webClient = new WebClient();
            webClient.Headers["Authorization"] = _token;

            return webClient;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\SugarSyncAccount.cs
internal async Task<HttpWebRequest> GetHttpWebRequestAsync(Uri uri)
        {
            if (_lastTokenRefresh == null || DateTime.Now.AddMinutes(-5.0) > _lastTokenRefresh.Value)
            {
                await RefreshTokenAsync();
            }

            var httpWebRequest = (HttpWebRequest)WebRequest.Create(uri);
            httpWebRequest.Headers["Authorization"] = _token;

            return httpWebRequest;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\sugarsyncapi\v1\Appology.SugarSync.Phone\..\Appology.SugarSync.Desktop\SugarSyncAccount.cs
private async Task RefreshTokenAsync()
        {
            _token = null;

            XElement authRequest = XElement.Parse("<authRequest/>");
            XElement username = XElement.Parse("<username/>");
            XElement password = XElement.Parse("<password/>");
            XElement accessKeyId = XElement.Parse("<accessKeyId/>");
            XElement privateAccessKey = XElement.Parse("<privateAccessKey/>");

            username.Value = _username;
            password.Value = _password;
            accessKeyId.Value = _accessKey;
            privateAccessKey.Value = _privateAccessKey;

            authRequest.Add(username);
            authRequest.Add(password);
            authRequest.Add(accessKeyId);
            authRequest.Add(privateAccessKey);

            var webClient = new WebClient();
            var x = await webClient.UploadStringTaskAsync(new Uri("https://api.sugarsync.com/authorization"), "POST", authRequest.ToString());

            _token = webClient.ResponseHeaders["Location"];
            _lastTokenRefresh = DateTime.Now;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\syncwinrt\Samples\Fabrikam\Fabrikam.Phone\DataModel\ContextModel.cs
public async Task<CacheRefreshStatistics> Sync()
        {
            try
            {

                var result = await this.SyncContext.SynchronizeAsync();

                if (result.Error != null)
                    throw result.Error;

                return result;

            }
            catch (Exception e)
            {
                Debug.WriteLine(e.Message);
                return null;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\syncwinrt\Samples\Fabrikam\Fabrikam.Phone\DataModel\ContextModel.cs
public async Task<bool> DatabaseExist()
        {
            // Get the isolated storage file for the application.
            StorageFolder applicationFolder = ApplicationData.Current.LocalFolder;

            return await applicationFolder.FileExistsAsync("fabrikamfiber_sqlite.db");
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\syncwinrt\Samples\Fabrikam\Fabrikam.Phone\DataModel\ContextModel.cs
internal async Task DeleteItem(ServiceTicketViewModel serviceTicketViewModel)
        {
            await Task.Factory.StartNew(() =>
            {
                using (SQLiteConnection db = new SQLiteConnection(this.DatabasePath,
                                                                  SQLiteOpenFlags.Create | SQLiteOpenFlags.ReadWrite))
                {
                    db.Delete(serviceTicketViewModel.ServiceTicket);
                }
                
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\syncwinrt\Samples\Fabrikam\Fabrikam.Phone\DataModel\StorageExtensions.cs
public async static Task<bool> FileExistsAsync(this StorageFolder folder, string name)
        {
            var files = await folder.GetFilesAsync();

            return files.Any(f => f.Name == name);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\syncwinrt\Samples\Fabrikam\Fabrikam.Phone\DataModel\StorageExtensions.cs
public async static Task<bool> FolderExistsAsync(this StorageFolder folder, string name)
        {
            var folders = await folder.GetFoldersAsync();

            return folders.Any(f => f.Name == name);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\syncwinrt\Samples\Fabrikam\Fabrikam.Phone\ViewModels\MainViewModel.cs
private async Task Save()
        {
            await ContextModel.Current.SaveItems(this.ServiceTickets);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\syncwinrt\Samples\HelloWorld\Sample.WindowsPhone8Client\MainPage.xaml.cs
private async void Button_Click(object sender, RoutedEventArgs e)
        {
            Uri serviceUri = new Uri("http://192.168.0.17/Sample.WebServer/DefaultScopeSyncService.svc/");
            DefaultScope.DefaultScopeOfflineContext ctx = new DefaultScopeOfflineContext("fabrikam.db", serviceUri);
            
            var stats = await ctx.SynchronizeAsync();

            if (stats.Error != null)
            {
                Debug.WriteLine(stats.Error.Message);
                return;
            }

            Debug.WriteLine(stats.TotalDownloads);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\syncwinrt\Sync Framework 4.0 Toolkit\C#\WP8Client\..\WinRTClient\ClientCommon\CacheControllerAsync.cs
internal async Task<CacheRefreshStatistics> SynchronizeAsync()
        {
            return await SynchronizeAsync(CancellationToken.None);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\syncwinrt\Sync Framework 4.0 Toolkit\C#\WP8Client\..\WinRTClient\ClientCommon\CacheControllerAsync.cs
internal async Task<CacheRefreshStatistics> SynchronizeAsync(CancellationToken cancellationToken)
        {
            CacheRefreshStatistics statistics = new CacheRefreshStatistics();
              
            try
            {
                // Check if cancellation has occured
                if (cancellationToken.IsCancellationRequested)
                    cancellationToken.ThrowIfCancellationRequested();
          
                // set start time
                statistics.StartTime = DateTime.Now;

                // First create the CacheRequestHandler
                this.cacheRequestHandler = new HttpCacheRequestHandler(this.serviceUri, this.controllerBehavior);

                // Then fire the BeginSession call on the local provider.
                this.localProvider.BeginSession();

                // Set the flag to indicate BeginSession was successful
                this.beginSessionComplete = true;

                // Do uploads first
                statistics = await this.EnqueueUploadRequest(statistics, cancellationToken);

                // Set end time
                statistics.EndTime = DateTime.Now;

                // Call EndSession only if BeginSession was successful.
                if (this.beginSessionComplete)
                    this.localProvider.EndSession();
            }
            catch (OperationCanceledException ex)
            {
                statistics.EndTime = DateTime.Now;
                statistics.Cancelled = true;
                statistics.Error = ex;
                
                this.localProvider.EndSession();
            }
            catch (Exception ex)
            {
                statistics.EndTime = DateTime.Now;
                statistics.Error = ex;

                this.localProvider.EndSession();
            }
            finally
            {
                // Reset the state
                this.ResetAsyncWorkerManager();
            }

            return statistics;

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\syncwinrt\Sync Framework 4.0 Toolkit\C#\WP8Client\..\WinRTClient\ClientCommon\CacheControllerAsync.cs
private async Task<CacheRefreshStatistics> EnqueueUploadRequest(CacheRefreshStatistics statistics, CancellationToken cancellationToken)
        {
            this.changeSetId = Guid.NewGuid();

            try
            {
                // Check if cancellation has occured
                if (cancellationToken.IsCancellationRequested)
                    cancellationToken.ThrowIfCancellationRequested();

                ChangeSet changeSet = this.localProvider.GetChangeSet(this.changeSetId);

                if (changeSet == null || changeSet.Data == null || changeSet.Data.Count == 0)
                {
                    // No data to upload. Skip upload phase.
                    statistics = await this.EnqueueDownloadRequest(statistics, cancellationToken);
                }
                else
                {
                    // Create a SyncRequest out of this.
                    CacheRequest request = new CacheRequest
                    {
                        RequestId = this.changeSetId,
                        Format = this.ControllerBehavior.SerializationFormat,
                        RequestType = CacheRequestType.UploadChanges,
                        Changes = changeSet.Data,
                        KnowledgeBlob = changeSet.ServerBlob,
                        IsLastBatch = changeSet.IsLastBatch
                    };

                    var args = await this.cacheRequestHandler.ProcessCacheRequestAsync(request, changeSet.IsLastBatch, cancellationToken);

                    statistics = await this.ProcessCacheRequestResults(statistics, args, cancellationToken);
                }

            }
            catch (OperationCanceledException)
            {
                // Re throw the operation cancelled
                throw;
            }
            catch (Exception e)
            {
                if (ExceptionUtility.IsFatal(e))
                    throw;

                statistics.Error = e;
            }


            return statistics;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\syncwinrt\Sync Framework 4.0 Toolkit\C#\WP8Client\..\WinRTClient\ClientCommon\CacheControllerAsync.cs
private async Task<CacheRefreshStatistics> EnqueueDownloadRequest(CacheRefreshStatistics statistics, CancellationToken cancellationToken)
        {
            try
            {
                if (cancellationToken.IsCancellationRequested)
                    cancellationToken.ThrowIfCancellationRequested();

                // Create a SyncRequest for download.
                CacheRequest request = new CacheRequest
                {
                    Format = this.ControllerBehavior.SerializationFormat,
                    RequestType = CacheRequestType.DownloadChanges,
                    KnowledgeBlob = this.localProvider.GetServerBlob()
                };

                var args = await this.cacheRequestHandler.ProcessCacheRequestAsync(request, null , cancellationToken);

                statistics = await this.ProcessCacheRequestResults(statistics, args, cancellationToken);
            }
            catch (OperationCanceledException)
            {
                // Re throw the operation cancelled
                throw;
            }
            catch (Exception e)
            {
                if (ExceptionUtility.IsFatal(e))
                    throw;

                statistics.Error = e;
            }

            return statistics;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\syncwinrt\Sync Framework 4.0 Toolkit\C#\WP8Client\..\WinRTClient\ClientCommon\CacheControllerAsync.cs
private async Task<CacheRefreshStatistics> ProcessCacheRequestResults(CacheRefreshStatistics statistics, CacheRequestResult e, CancellationToken cancellationToken)
        {
            try
            {
                if (cancellationToken.IsCancellationRequested)
                    cancellationToken.ThrowIfCancellationRequested();

                if (e.Error != null)
                {
                    // Check to see if it was a UploadRequest in which case we will have to call OnChangeSetUploaded
                    // with error to reset the dirty bits.
                    if (e.ChangeSetResponse != null)
                    {
                        // its an response to a upload
                        this.localProvider.OnChangeSetUploaded(e.Id, e.ChangeSetResponse);
                    }

                    // Finally complete Refresh with error.
                    statistics.Error = e.Error;
                }
                else if (e.ChangeSetResponse != null)
                {
                    // its an response to a upload
                    this.localProvider.OnChangeSetUploaded(e.Id, e.ChangeSetResponse);

                    if (e.ChangeSetResponse.Error != null)
                    {
                        statistics.Error = e.ChangeSetResponse.Error;
                        return statistics;
                    }

                    // Increment the ChangeSets uploaded count
                    statistics.TotalChangeSetsUploaded++;
                    statistics.TotalUploads += e.BatchUploadCount;

                    // Update refresh stats
                    foreach (var e1 in e.ChangeSetResponse.ConflictsInternal)
                    {
                        if (e1 is SyncConflict)
                            statistics.TotalSyncConflicts++;
                        else
                            statistics.TotalSyncErrors++;
                    }

                    // Dont enqueue another request if its been cancelled
                    if (!cancellationToken.IsCancellationRequested)
                    {
                        if (!((bool)e.State))
                        {
                            // Check to see if this was the last batch or else enqueue another pending Upload request
                            statistics = await this.EnqueueUploadRequest(statistics, cancellationToken);
                        }
                        else
                        {
                            // That was the last batch. Issue an Download request
                            statistics = await this.EnqueueDownloadRequest(statistics, cancellationToken);
                        }
                    }
                    else
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                    }

                }
                else // It means its an Download response
                {
                    Debug.Assert(e.ChangeSet != null, "Completion is not for a download request.");

                    // Increment the refresh stats
                    if (e.ChangeSet != null)
                    {
                        statistics.TotalChangeSetsDownloaded++;
                        statistics.TotalDownloads += (uint)e.ChangeSet.Data.Count;

                        await this.localProvider.SaveChangeSet(e.ChangeSet);

                        // Dont enqueue another request if its been cancelled
                        if (!cancellationToken.IsCancellationRequested)
                        {
                            if (!e.ChangeSet.IsLastBatch)
                            {
                                // Enqueue the next download
                                statistics = await this.EnqueueDownloadRequest(statistics, cancellationToken);
                            }
                        }
                        else
                        {
                            cancellationToken.ThrowIfCancellationRequested();
                        }
                    }
                }
            }
            catch (OperationCanceledException)
            {
                // Re throw the operation cancelled
                throw;
            }
            catch (Exception exp)
            {
                if (ExceptionUtility.IsFatal(exp))
                    throw;
                statistics.Error = exp;
            }

            return statistics;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\syncwinrt\Sync Framework 4.0 Toolkit\C#\WP8Client\..\WinRTClient\ClientCommon\HttpCacheRequestHandlerAsync.cs
public async Task<CacheRequestResult> ProcessCacheRequestAsync(CacheRequest request, object state,
                                                                       CancellationToken cancellationToken)
        {
            if (cancellationToken.IsCancellationRequested)
                cancellationToken.ThrowIfCancellationRequested();

            var wrapper = new AsyncArgsWrapper
                              {
                                  UserPassedState = state,
                                  CacheRequest = request
                              };

            wrapper = await ProcessRequest(wrapper, cancellationToken);

            CacheRequestResult cacheRequestResult;

            if (wrapper.CacheRequest.RequestType == CacheRequestType.UploadChanges)
            {
                cacheRequestResult =
                    new CacheRequestResult(
                        wrapper.CacheRequest.RequestId,
                        wrapper.UploadResponse,
                        wrapper.CacheRequest.Changes.Count,
                        wrapper.Error,
                        wrapper.UserPassedState);
            }
            else
            {
                cacheRequestResult =
                    new CacheRequestResult(
                        wrapper.CacheRequest.RequestId,
                        wrapper.DownloadResponse,
                        wrapper.Error,
                        wrapper.UserPassedState);
            }
            return cacheRequestResult;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\syncwinrt\Sync Framework 4.0 Toolkit\C#\WP8Client\..\WinRTClient\ClientCommon\HttpCacheRequestHandlerAsync.cs
private async Task<AsyncArgsWrapper> ProcessRequest(AsyncArgsWrapper wrapper,
                                                            CancellationToken cancellationToken)
        {
            try
            {
                if (cancellationToken.IsCancellationRequested)
                    cancellationToken.ThrowIfCancellationRequested();

                var requestUri = new StringBuilder();
                requestUri.AppendFormat("{0}{1}{2}/{3}",
                                        BaseUri,
                                        (BaseUri.ToString().EndsWith("/")) ? string.Empty : "/",
                                        Uri.EscapeUriString(ScopeName),
                                        wrapper.CacheRequest.RequestType.ToString());

                string prefix = "?";
                // Add the scope params if any
                foreach (var kvp in scopeParameters)
                {
                    requestUri.AppendFormat("{0}{1}={2}", prefix, Uri.EscapeUriString(kvp.Key),
                                            Uri.EscapeUriString(kvp.Value));
                    if (prefix.Equals("?"))
                        prefix = "&";
                }

                // Create the WebRequest
                HttpWebRequest webRequest;

                if (credentials != null)
                {
                    // Create the Client Http request
                    webRequest = WebRequest.CreateHttp(new Uri(requestUri.ToString()));
                    // Add credentials
                    webRequest.Credentials = credentials;
                }
                else
                {
                    // Use WebRequest.Create the request. This uses any user defined prefix preferences for certain paths
                    webRequest = (HttpWebRequest) WebRequest.Create(requestUri.ToString());
                }

                // Set the method type
                webRequest.Method = "POST";
                webRequest.Accept = (SerializationFormat == SerializationFormat.ODataAtom)
                                        ? "application/atom+xml"
                                        : "application/json";
                webRequest.ContentType = (SerializationFormat == SerializationFormat.ODataAtom)
                                             ? "application/atom+xml"
                                             : "application/json";


                // Write on the stream
#if !NETFX_CORE
                using (Stream stream = await Task.Factory.FromAsync<Stream>(
                                    webRequest.BeginGetRequestStream, 
                                    webRequest.EndGetRequestStream, null))
#else
                using (Stream stream = await webRequest.GetRequestStreamAsync())
#endif
                {
                    if (wrapper.CacheRequest.RequestType == CacheRequestType.UploadChanges)
                        WriteUploadRequestStream(stream, wrapper);
                    else
                        WriteDownloadRequestStream(stream, wrapper);
                }

                // If error, return wrapper with error
                if (wrapper.Error != null)
                    return wrapper;

                // Get Response
                if (wrapper.CacheRequest.RequestType == CacheRequestType.UploadChanges)
                    wrapper.UploadResponse = new ChangeSetResponse();
                else
                    wrapper.DownloadResponse = new ChangeSet();

                HttpWebResponse webResponse;
                try
                {
#if !NETFX_CORE
                    webResponse = (HttpWebResponse) (await Task.Factory.FromAsync<WebResponse>(
                                                    webRequest.BeginGetResponse,
                                                    webRequest.EndGetResponse, null));
#else
                    webResponse = (HttpWebResponse) (await webRequest.GetResponseAsync());
#endif
                }
                catch (WebException we)
                {
                    if (wrapper.CacheRequest.RequestType == CacheRequestType.UploadChanges)
                        wrapper.UploadResponse.Error = we;
                    else
                        wrapper.Error = we;

                    return wrapper;
                }
                catch (SecurityException se)
                {
                    if (wrapper.CacheRequest.RequestType == CacheRequestType.UploadChanges)
                        wrapper.UploadResponse.Error = se;
                    else
                        wrapper.Error = se;

                    return wrapper;
                }

                if (wrapper.Error != null)
                    return wrapper;

                if (wrapper.CacheRequest.RequestType == CacheRequestType.UploadChanges)
                    await ReadUploadResponse(webResponse, wrapper);
                else
                    await ReadDownloadResponse(webResponse, wrapper);

                if (wrapper.Error != null)
                    return wrapper;
            }
            catch (OperationCanceledException)
            {
                // Re throw the operation cancelled
                throw;
            }
            catch (Exception e)
            {
                if (ExceptionUtility.IsFatal(e))
                    throw;

                wrapper.Error = e;
                return wrapper;
            }

            return wrapper;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\syncwinrt\Sync Framework 4.0 Toolkit\C#\WP8Client\..\WinRTClient\ClientCommon\HttpCacheRequestHandlerAsync.cs
private async Task ReadUploadResponse(HttpWebResponse response, AsyncArgsWrapper wrapper)
        {
            try
            {
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    Stream responseStream = response.GetResponseStream();

                    this.syncReader = (SerializationFormat == SerializationFormat.ODataAtom)
                        ? new ODataAtomReader(responseStream, this.knownTypes)
                        : (SyncReader)new ODataJsonReader(responseStream, this.knownTypes);

                    // Read the response
                    await Task.Factory.StartNew(() =>
                    {
                        while (syncReader.Next())
                        {
                            switch (syncReader.ItemType)
                            {
                                case ReaderItemType.Entry:
                                    IOfflineEntity entity = syncReader.GetItem();
                                    IOfflineEntity ackedEntity = entity;
                                    string tempId = null;

                                    // If conflict only one temp ID should be set
                                    if (syncReader.HasTempId() && syncReader.HasConflictTempId())
                                    {
                                        throw new CacheControllerException(
                                            string.Format(
                                                "Service returned a TempId '{0}' in both live and conflicting entities.",
                                                syncReader.GetTempId()));
                                    }

                                    // Validate the live temp ID if any, before adding anything to the offline context
                                    if (syncReader.HasTempId())
                                    {
                                        tempId = syncReader.GetTempId();
                                        CheckEntityServiceMetadataAndTempIds(wrapper, entity, tempId);
                                    }

                                    //  If conflict 
                                    if (syncReader.HasConflict())
                                    {
                                        Conflict conflict = syncReader.GetConflict();
                                        IOfflineEntity conflictEntity = (conflict is SyncConflict)
                                                                            ? ((SyncConflict)conflict).LosingEntity
                                                                            : ((SyncError)conflict).ErrorEntity;

                                        // Validate conflict temp ID if any
                                        if (syncReader.HasConflictTempId())
                                        {
                                            tempId = syncReader.GetConflictTempId();
                                            CheckEntityServiceMetadataAndTempIds(wrapper, conflictEntity, tempId);
                                        }

                                        // Add conflict                                    
                                        wrapper.UploadResponse.AddConflict(conflict);

                                        //
                                        // If there is a conflict and the tempId is set in the conflict entity then the client version lost the 
                                        // conflict and the live entity is the server version (ServerWins)
                                        //
                                        if (syncReader.HasConflictTempId() && entity.GetServiceMetadata().IsTombstone)
                                        {
                                            //
                                            // This is a ServerWins conflict, or conflict error. The winning version is a tombstone without temp Id
                                            // so there is no way to map the winning entity with a temp Id. The temp Id is in the conflict so we are
                                            // using the conflict entity, which has the PK, to build a tombstone entity used to update the offline context
                                            //
                                            // In theory, we should copy the service metadata but it is the same end result as the service fills in
                                            // all the properties in the conflict entity
                                            //

                                            // Add the conflict entity                                              
                                            conflictEntity.GetServiceMetadata().IsTombstone = true;
                                            ackedEntity = conflictEntity;
                                        }
                                    }

                                    // Add ackedEntity to storage. If ackedEntity is still equal to entity then add non-conflict entity. 
                                    if (!String.IsNullOrEmpty(tempId))
                                    {
                                        wrapper.UploadResponse.AddUpdatedItem(ackedEntity);
                                    }
                                    break;

                                case ReaderItemType.SyncBlob:
                                    wrapper.UploadResponse.ServerBlob = syncReader.GetServerBlob();
                                    break;
                            }
                        }
                    });

                    
                    if (wrapper.TempIdToEntityMapping != null && wrapper.TempIdToEntityMapping.Count != 0)
                    {
                        // The client sent some inserts which werent ack'd by the service. Throw.
                        var builder =
                            new StringBuilder(
                                "Server did not acknowledge with a permanent Id for the following tempId's: ");
                        builder.Append(string.Join(",", wrapper.TempIdToEntityMapping.Keys.ToArray()));
                        throw new CacheControllerException(builder.ToString());
                    }
                }
                else
                {
                    wrapper.UploadResponse.Error = new CacheControllerException(
                        string.Format("Remote service returned error status. Status: {0}, Description: {1}",
                                      response.StatusCode,
                                      response.StatusDescription));
                }
            }
            catch (Exception e)
            {
                if (ExceptionUtility.IsFatal(e))
                    throw;

                wrapper.Error = e;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\syncwinrt\Sync Framework 4.0 Toolkit\C#\WP8Client\..\WinRTClient\ClientCommon\HttpCacheRequestHandlerAsync.cs
private async Task ReadDownloadResponse(HttpWebResponse response, AsyncArgsWrapper wrapper)
        {
            try
            {
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    Stream responseStream = response.GetResponseStream();

                    // Create the SyncReader
                    this.syncReader = (SerializationFormat == SerializationFormat.ODataAtom)
                        ? new ODataAtomReader(responseStream, this.knownTypes)
                        : (SyncReader)new ODataJsonReader(responseStream, this.knownTypes);

                    await Task.Factory.StartNew(() =>
                    {
                        // Read the response
                        while (syncReader.Next())
                        {
                            switch (syncReader.ItemType)
                            {
                                case ReaderItemType.Entry:
                                    wrapper.DownloadResponse.AddItem(syncReader.GetItem());
                                    break;
                                case ReaderItemType.SyncBlob:
                                    wrapper.DownloadResponse.ServerBlob = syncReader.GetServerBlob();
                                    break;
                                case ReaderItemType.HasMoreChanges:
                                    wrapper.DownloadResponse.IsLastBatch = !syncReader.GetHasMoreChangesValue();
                                    break;
                            }
                        }

                    });

                }
                else
                {
                    wrapper.Error = new CacheControllerException(
                        string.Format("Remote service returned error status. Status: {0}, Description: {1}",
                                      response.StatusCode,
                                      response.StatusDescription));
                }
            }
            catch (Exception e)
            {
                if (ExceptionUtility.IsFatal(e))
                {
                    throw;
                }
                wrapper.Error = e;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\syncwinrt\Sync Framework 4.0 Toolkit\C#\WP8Client\..\WinRTClient\Common\StorageExtensions.cs
public async static Task<bool> FileExistsAsync(this StorageFolder folder, string name)
        {
            try
            {
                var files = await folder.GetFilesAsync();
                return files.Any(f => f.Name == name);

            }
            catch (Exception)
            {

                throw;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\syncwinrt\Sync Framework 4.0 Toolkit\C#\WP8Client\..\WinRTClient\Common\StorageExtensions.cs
public async static Task<bool> FolderExistsAsync(this StorageFolder folder, string name)
        {
            var folders = await folder.GetFoldersAsync();

            return folders.Any(f => f.Name == name);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\syncwinrt\Sync Framework 4.0 Toolkit\C#\WP8Client\..\WinRTClient\SQLite\SQLiteContext.cs
public async Task<CacheRefreshStatistics> SynchronizeAsync()
        {
            if (!loaded)
                LoadSchema();

            return await this.cacheController.SynchronizeAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\syncwinrt\Sync Framework 4.0 Toolkit\C#\WP8Client\..\WinRTClient\SQLite\SQLiteContext.cs
public async Task<CacheRefreshStatistics> SynchronizeAsync(CancellationToken cancellationToken)
        {
            if (!loaded)
                LoadSchema();

            return await this.cacheController.SynchronizeAsync(cancellationToken);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\syncwinrt\Sync Framework 4.0 Toolkit\C#\WP8Client\..\WinRTClient\SQLite\SQLiteContext.cs
public override async Task SaveChangeSet(ChangeSet changeSet)
        {
            ThrowIfDisposed();

            if (changeSet == null)
                throw new ArgumentNullException("changeSet");

            if (!syncActive)
                throw new InvalidOperationException("SaveChangeSet cannot be called without calling BeginSession");

            // Cast to the specific entity.
            IEnumerable<SQLiteOfflineEntity> entities = changeSet.Data.Cast<SQLiteOfflineEntity>();

            // Save the configuration (Blob and LastSyncDate) and all Entitites.
            await Task.Factory.StartNew(() =>
            {
                Manager.SaveDownloadedChanges(entities);

                // Set the new Last Sync Date
                this.Configuration.LastSyncDate = DateTime.UtcNow;
                this.Configuration.AnchorBlob = changeSet.ServerBlob;

                Manager.SaveConfiguration(this.Configuration);
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\syncwinrt\Sync Framework 4.0 Toolkit\C#\WP8Client\..\WinRTClient\SQLite\SQLiteManager.cs
public async Task<bool> DatabaseExist()
        {
            // Get the isolated storage file for the application.
            StorageFolder applicationFolder = ApplicationData.Current.LocalFolder;
            var files = await applicationFolder.GetFilesAsync();
            return files.Any(f => f.Name == DatabaseName);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\tarekw+SampleSkypeApp\tarekw-SampleSkypeApp-af443a6\SkypeTest\ViewModels\LoginViewModel.cs
public async void VerifyCrednetials(Credentials credentials)
        {
            NotifyStateChanged(CurrentState.Loading);   // this should show the waiting state

            LoginVerifier verifier = null;
#if USING_LIVE_DATA
                // TODO: write the code for requesting live content using a REST api
#else
            verifier = LoginVerifier.CreateLoginVerifier(Protocol.LOCAL);
#endif
            verifier.credentials = credentials;
            Verified = await BackendEnabler.Default.StartLoginVerification(verifier);

            if (Verified)
                NotifyStateChanged(CurrentState.EndLoading);   // this should show the waiting state
            else
                NotifyStateChanged(CurrentState.Error);   // this should show the waiting state
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\tarekw+SampleSkypeApp\tarekw-SampleSkypeApp-af443a6\SkypeTest\ViewModels\PeopleViewModel.cs
public async void LoadData(ContactsResult contactsResult)
        {
            if (contactsResult == null)
            {
                NotifyStateChanged(CurrentState.Loading);   // this should show the waiting state

                DataFetcher dataFetcher = null;
#if USING_LIVE_DATA
                // TODO: write the code for requesting live content using a REST api
#else
                dataFetcher = DataFetcher.CreateDataFetcher(Protocol.LOCAL);
                dataFetcher.address = "/SkypeTest;component/SampleData/samplecontacts.txt";
#endif
                contactsResult = await BackendEnabler.Default.StartDataRequest<ContactsResult>(dataFetcher);
            }

            if (contactsResult == null ||
                contactsResult.list == null ||
                contactsResult.list.Count == 0)
            {
                NotifyStateChanged(CurrentState.Error);   // this should display the error message as the download was unsuccessful
            }
            else
            {
                OrderByGroup(contactsResult.list);
                this.IsDataLoaded = true;
                NotifyStateChanged(CurrentState.EndLoading);   // this should get rid of the waiting state and show the landing page

                // This is test code for starting the listener
                _updater = new ContactsUpdateListner(contactsResult.list);
                if (_startUpdates)
                {
                    _updater.ContactChanged -= new ContactChangedEventHandler(_updater_ContactChanged);
                    _updater.ContactChanged += new ContactChangedEventHandler(_updater_ContactChanged);
                    _updater.StartRandomUpdates();  // start the simulation of random status updates
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\tarekw+SampleSkypeApp\tarekw-SampleSkypeApp-af443a6\SkypeTest.Engine\Enablers\DataFetcher.cs
public virtual async Task<String> Fetch()
        {
            // default implementation does nothing
            await TaskEx.WhenAny(TaskEx.Delay(TimeSpan.FromSeconds(0)));
            return String.Empty;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\tarekw+SampleSkypeApp\tarekw-SampleSkypeApp-af443a6\SkypeTest.Engine\Enablers\DataFetcher.cs
public override async Task<String> Fetch()
        {
            await TaskEx.WhenAny(TaskEx.Delay(TimeSpan.FromSeconds(0)));
            return String.Empty;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\tarekw+SampleSkypeApp\tarekw-SampleSkypeApp-af443a6\SkypeTest.Engine\Enablers\LoginVerifier.cs
public virtual async Task<bool> Verify()
        {
            // default implementation does nothing
            await TaskEx.WhenAny(TaskEx.Delay(TimeSpan.FromSeconds(0)));
            return false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\tarekw+SampleSkypeApp\tarekw-SampleSkypeApp-af443a6\SkypeTest.Engine\Enablers\LoginVerifier.cs
public override async Task<bool> Verify()
        {
            if (String.IsNullOrWhiteSpace(credentials.Username) || String.IsNullOrWhiteSpace(credentials.Password))
            {
                return false;
            }

            // wait for few seconds to simulate network activity
            await TaskEx.Delay(TimeSpan.FromSeconds(3));
            return await TaskEx.Run(() => VerifyCreds(credentials));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\tarekw+SampleSkypeApp\tarekw-SampleSkypeApp-af443a6\SkypeTest.Engine\Enablers\LoginVerifier.cs
public override async Task<bool> Verify()
        {
            await TaskEx.WhenAny(TaskEx.Delay(TimeSpan.FromSeconds(0)));
            return false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\tarekw+SampleSkypeApp\tarekw-SampleSkypeApp-af443a6\SkypeTest.Engine\Enablers\BackendEnabler.cs
public async Task<T> StartDataRequest<T>(DataFetcher dataFetcher)
        {
            try
            {
                var response = await dataFetcher.Fetch();
                return await TaskEx.Run(() => ParseResponse<T>(response));
            }
            catch (Exception) { return default(T); }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\tarekw+SampleSkypeApp\tarekw-SampleSkypeApp-af443a6\SkypeTest.Engine\Enablers\BackendEnabler.cs
public async Task<bool> StartLoginVerification(LoginVerifier verifier)
        {
            try
            {
                var response = await verifier.Verify();
                return response;
            }
            catch (Exception) { return false; }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\tarekw+SampleSkypeApp\tarekw-SampleSkypeApp-af443a6\SkypeTest.Backend.UnitTests\UnitTests.cs
[TestMethod]
        [Asynchronous]
        [Description("Tests the result from the contacts load request after waiting fiew seconds")]
        public async void ContactsRequest()
        {
            PeopleViewModel vm = new PeopleViewModel();
            vm.LoadData(null);
            await TaskEx.WhenAny(TaskEx.Delay(TimeSpan.FromSeconds(4)));    // we know the local task will complete in 3 seconds

            Assert.AreNotEqual(0, vm.GroupedContacts.Count, "GroupContacts list is empty");
            Assert.AreEqual(7, vm.GroupedContacts.Count, "GroupContacts list contains invalid number of groups");
            foreach (var group in vm.GroupedContacts)
            {
                Assert.AreNotEqual(0, group.HasItems, "Group is empty");
                foreach (var c in group)
                {
                    Assert.IsFalse(String.IsNullOrWhiteSpace(c.displayname), "displayname is invalid");
                    Assert.IsFalse(String.IsNullOrWhiteSpace(c.message), "message is invalid");
                    Assert.IsFalse(String.IsNullOrWhiteSpace(c.skypename), "skypename is invalid");
                    Assert.IsFalse(String.IsNullOrWhiteSpace(c.status), "status is empty");
                    Assert.IsTrue(c.status == "online" || c.status == "offline" || c.status == "away", "status is invalid");
                    Assert.IsInstanceOfType(c.displayname, typeof(String), "displayname is invalid type");
                    Assert.IsInstanceOfType(c.message, typeof(String), "message is invalid type");
                    Assert.IsInstanceOfType(c.skypename, typeof(String), "skypename is invalid type");
                    Assert.IsInstanceOfType(c.status, typeof(String), "status is invalid type");
                    Assert.IsInstanceOfType(c.id, typeof(int), "id is invalid type");
                }
            }
            vm.GroupedContacts.Clear();
            vm.Groups.Clear();
            this.EnqueueTestComplete();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\tarekw+SampleSkypeApp\tarekw-SampleSkypeApp-af443a6\SkypeTest.Backend.UnitTests\UnitTests.cs
[TestMethod]
        [Asynchronous]
        [Description("Tests the VerifyCrednetials with different inputs")]
        public async void VerifyCrednetials()
        {
            LoginViewModel vm = new LoginViewModel();
            vm.VerifyCrednetials(new Credentials( "", "" ));
            await TaskEx.WhenAny(TaskEx.Delay(TimeSpan.FromSeconds(4)));    // we know the local task will complete in 3 seconds
            Assert.IsFalse(vm.Verified, "Verified wrong credentials");
            vm.VerifyCrednetials(new Credentials("Tarek", "tarek"));
            await TaskEx.WhenAny(TaskEx.Delay(TimeSpan.FromSeconds(4)));
            Assert.IsFalse(vm.Verified, "Verified wrong credentials");
            vm.VerifyCrednetials(new Credentials("tarek", "Tarek"));
            await TaskEx.WhenAny(TaskEx.Delay(TimeSpan.FromSeconds(4)));
            Assert.IsFalse(vm.Verified, "Verified wrong credentials");
            vm.VerifyCrednetials(new Credentials("tarek", "tarek"));
            await TaskEx.WhenAny(TaskEx.Delay(TimeSpan.FromSeconds(4)));
            Assert.IsTrue(vm.Verified, "Could not verify credentials");

            this.EnqueueTestComplete();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\tarekw+SampleSkypeApp\tarekw-SampleSkypeApp-af443a6\SkypeTest.Backend.UnitTests\UnitTests.cs
[TestMethod]
        [Asynchronous]
        [Description("Tests the StartDataRequest api with local protocol")]
        public async void StartDataRequestLocal()
        {
            // Test with the valid JSON file
            DataFetcher dataFetcher = DataFetcher.CreateDataFetcher(Protocol.LOCAL);
            dataFetcher.address = "/SkypeTest;component/SampleData/samplecontacts.txt";
            ContactsResult contactsResult = await BackendEnabler.Default.StartDataRequest<ContactsResult>(dataFetcher);
            Assert.IsNotNull(contactsResult, "ContactsResult is null");
            Assert.IsNotNull(contactsResult.list, "ContactsResult.list is null");
            Assert.AreEqual(10, contactsResult.list.Count, "ContactsResult.list is the wrong length");

            // Test with an invalid JSON file
            dataFetcher.address = "/SkypeTest;component/SampleData/samplecorruptjson.txt";
            ContactsResult defaultContactsResult = await BackendEnabler.Default.StartDataRequest<ContactsResult>(dataFetcher);
            Assert.IsNull(defaultContactsResult, "ContactsResult is not null");

            // Test with an invalid url
            dataFetcher.address = "/SkypeTest;component/SampleData/sample.txt";
            defaultContactsResult = await BackendEnabler.Default.StartDataRequest<ContactsResult>(dataFetcher);
            Assert.IsNull(defaultContactsResult, "ContactsResult is not null");

            // Test other models here directly by replacing the template parameter
            this.EnqueueTestComplete();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\tarekw+SampleSkypeApp\tarekw-SampleSkypeApp-af443a6\SkypeTest.Backend.UnitTests\UnitTests.cs
[TestMethod]
        [Asynchronous]
        [Description("Tests the StartLoginVerification local protocol")]
        public async void StartLoginVerificationLocal()
        {
            LoginVerifier verifier = LoginVerifier.CreateLoginVerifier(Protocol.LOCAL);
            verifier.credentials = new Credentials("tarek", "tarek");
            bool ret = await BackendEnabler.Default.StartLoginVerification(verifier);
            Assert.IsTrue(ret, "Could not verify credentials");

            this.EnqueueTestComplete();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\TechPreacher+WP8-FlickrSearch\TechPreacher-WP8-FlickrSearch-0b7131f\WP8-FlickrSearch\App.xaml.cs
async private static void InitializeVoiceCommands()
        {
            var filename = "SupportedVoiceCommands.xml";

            try
            {
                var location = Package.Current.InstalledLocation.Path;
                var fileUriString = String.Format("file://{0}/{1}", location, filename);
                await VoiceCommandService.InstallCommandSetsFromFileAsync(new Uri(fileUriString));
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(ex.Message);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\timothybinkley+Windows-Phone-8-In-Action\timothybinkley-Windows-Phone-8-In-Action-ebfff44\Chapter07\DataStorage\HighScoreFileRepository.cs
public async Task<List<HighScore>> LoadAsync()
        {
            List<HighScore> storedData;
            try
            {
                StorageFolder localFolder = ApplicationData.Current.LocalFolder;
                StorageFolder scoresFolder = await localFolder.GetFolderAsync("HighScores");
                StorageFile scoresFile = await scoresFolder.GetFileAsync("highscores.xml");
                using (IRandomAccessStreamWithContentType randomAccess = await scoresFile.OpenReadAsync())
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(List<HighScore>));
                    storedData = (List<HighScore>)serializer.Deserialize(randomAccess.AsStreamForRead());
                }
            }
            catch (FileNotFoundException ex)
            {
                storedData = new List<HighScore>();
            }
            return storedData;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\timothybinkley+Windows-Phone-8-In-Action\timothybinkley-Windows-Phone-8-In-Action-ebfff44\Chapter07\DataStorage\HighScoreFileRepository.cs
public async void Save(List<HighScore> highscores)
        {
            StorageFolder localFolder = ApplicationData.Current.LocalFolder;
            StorageFolder scoresFolder = await localFolder.CreateFolderAsync("HighScores", CreationCollisionOption.OpenIfExists);
            StorageFile scoresFile = await scoresFolder.CreateFileAsync("highscores.xml", CreationCollisionOption.ReplaceExisting);
            using (IRandomAccessStream randomAccess = await scoresFile.OpenAsync(FileAccessMode.ReadWrite))
            {
                using (IOutputStream output = randomAccess.GetOutputStreamAt(0))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(List<HighScore>));
                    serializer.Serialize(output.AsStreamForWrite(), highscores);
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\timothybinkley+Windows-Phone-8-In-Action\timothybinkley-Windows-Phone-8-In-Action-ebfff44\Chapter07\DataStorage\HighScoreFileRepository.cs
public async void Clear()
        {
            StorageFolder localFolder = ApplicationData.Current.LocalFolder;
            StorageFolder scoresFolder = await localFolder.GetFolderAsync("HighScores");
            await scoresFolder.DeleteAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\timothybinkley+Windows-Phone-8-In-Action\timothybinkley-Windows-Phone-8-In-Action-ebfff44\Chapter09\VoiceRecorder\VoiceRecorder\MainPage.xaml.cs
private async Task<string> WriteFile()
      {
         StorageFolder localFolder = ApplicationData.Current.LocalFolder;
         StorageFile file = await localFolder.CreateFileAsync("voice-recording.wav", CreationCollisionOption.GenerateUniqueName);

         using (Stream fileStream = await file.OpenStreamForWriteAsync())
         {
            using (var writer = new BinaryWriter(fileStream))
            {
               writer.Write(new char[4] { 'R', 'I', 'F', 'F' }); // start of the RIFF header
               writer.Write((Int32)(36 + audioStream.Length)); // FileSize - 8
               writer.Write(new char[4] { 'W', 'A', 'V', 'E' }); // the characters WAVE intdicate the format of the data
               writer.Write(new char[4] { 'f', 'm', 't', ' ' });  // the fmt characters specify that this is the section of the file describing the format
               writer.Write((Int32)16); // size of the WAVEFORMATEX data to follow
               // WAVEFORMATEX
               writer.Write((UInt16)1); // wFormatTag = 1 indicates that the audio data is PCM
               writer.Write((UInt16)1); // nChannels = 1 for mono
               writer.Write((UInt32)16000); // nSamplesPerSec, Sample rate of the waveform in samples per second
               writer.Write((UInt32)32000); // nAvgBytesPerSec, Average bytes per second which can be used to determine the time-wise length of the audio
               writer.Write((UInt16)2); // nBlockAlign, Specifies how each audio block must be aligned in bytes
               writer.Write((UInt16)16); // wBitsPerSample, How many bits represent a single sample (typically 8 or 16)

               writer.Write(new char[4] { 'd', 'a', 't', 'a' }); //, The "data" characters specify that the audio data is next in the file
               writer.Write((Int32)audioStream.Length); // The length of the data in bytes
               writer.Write(audioStream.GetBuffer(), 0, (int)audioStream.Length); //Data, The rest of the file is the actual samples
               writer.Flush();
            }
         }
         return file.Name;
      }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\timothybinkley+Windows-Phone-8-In-Action\timothybinkley-Windows-Phone-8-In-Action-ebfff44\Chapter12\Speech12.3.1\App.xaml.cs
private async void Application_Launching(object sender, LaunchingEventArgs e)
        {
            //await VoiceCommandService.InstallCommandSetsFromFileAsync(new Uri("ms-appx:///VoiceCommands.xml", UriKind.Absolute));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\timothybinkley+Windows-Phone-8-In-Action\timothybinkley-Windows-Phone-8-In-Action-ebfff44\Chapter12\Speech12.3.1\MainPage.xaml.cs
private async void UpdatePhraseList(string commandSetName, string phraseListName)
        {
            // Create List to hold the voice names
            List<string> voiceNames = new List<string>();
            
            // Loop through the installed voices
            
            foreach (VoiceInformation voice in _availableVoices)
            {
                // Take the DisplayName of the voice and split it at
                // the spaces. Take the second item in the results
                // and assign it to a new string. 
                string voiceName = voice.DisplayName.Split(' ')[1];
                
                // add voiceName to the list of VoiceNames
                voiceNames.Add(voiceName);
            }
            // lookup the CommandSet we want to update
            VoiceCommandSet commandSet = VoiceCommandService.InstalledCommandSets[commandSetName];

            // Update commandSet with the new phrase list.
            await commandSet.UpdatePhraseListAsync(phraseListName, voiceNames);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\timothybinkley+Windows-Phone-8-In-Action\timothybinkley-Windows-Phone-8-In-Action-ebfff44\Chapter12\Speech12.4\App.xaml.cs
private async void Application_Launching(object sender, LaunchingEventArgs e)
        {
            //await VoiceCommandService.InstallCommandSetsFromFileAsync(new Uri("ms-appx:///VoiceCommands.xml", UriKind.Absolute));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\timothybinkley+Windows-Phone-8-In-Action\timothybinkley-Windows-Phone-8-In-Action-ebfff44\Chapter12\Speech12.4\MainPage.xaml.cs
private async void UpdatePhraseList(string commandSetName, string phraseListName)
        {
            // Create List to hold the voice names
            List<string> voiceNames = new List<string>();
            
            // Loop through the installed voices
            
            foreach (VoiceInformation voice in _availableVoices)
            {
                // Take the DisplayName of the voice and split it at
                // the spaces. Take the second item in the results
                // and assign it to a new string. 
                string voiceName = voice.DisplayName.Split(' ')[1];
                
                // add voiceName to the list of VoiceNames
                voiceNames.Add(voiceName);
            }
            // lookup the CommandSet we want to update
            VoiceCommandSet commandSet = VoiceCommandService.InstalledCommandSets[commandSetName];

            // Update commandSet with the new phrase list.
            await commandSet.UpdatePhraseListAsync(phraseListName, voiceNames);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\timothybinkley+Windows-Phone-8-In-Action\timothybinkley-Windows-Phone-8-In-Action-ebfff44\Chapter15\MediaPlayback\App.xaml.cs
private async void Application_Launching(object sender, LaunchingEventArgs e)
      {
         try
         {
            StorageFolder installFolder = Package.Current.InstalledLocation;
            StorageFolder assetsFolder = await installFolder.GetFolderAsync("Assets");
            StorageFile file = await assetsFolder.GetFileAsync("sample.wmv");

            StorageFolder localFolder = ApplicationData.Current.LocalFolder;
            StorageFile copiedfile = await file.CopyAsync(localFolder, "sample.wmv", NameCollisionOption.FailIfExists);
         }
         catch (Exception ex)
         {
            // ignore the exception thrown if the file already exists.
         }
      }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\todayhumor\TodayHumor\Class\Board.cs
public async Task<List<Article>> LoadArticleList()
        {
            RaonWebClient WebClient = new RaonWebClient();

            string Uri = string.Format("http://m.todayhumor.co.kr/list.php?table={0}&page={1}", board.Id, page);
            string Result = await WebClient.DownloadStringTaskAsync(new Uri(Uri));

            // ?????? ???? ??? ??? ??? List? ????.
            return ParseArticleList(Result);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\todayhumor\TodayHumor\Class\Board.cs
public async void Load()
        {
            // Boards? ?????
            Boards.Clear();

            // IsolatedStorage? ????
            IsolatedStorageFile storage = IsolatedStorageFile.GetUserStoreForApplication();

            // BoardList.txt? ???? ??? ?
            if (storage.FileExists(BoardSavePath))
            {
                // ??? ????. (??? ?? / ??? ID / ??? ??? \t?? ???)
                using (StreamReader BoardReader = new StreamReader(storage.OpenFile(BoardSavePath, FileMode.Open)))
                {
                    string ReadLine;
                    while ((ReadLine = BoardReader.ReadLine()) != null)
                    {
                        string[] ParsedString = ReadLine.Split('\t');

                        Boards.Add(new Board(ParsedString[0], ParsedString[1], Int32.Parse(ParsedString[2])));
                    }
                }
            }
            else
            {
                try
                {
                    await Refresh();
                }
                catch (WebException e)
                {
                    Debug.WriteLine(e.Response);
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\todayhumor\TodayHumor\Class\Board.cs
public async Task<bool> Refresh()
        {
            // WebClient? ???? ??? ??? ??? ?
            RaonWebClient WebClient = new RaonWebClient();

            string Uri = "http://m.todayhumor.co.kr/";
            string Result = await WebClient.DownloadStringTaskAsync(new Uri(Uri));

            // ??? ?
            IEnumerable<Board> BoardList = ParseBoardList(Result);

            // IsolatedStorage? ????
            IsolatedStorageFile storage = IsolatedStorageFile.GetUserStoreForApplication();

            // BoardList.txt? ????.
            using (StreamWriter BoardWriter = new StreamWriter(storage.OpenFile(BoardSavePath, FileMode.Create)))
            {
                foreach (Board board in BoardList)
                {
                    BoardWriter.WriteLine(String.Format("{0}\t{1}\t{2}", board.Name, board.Id, board.Hit));
                    Boards.Add(board);
                }
            }

            return true;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\todayhumor\TodayHumor\Class\Article.cs
public async Task<List<ArticlePart>> LoadArticle()
        {
            RaonWebClient WebClient = new RaonWebClient();

            string Uri = "http://m.todayhumor.co.kr/" + article.Href;
            string Result = await WebClient.DownloadStringTaskAsync(new Uri(Uri));

            // ?????? ???? ??? List? ????.
            return await ParseArticle(Result);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\todayhumor\TodayHumor\Class\Article.cs
async Task<List<ArticlePart>> ParseArticle(string result)
        {
            List<ArticlePart> ArticlePartList = new List<ArticlePart>(); // ??? ??? ?? ???

            // ?? ???
            Regex TitleRegex        = new Regex("(?<=<span class=\"view_subject\">)(.|\n)*?(?=</span>)");
            Regex WriterRegex       = new Regex("(?<=<span class=\"view_writer\" is_member=\".*?\">).*?(?=</span>)");
            Regex CommentsRegex     = new Regex("(?<=<span class=\"view_replyCount\">).*?(?=</span>)");
            Regex DateRegex         = new Regex("(?<=<span class=\"view_(bestReg|w)Date\" >).*?(?=</span>)");
            Regex ContentWrapRegex  = new Regex("(?<=<div class=\"view_content\" >)(.|\n)*?(?=</div>(.|\n)*?function board_delete)");
            Regex ImageRegex        = new Regex("(?<=<img.*?src=\").*?(?=\".*?>)");
            Regex UriRegex          = new Regex("https?:\\/\\/[-\\w.]+(:\\d+)?(\\/([\\w\\/_.?=&]*)?)?");
            Regex LikeLinkRegex     = new Regex("(?<=var ok_flag = \").*?(?=\")");
            Regex BoardRegex        = new Regex("(?<=var table = \")(.|\n)*?(?=\")");
            Regex LikeDislikeRegex  = new Regex("(?<=<span class=\"view_okNok\">)(.|\n)*?(?=</span>)");
            Regex MobileRegex       = new Regex("<m>");

            Regex ArticleCommentIdRegex = new Regex("(?<=var table_memo_no = \").*?(?=\";)");
            Regex ArticleIdRegex        = new Regex("(?<=var no = \").*?(?=\";)");
            Regex LastCommentIdRegex    = new Regex("(?<=lastMemoNumber = ).*?(?=</)");
            Regex ArticleTableRegex     = new Regex("(?<=var table = \").*?(?=\";)");

            Match TitleMatch        = TitleRegex.Match(result);
            Match WriterLikeMatch   = WriterRegex.Match(result);
            Match CommentsMatch     = CommentsRegex.Match(result);
            Match BoardMatch        = BoardRegex.Match(result);
            Match LikeDislikeMatch  = LikeDislikeRegex.Match(result);

            MatchCollection DateMatches = DateRegex.Matches(result);

            // ???? ?? ??? ????
            string Title = HttpUtility.HtmlDecode(Regex.Replace(TitleMatch.Value, "<.*?>", "").Trim());
            string Category = "Images/BoardIcons/" + BoardMatch.Value + ".png";
            string Writer = WriterLikeMatch.Value;
            string LikeDislike = LikeDislikeMatch.Value;
            string Date = DateMatches[0].Value;
            string Comments = CommentsMatch.Value;
            string Mobile = MobileRegex.Match(Title).Value == "<m>" ? "???" : "";

            // ??? ??? ???? List? ???.
            ArticlePartList.Add(new ArticlePart(Title.Replace("<m>", ""), Category, Writer, LikeDislike, Mobile));

            // ???? ?? ??? Article? ????.
            string ArticleLikeLink = LikeLinkRegex.Match(result).Value;

            // ??? ????.
            string ContentWrap = ContentWrapRegex.Match(result).Value;

            // ??????? br, p, div ?? ??? ??? Split?? ?? ????.
            foreach (string paragraph in Regex.Split(ContentWrap, "(<br.*?>)|(<p.*?>)|(<div.*?>|<li.*?>)", RegexOptions.IgnoreCase))
            {
                string Content = paragraph;

                // ???(?)? ?? ??, ?? ???? ??? ??? ???? List? ????,
                MatchCollection ImageUriMatches = ImageRegex.Matches(Content);
                foreach (Match ImageUriMatch in ImageUriMatches)
                {
                    string ImageUriString = ImageUriMatch.Value;
                    // Uri? ???? ?? ??
                    if (!String.IsNullOrEmpty(ImageUriString))
                    {
                        ArticlePartList.Add(new ArticlePart(new Uri(ImageUriString), ArticlePart.Type.Image));
                    }
                }

                // ? ? ???,
                string StringContent = Regex.Replace(Content, "(<.*?>|https?:\\/\\/[-\\w.]+(:\\d+)?(\\/([\\w\\/_.?=&]*)?)?)", "");
                string StringContentTrimmed = HttpUtility.HtmlDecode(StringContent).Trim();
                if (!String.IsNullOrEmpty(StringContentTrimmed))
                {
                    ArticlePartList.Add(new ArticlePart(StringContentTrimmed));
                }

                // ? ? ??? ????.
                // a href? ???? ?? ?? ??? ???? ????
                Content = Regex.Replace(Content, "<(img|a).*?>", "");

                MatchCollection LinkUriMatches = UriRegex.Matches(Content);
                foreach (Match LinkUriMatch in LinkUriMatches)
                {
                    string LinkUriString = LinkUriMatch.Value;
                    if (!String.IsNullOrEmpty(LinkUriString))
                    {
                        ArticlePartList.Add(new ArticlePart(new Uri(LinkUriString), ArticlePart.Type.Link));
                    }
                }
            }

            // ??? ???? ???? ?? ?? ???? ??? ??? ????.
            ArticlePartList.Add(new ArticlePart(Comments, Date));

            // ?? ?? ??

            // ??? 50?? ???? 50?? ????,
            // 50?? ???? ?? ?? ??? ? ??? ??.
            // ParseCommentsData? ??? 50??? ? ??? true, ??? false? ????.

            // ??? 50??? ?? ??
            if (ParseCommentsData(result, ref ArticlePartList))
            {
                // ??? ?? ??? ???
                MatchCollection LastCommentIdMatches = LastCommentIdRegex.Matches(result);

                // ??? ? ??? ?? ???? ??? ???? ?
                string ArticleCommentId = ArticleCommentIdRegex.Match(result).Value;
                string ArticleId = ArticleIdRegex.Match(result).Value;
                string LastCommentId = LastCommentIdMatches[LastCommentIdMatches.Count - 1].Value;
                string ArticleTable = ArticleTableRegex.Match(result).Value;

                // ??? ????.
                RaonWebClient WebClient = new RaonWebClient();

                string CommentUri = "http://m.todayhumor.co.kr/" + String.Format("ajax_memo.php?table_memo_no={0}&parent_id={1}&last_memo_num={2}&memo_count_limit=10000&table={3}&no={1}&flag={4}",
                                                                   ArticleCommentId, ArticleId, LastCommentId, ArticleTable, new Random().Next());
                string CommentResult = await WebClient.DownloadStringTaskAsync(new Uri(CommentUri));

                ParseCommentsData(CommentResult, ref ArticlePartList);

                // ????? ?? ?? ????.
                ArticlePartList.Add(new ArticlePart());
            }
            else
            {
                // ????? ?? ?? ????.
                ArticlePartList.Add(new ArticlePart());
            }

            return ArticlePartList;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\tpetrina+wp8-helpers\tpetrina-wp8-helpers-31b56a5\wp8.helpers.test\MainPage.xaml.cs
private async void Button_Click_1(object sender, RoutedEventArgs e)
        {
            var wc = new WebClient();
            var html = await wc.DownloadStringTaskAsync(new Uri("http://www.microsoft.com", UriKind.Absolute));

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\trainshare+TrainShareApp\trainshare-TrainShareApp-e353e5a\TrainShareApp\Data\CacheTimeTable.cs
public async Task<IEnumerable<Station>> GetLocations(string locationName)
        {
            // First search in cache
            var cached = GetCachedLocation(locationName);
            if (cached != null) return cached as IEnumerable<Station>;

            // Check for network connectivity
            if (!NetworkInterface.GetIsNetworkAvailable()) return Enumerable.Empty<Station>();

            // If nothing found in cache query sbb.ch
            var client = new RestClient("http://transport.opendata.ch/v1/");
            var request =
                new RestRequest("locations")
                    .WithRootElement("stations")
                    .WithFormat(DataFormat.Json)
                    .AddParameter("query", locationName);

            try
            {
                var result =
                    await
                    client
                        .ExecutTaskAsync<List<Station>>(request)
                        .ContinueWith(task => task.Result.Data);

                UpdateCachedLocation(locationName, result);

                return result;
            }
            catch (Exception)
            {
                return Enumerable.Empty<Station>();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\trainshare+TrainShareApp\trainshare-TrainShareApp-e353e5a\TrainShareApp\Data\CacheTimeTable.cs
public async Task<SearchResult> GetConnections(string from, string to, DateTime time, bool isArrival = false)
        {
            // Check for network connectivity
            if (!NetworkInterface.GetIsNetworkAvailable()) return null;

            var client = new RestClient("http://transport.opendata.ch/v1/");
            var request =
                new RestRequest("connections")
                    .AddParameter("from", from)
                    .AddParameter("to", to)
                    .AddParameter("date", time.ToString("yyyy-MM-dd"))
                    .AddParameter("time", time.ToString("HH:mm"))
                    .AddParameter("isArrivalTime", isArrival ? 1 : 0);

            try
            {
                return 
                    await
                    client
                        .ExecutTaskAsync(request)
                        .ContinueWith(task => JObject.Parse(task.Result.Content).ToObject<SearchResult>());
            }
            catch (Exception)
            {
                return null;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\trainshare+TrainShareApp\trainshare-TrainShareApp-e353e5a\TrainShareApp\Data\TrainshareClient.cs
public async Task<Token> LoginAsync(Token token)
        {
            // Check for network connectivity
            if (!NetworkInterface.GetIsNetworkAvailable()) return null;

            var client = new RestClient("http://trainshare.herokuapp.com/v1/");
            var request =
                new RestRequest("login", Method.POST)
                    .AddJson(
                        new JObject(
                            new JProperty("network", token.Network),
                            new JProperty("access_token", token.AccessToken),
                            new JProperty("access_token_secret", token.AccessTokenSecret)));

            request.RequestFormat = DataFormat.Json;

            try
            {
                var json =
                    await
                    client
                        .ExecutTaskAsync(request)
                        .ContinueWith(task => JObject.Parse(task.Result.Content));

                InsertOrUpdateToken(
                    new Token
                    {
                        Network = "trainshare",
                        AccessToken = json["trainshare_id"].Value<string>(),
                        AccessTokenSecret = json["trainshare_token"].Value<string>()
                    });

                Events.Publish(Token);

                return Token;
            }
            catch (Exception e)
            {
                _logger.Error(e);
                return null;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\trainshare+TrainShareApp\trainshare-TrainShareApp-e353e5a\TrainShareApp\Data\TrainshareClient.cs
public async Task<List<TrainshareFriend>> GetFriends()
        {
            // Check for network connectivity
            if (!NetworkInterface.GetIsNetworkAvailable()) return new List<TrainshareFriend>();

            var client = new RestClient("http://trainshare.herokuapp.com/v1/");
            var request =
                new RestRequest("read", Method.POST)
                    .AddParameter("trainshare_id", Token.AccessToken)
                    .AddParameter("trainshare_token", Token.AccessTokenSecret);

            try
            {
                return
                    await
                    client
                        .ExecutTaskAsync<List<TrainshareFriend>>(request)
                        .ContinueWith(task => task.Result.Data);
            }
            catch(Exception e)
            {
                _logger.Error(e);

                return new List<TrainshareFriend>();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\trainshare+TrainShareApp\trainshare-TrainShareApp-e353e5a\TrainShareApp\Data\TrainshareClient.cs
public async Task Checkin(Checkin checkin)
        {
            // Check for network connectivity
            if (!NetworkInterface.GetIsNetworkAvailable()) return;

            var client = new RestClient("http://trainshare.herokuapp.com/v1/");
            var request =
                new RestRequest("checkin", Method.POST)
                    .AddJson(
                        new JObject(
                            new JProperty("trainshare_id", Token.AccessToken),
                            new JProperty("trainshare_token", Token.AccessTokenSecret),
                            new JProperty("data",
                                          new JArray(
                                              checkin
                                                  .Sections
                                                  .Select(
                                                      section =>
                                                      new JObject(
                                                          new JProperty("departure_station", section.DepartureStation),
                                                          new JProperty("departure_time",
                                                                        section.DepartureTime.ToString("HH:mm")),
                                                          new JProperty("arrival_station", section.ArrivalStation),
                                                          new JProperty("arrival_time",
                                                                        section.ArrivalTime.ToString("HH:mm")),
                                                          new JProperty("train_id", section.TrainId),
                                                          new JProperty("position", checkin.Position)))))));

            try
            {
                //Skipping the result on purpouse
                await client.ExecutTaskAsync(request);

                AddCheckin(checkin);
                CurrentCheckin = checkin;

                Events.Publish(CurrentCheckin);
            }
            catch (Exception e)
            {
                _logger.Error(e);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\trainshare+TrainShareApp\trainshare-TrainShareApp-e353e5a\TrainShareApp\ViewModels\CheckinViewModel.cs
public async void Confirm()
        {
            try
            {
                Loading = true;

                // subtrack because the front is on the right
                var position = 10 - (int) Position*10;
                position = Math.Min(position, 10);
                position = Math.Max(position, 0);

                CurrentCheckin.Position = position;
                CurrentCheckin.CheckinTime = DateTime.Now;

                // need await to handle exception
                await _trainshareClient.Checkin(CurrentCheckin);
            }
            catch(Exception e)
            {
                _logger.Error(e);
                RadMessageBox.Show("Sorry, there was an unexpected error while checking in. Please try again later.");
            }
            finally
            {
                Loading = false;

                _navigationService
                    .UriFor<MainViewModel>()
                    .Navigate();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\trainshare+TrainShareApp\trainshare-TrainShareApp-e353e5a\TrainShareApp\ViewModels\MainViewModel.cs
private async void UpdateHistory()
        {
            try
            {
                History = (await _trainshareClient.GetHistory(10)).ToList();
            }
            catch (Exception e)
            {
                _logger.Error(e);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\trainshare+TrainShareApp\trainshare-TrainShareApp-e353e5a\TrainShareApp\ViewModels\MainViewModel.cs
private async void UpdateFriends()
        {
            try
            {
                Friends = (await _trainshareClient.GetFriends()).ToList();
            }
            catch (Exception e)
            {
                _logger.Error(e);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\trainshare+TrainShareApp\trainshare-TrainShareApp-e353e5a\TrainShareApp\ViewModels\SearchResultViewModel.cs
private async void SubmitSearch()
        {
            Results = null;
            Loading = true;

            if (Time < DateTime.Now.Subtract(App.SearchTimeTolerance))
                Time = Time.AddDays(1);

            try
            {
                var result = await _timeTable.GetConnections(From, To, Time, IsArrival);

                From = result.From.Name;
                To = result.To.Name;
                Results = result.Connections;
            }
            catch (Exception e)
            {
                _logger.Error(e);
                RadMessageBox.Show("Sorry, there was an unexpected error for your request. Please try again later.");
                _navigationService.GoBack();
            }
            finally
            {
                Loading = false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\vksvgithub+IshaWindowsPhone7App\vksvgithub-IshaWindowsPhone7App-6548f73\src\ProgramFinder\Isha.WP8ProgramSearch\App.xaml.cs
public static async void LoadProgramDetails(string programid)
        {
            //if (!String.IsNullOrEmpty(_programid) && String.Compare(_programid, programid) == 0)
            //{                
            //    return;
            //}
            //TODO: build a caching and not to call network if already loaded, also notify the View


            string urltocall = AppResources.ProgramDetailsURL + "&program_id=" + programid;

            Task<ProgramDetail[]> searchresult = JSONFeeds.GetJSONDataAsync<ProgramDetail[]>(urltocall);
            await searchresult;

            if (!searchresult.IsCompleted)
            {
                return;
            }

            ProgramDetail[] details = searchresult.Result;

            if (details.Length != 0)
            {
                ProgramDetail detail = details[0];

                selectedProgram.Address = detail.address;
                selectedProgram.ContactEmail = detail.contact_email;
                selectedProgram.ContactPhone = detail.contact_phone;
                selectedProgram.Date = detail.date;
                selectedProgram.EflyerUrl = detail.eflyer_url;
                selectedProgram.Icon = detail.icon;
                selectedProgram.Language = detail.title_ext;
                selectedProgram.PreRegisterUrl = detail.preregister_url;
                selectedProgram.RegisterUrl = detail.register_url;
                selectedProgram.Text = detail.text;
                selectedProgram.Title = detail.title;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\vnet\trunk\TheVerge.Phone.WP8\..\TheVerge.Phone\Pages\AboutPage.xaml.cs
private async void MoreFrom_Click(object sender, RoutedEventArgs e)
        {
            await Windows.System.Launcher.LaunchUriAsync(new Uri(@"zune:search?publisher=MasterDevs"));
#else
         private void MoreFrom_Click(object sender, RoutedEventArgs e)
        {   var mp = new MarketplaceSearchTask();
            mp.ContentType = MarketplaceContentType.Applications;
            mp.SearchTerms = @"MasterDevs";
            mp.Show();
#endif
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\vortexwolf+2ch-Browser-WP7\vortexwolf-2ch-Browser-WP7-361ffab\DvachBrowser\Assets\HttpTasks\HttpGetTask.cs
public override async void Execute()
        {
            base.Execute();

            // create the http request
            HttpWebRequest httpWebRequest = WebRequest.CreateHttp(this.Url);
            httpWebRequest.Method = "GET";
            httpWebRequest.UserAgent = "2ch Browser (Windows Phone)";

            // get the response asynchronously
            var task = httpWebRequest.GetResponseAsync();
            await OnGetResponseCompleted(task);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\vortexwolf+2ch-Browser-WP7\vortexwolf-2ch-Browser-WP7-361ffab\DvachBrowser\Assets\HttpTasks\HttpGetTask.cs
private async Task OnGetResponseCompleted(Task<WebResponse> task)
        {
            if (this._isCancelled)
            {
                return;
            }

            // get the response
            HttpWebResponse response;
            try
            {
                response = (HttpWebResponse)await task.ConfigureAwait(false);
            }
            catch (Exception e)
            {
                this.InvokeOnErrorHandler(ErrorMessages.WebPageLoadError);
                return;
            }

            if (response.StatusCode != HttpStatusCode.OK)
            {
                this.InvokeOnErrorHandler((int)response.StatusCode + " " + response.StatusDescription);
                return;
            }

            // response stream
            Stream stream;
            if (this.OnProgressChanged != null && response.Headers.AllKeys.Any(key => key == "Content-Length"))
            {
                var progressStream = new ProgressStream(response.GetResponseStream(), response.ContentLength);
                progressStream.OnProgressChanged = v => this.InvokeInUiThread(() => this.OnProgressChanged(v));
                stream = progressStream;
            }
            else
            {
                stream = response.GetResponseStream();
            }

            if (!this._isCancelled)
            {
                this.OnStreamDownloaded(stream);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\vortexwolf+2ch-Browser-WP7\vortexwolf-2ch-Browser-WP7-361ffab\DvachBrowser\Assets\HttpTasks\HttpPostTask.cs
public override async void Execute()
        {
            base.Execute();

            HttpWebRequest httpWebRequest = WebRequest.CreateHttp(this.Url);
            httpWebRequest.Method = "POST";
            httpWebRequest.ContentType = string.Format("multipart/form-data; boundary={0}", this._boundary);
            httpWebRequest.UserAgent = "2ch Browser (Windows Phone)";

            var task = httpWebRequest.GetRequestStreamAsync();
            await GetRequestStreamCallback(task, httpWebRequest);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\vortexwolf+2ch-Browser-WP7\vortexwolf-2ch-Browser-WP7-361ffab\DvachBrowser\Assets\HttpTasks\HttpPostTask.cs
private async Task GetRequestStreamCallback(Task<Stream> task, HttpWebRequest request)
        {
            Stream postStream = await task.ConfigureAwait(false);

            this.WriteMultipartObject(postStream, this.Parameters);
            postStream.Close();

            var responseTask = request.GetResponseAsync();
            await GetResponseCallback(responseTask);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\vortexwolf+2ch-Browser-WP7\vortexwolf-2ch-Browser-WP7-361ffab\DvachBrowser\Assets\HttpTasks\HttpPostTask.cs
private async Task GetResponseCallback(Task<WebResponse> task)
        {
            // get the response
            HttpWebResponse response;
            try
            {
                response = (HttpWebResponse)await task.ConfigureAwait(false);
            }
            catch (Exception e)
            {
                if (e.InnerException != null && e.InnerException.Message.StartsWith("[net_WebHeaderInvalidControlChars]"))
                {
                    // not an exception, everything is ok
                    this.InvokeInUiThread(() => this.OnCompleted(null));
                }
                else
                {
                    this.InvokeOnErrorHandler(ErrorMessages.HttpPostError);
                }

                return;
            }

            if (response.StatusCode != HttpStatusCode.OK)
            {
                this.InvokeOnErrorHandler((int)response.StatusCode + " " + response.StatusDescription);
                return;
            }

            // response stream
            using (Stream stream = response.GetResponseStream())
            {
                using (StreamReader reader = new StreamReader(stream))
                {
                    string str = reader.ReadToEnd();
                    this.InvokeInUiThread(() => this.OnCompleted(str));
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\cms\CMSEnvelopedHelper.cs
public async Task<CmsReadable> GetReadable(KeyParameter sKey)
            {
                string macAlg = this.algorithm.ObjectID.Id;
//				Asn1Object sParams = this.algorithm.Parameters.ToAsn1Object();

                try
                {
                    this.mac = MacUtilities.GetMac(macAlg);

                    // FIXME Support for MAC algorithm parameters similar to cipher parameters
//						ASN1Object sParams = (ASN1Object)macAlg.getParameters();
//
//						if (sParams != null && !(sParams instanceof ASN1Null))
//						{
//							AlgorithmParameters params = CMSEnvelopedHelper.INSTANCE.createAlgorithmParameters(macAlg.getObjectId().getId(), provider);
//
//							params.init(sParams.getEncoded(), "ASN.1");
//
//							mac.init(sKey, params.getParameterSpec(IvParameterSpec.class));
//						}
//						else
                    {
                        mac.Init(sKey);
                    }

//						Asn1Object asn1Params = asn1Enc == null ? null : asn1Enc.ToAsn1Object();
//
//						ICipherParameters cipherParameters = sKey;
//
//						if (asn1Params != null && !(asn1Params is Asn1Null))
//						{
//							cipherParameters = ParameterUtilities.GetCipherParameters(
//							macAlg.ObjectID, cipherParameters, asn1Params);
//						}
//						else
//						{
//							string alg = macAlg.ObjectID.Id;
//							if (alg.Equals(CmsEnvelopedDataGenerator.DesEde3Cbc)
//								|| alg.Equals(CmsEnvelopedDataGenerator.IdeaCbc)
//								|| alg.Equals(CmsEnvelopedDataGenerator.Cast5Cbc))
//							{
//								cipherParameters = new ParametersWithIV(cipherParameters, new byte[8]);
//							}
//						}
//
//						mac.Init(cipherParameters);
                }
                catch (SecurityUtilityException e)
                {
                    throw new CmsException("couldn't create cipher.", e);
                }
                catch (InvalidKeyException e)
                {
                    throw new CmsException("key invalid in message.", e);
                }
                catch (IOException e)
                {
                    throw new CmsException("error decoding algorithm parameters.", e);
                }

                try
                {
                    return new CmsProcessableInputStream(
                        new TeeInputStream(
                            await readable.GetInputStream(),
                            new MacOutputStream(this.mac)));
                }
                catch (IOException e)
                {
                    throw new CmsException("error reading content.", e);
                }
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\cms\CMSEnvelopedHelper.cs
public async Task<CmsReadable> GetReadable(KeyParameter sKey)
            {
                try
                {
                    this.cipher =  CipherUtilities.GetCipher(this.algorithm.ObjectID);

                    Asn1Encodable asn1Enc = this.algorithm.Parameters;
                    Asn1Object asn1Params = asn1Enc == null ? null : asn1Enc.ToAsn1Object();

                    ICipherParameters cipherParameters = sKey;

                    if (asn1Params != null && !(asn1Params is Asn1Null))
                    {
                        cipherParameters = ParameterUtilities.GetCipherParameters(
                            this.algorithm.ObjectID, cipherParameters, asn1Params);
                    }
                    else
                    {
                        string alg = this.algorithm.ObjectID.Id;
                        if (alg.Equals(CmsEnvelopedDataGenerator.DesEde3Cbc)
                            || alg.Equals(CmsEnvelopedDataGenerator.IdeaCbc)
                            || alg.Equals(CmsEnvelopedDataGenerator.Cast5Cbc))
                        {
                            cipherParameters = new ParametersWithIV(cipherParameters, new byte[8]);
                        }
                    }

                    cipher.Init(false, cipherParameters);
                }
                catch (SecurityUtilityException e)
                {
                    throw new CmsException("couldn't create cipher.", e);
                }
                catch (InvalidKeyException e)
                {
                    throw new CmsException("key invalid in message.", e);
                }
                catch (IOException e)
                {
                    throw new CmsException("error decoding algorithm parameters.", e);
                }

                try
                {
                    return new CmsProcessableInputStream(
                        new CipherStream(await readable.GetInputStream(), cipher, null));
                }
                catch (IOException e)
                {
                    throw new CmsException("error reading content.", e);
                }
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\cms\CMSProcessableFile.cs
public async virtual Task<Stream> GetInputStream()
        {
            return (await _file.OpenAsync(FileAccessMode.Read)).AsStreamForRead(DefaultBufSize);
            //return new FileStream(
            //    _file.FullName, FileMode.Open, FileAccess.Read, FileShare.Read, _bufSize);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\cms\CMSProcessableFile.cs
public async virtual Task Write(
            Stream zOut)
        {
            Stream inStr = await GetInputStream();
            Streams.PipeAll(inStr, zOut);
            inStr.Dispose();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\cms\KEKRecipientInformation.cs
public override async Task<CmsTypedStream> GetContentStream(
            ICipherParameters key)
        {
            try
            {
                byte[] encryptedKey = info.EncryptedKey.GetOctets();
                IWrapper keyWrapper = WrapperUtilities.GetWrapper(keyEncAlg.ObjectID.Id);

                keyWrapper.Init(false, key);

                KeyParameter sKey = ParameterUtilities.CreateKeyParameter(
                    GetContentAlgorithmName(), keyWrapper.Unwrap(encryptedKey, 0, encryptedKey.Length));

                return await GetContentFromSessionKey(sKey);
            }
            catch (SecurityUtilityException e)
            {
                throw new CmsException("couldn't create cipher.", e);
            }
            catch (InvalidKeyException e)
            {
                throw new CmsException("key invalid in message.", e);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\cms\KeyAgreeRecipientInformation.cs
public async override Task<CmsTypedStream> GetContentStream(
            ICipherParameters key)
        {
            if (!(key is AsymmetricKeyParameter))
                throw new ArgumentException("KeyAgreement requires asymmetric key", "key");

            AsymmetricKeyParameter receiverPrivateKey = (AsymmetricKeyParameter) key;

            if (!receiverPrivateKey.IsPrivate)
                throw new ArgumentException("Expected private key", "key");

            KeyParameter sKey = GetSessionKey(receiverPrivateKey);

            return await GetContentFromSessionKey(sKey);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\cms\KeyTransRecipientInformation.cs
public async override Task<CmsTypedStream> GetContentStream(
            ICipherParameters key)
        {
            KeyParameter sKey = UnwrapKey(key);

            return await GetContentFromSessionKey(sKey);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\cms\PasswordRecipientInformation.cs
public async override Task<CmsTypedStream> GetContentStream(
            ICipherParameters key)
        {
            try
            {
                AlgorithmIdentifier kekAlg = AlgorithmIdentifier.GetInstance(info.KeyEncryptionAlgorithm);
                Asn1Sequence        kekAlgParams = (Asn1Sequence)kekAlg.Parameters;
                byte[]              encryptedKey = info.EncryptedKey.GetOctets();
                string              kekAlgName = DerObjectIdentifier.GetInstance(kekAlgParams[0]).Id;
                string				cName = CmsEnvelopedHelper.Instance.GetRfc3211WrapperName(kekAlgName);
                IWrapper			keyWrapper = WrapperUtilities.GetWrapper(cName);

                byte[] iv = Asn1OctetString.GetInstance(kekAlgParams[1]).GetOctets();

                ICipherParameters parameters = ((CmsPbeKey)key).GetEncoded(kekAlgName);
                parameters = new ParametersWithIV(parameters, iv);

                keyWrapper.Init(false, parameters);

                KeyParameter sKey = ParameterUtilities.CreateKeyParameter(
                    GetContentAlgorithmName(), keyWrapper.Unwrap(encryptedKey, 0, encryptedKey.Length));

                return await GetContentFromSessionKey(sKey);
            }
            catch (SecurityUtilityException e)
            {
                throw new CmsException("couldn't create cipher.", e);
            }
            catch (InvalidKeyException e)
            {
                throw new CmsException("key invalid in message.", e);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\cms\RecipientInformation.cs
internal async Task<CmsTypedStream> GetContentFromSessionKey(
            KeyParameter sKey)
        {
            CmsReadable readable = await secureReadable.GetReadable(sKey);

            try
            {
                return new CmsTypedStream(await readable.GetInputStream());
            }
            catch (IOException e)
            {
                throw new CmsException("error getting .", e);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\cms\RecipientInformation.cs
public async Task<byte[]> GetContent(
            ICipherParameters key)
        {
            try
            {
                return CmsUtilities.StreamToByteArray((await GetContentStream(key)).ContentStream);
            }
            catch (IOException e)
            {
                throw new Exception("unable to parse internal stream: " + e);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\crypto\tls\RecordStream.cs
internal async Task WriteMessageAsync(
            ContentType type,
            byte[] message,
            int offset,
            int len)
        {
            if (type == ContentType.handshake)
            {
                UpdateHandshakeData(message, offset, len);
            }

            Stream cOut = writeCompression.Compress(buffer);

            byte[] ciphertext;
            if (cOut == buffer)
            {
                ciphertext = writeCipher.EncodePlaintext(type, message, offset, len);
            }
            else
            {
                cOut.Write(message, offset, len);
                cOut.Flush();
                ciphertext = writeCipher.EncodePlaintext(type, buffer.ToArray(), 0, (int)buffer.Position);
                buffer.SetLength(0);
            }

            byte[] writeMessage = new byte[ciphertext.Length + 5];
            TlsUtilities.WriteUint8((byte)type, writeMessage, 0);
            TlsUtilities.WriteVersion(writeMessage, 1);
            TlsUtilities.WriteUint16(ciphertext.Length, writeMessage, 3);
            Array.Copy(ciphertext, 0, writeMessage, 5, ciphertext.Length);
            await outStr.WriteAsync(writeMessage, 0, writeMessage.Length);
            await outStr.FlushAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\crypto\tls\TlsProtocolHandler.cs
private async Task SafeWriteMessageAsync(ContentType type, byte[] buf, int offset, int len)
        {
            try
            {
                await rs.WriteMessageAsync(type, buf, offset, len);
            }
            catch (TlsFatalAlert e)
            {
                if (!this.closed)
                {
                    this.FailWithError(AlertLevel.fatal, e.AlertDescription);
                }
                throw e;
            }
            catch (IOException e)
            {
                if (!closed)
                {
                    this.FailWithError(AlertLevel.fatal, AlertDescription.internal_error);
                }
                throw e;
            }
            catch (Exception e)
            {
                if (!closed)
                {
                    this.FailWithError(AlertLevel.fatal, AlertDescription.internal_error);
                }
                throw e;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\crypto\tls\TlsProtocolHandler.cs
internal async Task WriteDataAsync(byte[] buf, int offset, int len)
        {
            if (this.closed)
            {
                if (this.failedWithError)
                    throw new IOException(TLS_ERROR_MESSAGE);

                throw new IOException("Sorry, connection has been closed, you cannot write more data");
            }

            /*
            * Protect against known IV attack!
            *
            * DO NOT REMOVE THIS LINE, EXCEPT YOU KNOW EXACTLY WHAT
            * YOU ARE DOING HERE.
            */
            await SafeWriteMessageAsync(ContentType.application_data, emptybuf, 0, 0);

            do
            {
                /*
                * We are only allowed to write fragments up to 2^14 bytes.
                */
                int toWrite = System.Math.Min(len, 1 << 14);

                await SafeWriteMessageAsync(ContentType.application_data, buf, offset, toWrite);

                offset += toWrite;
                len -= toWrite;
            }
            while (len > 0);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\openpgp\PgpLiteralDataGenerator.cs
public async Task<Stream> Open(
            Stream outStr,
            char format,
            StorageFile file)
        {
            var props = await file.GetBasicPropertiesAsync();
        
            return Open(outStr, format, file.Name, (long)props.Size, props.DateModified.DateTime);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\openpgp\PgpUtilities.cs
public async static Task WriteFileToLiteralData(
            Stream		output,
            char		fileType,
            StorageFile	file)
        {
            PgpLiteralDataGenerator lData = new PgpLiteralDataGenerator();
            var props = await file.GetBasicPropertiesAsync();
            Stream pOut = lData.Open(output, fileType, file.Name, (long)props.Size, props.DateModified.DateTime);
            await PipeFileContents(file, pOut, 4096);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\openpgp\PgpUtilities.cs
public async static Task WriteFileToLiteralData(
            Stream		output,
            char		fileType,
            StorageFile file,
            byte[]		buffer)
        {
            PgpLiteralDataGenerator lData = new PgpLiteralDataGenerator();
            var props = await file.GetBasicPropertiesAsync();
            Stream pOut = lData.Open(output, fileType, file.Name, (long)props.Size, props.DateModified.DateTime);
            await PipeFileContents(file, pOut, buffer.Length);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\w8bouncycastle\WinRTBouncyCastle\WinRTBouncyCastle\src\openpgp\PgpUtilities.cs
private async static Task PipeFileContents(StorageFile file, Stream pOut, int bufSize)
        {
            var inputStream = (await file.OpenReadAsync()).AsStreamForRead(bufSize);
            byte[] buf = new byte[bufSize];

            int len;
            while ((len = inputStream.Read(buf, 0, buf.Length)) > 0)
            {
                pOut.Write(buf, 0, len);
            }

            pOut.Dispose();
            inputStream.Dispose();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windns\WindowsDns\Windows.Dns.WP\..\Windows.Dns\Resolver.cs
public static async Task<Response> Lookup(Request request, IPAddress dnsServer, int timeoutInSeconds = 2)
        {
            // check the inputs
            if (request == null) throw new ArgumentNullException("request");
            if (dnsServer == null) throw new ArgumentNullException("dnsServer");

            return await Task.Factory.StartNew(() =>
                                                   {
                                                       // We will not catch exceptions here, rather just refer them to the caller

                                                       // create an end point to communicate with
                                                       var server = new IPEndPoint(dnsServer, DnsPort);


                                                       SocketRequest sr = null;
                                                       var mre = new ManualResetEvent(false);
                                                       DataReceived = bts =>
                                                                          {
                                                                              // ReSharper disable AccessToModifiedClosure
                                                                              if (sr == bts)
                                                                                  // ReSharper restore AccessToModifiedClosure
                                                                              {
                                                                                  mre.Set();
                                                                              }
                                                                          };

                                                       // send the request and get the response
                                                       //byte[] responseMessage =;
                                                       sr = UdpTransfer(server, request);
                                                       mre.WaitOne(timeoutInSeconds*1000);
                                                       return sr.Response;
                                                   });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\WindowsPhone8.Core.Xaml\Controls\SuperFlyout.cs
public static async Task ShowHtmlFile(string title, string htmlFilePath)
        {
            await AppHelper.NavigateToUriAsync(new Uri("/Windows8Accelerator.Core.Xaml;component/Controls/SuperFlyoutPage.xaml", UriKind.Relative), new SuperFlyoutNavigationParameter()
            {
                Title = title,
                HtmlFilePath = htmlFilePath,
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\WindowsPhone8.Core.Xaml\Helpers\HtmlHelper.cs
public override async Task PreLoadHtmlImagesAsync(string html)
        {
            html = WebUtility.HtmlDecode(html);

            var htmlDocument = new HtmlDocument();
            htmlDocument.LoadHtml(html);

            await VisitPreLoadHtmlImages(htmlDocument.DocumentNode);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\WindowsPhone8.Core.Xaml\Helpers\HtmlHelper.cs
private static async Task VisitPreLoadHtmlImages(HtmlNode htmlNode)
        {
            switch (htmlNode.NodeType)
            {
                case HtmlNodeType.Document:
                case HtmlNodeType.Element:
                    var tag = htmlNode.Name.ToLower();
                    if (tag.Equals("img") && htmlNode.Attributes.Contains("src"))
                    {
                        var imageSrc = htmlNode.Attributes["src"].Value;
                        try
                        {
                            await CacheManager.GetOrRetrieveUriAsync(imageSrc);
                        }
                        catch { }
                    }
                    else
                    {
                        foreach (var item in htmlNode.ChildNodes)
                        {
                            await VisitPreLoadHtmlImages(item);
                        }
                    }
                    break;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\WindowsPhone8.Core.Xaml\Helpers\StorageHelper.cs
public static async Task<StorageFolder> GetStorageFolderAsync(string name, StorageLocation location)
        {
            StorageFolder folder = null;
            switch (location)
            {
                case StorageLocation.Local:
                    folder = ApplicationData.Current.LocalFolder;
                    break;
                case StorageLocation.Roaming:
                    folder = ApplicationData.Current.RoamingFolder;
                    break;
                case StorageLocation.Temp:
                    folder = ApplicationData.Current.TemporaryFolder;
                    break;
                case StorageLocation.InstalledLocation:
                    folder = Windows.ApplicationModel.Package.Current.InstalledLocation;
                    break;
                case StorageLocation.Path:
                    folder = await StorageFolder.GetFolderFromPathAsync(Path.GetDirectoryName(name));
                    break;
            }
            if (name != null && location != StorageLocation.Path)
            {
                var folderNames = Path.GetDirectoryName(name).Split(new char[] { '\\', '/' }, StringSplitOptions.RemoveEmptyEntries);
                foreach (var folderName in folderNames)
                {
                    folder = await folder.CreateFolderAsync(folderName, CreationCollisionOption.OpenIfExists);
                }
            }
            return folder;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\WindowsPhone8.Core.Xaml\Helpers\StorageHelper.cs
public override async Task<FileInfo[]> GetFilesAsync(string directory, StorageLocation storageLocation)
        {
            var folder = await GetStorageFolderAsync(directory, storageLocation);
            var files = await folder.GetFilesAsync();
            return files.Select(
                (f) => new FileInfo() {
                    Path = f.Path,
                    Name = f.Name,
                    DateCreated = f.DateCreated,
                }
                ).ToArray();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\WindowsPhone8.Core.Xaml\Helpers\StorageHelper.cs
public override async Task DeleteFilesAsync(string filePath, StorageLocation location)
        {
            var folder = await GetStorageFolderAsync(filePath, location);
            var file = await folder.GetFileAsync(Path.GetFileName(filePath));
            await file.DeleteAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\WindowsPhone8.Core.Xaml\Helpers\StorageHelper.cs
public override async Task CreateFileAsync(string filePath, StorageLocation location)
        {
            var folder = await GetStorageFolderAsync(filePath, location);
            await folder.CreateFileAsync(Path.GetFileName(filePath), CreationCollisionOption.ReplaceExisting);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\WindowsPhone8.Core.Xaml\Helpers\StorageHelper.cs
public override async Task<Stream> OpenFileWriteAsync(string filePath, StorageLocation location, bool createIfNecessary = false)
        {
            var folder = await GetStorageFolderAsync(filePath, location);
            StorageFile file = null;
            try
            {
                file = await folder.GetFileAsync(Path.GetFileName(filePath));
            }
            catch { }
            if (file == null && createIfNecessary)
            {
                file = await folder.CreateFileAsync(Path.GetFileName(filePath), CreationCollisionOption.ReplaceExisting);
            }
            if (file == null)
                throw new FileNotFoundException(filePath, filePath);

            return await file.OpenStreamForWriteAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\WindowsPhone8.Core.Xaml\Helpers\StorageHelper.cs
public override async Task<Stream> OpenFileReadAsync(string filePath, StorageLocation location)
        {
            var folder = await GetStorageFolderAsync(filePath, location);
            var file = await folder.GetFileAsync(Path.GetFileName(filePath));
            return await file.OpenStreamForReadAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\WindowsPhone8.Core.Xaml\Helpers\WebHelper.cs
protected override async Task<string> InternalGetStringAsync(Uri uri, string accept = null, string user = null, string password = null)
        {
            var httpWebRequest = HttpWebRequest.CreateHttp(uri);
            if (accept != null)
                httpWebRequest.Accept = accept;
            if (user != null)
            { 
                httpWebRequest.Credentials = new NetworkCredential(user, password);
            }

            var response = await Task<WebResponse>.Factory.FromAsync(httpWebRequest.BeginGetResponse, httpWebRequest.EndGetResponse, null) as HttpWebResponse;
            using (response)
            {
                EnsureSuccessStatusCode(response);
                using (var reader = new StreamReader(response.GetResponseStream()))
                {
                    return await reader.ReadToEndAsync();
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\WindowsPhone8.Core.Xaml\Helpers\WebHelper.cs
protected async override Task<string> InternalPostStringAsync(Uri uri, object postData, string accept, string user, string password)
        {
            var httpWebRequest = HttpWebRequest.CreateHttp(uri);
            httpWebRequest.Method = "POST";

            if (postData is IEnumerable<KeyValuePair<string, string>>)
            {
                throw new NotImplementedException();
                //httpContent = new FormUrlEncodedContent(postData as IEnumerable<KeyValuePair<string, string>>);
            }
            else
            {
                httpWebRequest.ContentType = "application/json";
                //httpWebRequest.Headers["datatype"] = "jsondata";
                //httpWebRequest.Headers["async"] = "false";
                var requestStream = await Task<Stream>.Factory.FromAsync(httpWebRequest.BeginGetRequestStream, httpWebRequest.EndGetRequestStream, null);
                using (var streamWriter = new StreamWriter(requestStream))
                {
                    streamWriter.Write(postData);
                }
            }


            if (accept != null)
                httpWebRequest.Accept = accept;
            if (user != null)
            {
                httpWebRequest.Credentials = new NetworkCredential(user, password);
            }

            var response = await Task<WebResponse>.Factory.FromAsync(httpWebRequest.BeginGetResponse, httpWebRequest.EndGetResponse, null) as HttpWebResponse;
            using (response)
            {
                EnsureSuccessStatusCode(response);
                using (var reader = new StreamReader(response.GetResponseStream()))
                {
                    return await reader.ReadToEndAsync();
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\WindowsPhone8.Core.Xaml\Helpers\WebHelper.cs
public override async Task<Stream> GetStreamAsync(Uri uri)
        {
            var httpWebRequest = HttpWebRequest.CreateHttp(uri);
            var response = await Task<WebResponse>.Factory.FromAsync(httpWebRequest.BeginGetResponse, httpWebRequest.EndGetResponse, null) as HttpWebResponse;
            using (response)
            {
                EnsureSuccessStatusCode(response);
                var stream = new MemoryStream();
                await response.GetResponseStream().CopyToAsync(stream);
                stream.Position = 0;
                return stream;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\AppHelperBase.cs
public async Task SaveStateAsync()
        {
            await ObjectPersister.SaveAsync("AppState.bin", StorageLocation.Local, _State, ObjectPersisterFormat.Binary);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\AppHelperBase.cs
public async Task LoadStateAsync()
        {
            try
            {
                var state = await ObjectPersister.LoadAsync<ApplicationState>("AppState.bin", StorageLocation.Local, ObjectPersisterFormat.Binary);
                _State = state;
                _State.Pages = new List<object>();
                for (int i = 0; i < _State.PageTypeNames.Count; i++)
                {
                    _State.Pages.Add(null);
                }

                var previousNavigationStackPosition = _State.NavigationStackPosition;
                _State.NavigationStackPosition = -1;
                for (int i = 0; i < _State.PageTypeNames.Count; i++)
                {
                    _State.NavigationStackPosition++;
                    var pageType = Type.GetType(_State.PageTypeNames[i], true);
                    var parameter = _State.Parameters[i];
                    await NavigateAsync(pageType, parameter);
                }
                var navigationStackPosition = _State.NavigationStackPosition;
                while (navigationStackPosition > previousNavigationStackPosition)
                {
                    await NavigateBack();
                    navigationStackPosition--;
                }
            }
            catch { }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Controls\SuperFlyout.cs
public static async Task ShowHtmlFile(string title, string htmlFilePath)
        {
            await AppHelper.NavigateToUriAsync(new Uri("/Windows8Accelerator.WindowsPhone7.Core.Xaml;component/Controls/SuperFlyoutPage.xaml", UriKind.Relative), new SuperFlyoutNavigationParameter()
            {
                Title = title,
                HtmlFilePath = htmlFilePath,
            });
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\StorageHelper.cs
public override async Task<FileInfo[]> GetFilesAsync(string directory, StorageLocation storageLocation)
        {
            var folder = await GetStorageFolderAsync(directory, storageLocation);            
            var files = ISF.GetFileNames(Path.Combine(folder,"*"));
            return files.Select(
                (f) => new FileInfo()
                {
                    Path = Path.Combine(folder, f),
                    Name = Path.GetFileName(f),
                    DateCreated = ISF.GetCreationTime(f),
                }
                ).ToArray();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\StorageHelper.cs
public override async Task DeleteFilesAsync(string filePath, StorageLocation location)
        {
            var folder = await GetStorageFolderAsync(filePath, location);
            var file = Path.Combine(folder, Path.GetFileName(filePath));
            ISF.DeleteFile(file);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\StorageHelper.cs
public override async Task CreateFileAsync(string filePath, StorageLocation location)
        {
            var folder = await GetStorageFolderAsync(filePath, location);
            var file = Path.Combine(folder, Path.GetFileName(filePath));
            if (ISF.FileExists(file))
                ISF.DeleteFile(file);
            ISF.CreateFile(file);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\StorageHelper.cs
public override async Task<Stream> OpenFileWriteAsync(string filePath, StorageLocation location, bool createIfNecessary = false)
        {
            var folder = await GetStorageFolderAsync(filePath, location);
            var file = Path.Combine(folder, Path.GetFileName(filePath));

            if (!ISF.FileExists(file) && createIfNecessary)
                ISF.CreateFile(file);
            else 
                throw new FileNotFoundException(filePath);
            
            return ISF.OpenFile(file, FileMode.Open, FileAccess.ReadWrite);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\WebHelperBase.cs
public async Task<string> GetJsonAsync(string url, string user = null, string password = null)
        {
            return await GetStringAsync(url, "application/json", user , password );
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\WebHelperBase.cs
public async Task<string> GetStringAsync(string url, string accept = null, string user = null, string password = null)
        {
            using (ProgressBarManager.NewWork())
            {
                return await InternalGetStringAsync(new Uri(url), accept, user, password);
            } 
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\WebHelperBase.cs
public async Task<string> PostJsonAsync(string url, object postData, string user = null, string password = null)
        {
            var postDataAsJson = JsonConvert.SerializeObject(postData);
            return await PostStringAsync(url, postDataAsJson, "application/json", user, password);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\WebHelperBase.cs
public async Task<string> PostStringAsync(string url, string postData, string accept = null, string user = null, string password = null)
        {
            using (ProgressBarManager.NewWork())
            {
                return await InternalPostStringAsync(new Uri(url), postData, accept, user, password);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Caching\CacheManager.cs
private static async void InitializeAsync()
        {
            foreach (var file in await StorageHelperBase.Instance.GetFilesAsync(URI_CACHE_FOLDER, StorageLocation.Local))
            {
                MemoryUriCache[file.Name] = null;
            }

            //await Task.Delay(new TimeSpan(0, 2, 0));

            await DeleteOldFiles(URI_CACHE_FOLDER, StorageLocation.Local);
            await DeleteOldFiles(CACHE_FOLDER, StorageLocation.Local);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Caching\CacheManager.cs
private static async Task DeleteOldFiles(string directory, StorageLocation location)
        {
            var minDate = DateTime.Now - CacheExpiration;
            foreach (var file in await StorageHelperBase.Instance.GetFilesAsync(directory + "\\", location))
            {

                if (file.DateCreated < minDate)
                {
                    MemoryUriCache.Remove(file.Name);
                    await StorageHelperBase.Instance.DeleteFilesAsync(file.Path, StorageLocation.Path);
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Caching\CacheManager.cs
public static async Task<Uri> GetOrRetrieveUriAsync(string url)
        {
            return await GetOrRetrieveUriAsync(new Uri(url));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Caching\CacheManager.cs
public static async Task<Uri> GetOrRetrieveUriAsync(Uri uri)
        {
            var cacheKey = FixCacheKey(uri.ToString());

            if (MemoryUriCache.ContainsKey(cacheKey))
                return new Uri(string.Format(URL_FORMAT, URI_CACHE_FOLDER, cacheKey));

            await RetrieveUriAsync(uri, cacheKey);

            if (MemoryUriCache.ContainsKey(cacheKey))
                return new Uri(string.Format(URL_FORMAT, URI_CACHE_FOLDER, cacheKey));

            return uri;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Caching\CacheManager.cs
private static async Task RetrieveUriAsync(Uri uri, string cacheKey)
        {
            cacheKey = FixCacheKey(cacheKey);

            using (var response = await WebHelperBase.Instance.GetStreamAsync(uri))
            {
                try
                {
                    await StorageHelperBase.Instance.CreateFileAsync(Path.Combine(URI_CACHE_FOLDER, cacheKey), StorageLocation.Local);
                    using (var stream = await StorageHelperBase.Instance.OpenFileWriteAsync(Path.Combine(URI_CACHE_FOLDER, cacheKey), StorageLocation.Local, true))
                    {
                        await response.CopyToAsync(stream);
                        stream.Flush();
                        MemoryUriCache[cacheKey] = null;
                    }
                }
                catch { }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Caching\CacheManager.cs
public static async Task<CachedObject<T>> UpdateAsync<T>(string cacheKey, Func<Task<T>> retriveFunction)
            where T : class
        {
            //using (ProgressBarManager.NewWork())
            {
                CachedObject<T> cachedObject = null;
                try
                {
                    cacheKey = FixCacheKey(cacheKey);

                    var obj = await retriveFunction();
                    if (obj != null)
                    {
                        var retrievedCachedObject = new CachedObject()
                        {
                            CacheDate = DateTime.Now,
                            Object = obj,
                        };
                        await ObjectPersister.SaveAsync(Path.Combine(CACHE_FOLDER, cacheKey) + CACHE_EXTENSION, StorageLocation.Local, retrievedCachedObject, ObjectPersisterFormat.Binary);
                        if (retrievedCachedObject != null)
                        {
                            lock (MemoryCache)
                            {
                                MemoryCache[cacheKey] = retrievedCachedObject;
                            }
                            cachedObject = new CachedObject<T>(retrievedCachedObject, ObjectOrigin.RetrievalFunction);
                        }
                    }
                    else
                    {
                        cachedObject = new CachedObject<T>(ObjectOrigin.Error);
                    }
                }
                catch (Exception exception)
                {
                    cachedObject = new CachedObject<T>(exception);
                }

                return cachedObject;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Caching\CacheManager.cs
public static async Task<CachedObject<T>> GetAsync<T>(string cacheKey)
            where T : class
        {
            //using (ProgressBarManager.NewWork())
            {
                CachedObject<T> cachedObject = null;
                try
                {
                    cacheKey = FixCacheKey(cacheKey);

                    lock (MemoryCache)
                    {
                        if (MemoryCache.ContainsKey(cacheKey))
                            cachedObject = new CachedObject<T>(MemoryCache[cacheKey], ObjectOrigin.MemoryCache);
                    }

                    try
                    {
                        var diskCachedObject = await ObjectPersister.LoadAsync<CachedObject>(Path.Combine(CACHE_FOLDER, cacheKey) + CACHE_EXTENSION, StorageLocation.Local, ObjectPersisterFormat.Binary);
                        if (diskCachedObject != null)
                        {
                            lock (MemoryCache)
                            {
                                MemoryCache[cacheKey] = diskCachedObject;
                            }
                            cachedObject = new CachedObject<T>(diskCachedObject, ObjectOrigin.FileCache);
                        }
                    }
                    catch { }
                }
                catch (Exception exception)
                {
                    cachedObject = new CachedObject<T>(exception);
                }
                if (cachedObject == null)
                {
                    cachedObject = new CachedObject<T>(ObjectOrigin.NotFound);
                }
                return cachedObject;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Caching\CacheManager.cs
public static async Task ClearAsync(string cacheKey)
        {
            //using (ProgressBarManager.NewWork())
            {
                cacheKey = FixCacheKey(cacheKey);

                lock (MemoryCache)
                {
                    if (MemoryCache.ContainsKey(cacheKey))
                        MemoryCache.Remove(cacheKey);
                }

                try
                {
                    await ObjectPersister.DeleteAsync(Path.Combine(CACHE_FOLDER, cacheKey) + CACHE_EXTENSION, StorageLocation.Local);
                }
                catch { }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Caching\CacheManager.cs
public static async Task<CachedObject<T>> GetOrRetrieveAsync<T>(string cacheKey, Func<Task<T>> retriveFunction, TimeSpan? maxAge = null)
            where T : class
        {
            CachedObject<T> cachedObject = null;
            try
            {
                cachedObject = await GetAsync<T>(cacheKey);
                if ((cachedObject.Origin == ObjectOrigin.FileCache ||
                    cachedObject.Origin == ObjectOrigin.MemoryCache) &&
                    (!maxAge.HasValue || DateTime.Now - cachedObject.CacheDate < maxAge.Value))
                {
                    return cachedObject;
                }

                cachedObject = await UpdateAsync<T>(cacheKey, retriveFunction);
            }
            catch (Exception exception)
            {
                cachedObject = new CachedObject<T>(exception);
            }

            return cachedObject;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\AssemblyHelper.cs
public static async Task<Assembly> GetExecutingAssemblyAsync()
        {
            if (_ExecutingAssembly == null)
            {
                var files = await StorageHelperBase.Instance.GetFilesAsync(StorageLocation.InstalledLocation);
                var exe = files.Where((f) => f.Name.EndsWith(".exe")).FirstOrDefault();
                if (exe == null)
                {
                    using (var xmlReader = XmlReader.Create(await StorageHelperBase.Instance.OpenFileReadAsync("AppManifest.xaml", StorageLocation.InstalledLocation)))
                    {
                        xmlReader.MoveToContent();
                        var entryPointAssembly = xmlReader.GetAttribute("EntryPointAssembly");
                        exe = files.Where((f) => f.Name.Equals(entryPointAssembly + ".dll")).FirstOrDefault();
                    }
                }
                _ExecutingAssembly = Assembly.Load(new AssemblyName() { Name = Path.GetFileNameWithoutExtension(exe.Name) });
            }
            return _ExecutingAssembly;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\AssemblyHelper.cs
public static async Task<Type> GetTypeAsync(string typeName)
        {
            if (_TypesByName == null)
            {
                var typesByName = new Dictionary<string, Type>();
                var executingAssembly = await GetExecutingAssemblyAsync();
                foreach (var type in executingAssembly.GetTypes())
                {
                    typesByName[type.Name] = type;
                    typesByName[type.FullName] = type;
                }
                _TypesByName = typesByName;
            }
            if (_TypesByName.ContainsKey(typeName))
                return _TypesByName[typeName];
            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\HtmlHelper.cs
public override async Task PreLoadHtmlImagesAsync(string html)
        {
            html = HttpUtility.HtmlDecode(html);

            var htmlDocument = new HtmlDocument();
            htmlDocument.LoadHtml(html);

            await VisitPreLoadHtmlImages(htmlDocument.DocumentNode);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\HtmlHelper.cs
private static async Task VisitPreLoadHtmlImages(HtmlNode htmlNode)
        {
            switch (htmlNode.NodeType)
            {
                case HtmlNodeType.Document:
                case HtmlNodeType.Element:
                    var tag = htmlNode.Name.ToLower();
                    if (tag.Equals("img") && htmlNode.Attributes.Contains("src"))
                    {
                        var imageSrc = htmlNode.Attributes["src"].Value;
                        try
                        {
                            await CacheManager.GetOrRetrieveUriAsync(imageSrc);
                        }
                        catch { }
                    }
                    else
                    {
                        foreach (var item in htmlNode.ChildNodes)
                        {
                            await VisitPreLoadHtmlImages(item);
                        }
                    }
                    break;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\WebHelper.cs
protected override async Task<string> InternalGetStringAsync(Uri uri, string accept = null, string user = null, string password = null)
        {
            var httpWebRequest = HttpWebRequest.CreateHttp(uri);
            if (accept != null)
                httpWebRequest.Accept = accept;
            if (user != null)
            { 
                httpWebRequest.Credentials = new NetworkCredential(user, password);
            }

            var response = await Task<WebResponse>.Factory.FromAsync(httpWebRequest.BeginGetResponse, httpWebRequest.EndGetResponse, null) as HttpWebResponse;
            using (response)
            {
                EnsureSuccessStatusCode(response);
                using (var reader = new StreamReader(response.GetResponseStream()))
                {
                    return await reader.ReadToEndAsync();
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\WebHelper.cs
protected async override Task<string> InternalPostStringAsync(Uri uri, object postData, string accept, string user, string password)
        {
            var httpWebRequest = HttpWebRequest.CreateHttp(uri);
            httpWebRequest.Method = "POST";

            if (postData is IEnumerable<KeyValuePair<string, string>>)
            {
                throw new NotImplementedException();
                //httpContent = new FormUrlEncodedContent(postData as IEnumerable<KeyValuePair<string, string>>);
            }
            else
            {
                httpWebRequest.ContentType = "application/json";
                //httpWebRequest.Headers["datatype"] = "jsondata";
                //httpWebRequest.Headers["async"] = "false";
                var requestStream = await Task<Stream>.Factory.FromAsync(httpWebRequest.BeginGetRequestStream, httpWebRequest.EndGetRequestStream, null);
                using (var streamWriter = new StreamWriter(requestStream))
                {
                    streamWriter.Write(postData);
                }
            }


            if (accept != null)
                httpWebRequest.Accept = accept;
            if (user != null)
            {
                httpWebRequest.Credentials = new NetworkCredential(user, password);
            }

            var response = await Task<WebResponse>.Factory.FromAsync(httpWebRequest.BeginGetResponse, httpWebRequest.EndGetResponse, null) as HttpWebResponse;
            using (response)
            {
                EnsureSuccessStatusCode(response);
                using (var reader = new StreamReader(response.GetResponseStream()))
                {
                    return await reader.ReadToEndAsync();
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Helpers\WebHelper.cs
public override async Task<Stream> GetStreamAsync(Uri uri)
        {
            var httpWebRequest = HttpWebRequest.CreateHttp(uri);
            var response = await Task<WebResponse>.Factory.FromAsync(httpWebRequest.BeginGetResponse, httpWebRequest.EndGetResponse, null) as HttpWebResponse;
            using (response)
            {
                EnsureSuccessStatusCode(response);
                var stream = new MemoryStream();
                await response.GetResponseStream().CopyToAsync(stream);
                stream.Position = 0;
                return stream;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Storage\ObjectPersister.cs
public static async Task<bool> SaveAsync(string name, StorageLocation location, object obj, ObjectPersisterFormat format = ObjectPersisterFormat.Binary)
        {
            if (obj == null)
                throw new ArgumentNullException("obj");
            if (string.IsNullOrEmpty(name))
                throw new ArgumentNullException("name");

            try
            {
                using (var stream = await StorageHelperBase.Instance.OpenFileWriteAsync(name, location, true))
                {
                    switch (format)
                    {
                        //case ObjectPersisterFormat.Xml:
                            //XmlSerializer.Serialize(stream, obj);
                        //    break;
                        case ObjectPersisterFormat.Binary:
                            BinarySerializer.Serialize(stream, obj);
                            break;
                        case ObjectPersisterFormat.SimpleXml:
                            SimpleXmlSerializer.Serialize(stream, obj);
                            break;
                        default:
                            throw new NotImplementedException();
                    }
                    await stream.FlushAsync();
                }
                return true;
            }
            catch { }
            return false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Storage\ObjectPersister.cs
public static async Task<bool> DeleteAsync(string name, StorageLocation location)
        {
            if (string.IsNullOrEmpty(name))
                throw new ArgumentNullException("name");

            try{
                await StorageHelperBase.Instance.DeleteFilesAsync(name, location);
                return true;
            }
            catch 
            {
            }
            return false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Storage\ObjectPersister.cs
public static async Task<T> LoadAsync<T>(string name, StorageLocation location, ObjectPersisterFormat format = ObjectPersisterFormat.Binary)
        {
            if (string.IsNullOrEmpty(name))
                throw new ArgumentNullException("name");

            try
            {
                using (var stream = await StorageHelperBase.Instance.OpenFileReadAsync(name, location))
                {
                    switch (format)
                    {
                        //case ObjectPersisterFormat.Xml:
                            //return XmlSerializer.Deserialize<T>(stream.AsStreamForRead());
                        case ObjectPersisterFormat.SimpleXml:
                            return SimpleXmlSerializer.Deserialize<T>(stream);
                        case ObjectPersisterFormat.Binary:
                            return (T)BinarySerializer.Deserialize(stream);
                        default:
                            throw new NotImplementedException();
                    }
                }
            }
            catch (FileNotFoundException)
            {
                return default(T);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Storage\StorageHelper.cs
public async Task<FileInfo[]> GetFilesAsync(StorageLocation storageLocation)
        {
            return await GetFilesAsync(null, storageLocation);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Storage\StringLoader.cs
public static async Task<string> GetContentAsync(string sourceFilePath, StorageLocation storageLocation)
        {
            if (!string.IsNullOrEmpty(sourceFilePath))
            {
                try
                {
                    using (var stream = await StorageHelperBase.Instance.OpenFileReadAsync(sourceFilePath, storageLocation))
                    {
                        using (var reader = new StreamReader(stream))
                        {
                            return reader.ReadToEnd();
                        }
                    }
                }
                catch { }
            }
            return null;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\windows8accelerator\Trunk\Windows8Accelerator\Windows8Accelerator.WindowsPhone7.Core.Xaml\Storage\StringLoader.cs
public async Task LoadContentAsync()
        {
            if (_Loaded)
                return;

            if (!string.IsNullOrEmpty(SourceFilePath))
            {
                try
                {
                    Content = await GetContentAsync(SourceFilePath, StorageLocation);
                    _Loaded = true;
                }
                catch { }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\wp7nl\Wp7nl\wp8\Wp7nl.MvvmLight\Devices\TtcSocketHelper.cs
private async void StartListeningForMessages()
    {
      if( socket != null )
      {
        if (!listening)
        {
          listening = true;
          while (listening)
          {
            var message = await GetMessage();
            if (listening)
            {
              if (message != null && MessageReceived != null)
              {
                MessageReceived(this, new ReceivedMessageEventArgs {Message = message});
              }
            }
          }
        }
      }
    }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\wp7nl\Wp7nl\wp8\Wp7nl.MvvmLight\Devices\TtcSocketHelper.cs
private async Task<string> GetMessage()
    {
      try
      {
        if (dataReader == null) dataReader = new DataReader(socket.InputStream);
        await dataReader.LoadAsync(4);
        var messageLen = (uint)dataReader.ReadInt32();

        await dataReader.LoadAsync(messageLen);
        var message = dataReader.ReadString(messageLen);
        Debug.WriteLine("Message received: " + message);

        return message;
      }
      catch (Exception ex)
      {
        Debug.WriteLine("GetMessage: " + ex.Message);
      }
      return null;

    }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\wp8demos\WP8Demos\ViewModels\LockViewModel.cs
private async void SettingsButtonCommandTapped()
        {
            await Windows.System.Launcher.LaunchUriAsync(new Uri("ms-settings-lock:"));
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\wpentkit\CompanyHub\CompanyHub\MainPage.xaml.cs
private async void ReloadData()
        {
            IsLoadingAnimationVisible = true;
            await App.ViewModel.LoadData();
            InitInstalledAppPanel();

            IsLoadingAnimationVisible = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\wpentkit\CompanyHub\CompanyHub\ViewModels\MainViewModel.cs
public async Task LoadData()
        {
            await LoadCompanyApps();
            await LoadInstalledApps();
            IsDataLoaded = true;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\wpentkit\CompanyHub\CompanyHub\ViewModels\MainViewModel.cs
private async Task LoadCompanyApps()
        {
            _companyApps.Clear();

            string jsonString = string.Empty;

            if (System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable())
            {
                var webClient = new WebClient();
                webClient.Encoding = Encoding.UTF8;

                jsonString =
                   await
                   webClient.DownloadStringTask(new Uri("http://118.192.24.19/app/wp8/AppList.json"));

                if (!IsolatedStorageSettings.ApplicationSettings.Contains(keyName))
                    IsolatedStorageSettings.ApplicationSettings.Add(keyName, string.Empty);

                IsolatedStorageSettings.ApplicationSettings[keyName] = jsonString;
            }
            else
            {
                if (!IsolatedStorageSettings.ApplicationSettings.TryGetValue(keyName, out jsonString))
                    return;
            }

            var result = JsonHelper.Deserialize<List<AppInfo>>(jsonString);

            List<string> installedAppId = InstallationManager
                .FindPackagesForCurrentPublisher()
                .Select(a => a.Id.ProductId.ToLower())
                .ToList();

            foreach (AppInfo item in result)
            {
                _companyApps.Add(item);
                if (installedAppId.Contains(item.Id.ToLower()))
                {
                    item.InstallState = AppInfo.PackageInstallState.Installed;
                }
                else
                {
                    item.InstallState = AppInfo.PackageInstallState.NotInstalled;
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\wpentkit\CompanyHub\CompanyHub\ViewModels\MainViewModel.cs
public async Task LoadAppICON()
            {
                _imagePath = await ProcessExternalFile(currentApp.GetThumbnailToken());
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\wpentkit\CompanyHub\CompanyHub\ViewModels\MainViewModel.cs
public async Task<string> ProcessExternalFile(string fileToken)
            {
                // ???????
                IStorageFolder routesFolder =
                    await
                    ApplicationData.Current.LocalFolder.CreateFolderAsync(ROUTES_FOLDER_NAME,
                                                                          CreationCollisionOption.OpenIfExists);

                // ?????
                string incomingRouteFilename = SharedStorageAccessManager.GetSharedFileName(fileToken);

                // ????????
                IStorageFile routeFile =
                    await
                    SharedStorageAccessManager.CopySharedFileAsync((StorageFolder)routesFolder, incomingRouteFilename,
                                                                   NameCollisionOption.GenerateUniqueName, fileToken);

                return routeFile.Path;
            }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\wphttpserver\WPRemoteControl\WPHttpServer\ConnectionManager.cs
private async void SocketListenerOnConnectionReceived(StreamSocketListener sender, 
                                                              StreamSocketListenerConnectionReceivedEventArgs args)
        {
            try
            {
                using (args.Socket)
                {
                    byte[] requestBuffer;
                    using (DataReader reader = new DataReader(args.Socket.InputStream))
                    {
                        reader.InputStreamOptions = InputStreamOptions.Partial;

                        await reader.LoadAsync(MaxRequestSize);
                        requestBuffer = new byte[reader.UnconsumedBufferLength];
                        reader.ReadBytes(requestBuffer);
                    }

                    IEnumerable<byte> responseData = await this.OnConnectionReceived(requestBuffer);

                    using (DataWriter writer = new DataWriter(args.Socket.OutputStream))
                    {
                        writer.WriteBytes(responseData.ToArray());

                        await writer.StoreAsync();
                    }
                }
            }
            finally 
            {
                //GC.Collect(0, GCCollectionMode.Forced, true);
                //GC.Collect(1, GCCollectionMode.Forced, true);
                //GC.Collect(2, GCCollectionMode.Forced, true);
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\wplottery\WPLottery\WPLottery\MainPage.xaml.cs
private async void appBarSpeakButton_Click(object sender, EventArgs e)
        {
            SpeechRecognitionUIResult recognitionResult = await myRecognizer.RecognizeWithUIAsync();
            if ((recognitionResult.RecognitionResult.TextConfidence == SpeechRecognitionConfidence.High) || (recognitionResult.RecognitionResult.TextConfidence == SpeechRecognitionConfidence.Medium))
            {
               // string inputNumber = Convert.ToUInt64(recognitionResult.RecognitionResult.Text).ToString();
                string inputNumber = recognitionResult.RecognitionResult.Text.Substring(0,12);
                if (inputNumber.Length == 12 )
                {
                    NumberRow row = new NumberRow(Convert.ToInt32(inputNumber.Substring(0, 2)), Convert.ToInt32(inputNumber.Substring(2, 2)), Convert.ToInt32(inputNumber.Substring(4, 2)), Convert.ToInt32(inputNumber.Substring(6, 2)), Convert.ToInt32(inputNumber.Substring(8, 2)), Convert.ToInt32(inputNumber.Substring(10, 2))) { Channel = App.CurrentChannel.ChannelUri.ToString() };
                    _numberRows.Add(row);
                    App.MobileService.GetTable<NumberRow>().InsertAsync(row);
                }
                else
                {
                    SpeechSynthesizer ss = new SpeechSynthesizer();
                    await ss.SpeakTextAsync("You spoke a " + inputNumber.Length + " digit number. Please speak twelve digits. If you have to say five, please say zero five");
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\wpupnp\UPnP\UPnP\Device.cs
public static async Task<Device> Create_Async(string uri)
        {
            var xml = await new WebClient().DownloadStringTaskAsync(uri);
            var dom = XElement.Parse(xml);
            if (dom.GetDefaultNamespace() != "urn:schemas-upnp-org:device-1-0")
            {
                Debug.WriteLine("Bad default namespace " + dom.GetDefaultNamespace());
                return null;
            }

            Device device = new Device(uri, dom);
            return device;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\wpupnp\UPnP\PhoneTestApp\ContentDirectory.cs
public async Task<Browse_Result> Browse(string ObjectID, string BrowseFlag, string Filter, uint StartingIndex, uint RequestedCount, string SortCriteria)
        {
            return await base.Action_Async(Browse_Info, new object[] { ObjectID, BrowseFlag, Filter, StartingIndex, RequestedCount, SortCriteria }, new Browse_Result()) as Browse_Result;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\wpupnp\UPnP\PhoneTestApp\MainPage.xaml.cs
async void TestMediaBrowseAsync(string uri)
        {
            var device = await UPnP.Device.Create_Async(uri);
            var contentdir = device.FindService("urn:upnp-org:serviceId:ContentDirectory");
            if (contentdir != null)
            {
                ContentDirectory cd = new ContentDirectory(contentdir);
                var cdresult = await cd.Browse("0", "BrowseMetadata", "*", (uint)0, (uint)1, "");

                Debug.WriteLine("Found device: " + device.FriendlyName);
                if (cdresult.Error == null)
                {
                    Debug.WriteLine("Number={0}, Total={1}, UpdateID={2}, Result={3}\n",
                        cdresult.NumberReturned,
                        cdresult.TotalMatches,
                        cdresult.UpdateID,
                        cdresult.Result);
                }
                else
                {
                    Debug.WriteLine("ERROR: {0} on BrowseMetadata call", cdresult.Error.Message);
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\y2bd+TotallySwankWP\y2bd-TotallySwankWP-402b050\TotallySwankCore\DataServices\SearchDataService.cs
public async void GetEntries(string query, Action<IEnumerable<Entry>, Exception> callback)
    {
      List<Entry> entries = new List<Entry>();

      HtmlDocument doc = new HtmlDocument();
      WebClient wc = new WebClient();
      string s = null;

      try {
        s = await wc.DownloadStringTaskAsync(SEARCH_URL + Uri.EscapeDataString(query));
      }
      catch (WebException e) {
        callback(null, e);
        return;
      }

      doc.LoadHtml(s);

      HtmlNodeCollection nodes = doc.DocumentNode.SelectNodes("//td[@class='text']");

      if (nodes == null || nodes.Count <= 0) {
        callback(null, new ArgumentException());
        return;
      }
      
      foreach (HtmlNode node in nodes) {
        if (node == null) continue;

        string name = query.ToLowerInvariant();

        string definition, example;

        try {
          var defNode = node.SelectSingleNode("div[@class='definition']");
          var exNode = node.SelectSingleNode("div[@class='example']");

          if (defNode == null || exNode == null)
            continue;

          definition = defNode.InnerHtml;
          definition = definition.Trim().Replace("<br><br>", "\n");
          definition = HttpUtility.HtmlDecode(definition);
          definition = HtmlRemoval.StripTags(definition);

          example = exNode.InnerHtml;
          example = example.Trim().Replace("<br><br>", "\n");
          example = HttpUtility.HtmlDecode(example);
          example = HtmlRemoval.StripTags(example);
        }
        catch (Exception ) {
          continue;
        }

        entries.Add(new Entry(name, definition, example));
      }
      
      callback(entries, null);
    }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\y2bd+TotallySwankWP\y2bd-TotallySwankWP-402b050\TotallySwankCore\DataServices\WOTDDataService.cs
public async Task<IEnumerable<Entry>> GetEntries()
    {
      List<Entry> entries = new List<Entry>();

      HtmlDocument doc = new HtmlDocument();
      WebClient wc = new WebClient();
      string s = null;

      try {
        s = await wc.DownloadStringTaskAsync(HOMEPAGE_URL);
      }
      catch (WebException e) {
          //because async debugging on windows phone sucks, having this here at least gives us a hint at what happened
          throw;
      }

      doc.LoadHtml(s);

      foreach (HtmlNode node in doc.DocumentNode.SelectNodes("//div[@class='daily']")) {
        string name = HttpUtility.HtmlDecode(node.SelectSingleNode(".//a[@href]").InnerHtml).ToLowerInvariant();
        string definition = HtmlRemoval.StripTags(HttpUtility.HtmlDecode(node.SelectSingleNode("div[@class='definition']").InnerHtml.Trim().Replace("<br>", " ")));
        string example = HtmlRemoval.StripTags(HttpUtility.HtmlDecode(node.SelectSingleNode("div[@class='example']").InnerHtml.Trim().Replace("<br><br>", "\n").Replace("<br>","")));
        entries.Add(new Entry(name, definition, example));
      }

      return entries;
    }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\yamac+windows-demos\yamac-windows-demos-cbb221f\YamacDemos.WP8\..\YamacDemos.Common\Data\DemoItemRepositorySource.cs
public async Task<DemoItem[]> GetChunkAsync(uint start, uint count)
        {
            if (start < 1 || start > MaxItems || count > MaxItems)
            {
                throw new ArgumentOutOfRangeException("The parameter 'start' or 'count' is out of range.");
            }
            if (start + count > MaxItems)
            {
                count = MaxItems - start + 1;
            }
            return await Repository.GetItemsAsync(start, count);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\yamac+windows-demos\yamac-windows-demos-cbb221f\YamacDemos.WP8\..\YamacDemos.Common\Data\DemoItemSQLiteRepository.cs
private async Task<bool> Initialize()
        {
            if (!Initialized)
            {
                Debug.WriteLine("Initialize database");
                var db = GetDatabase();
                await db.DropTableAsync<DemoItem>();
                await db.CreateTableAsync<DemoItem>();
                var items = Enumerable
                    .Range(Start, Count)
                    .Select<int, DemoItem>
                    (
                        x =>
                        {
                            return new DemoItem { Id = x, Title = "title" + x, Description = "description" + x };
                        }
                    ).ToArray();
                await db.RunInTransactionAsync(t =>
                {
                    foreach (var item in items)
                    {
                        t.Insert(item);
                    }
                });
                Initialized = true;
                return true;
            }
            else
            {
                return false;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\yamac+windows-demos\yamac-windows-demos-cbb221f\YamacDemos.WP8\..\YamacDemos.Common\Data\DemoItemSQLiteRepository.cs
public async Task<DemoItem[]> GetItemsAsync(uint start = 1, uint count = 10)
        {
            Debug.WriteLine("GetItemsAsync({0}, {1})", start, count);
            await Initialize();
            var db = GetDatabase();
            var items = await db.QueryAsync<DemoItem>("SELECT * FROM DemoItem LIMIT ?, ?", new object[] { start - 1, count });
            return items.ToArray();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\yamac+windows-demos\yamac-windows-demos-cbb221f\YamacDemos.WP8\..\YamacDemos.Common\Data\DemoItemStaticRepository.cs
public async Task<DemoItem[]> GetItemsAsync(uint start = 1, uint count = 10)
        {
            Debug.WriteLine("GetItemsAsync({0}, {1})", start, count);
            var items = Enumerable
                .Range((int)start, (int)count)
                .Select<int, DemoItem>
                (
                    x =>
                    {
                        return new DemoItem { Id = x, Title = "title" + x, Description = "description" + x };
                    }
                ).ToArray();
            return await Task.Run<DemoItem[]>(() => items);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\yamac+windows-demos\yamac-windows-demos-cbb221f\YamacDemos.WP8\..\YamacDemos.Common\Data\DemoItemWebServiceRepository.cs
public async Task<DemoItem[]> GetItemsAsync(uint start = 1, uint count = 10)
        {
            Debug.WriteLine("GetItemsAsync({0}, {1})", start, count);
            var url = Const.APIBase + "json/json?start=" + start + "&count=" + count;
            var uri = new Uri(url);
#if WINDOWS_PHONE
            var req = WebRequest.CreateHttp(uri);
            req.AllowReadStreamBuffering = true;
            var resp = await req.GetResponseAsync();
            var stream = resp.GetResponseStream();
#elif WINDOWS_STORE_APP
            var httpClient = new HttpClient();
            var resp = await httpClient.GetAsync(uri);
            var stream = await resp.Content.ReadAsStreamAsync();
#endif
            var serializerSettings = new DataContractJsonSerializerSettings();
            serializerSettings.DateTimeFormat = new DateTimeFormat("yyyy-MM-ddTHH:mm:sszzz");
            var serializer = new DataContractJsonSerializer(typeof(DemoItemAPIResponse), serializerSettings);
            var res = (DemoItemAPIResponse)serializer.ReadObject(stream);
            stream.Dispose();
            return res.Result.Items;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\yamac+windows-demos\yamac-windows-demos-cbb221f\YamacDemos.WP8\Demo\Network\SimpleHttp.xaml.cs
public async void Initialize()
        {
            SystemTray.Message = "?????...";
            SystemTray.IsBusy = true;
            var webClient = new WebClient();
            try
            {
                Content = await webClient.DownloadStringTaskAsync(new Uri(Const.APIBase + "json/json"));
            }
            catch (Exception e)
            {
                Content = e.ToString();
            }
            SystemTray.IsBusy = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\yamac+windows-demos\yamac-windows-demos-cbb221f\YamacDemos.WP8\Demo\Network\SimpleHttpJSON.xaml.cs
public async void Initialize()
        {
            SystemTray.Message = "?????...";
            SystemTray.IsBusy = true;
            try
            {
                var uri = new Uri(Const.APIBase + "json/json");
                var req = WebRequest.CreateHttp(uri);
                req.AllowReadStreamBuffering = true;
                var resp = await req.GetResponseAsync();
                var stream = resp.GetResponseStream();
                var serializer = new DataContractJsonSerializer(typeof(DemoJson));
                var result = (DemoJson)serializer.ReadObject(stream);
                stream.Dispose();
                foreach (var item in result.Result.Items)
                {
                    Items.Add(item);
                }
            }
            catch
            {
            }
            SystemTray.IsBusy = false;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\yamac+windows-demos\yamac-windows-demos-cbb221f\YamacDemos.WP8\Demo\Speech\SimpleSpeechRecognition.xaml.cs
private async void SpeechRecognitionButton_Click(object sender, System.Windows.RoutedEventArgs e)
        {
            try
            {
                var result = await recognizerUI.RecognizeWithUIAsync();
                mainViewModel.SpeechRecognitionText = result.RecognitionResult.Text;
            }
            catch (Exception ex)
            {
                mainViewModel.SpeechRecognitionText = "????????????" + ex.Message;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\yinsee+barcamppg2013-wp\yinsee-barcamppg2013-wp-5af05c5\BarCamp\BarCamp\BarcodeCaptureDevice.cs
private async Task AwaitWhenNotFocusing()
        {
            while (_focusing)
            {
                await Task.Delay(50).ConfigureAwait(false);
                ThrowIfDisposed();
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\yinsee+barcamppg2013-wp\yinsee-barcamppg2013-wp-5af05c5\BarCamp\BarCamp\BarcodeCaptureDevice.cs
public async Task FocusAsync()
        {
            if (_focusing)                           // wait until not focusing
            {
                await AwaitWhenNotFocusing();
                ThrowIfDisposed();
                return;
            }
            await FocusAsyncInternal();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\yinsee+barcamppg2013-wp\yinsee-barcamppg2013-wp-5af05c5\BarCamp\BarCamp\BarcodeCaptureDevice.cs
private async Task FocusAsyncInternal()
        {
            if (_inited)
            {
                if (!_focusing && PhotoCaptureDevice.IsFocusSupported(_device.SensorLocation))
                {
                    _focusing = true;
                    try
                    {
                        await _device.FocusAsync();
                    }
                    finally
                    {
                        _focusing = false;
                    }
                }
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\ZNickq+WorkoutPlanner\ZNickq-WorkoutPlanner-0318b18\WorkoutPlanner\ViewModels\ExerciseViewModel.cs
public static async Task DownloadExerciseListAsync()
        {
            HttpClient client = new HttpClient();
            string url = "https://dl.dropboxusercontent.com/u/13921141/WorkoutPlanner/api.json";
            HttpResponseMessage response = await client.GetAsync(url);
            string content = await response.Content.ReadAsStringAsync();
            
            JArray x = JArray.Parse(content);
            foreach (JObject jo in x)
            {
                string title = (string) jo.GetValue("title");
                int dur = (int) jo.GetValue("duration");
                string type = (string) jo.GetValue("type");
                string murl = (string) jo.GetValue("url");
                ExerciseType et = new ExerciseType(title, type, dur);
                lastExercise = et;
                et._url = murl;
            }

            //Now load data
            await SaveHandler.LoadUserImagesLocalDataAsync();

            SplashScreen.DataLoaded = true;

        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\zwaap+HttpClient\zwaap-HttpClient-dc4be71\src\SharpGIS.HttpClient.WP\Http\HttpClient.cs
public async Task<string> GetStringAsync(Uri requestUri)
        {
            //TODO: There's a lot of context switch here that could be avoided
            var response = await GetAsync(requestUri);
            return await response.Content.ReadAsStringAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\zwaap+HttpClient\zwaap-HttpClient-dc4be71\src\SharpGIS.HttpClient.WP\Http\HttpContent.cs
public async Task<byte[]> ReadAsByteArrayAsync()
        {
            Stream stream = await ReadAsStreamAsync();
            if (!stream.CanSeek)
            {
                MemoryStream ms = new MemoryStream();
                int count = 0;
                byte[] buffer = new byte[1024];
                while ((count = await stream.ReadAsync(buffer, 0, 1024)) > 0)
                {
                    ms.Write(buffer, 0, count);
                }
                return ms.ToArray();
            }
            else
            {
                byte[] buffer = new byte[stream.Length];
                await stream.ReadAsync(buffer, 0, buffer.Length);
                return buffer;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\zwaap+HttpClient\zwaap-HttpClient-dc4be71\src\SharpGIS.HttpClient.WP\Http\HttpContent.cs
public async Task<string> ReadAsStringAsync()
        {
            var bytes = await ReadAsByteArrayAsync();
            return UTF8Encoding.UTF8.GetString(bytes, 0, bytes.Length);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\zwaap+HttpClient\zwaap-HttpClient-dc4be71\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\zwaap+HttpClient\zwaap-HttpClient-dc4be71\src\UnitTests\WP8\HttpClientTests.cs
[TestMethod]
        public async Task GetAsyncTest1()
        {
            HttpClient client = new HttpClient();
            var response = await client.GetAsync("http://www.microsoft.com");
            Assert.IsTrue(response.IsSuccessStatusCode);
            Assert.AreEqual(response.StatusCode, System.Net.HttpStatusCode.OK);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\zwaap+HttpClient\zwaap-HttpClient-dc4be71\src\UnitTests\WP8\HttpClientTests.cs
[TestMethod]
        public async Task GetAsyncTest_Compressed()
        {
            HttpClient client = new HttpClient(new HttpClientHandler() { AutomaticDecompression = System.Net.DecompressionMethods.GZip });
            var response = await client.GetAsync("http://www.microsoft.com");
            Assert.IsTrue(response.IsSuccessStatusCode);
            Assert.AreEqual(response.StatusCode, System.Net.HttpStatusCode.OK);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\zwaap+HttpClient\zwaap-HttpClient-dc4be71\src\UnitTests\WP8\HttpClientTests.cs
[TestMethod]
        public async Task GetAsyncTest_POST()
        {
            byte[] bytes = Encoding.UTF8.GetBytes("Foo");
            System.IO.MemoryStream ms = new System.IO.MemoryStream(bytes);
            StreamContent streamContent = new StreamContent(ms);
            HttpClient client = new HttpClient();
            var response = await client.PostAsync("http://www.microsoft.com", streamContent);
            Assert.IsFalse(response.IsSuccessStatusCode);
            Assert.AreEqual(response.StatusCode, System.Net.HttpStatusCode.MethodNotAllowed);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\zwaap+HttpClient\zwaap-HttpClient-dc4be71\src\UnitTests\WP8\HttpClientTests.cs
[TestMethod]
        public async Task GetAsyncTest_POST2()
        {
            byte[] bytes = Encoding.UTF8.GetBytes("Where=1%3D1");
            System.IO.MemoryStream ms = new System.IO.MemoryStream(bytes);
            StreamContent streamContent = new StreamContent(ms);
            HttpClient client = new HttpClient();
            var response = await client.PostAsync("http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Fire/Sheep/FeatureServer/0/query?f=pjson", streamContent);
            string result = await response.Content.ReadAsStringAsync();
            Assert.IsFalse(response.IsSuccessStatusCode);
            Assert.AreEqual(response.StatusCode, System.Net.HttpStatusCode.OK);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\zwaap+HttpClient\zwaap-HttpClient-dc4be71\src\SharpGIS.HttpClient.WP\Http\HttpClient.cs
public async Task<string> GetStringAsync(Uri requestUri)
        {
            //TODO: There's a lot of context switch here that could be avoided
            var response = await GetAsync(requestUri);
            return await response.Content.ReadAsStringAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\zwaap+HttpClient\zwaap-HttpClient-dc4be71\src\SharpGIS.HttpClient.WP\Http\HttpContent.cs
public async Task<byte[]> ReadAsByteArrayAsync()
        {
            Stream stream = await ReadAsStreamAsync();
            if (!stream.CanSeek)
            {
                MemoryStream ms = new MemoryStream();
                int count = 0;
                byte[] buffer = new byte[1024];
                while ((count = await stream.ReadAsync(buffer, 0, 1024)) > 0)
                {
                    ms.Write(buffer, 0, count);
                }
                return ms.ToArray();
            }
            else
            {
                byte[] buffer = new byte[stream.Length];
                await stream.ReadAsync(buffer, 0, buffer.Length);
                return buffer;
            }
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\zwaap+HttpClient\zwaap-HttpClient-dc4be71\src\SharpGIS.HttpClient.WP\Http\HttpContent.cs
public async Task<string> ReadAsStringAsync()
        {
            var bytes = await ReadAsByteArrayAsync();
            return UTF8Encoding.UTF8.GetString(bytes, 0, bytes.Length);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\zwaap+HttpClient\zwaap-HttpClient-dc4be71\src\SharpGIS.HttpClient.WP\Http\MultipartContent.cs
protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            StreamWriter writer = new StreamWriter(stream);
            writer.Write("--");
            writer.Write(m_boundary);
            foreach (var part in m_parts)
            {
                writer.WriteLine();
                await part.CopyToAsync(stream);
                writer.WriteLine();
                await writer.FlushAsync();
                writer.Write("--");
                writer.Write(m_boundary);
                writer.Flush();
            }
            writer.Write("--");
            writer.Flush();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\zxingnet\trunk\Clients\WindowsPhone8Demo\ViewModels\CaptureViewModel.cs
private async Task<Result> GetBarcodeAsync()
        {
            await PhotoCaptureDevice.FocusAsync();
            return await DetectBarcodeAsync();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\zxingnet\trunk\Clients\WindowsPhone8Demo\ViewModels\CaptureViewModel.cs
private async Task StartCapturingAsync()
        {
            CameraCaptureSequence sequence = PhotoCaptureDevice.CreateCaptureSequence(1);
            var memoryStream = new MemoryStream();
            sequence.Frames[0].CaptureStream = memoryStream.AsOutputStream();

            PhotoCaptureDevice.SetProperty(KnownCameraPhotoProperties.FlashMode, FlashState.Off);
            PhotoCaptureDevice.SetProperty(KnownCameraPhotoProperties.SceneMode, CameraSceneMode.Macro);

            await PhotoCaptureDevice.PrepareCaptureSequenceAsync(sequence);
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\zxingnet\trunk\Clients\WindowsPhone8Demo\ViewModels\CaptureViewModel.cs
private async Task<Size> GetBestCaptureResolution()
        {
            // The last size in the AvailableCaptureResolutions is the lowest available
            var captureResolutions = PhotoCaptureDevice.GetAvailableCaptureResolutions(CameraSensorLocation.Back);
            var previewResolutions = PhotoCaptureDevice.GetAvailablePreviewResolutions(CameraSensorLocation.Back);

            Size resolution = await Task.Factory.StartNew(() => captureResolutions.Last(
                c => (c.Width > 1000.0 || c.Height > 1000.0) && previewResolutions.Any(p => (c.Width / c.Height).Equals(p.Width / p.Height))));
            return resolution;
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\ZytrixSathwikE+Windows\ZytrixSathwikE-Windows-be90571\My Medi\My Medi\Add_appointment.xaml.cs
private async void btnOK_Click(object sender, RoutedEventArgs e)
        {
            SQLiteAsyncConnection conn = new SQLiteAsyncConnection(Path.Combine(ApplicationData.Current.LocalFolder.Path, "people.db"), true);

            Person person = new Person
            {
                DoctorName = watermarkTextBox.Text,
                Date = datepick.ValueString,
                Time = timepick.ValueString
             };

            await conn.InsertAsync(person);

            //My_Medi.ViewModels.MainViewModel veiw = new ViewModels.MainViewModel();

            //veiw.LoadData();
            DataContext = App.ViewModel;
            App.ViewModel.Items.Clear();
            App.ViewModel.LoadData();            
            

            NavigationService.GoBack();
            
            


        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\ZytrixSathwikE+Windows\ZytrixSathwikE-Windows-be90571\My Medi\My Medi\MainPage.xaml.cs
private async void CreateDatabase()
        {
            SQLiteAsyncConnection conn = new SQLiteAsyncConnection(Path.Combine(ApplicationData.Current.LocalFolder.Path, "people.db"), true);
            await conn.CreateTableAsync<Person>();
            //await conn.CreateTableAsync<prescription1>();
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\ZytrixSathwikE+Windows\ZytrixSathwikE-Windows-be90571\My Medi\My Medi\Prescription.xaml.cs
private async void btnOK_Click(object sender, RoutedEventArgs e)
        {

            SQLiteAsyncConnection conn = new SQLiteAsyncConnection(Path.Combine(ApplicationData.Current.LocalFolder.Path, "people.db"), true);
            //string[] per = new string[10];
 
            var per=App.ViewModel.Items[index];
            per.LineFive = watermarkTextBox.Text;
            per.Linesix = watermarkTextBox1.Text;
            per.Lineseven = watermarkTextBox2.Text;
            per.Lineeight = watermarkTextBox3.Text;
            Person person = new Person()

            {
                ID=per.Lineone,
                DoctorName=per.Linetwo,
                Date=per.Linethree,
                Time=per.LineFour,
                Temperature=per.LineFive,
                Bp=per.Linesix,
                symptoms=per.Lineseven,
                description=per.Lineeight

            };
           
            await conn.UpdateAsync(person);


            NavigationService.GoBack();
            
        }
------------------------------
ConfigureAwaitUse D:\CodeCorpus\WPApps\ZytrixSathwikE+Windows\ZytrixSathwikE-Windows-be90571\My Medi\My Medi\ViewModels\MainViewModel.cs
public async void LoadData()
        {

            // Sample data; replace with real data
            //this.Items.Add(new ItemViewModel() { LineOne = "runtime one", LineTwo = "Maecenas praesent accumsan bibendum", LineThree = "Facilisi faucibus habitant inceptos interdum lobortis nascetur pharetra placerat pulvinar sagittis senectus sociosqu" });
            //this.Items.Add(new ItemViewModel() { LineOne = "runtime two", LineTwo = "Dictumst eleifend facilisi faucibus", LineThree = "Suscipit torquent ultrices vehicula volutpat maecenas praesent accumsan bibendum dictumst eleifend facilisi faucibus" });
            //this.Items.Add(new ItemViewModel() { LineOne = "runtime three", LineTwo = "Habitant inceptos interdum lobortis", LineThree = "Habitant inceptos interdum lobortis nascetur pharetra placerat pulvinar sagittis senectus sociosqu suscipit torquent" });
            //this.Items.Add(new ItemViewModel() { LineOne = "runtime four", LineTwo = "Nascetur pharetra placerat pulvinar", LineThree = "Ultrices vehicula volutpat maecenas praesent accumsan bibendum dictumst eleifend facilisi faucibus habitant inceptos" });
            //this.Items.Add(new ItemViewModel() { LineOne = "runtime five", LineTwo = "Maecenas praesent accumsan bibendum", LineThree = "Maecenas praesent accumsan bibendum dictumst eleifend facilisi faucibus habitant inceptos interdum lobortis nascetur" });
            //this.Items.Add(new ItemViewModel() { LineOne = "runtime six", LineTwo = "Dictumst eleifend facilisi faucibus", LineThree = "Pharetra placerat pulvinar sagittis senectus sociosqu suscipit torquent ultrices vehicula volutpat maecenas praesent" });
            //this.Items.Add(new ItemViewModel() { LineOne = "runtime seven", LineTwo = "Habitant inceptos interdum lobortis", LineThree = "Accumsan bibendum dictumst eleifend facilisi faucibus habitant inceptos interdum lobortis nascetur pharetra placerat" });
            //this.Items.Add(new ItemViewModel() { LineOne = "runtime eight", LineTwo = "Nascetur pharetra placerat pulvinar", LineThree = "Pulvinar sagittis senectus sociosqu suscipit torquent ultrices vehicula volutpat maecenas praesent accumsan bibendum" });
            //this.Items.Add(new ItemViewModel() { LineOne = "runtime nine", LineTwo = "Maecenas praesent accumsan bibendum", LineThree = "Facilisi faucibus habitant inceptos interdum lobortis nascetur pharetra placerat pulvinar sagittis senectus sociosqu" });
            //this.Items.Add(new ItemViewModel() { LineOne = "runtime ten", LineTwo = "Dictumst eleifend facilisi faucibus", LineThree = "Suscipit torquent ultrices vehicula volutpat maecenas praesent accumsan bibendum dictumst eleifend facilisi faucibus" });
            //this.Items.Add(new ItemViewModel() { LineOne = "runtime eleven", LineTwo = "Habitant inceptos interdum lobortis", LineThree = "Habitant inceptos interdum lobortis nascetur pharetra placerat pulvinar sagittis senectus sociosqu suscipit torquent" });
            //this.Items.Add(new ItemViewModel() { LineOne = "runtime twelve", LineTwo = "Nascetur pharetra placerat pulvinar", LineThree = "Ultrices vehicula volutpat maecenas praesent accumsan bibendum dictumst eleifend facilisi faucibus habitant inceptos" });
            //this.Items.Add(new ItemViewModel() { LineOne = "runtime thirteen", LineTwo = "Maecenas praesent accumsan bibendum", LineThree = "Maecenas praesent accumsan bibendum dictumst eleifend facilisi faucibus habitant inceptos interdum lobortis nascetur" });
            //this.Items.Add(new ItemViewModel() { LineOne = "runtime fourteen", LineTwo = "Dictumst eleifend facilisi faucibus", LineThree = "Pharetra placerat pulvinar sagittis senectus sociosqu suscipit torquent ultrices vehicula volutpat maecenas praesent" });
            //this.Items.Add(new ItemViewModel() { LineOne = "runtime fifteen", LineTwo = "Habitant inceptos interdum lobortis", LineThree = "Accumsan bibendum dictumst eleifend facilisi faucibus habitant inceptos interdum lobortis nascetur pharetra placerat" });
            //this.Items.Add(new ItemViewModel() { LineOne = "runtime sixteen", LineTwo = "Nascetur pharetra placerat pulvinar", LineThree = "Pulvinar sagittis senectus sociosqu suscipit torquent ultrices vehicula volutpat maecenas praesent accumsan bibendum" });
            SQLiteAsyncConnection conn = new SQLiteAsyncConnection(Path.Combine(ApplicationData.Current.LocalFolder.Path, "people.db"), true);

            var query = conn.Table<Person>();
            var result = await query.ToListAsync();
            //AllWords = (App.Current as App).db.SelectObservableCollection<Person>("Select * from ALLWORDS");
            foreach (var appointment in result)
            {
                //this.Items.Add(new ItemViewModel() { Lineone = appointment.ID });
                this.Items.Add(new ItemViewModel(){ Lineone=appointment.ID,Linetwo=appointment.DoctorName,Linethree=appointment.Date,LineFour=appointment.Time});
            }
            this.IsDataLoaded = true;
        }
------------------------------
